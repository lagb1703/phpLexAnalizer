Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASTERISK
    ATTRIBUTE
    BAD_CARACTER
    BITWISE_NOT
    BOOLEAN_AND
    BOOLEAN_OR
    CALLABLE
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    INSTANCEOF
    IS_EQUAL
    LEFT_SQRBRAC
    MORE_THAN
    NEGATION
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    WHITESPACE
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> statement_list_opt
Rule 1     statement_list_opt -> statement_list
Rule 2     statement_list_opt -> <empty>
Rule 3     start_tag -> OPEN_TAG
Rule 4     start_tag -> OPEN_TAG_WITH_ECHO
Rule 5     end_tag -> CLOSE_TAG
Rule 6     end_tag -> <empty>
Rule 7     function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 8     static_variable_name_list -> static_variable_declaration
Rule 9     static_variable_name_list -> static_variable_name_list static_variable_declaration
Rule 10    static_variable_declaration -> VARIABLE function_static_initializer_opt
Rule 11    function_static_initializer -> EQUAL constant_expression
Rule 12    function_static_initializer_opt -> function_static_initializer
Rule 13    function_static_initializer_opt -> <empty>
Rule 14    function_static_initializer_opt -> EQUAL constant_expression
Rule 15    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 16    variable_name_list -> simple_variable
Rule 17    variable_name_list -> variable_name_list simple_variable
Rule 18    primary_expression -> variable
Rule 19    primary_expression -> class_constant_access_expression
Rule 20    primary_expression -> constant_access_expression
Rule 21    primary_expression -> literal
Rule 22    primary_expression -> array_creation_expression
Rule 23    primary_expression -> intrinsic
Rule 24    primary_expression -> anonymous_function_creation_expression
Rule 25    primary_expression -> object_creation_expression
Rule 26    primary_expression -> postfix_increment_expression
Rule 27    primary_expression -> postfix_decrement_expression
Rule 28    primary_expression -> prefix_increment_expression
Rule 29    primary_expression -> prefix_decrement_expression
Rule 30    primary_expression -> byref_assignment_expression
Rule 31    primary_expression -> shell_command_expression
Rule 32    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 33    simple_variable -> VARIABLE
Rule 34    simple_variable -> DOLLAR simple_variable
Rule 35    simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
Rule 36    dereferencable_expression -> variable
Rule 37    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 38    dereferencable_expression -> array_creation_expression
Rule 39    dereferencable_expression -> string_literal
Rule 40    callable_expression -> callable_variable
Rule 41    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 42    callable_expression -> array_creation_expression
Rule 43    callable_expression -> string_literal
Rule 44    callable_variable -> simple_variable
Rule 45    callable_variable -> subscript_expression
Rule 46    callable_variable -> member_call_expression
Rule 47    callable_variable -> scoped_call_expression
Rule 48    callable_variable -> function_call_expression
Rule 49    variable -> callable_variable
Rule 50    variable -> scoped_property_access_expression
Rule 51    variable -> member_access_expression
Rule 52    constant_access_expression -> qualified_name
Rule 53    literal -> integer_literal
Rule 54    literal -> floating_literal
Rule 55    literal -> string_literal
Rule 56    integer_literal -> LNUMBER
Rule 57    floating_literal -> DNUMBER
Rule 58    string_literal -> STRING
Rule 59    intrinsic -> empty_intrinsic
Rule 60    intrinsic -> eval_intrinsic
Rule 61    intrinsic -> exit_intrinsic
Rule 62    intrinsic -> isset_intrinsic
Rule 63    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 64    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 65    exit_intrinsic -> EXIT
Rule 66    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 67    exit_intrinsic -> DIE
Rule 68    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 69    intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
Rule 70    variable_list -> variable
Rule 71    variable_list -> variable_list variable
Rule 72    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 73    static_opt -> static
Rule 74    static_opt -> <empty>
Rule 75    AMPERSAND_opt -> AMPERSAND
Rule 76    AMPERSAND_opt -> <empty>
Rule 77    parameter_declaration_list_opt -> parameter_declaration_list
Rule 78    parameter_declaration_list_opt -> <empty>
Rule 79    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 80    anonymous_function_use_clause_opt -> <empty>
Rule 81    return_type_opt -> return_type
Rule 82    return_type_opt -> <empty>
Rule 83    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 84    use_variable_name_list -> AMPERSAND_opt VARIABLE
Rule 85    use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE
Rule 86    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 87    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list _opt RIGHT_PARENTHESIS
Rule 88    object_creation_expression -> NEW class_type_designator
Rule 89    object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt t_RIGHT_PARENTHESIS
Rule 90    object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt t_RIGHT_PARENTHESIS
Rule 91    argument_expression_list_opt -> argument_expression_list
Rule 92    argument_expression_list_opt -> <empty>
Rule 93    class_base_clause_opt -> class_base_clause
Rule 94    class_base_clause_opt -> <empty>
Rule 95    class_interface_clause_opt -> class_interface_clause
Rule 96    class_interface_clause_opt -> <empty>
Rule 97    class_member_declarations_opt -> class_member_declarations
Rule 98    class_member_declarations_opt -> <empty>
Rule 99    class_type_designator -> qualified_name
Rule 100   class_type_designator -> new_variable
Rule 101   new_variable -> simple_variable
Rule 102   new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 103   new_variable -> new_variable LEFT_CBRAC expression t_RIGHT_PARENTHESIS
Rule 104   new_variable -> new_variable ARROW member_name
Rule 105   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 106   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 107   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 108   expression_opt -> expression
Rule 109   expression_opt -> <empty>
Rule 110   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 111   array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
Rule 112   array_initializer_opt -> array_initializer
Rule 113   array_initializer_opt -> <empty>
Rule 114   array_initializer -> array_initializer_list _opt
Rule 115   array_initializer_list -> array_element_initializer _opt
Rule 116   array_element_initializer -> AMPERSAND_opt element_value
Rule 117   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 118   element_key -> expression
Rule 119   element_value -> expression
Rule 120   subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 121   subscript_expression -> dereferencable_expression LEFT_CBRAC expression t_RIGHT_PARENTHESIS
Rule 122   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 123   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 124   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 125   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 126   argument_expression_list -> argument_expression
Rule 127   argument_expression_list -> argument_expression_list argument_expression
Rule 128   argument_expression -> variadic_unpacking
Rule 129   argument_expression -> expression
Rule 130   variadic_unpacking -> ELLIPSIS expression
Rule 131   member_access_expression -> dereferencable_expression ARROW member_name
Rule 132   member_name -> NAME
Rule 133   member_name -> simple_variable
Rule 134   member_name -> LEFT_CBRAC expression t_RIGHT_PARENTHESIS
Rule 135   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 136   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 137   postfix_increment_expression -> variable INCREMENT
Rule 138   postfix_decrement_expression -> variable DECREMENT
Rule 139   prefix_increment_expression -> INCREMENT variable
Rule 140   prefix_decrement_expression -> DECREMENT variable
Rule 141   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 142   dq_char_sequence_opt -> dq_char_sequence
Rule 143   dq_char_sequence_opt -> <empty>
Rule 144   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 145   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 146   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 147   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 148   scope_resolution_qualifier -> relative_scope
Rule 149   scope_resolution_qualifier -> qualified_name
Rule 150   scope_resolution_qualifier -> dereferencable_expression
Rule 151   relative_scope -> SELF
Rule 152   relative_scope -> PARENT
Rule 153   relative_scope -> STATIC
Rule 154   clone_expression -> primary_expression
Rule 155   clone_expression -> CLONE primary_expression
Rule 156   exponentiation_expression -> clone_expression
Rule 157   exponentiation_expression -> clone_expression EXPONENTIATION exponentiation_expression
Rule 158   unary_expression -> exponentiation_expression
Rule 159   unary_expression -> unary_op_expression
Rule 160   unary_expression -> error_control_expression
Rule 161   unary_expression -> cast_expression
Rule 162   unary_op_expression -> unary_operator unary_expression
Rule 163   unary_operator -> PLUS
Rule 164   unary_operator -> MINUS
Rule 165   unary_operator -> TILDE
Rule 166   error_control_expression -> AT unary_expression
Rule 167   cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
Rule 168   instanceof_expression -> unary_expression
Rule 169   instanceof_expression -> instanceof_subj instanceof class_type_designator
Rule 170   instanceof_subj -> instanceof_expression
Rule 171   logical_not_expression -> instanceof_expression
Rule 172   logical_not_expression -> NOT instanceof_expression
Rule 173   multiplicative_expression -> logical_not_expression
Rule 174   multiplicative_expression -> multiplicative_expression TIMES logical_not_expression
Rule 175   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 176   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 177   additive_expression -> multiplicative_expression
Rule 178   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 179   additive_expression -> additive_expression LESS multiplicative_expression
Rule 180   additive_expression -> additive_expression CONCAT multiplicative_expression
Rule 181   shift_expression -> additive_expression
Rule 182   shift_expression -> shift_expression SL additive_expression
Rule 183   shift_expression -> shift_expression SR additive_expression
Rule 184   relational_expression -> shift_expression
Rule 185   relational_expression -> relational_expression LESS_THAN shift_expression
Rule 186   relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression
Rule 187   relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression
Rule 188   relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression
Rule 189   relational_expression -> relational_expression SPACESHIP shift_expression
Rule 190   equality_expression -> relational_expression
Rule 191   equality_expression -> equality_expression EQUAL relational_expression
Rule 192   equality_expression -> equality_expression IS_NOT_EQUAL relational_expression
Rule 193   equality_expression -> equality_expression IS_IDENTICAL relational_expression
Rule 194   equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression
Rule 195   bitwise_AND_expression -> equality_expression
Rule 196   bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression
Rule 197   bitwise_exc_OR_expression -> bitwise_AND_expression
Rule 198   bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
Rule 199   bitwise_inc_OR_expression -> bitwise_exc_OR_expression
Rule 200   bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
Rule 201   logical_AND_expression_1 -> bitwise_inc_OR_expression
Rule 202   logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
Rule 203   logical_inc_OR_expression_1 -> logical_AND_expression_1
Rule 204   logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
Rule 205   coalesce_expression -> logical_inc_OR_expression_1
Rule 206   coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression
Rule 207   conditional_expression -> coalesce_expression
Rule 208   conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
Rule 209   conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
Rule 210   assignment_expression -> conditional_expression
Rule 211   assignment_expression -> simple_assignment_expression
Rule 212   assignment_expression -> compound_assignment_expression
Rule 213   simple_assignment_expression -> variable EQUAL assignment_expression
Rule 214   simple_assignment_expression -> list_intrinsic EQUAL assignment_expression
Rule 215   list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
Rule 216   list_expression_list -> unkeyed_list_expression_list
Rule 217   list_expression_list -> keyed_list_expression_list COLON
Rule 218   list_expression_list -> keyed_list_expression_list
Rule 219   unkeyed_list_expression_list -> list_or_variable
Rule 220   unkeyed_list_expression_list -> COLON
Rule 221   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON
Rule 222   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable
Rule 223   keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable
Rule 224   keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
Rule 225   list_or_variable -> list_intrinsic
Rule 226   list_or_variable -> AMPERSAND variable
Rule 227   list_or_variable -> variable
Rule 228   byref_assignment_expression -> variable EQUAL AMPERSAND variable
Rule 229   compound_assignment_expression -> variable compound_assignment_operator assignment_expression
Rule 230   compound_assignment_operator -> POW_EQUAL
Rule 231   compound_assignment_operator -> MUL_EQUAL
Rule 232   compound_assignment_operator -> DIV_EQUAL
Rule 233   compound_assignment_operator -> MOD_EQUAL
Rule 234   compound_assignment_operator -> PLUS_EQUAL
Rule 235   compound_assignment_operator -> MINUS_EQUAL
Rule 236   compound_assignment_operator -> CONCAT_EQUAL
Rule 237   compound_assignment_operator -> SL_EQUAL
Rule 238   compound_assignment_operator -> SR_EQUAL
Rule 239   compound_assignment_operator -> AND_EQUAL
Rule 240   compound_assignment_operator -> XOR_EQUAL
Rule 241   compound_assignment_operator -> OR_EQUAL
Rule 242   yield_from_expression -> YIELD_FROM assignment_expression
Rule 243   yield_expression -> yield_from_expression
Rule 244   yield_expression -> YIELD
Rule 245   yield_expression -> YIELD yield_expression
Rule 246   yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression
Rule 247   print_expression -> yield_expression
Rule 248   print_expression -> PRINT print_expression
Rule 249   logical_AND_expression_2 -> print_expression
Rule 250   logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression
Rule 251   logical_exc_OR_expression -> logical_AND_expression_2
Rule 252   logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2
Rule 253   logical_inc_OR_expression_2 -> logical_exc_OR_expression
Rule 254   logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression
Rule 255   expression -> logical_inc_OR_expression_2
Rule 256   expression -> include_expression
Rule 257   expression -> include_once_expression
Rule 258   expression -> require_expression
Rule 259   expression -> require_once_expression
Rule 260   include_expression -> INCLUDE expression
Rule 261   include_once_expression -> INCLUDE_ONCE expression
Rule 262   require_expression -> REQUIRE expression
Rule 263   require_once_expression -> REQUIRE_ONCE expression
Rule 264   constant_expression -> expression
Rule 265   statement -> compound_statement
Rule 266   statement -> named_label_statement
Rule 267   statement -> expression_statement
Rule 268   statement -> selection_statement
Rule 269   statement -> iteration_statement
Rule 270   statement -> jump_statement
Rule 271   statement -> try_statement
Rule 272   statement -> declare_statement
Rule 273   statement -> echo_statement
Rule 274   statement -> unset_statement
Rule 275   statement -> const_declaration
Rule 276   statement -> function_definition
Rule 277   statement -> class_declaration
Rule 278   statement -> interface_declaration
Rule 279   statement -> trait_declaration
Rule 280   statement -> namespace_definition
Rule 281   statement -> namespace_use_declaration
Rule 282   statement -> global_declaration
Rule 283   statement -> function_static_declaration
Rule 284   compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC
Rule 285   compound_statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 286   statement_list -> statement
Rule 287   statement_list -> statement_list statement
Rule 288   named_label_statement -> name DOUBLE_POINT
Rule 289   expression_statement -> expression SEMICOLON
Rule 290   expression_statement -> SEMICOLON
Rule 291   selection_statement -> if_statement
Rule 292   selection_statement -> switch_statement
Rule 293   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
Rule 294   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
Rule 295   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
Rule 296   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 297   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
Rule 298   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
Rule 299   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
Rule 300   elseif_clauses_1 -> elseif_clause_1
Rule 301   elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1
Rule 302   elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 303   else_clause_1 -> ELSE statement
Rule 304   elseif_clauses_2 -> elseif_clause_2
Rule 305   elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2
Rule 306   elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
Rule 307   else_clause_2 -> ELSE DOUBLE_POINT statement_list
Rule 308   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
Rule 309   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 310   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
Rule 311   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 312   case_statements -> case_statement case_statements
Rule 313   case_statements -> case_statement
Rule 314   case_statements -> default_statement case_statements
Rule 315   case_statements -> default_statement
Rule 316   case_statement -> CASE expression case_default_label_terminator statement_list
Rule 317   case_statement -> CASE expression case_default_label_terminator
Rule 318   default_statement -> DEFAULT case_default_label_terminator statement_list
Rule 319   default_statement -> DEFAULT case_default_label_terminator
Rule 320   case_default_label_terminator -> DOUBLE_POINT
Rule 321   case_default_label_terminator -> SEMICOLON
Rule 322   iteration_statement -> while_statement
Rule 323   iteration_statement -> do_statement
Rule 324   iteration_statement -> for_statement
Rule 325   iteration_statement -> foreach_statement
Rule 326   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 327   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
Rule 328   do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 329   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 330   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 331   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 332   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 333   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 334   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 335   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 336   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 337   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 338   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 339   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 340   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 341   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 342   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 343   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 344   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 345   for_initializer -> for_expression_group
Rule 346   for_control -> for_expression_group
Rule 347   for_end_of_loop -> for_expression_group
Rule 348   for_expression_group -> expression
Rule 349   for_expression_group -> for_expression_group COLON expression
Rule 350   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
Rule 351   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
Rule 352   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 353   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 354   foreach_collection_name -> expression
Rule 355   foreach_key -> expression DOUBLE_ARROW
Rule 356   foreach_value -> foreach_value_expression
Rule 357   foreach_value -> AMPERSAND expression
Rule 358   foreach_value -> list_intrinsic
Rule 359   jump_statement -> goto_statement
Rule 360   jump_statement -> continue_statement
Rule 361   jump_statement -> break_statement
Rule 362   jump_statement -> return_statement
Rule 363   jump_statement -> throw_statement
Rule 364   goto_statement -> GOTO name SEMICOLON
Rule 365   continue_statement -> CONTINUE breakout_level SEMICOLON
Rule 366   continue_statement -> CONTINUE SEMICOLON
Rule 367   breakout_level -> INTEGER_LITERAL
Rule 368   breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
Rule 369   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 370   breakout_levelopt -> breakout_level
Rule 371   breakout_levelopt -> <empty>
Rule 372   breakout_level -> expression
Rule 373   return_statement -> RETURN expressionopt SEMICOLON
Rule 374   expressionopt -> expression
Rule 375   expressionopt -> <empty>
Rule 376   throw_statement -> THROW expression SEMICOLON
Rule 377   try_statement -> TRY compound_statement catch_clauses
Rule 378   try_statement -> TRY compound_statement finally_clause
Rule 379   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 380   catch_clauses -> catch_clause
Rule 381   catch_clauses -> catch_clauses catch_clause
Rule 382   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 383   catch_name_list -> qualified_name
Rule 384   catch_name_list -> catch_name_list
Rule 385   finally_clause -> FINALLY compound_statement
Rule 386   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 387   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 388   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 389   declare_directive -> TICKS EQUALS literal
Rule 390   declare_directive -> ENCODING EQUALS literal
Rule 391   declare_directive -> STRICT_TYPES EQUALS literal
Rule 392   echo_statement -> ECHO expression_list SEMICOLON
Rule 393   expression_list -> expression
Rule 394   expression_list -> expression_list expression
Rule 395   unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
Rule 396   unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
Rule 397   function_definition -> function_definition_header compound_statement
Rule 398   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_typeopt
Rule 399   ampersandopt -> AMPERSAND
Rule 400   ampersandopt -> <empty>
Rule 401   parameter_declaration_list -> simple_parameter_declaration_list
Rule 402   parameter_declaration_list -> variadic_declaration_list
Rule 403   simple_parameter_declaration_list -> parameter_declaration
Rule 404   simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration
Rule 405   variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter
Rule 406   variadic_declaration_list -> variadic_parameter
Rule 407   parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
Rule 408   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE
Rule 409   return_type -> DOUBLE_POINT type_declaration
Rule 410   return_type -> DOUBLE_POINT VOID
Rule 411   type_declarationopt -> type_declaration
Rule 412   type_declarationopt -> <empty>
Rule 413   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 414   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 415   TERNARY_OPERATIONopt -> <empty>
Rule 416   base_type_declaration -> array
Rule 417   base_type_declaration -> callable
Rule 418   base_type_declaration -> iterable
Rule 419   base_type_declaration -> scalar_type
Rule 420   base_type_declaration -> qualified_name
Rule 421   scalar_type -> BOOL
Rule 422   scalar_type -> FLOAT
Rule 423   scalar_type -> INT
Rule 424   scalar_type -> STRING
Rule 425   default_argument_specifieropt -> default_argument_specifier
Rule 426   default_argument_specifieropt -> <empty>
Rule 427   default_argument_specifier -> EQUAL constant_expression
Rule 428   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 429   class_modifieropt -> class_modifier
Rule 430   class_modifieropt -> <empty>
Rule 431   class_base_clauseopt -> class_base_clause
Rule 432   class_base_clauseopt -> <empty>
Rule 433   class_interface_clauseopt -> class_interface_clause
Rule 434   class_interface_clauseopt -> <empty>
Rule 435   class_member_declarationsopt -> class_member_declarations
Rule 436   class_member_declarationsopt -> <empty>
Rule 437   class_modifier -> ABSTRACT
Rule 438   class_modifier -> FINAL
Rule 439   class_base_clause -> EXTENDS qualified_name
Rule 440   class_interface_clause -> IMPLEMENTS qualified_name
Rule 441   class_interface_clause -> class_interface_clause qualified_name
Rule 442   class_member_declarations -> class_member_declaration
Rule 443   class_member_declarations -> class_member_declarations class_member_declaration
Rule 444   class_member_declaration -> class_const_declaration
Rule 445   class_member_declaration -> property_declaration
Rule 446   class_member_declaration -> method_declaration
Rule 447   class_member_declaration -> constructor_declaration
Rule 448   class_member_declaration -> destructor_declaration
Rule 449   class_member_declaration -> trait_use_clause
Rule 450   const_declaration -> CONST const_elements SEMICOLON
Rule 451   class_const_declaration -> visibility_modifieropt CONST const_elements SEMICOLON
Rule 452   const_elements -> const_element
Rule 453   const_elements -> const_elements const_element
Rule 454   const_element -> name EQUAL constant_expression
Rule 455   property_declaration -> property_modifier property_elements SEMICOLON
Rule 456   property_modifier -> VAR
Rule 457   property_modifier -> visibility_modifier static_modifieropt
Rule 458   property_modifier -> static_modifier visibility_modifieropt
Rule 459   static_modifieropt -> static_modifier
Rule 460   static_modifieropt -> <empty>
Rule 461   visibility_modifier -> PUBLIC
Rule 462   visibility_modifier -> PROTECTED
Rule 463   visibility_modifier -> PRIVATE
Rule 464   static_modifier -> STATIC
Rule 465   property_elements -> property_element
Rule 466   property_elements -> property_elements property_element
Rule 467   property_element -> VARIABLE property_initializeropt SEMICOLON
Rule 468   property_initializeropt -> property_initializer
Rule 469   property_initializeropt -> <empty>
Rule 470   property_initializer -> EQUAL constant_expression
Rule 471   method_declaration -> method_modifiersopt function_definition
Rule 472   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 473   method_modifiersopt -> method_modifiers
Rule 474   method_modifiersopt -> <empty>
Rule 475   method_modifiers -> method_modifier
Rule 476   method_modifiers -> method_modifiers method_modifier
Rule 477   method_modifier -> visibility_modifier
Rule 478   method_modifier -> static_modifier
Rule 479   method_modifier -> class_modifier
Rule 480   constructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __construct LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 481   destructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __destruct LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 482   parameter_declaration_listopt -> parameter_declaration_list
Rule 483   parameter_declaration_listopt -> <empty>
Rule 484   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 485   interface_base_clauseopt -> interface_base_clause
Rule 486   interface_base_clauseopt -> <empty>
Rule 487   interface_member_declarationsopt -> interface_member_declarations
Rule 488   interface_member_declarationsopt -> <empty>
Rule 489   interface_base_clause -> EXTENDS qualified_name
Rule 490   interface_base_clause -> interface_base_clause qualified_name
Rule 491   interface_member_declarations -> interface_member_declaration
Rule 492   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 493   interface_member_declaration -> class_const_declaration
Rule 494   interface_member_declaration -> method_declaration
Rule 495   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 496   trait_member_declarationsopt -> trait_member_declarations
Rule 497   trait_member_declarationsopt -> <empty>
Rule 498   trait_member_declarations -> trait_member_declaration
Rule 499   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 500   trait_member_declaration -> property_declaration
Rule 501   trait_member_declaration -> method_declaration
Rule 502   trait_member_declaration -> constructor_declaration
Rule 503   trait_member_declaration -> destructor_declaration
Rule 504   trait_member_declaration -> trait_use_clauses
Rule 505   trait_use_clauses -> trait_use_clause
Rule 506   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 507   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 508   trait_name_list -> qualified_name
Rule 509   trait_name_list -> trait_name_list qualified_name
Rule 510   trait_use_specification -> SEMICOLON
Rule 511   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 512   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 513   trait_select_and_alias_clausesopt -> <empty>
Rule 514   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 515   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 516   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 517   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 518   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 519   trait_alias_as_clause -> name AS visibility_modifieropt name
Rule 520   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 521   nameopt -> name
Rule 522   nameopt -> <empty>
Rule 523   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 524   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 525   namespace_nameopt -> namespace_name
Rule 526   namespace_nameopt -> <empty>
Rule 527   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 528   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 529   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 530   namespace_function_or_constopt -> namespace_function_or_const
Rule 531   namespace_function_or_constopt -> <empty>
Rule 532   NS_SEPARATORopt -> NS_SEPARATOR
Rule 533   NS_SEPARATORopt -> <empty>
Rule 534   namespace_use_clauses -> namespace_use_clause
Rule 535   namespace_use_clauses -> namespace_use_clauses namespace_use_clause
Rule 536   namespace_use_clause -> qualified_name namespace_aliasing_clauseopt
Rule 537   qualified_name -> name
Rule 538   namespace_aliasing_clause -> AS name
Rule 539   namespace_function_or_const -> FUNCTION
Rule 540   namespace_function_or_const -> CONST
Rule 541   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 542   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1
Rule 543   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clauseopt
Rule 544   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 545   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2
Rule 546   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clauseopt
Rule 547   name -> STRING

Terminals, with rules where they appear

ABSTRACT             : 437
AMPERSAND            : 75 196 202 202 226 228 357 399
AND                  : 250
AND_EQUAL            : 239
ARRAY                : 110
AS                   : 350 351 352 353 519 520 538
ASTERISK             : 
ATTRIBUTE            : 
BACKTICK             : 141 141
BAD_CARACTER         : 
BITWISE_NOT          : 
BITWISE_OR           : 200 204 204
BITWISE_XOR          : 198
BOOL                 : 421
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 369
CALLABLE             : 
CASE                 : 316 317
CATCH                : 382
CLASS                : 89 90 428
CLONE                : 155
CLOSE_TAG            : 5
COALESCE             : 206
COALESCE_EQUAL       : 
COLON                : 217 220 221 221 222 224 349 395
COMMENT              : 
CONCAT               : 180
CONCAT_EQUAL         : 236
CONST                : 450 451 540
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 365 366
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 386 387 388
DEFAULT              : 318 319
DIE                  : 67 68
DIVIDE               : 175
DIV_EQUAL            : 232
DNUMBER              : 57
DO                   : 328
DOC_COMMENT          : 
DOLLAR               : 34 35
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLE_ARROW         : 223 224 246 355
DOUBLE_COLON         : 105 106 107 144 145 146 147 518
DOUBLE_POINT         : 208 209 288 297 298 299 306 307 310 311 320 327 337 338 339 340 341 342 343 344 352 353 387 409 410
DQUOTATION_MARK      : 
ECHO                 : 392
ELLIPSIS             : 130 408
ELSE                 : 303 307
ELSEIF               : 302 306
EMPTY                : 63
ENDDECLARE           : 387
ENDFOR               : 337 338 339 340 341 342 343 344
ENDFOREACH           : 352 353
ENDIF                : 297 298 299
ENDSWITCH            : 310 311
ENDWHILE             : 327
EQUAL                : 11 14 191 213 214 228 427 454 470
EQUALS               : 389 390 391
EVAL                 : 64
EXIT                 : 65 66
EXPONENT_DNUMBER     : 
EXTENDS              : 439 489
FINAL                : 438
FINALLY              : 385
FLOAT                : 422
FN                   : 
FOR                  : 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344
FOREACH              : 350 351 352 353
FUNCTION             : 72 398 480 481 539
GLOBAL               : 15
GOTO                 : 364
IF                   : 293 294 295 296 297 298 299
IMPLEMENTS           : 440
INC                  : 
INCLUDE              : 260
INCLUDE_ONCE         : 261
INSTANCEOF           : 
INSTEADOF            : 518
INT                  : 423
INTERFACE            : 484
ISSET                : 69
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 187
IS_IDENTICAL         : 193
IS_NOT_EQUAL         : 192
IS_NOT_IDENTICAL     : 194
IS_SMALLER_OR_EQUAL  : 186
LEFT_CBRAC           : 35 89 90 102 103 111 120 121 134 284 285 308 309 428 484 495 511 528 529
LEFT_PARENTHESIS     : 32 37 41 63 64 66 68 69 72 83 86 87 89 110 122 123 124 125 135 136 145 146 167 215 293 294 295 296 297 298 299 302 306 308 309 310 311 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 350 351 352 353 368 382 386 387 388 395 396 398 480 481
LEFT_SQRBRAC         : 
LESS                 : 179
LESS_THAN            : 185
LIST                 : 215
LNUMBER              : 56
MINUS_EQUAL          : 235
MOD_EQUAL            : 233
MORE_THAN            : 
MUL_EQUAL            : 231
NAMESPACE            : 523 524
NEGATION             : 
NEW                  : 86 87 88 89 90
NS_SEPARATOR         : 528 529 532
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 3
OPEN_TAG_WITH_ECHO   : 4
OR                   : 254
OR_EQUAL             : 241
PLUS                 : 163 178
PLUS_EQUAL           : 234
POW                  : 
POW_EQUAL            : 230
PRINT                : 248
PRIVATE              : 463
PROTECTED            : 462
PUBLIC               : 461
REQUIRE              : 262
REQUIRE_ONCE         : 263
RETURN               : 373
RIGHT_CBRAC          : 35 102 111 120 284 285 308 309 428 484 495 511 528 529
RIGHT_PARENTHESIS    : 32 37 41 63 64 66 68 69 72 83 86 87 89 110 122 123 124 125 135 136 145 146 167 215 293 294 295 296 297 298 299 302 306 308 309 310 311 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 350 351 352 353 368 382 386 387 388 395 396 398 480 481
RIGHT_SQRBRAC        : 
SEMICOLON            : 7 15 289 290 297 298 299 310 311 321 327 328 329 329 330 330 331 331 332 332 333 333 334 334 335 335 336 336 337 337 337 338 338 338 339 339 339 340 340 340 341 341 341 342 342 342 343 343 343 344 344 344 352 353 364 365 366 369 373 376 387 388 392 395 396 450 451 455 467 472 510 516 517 523 527 528 529
SL                   : 182
SL_EQUAL             : 237
SPACESHIP            : 189
SR                   : 183
SR_EQUAL             : 238
START_HEREDOC        : 
STATIC               : 7 153 464
STRING               : 58 424 547
SWITCH               : 308 309 310 311
TERNARY_OPERATION    : 208 209 414
THROW                : 376
TRAIT                : 495
TRY                  : 377 378 379
UNSET                : 395 396
USE                  : 83 507 527 528 529
VAR                  : 456
VARIABLE             : 10 33 84 85 382 407 408 467
WHILE                : 326 327 328
WHITESPACE           : 
XOR                  : 252
XOR_EQUAL            : 240
YIELD                : 244 245 246
YIELD_FROM           : 242
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 72 84 85 116 117
AMPERSANDopt         : 480 481
ARROW                : 104 117 131 135 136
AT                   : 166
DECREMENT            : 138 140
ENCODING             : 390
EXPONENTIATION       : 157
GREATER_THAN_OR_EQUAL : 188
INCREMENT            : 137 139
INTEGER_LITERAL      : 367
MINUS                : 164
MODULO               : 176
NAME                 : 132 147
NOT                  : 172
NS_SEPARATORopt      : 528 529
PARENT               : 152
SELF                 : 151
STRICT_TYPES         : 391
TERNARY_OPERATIONopt : 413
TICKS                : 389
TILDE                : 165
TIMES                : 174
VOID                 : 410
__construct          : 480
__destruct           : 481
_opt                 : 87 114 115
additive_expression  : 178 179 180 181 182 183
ampersandopt         : 398 407 408
anonymous_function_creation_expression : 24
anonymous_function_use_clause : 79
anonymous_function_use_clause_opt : 72
argument_expression  : 126 127
argument_expression_list : 87 91 123 125 127 136 146
argument_expression_list_opt : 86 89 122 124 135 145
array                : 416
array_creation_expression : 22 38 42
array_element_initializer : 115
array_initializer    : 112
array_initializer_list : 114
array_initializer_opt : 110 111
assignment_expression : 213 214 229 242
base_type_declaration : 413
bitwise_AND_expression : 196 197 198
bitwise_exc_OR_expression : 198 199 200
bitwise_inc_OR_expression : 200 201 202
break_statement      : 361
breakout_level       : 365 368 370
breakout_levelopt    : 369
byref_assignment_expression : 30
callable             : 417
callable_expression  : 124 125
callable_variable    : 40 49
case_default_label_terminator : 316 317 318 319
case_statement       : 312 313
case_statements      : 308 310 312 314
cast_expression      : 161
catch_clause         : 380 381
catch_clauses        : 377 379 381
catch_name_list      : 382 384
class_base_clause    : 93 431
class_base_clause_opt : 89 90
class_base_clauseopt : 428
class_const_declaration : 444 493
class_constant_access_expression : 19
class_declaration    : 277
class_interface_clause : 95 433 441
class_interface_clause_opt : 89 90
class_interface_clauseopt : 428
class_member_declaration : 442 443
class_member_declarations : 97 435 443
class_member_declarations_opt : 89 90
class_member_declarationsopt : 428
class_modifier       : 429 479
class_modifieropt    : 428
class_type_designator : 86 87 88 169
clone_expression     : 156 157
coalesce_expression  : 206 207 208 209
compound_assignment_expression : 212
compound_assignment_operator : 229
compound_statement   : 72 265 377 378 379 382 385 397 480 481 524
conditional_expression : 208 209 210
const_declaration    : 275
const_element        : 452 453
const_elements       : 450 451 453
constant_access_expression : 20
constant_expression  : 11 14 427 454 470
constructor_declaration : 447 502
continue_statement   : 360
declare_directive    : 386 387 388
declare_statement    : 272
default_argument_specifier : 425
default_argument_specifieropt : 407
default_statement    : 314 315
dereferencable_expression : 120 121 131 135 136 150
destructor_declaration : 448 503
do_statement         : 323
dq_char_sequence     : 142
dq_char_sequence_opt : 141
echo_statement       : 273
element_key          : 117
element_value        : 116 117
else_clause_1        : 293 295
else_clause_2        : 297 299
elseif_clause_1      : 300 301
elseif_clause_2      : 304 305
elseif_clauses_1     : 293 294 301
elseif_clauses_2     : 297 298 305
empty_intrinsic      : 59
end_tag              : 
equality_expression  : 191 192 193 194 195 196
error_control_expression : 160
eval_intrinsic       : 60
exit_intrinsic       : 61
exponentiation_expression : 157 158
expression           : 32 35 37 41 63 64 103 108 118 119 121 129 130 134 208 223 224 260 261 262 263 264 289 293 294 295 296 297 298 299 302 306 308 309 310 311 316 317 326 327 328 348 349 354 355 357 372 374 376 393 394
expression_list      : 392 394
expression_opt       : 66 68 102 120
expression_statement : 267
expressionopt        : 373
finally_clause       : 378 379
floating_literal     : 54
for_control          : 329 330 333 334 337 338 341 342
for_end_of_loop      : 329 331 333 335 337 339 341 343
for_expression_group : 345 346 347 349
for_initializer      : 329 330 331 332 337 338 339 340
for_statement        : 324
foreach_collection_name : 350 351 352 353
foreach_key          : 350 352
foreach_statement    : 325
foreach_value        : 350 351 352 353
foreach_value_expression : 356
function_call_expression : 48
function_definition  : 276 471
function_definition_header : 397 472
function_static_declaration : 283
function_static_initializer : 12
function_static_initializer_opt : 10
global_declaration   : 282
goto_statement       : 359
if_statement         : 291
include_expression   : 256
include_once_expression : 257
instanceof           : 169
instanceof_expression : 170 171 172
instanceof_subj      : 169
integer_literal      : 53
interface_base_clause : 485 490
interface_base_clauseopt : 484
interface_declaration : 278
interface_member_declaration : 491 492
interface_member_declarations : 487 492
interface_member_declarationsopt : 484
intrinsic            : 23
isset_intrinsic      : 62
iterable             : 418
iteration_statement  : 269
jump_statement       : 270
keyed_list_expression_list : 217 218 224
list_expression_list : 215
list_intrinsic       : 214 225 358
list_or_variable     : 219 221 222 223 224
literal              : 21 389 390 391
logical_AND_expression_1 : 202 203 204
logical_AND_expression_2 : 250 251 252
logical_exc_OR_expression : 252 253 254
logical_inc_OR_expression_1 : 204 205 206
logical_inc_OR_expression_2 : 254 255
logical_not_expression : 173 174 175 176
member_access_expression : 51
member_call_expression : 46
member_name          : 104 131 135 136 145 146
method_declaration   : 446 494 501
method_modifier      : 475 476
method_modifiers     : 472 473 476 480 481
method_modifiersopt  : 471
multiplicative_expression : 174 175 176 177 178 179 180
name                 : 288 364 398 428 454 480 481 484 495 518 519 519 520 521 537 538
named_label_statement : 266
nameopt              : 520
namespace_aliasing_clause : 
namespace_aliasing_clauseopt : 536 543 546
namespace_definition : 280
namespace_function_or_const : 528 530
namespace_function_or_constopt : 527 546
namespace_name       : 523 525 528 529 543 546
namespace_nameopt    : 524
namespace_use_clause : 534 535
namespace_use_clauses : 527 535
namespace_use_declaration : 281
namespace_use_group_clause_1 : 541 542
namespace_use_group_clause_2 : 544 545
namespace_use_group_clauses_1 : 528 542
namespace_use_group_clauses_2 : 529 545
new_variable         : 100 102 103 104 107
object_creation_expression : 25
parameter_declaration : 403 404
parameter_declaration_list : 77 404 482
parameter_declaration_list_opt : 72
parameter_declaration_listopt : 398 480
postfix_decrement_expression : 27
postfix_increment_expression : 26
prefix_decrement_expression : 29
prefix_increment_expression : 28
primary_expression   : 154 155
print_expression     : 248 249
property_declaration : 445 500
property_element     : 465 466
property_elements    : 455 466
property_initializer : 468
property_initializeropt : 467
property_modifier    : 455
qualified_name       : 52 99 105 122 123 149 383 420 439 440 441 489 490 508 509 518 536
relational_expression : 185 186 187 188 189 190 191 192 193 194
relative_scope       : 106 148
require_expression   : 258
require_once_expression : 259
return_statement     : 362
return_type          : 81
return_type_opt      : 72
return_typeopt       : 398
scalar_type          : 419
scope_resolution_qualifier : 144 145 146 147
scoped_call_expression : 47
scoped_property_access_expression : 50
selection_statement  : 268
shell_command_expression : 31
shift_expression     : 182 183 184 185 186 187 188 189
simple_assignment_expression : 211
simple_parameter_declaration_list : 401 405
simple_variable      : 16 17 34 44 101 105 106 107 133 144
start_tag            : 
statement            : 286 287 293 294 295 296 302 303 326 328 329 330 331 332 333 334 335 336 350 351 386
statement_list       : 1 284 287 297 298 299 306 307 316 318 327 337 338 339 340 341 342 343 344 352 353 387
statement_list_opt   : 0
static               : 73
static_modifier      : 458 459 478
static_modifieropt   : 457
static_opt           : 72
static_variable_declaration : 8 9
static_variable_name_list : 7 9
string_literal       : 39 43 55
subscript_expression : 45
switch_statement     : 292
t_RIGHT_PARENTHESIS  : 89 90 103 121 134
throw_statement      : 363
trait_alias_as_clause : 517
trait_declaration    : 279
trait_member_declaration : 498 499
trait_member_declarations : 496 499
trait_member_declarationsopt : 495
trait_name_list      : 507 509 518
trait_select_and_alias_clause : 514 515
trait_select_and_alias_clauses : 512 515
trait_select_and_alias_clausesopt : 511
trait_select_insteadof_clause : 516
trait_use_clause     : 449 505 506
trait_use_clauses    : 504 506
trait_use_specification : 507
try_statement        : 271
type_declaration     : 409 411
type_declarationopt  : 407 408
unary_expression     : 162 166 167 168
unary_op_expression  : 159
unary_operator       : 162
unkeyed_list_expression_list : 216 221 222
unset_statement      : 274
use_variable_name_list : 83 85
variable             : 18 36 70 71 137 138 139 140 213 226 227 228 228 229
variable_list        : 71 395 396
variable_list_opt    : 69
variable_name_list   : 15 17
variadic_declaration_list : 402
variadic_parameter   : 405 406
variadic_unpacking   : 128
visibility_modifier  : 457 477 520
visibility_modifieropt : 451 458 519
while_statement      : 322
yield_expression     : 245 246 247 250
yield_from_expression : 243 246

