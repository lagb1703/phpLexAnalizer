Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASTERISK
    ATTRIBUTE
    BAD_CARACTER
    BITWISE_NOT
    BOOLEAN_AND
    BOOLEAN_OR
    CALLABLE
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DNUMBER
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    INSTANCEOF
    IS_EQUAL
    LEFT_SQRBRAC
    LNUMBER
    MORE_THAN
    NEGATION
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    WHITESPACE
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> script
Rule 1     script -> script_section
Rule 2     script -> script script_section
Rule 3     statement_list_opt -> statement_list
Rule 4     statement_list_opt -> <empty>
Rule 5     start_tag -> OPEN_TAG
Rule 6     start_tag -> OPEN_TAG_WITH_ECHO
Rule 7     end_tag -> CLOSE_TAG
Rule 8     end_tag -> <empty>
Rule 9     text -> ARBITRARY_TEXT
Rule 10    function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 11    static_variable_name_list -> static_variable_declaration
Rule 12    static_variable_name_list -> static_variable_name_list static_variable_declaration
Rule 13    static_variable_declaration -> variable_name function_static_initializer_opt
Rule 14    function_static_initializer_opt -> function_static_initializer
Rule 15    function_static_initializer_opt -> <empty>
Rule 16    function_static_initializer_opt -> EQUAL constant_expression
Rule 17    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 18    variable_name_list -> simple_variable
Rule 19    variable_name_list -> variable_name_list simple_variable
Rule 20    primary_expression -> variable
Rule 21    primary_expression -> class_constant_access_expression
Rule 22    primary_expression -> constant_access_expression
Rule 23    primary_expression -> literal
Rule 24    primary_expression -> array_creation_expression
Rule 25    primary_expression -> intrinsic
Rule 26    primary_expression -> anonymous_function_creation_expression
Rule 27    primary_expression -> object_creation_expression
Rule 28    primary_expression -> postfix_increment_expression
Rule 29    primary_expression -> postfix_decrement_expression
Rule 30    primary_expression -> prefix_increment_expression
Rule 31    primary_expression -> prefix_decrement_expression
Rule 32    primary_expression -> byref_assignment_expression
Rule 33    primary_expression -> shell_command_expression
Rule 34    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 35    simple_variable -> variable_name
Rule 36    simple_variable -> DOLLAR simple_variable
Rule 37    simple_variable -> DOLLAR LBRACE expression RIGHT_PARENTHESIS
Rule 38    dereferencable_expression -> variable
Rule 39    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 40    dereferencable_expression -> array_creation_expression
Rule 41    dereferencable_expression -> string_literal
Rule 42    callable_expression -> callable_variable
Rule 43    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 44    callable_expression -> array_creation_expression
Rule 45    callable_expression -> string_literal
Rule 46    callable_variable -> simple_variable
Rule 47    callable_variable -> subscript_expression
Rule 48    callable_variable -> member_call_expression
Rule 49    callable_variable -> scoped_call_expression
Rule 50    callable_variable -> function_call_expression
Rule 51    variable -> callable_variable
Rule 52    variable -> scoped_property_access_expression
Rule 53    variable -> member_access_expression
Rule 54    constant_access_expression -> qualified_name
Rule 55    literal -> integer_literal
Rule 56    literal -> floating_literal
Rule 57    literal -> string_literal
Rule 58    intrinsic -> empty_intrinsic
Rule 59    intrinsic -> eval_intrinsic
Rule 60    intrinsic -> exit_intrinsic
Rule 61    intrinsic -> isset_intrinsic
Rule 62    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 63    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 64    exit_intrinsic -> EXIT
Rule 65    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 66    exit_intrinsic -> DIE
Rule 67    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 68    intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
Rule 69    variable_list -> variable
Rule 70    variable_list -> variable_list variable
Rule 71    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 72    static_opt -> static
Rule 73    static_opt -> <empty>
Rule 74    AMPERSAND_opt -> AMPERSAND
Rule 75    AMPERSAND_opt -> <empty>
Rule 76    parameter_declaration_list_opt -> parameter_declaration_list
Rule 77    parameter_declaration_list_opt -> <empty>
Rule 78    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 79    anonymous_function_use_clause_opt -> <empty>
Rule 80    return_type_opt -> return_type
Rule 81    return_type_opt -> <empty>
Rule 82    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 83    use_variable_name_list -> AMPERSAND_opt variable_name
Rule 84    use_variable_name_list -> use_variable_name_list AMPERSAND_opt variable_name
Rule 85    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 86    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list _opt RIGHT_PARENTHESIS
Rule 87    object_creation_expression -> NEW class_type_designator
Rule 88    object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 89    object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 90    argument_expression_list_opt -> argument_expression_list
Rule 91    argument_expression_list_opt -> <empty>
Rule 92    class_base_clause_opt -> class_base_clause
Rule 93    class_base_clause_opt -> <empty>
Rule 94    class_interface_clause_opt -> class_interface_clause
Rule 95    class_interface_clause_opt -> <empty>
Rule 96    class_member_declarations_opt -> class_member_declarations
Rule 97    class_member_declarations_opt -> <empty>
Rule 98    class_type_designator -> qualified_name
Rule 99    class_type_designator -> new_variable
Rule 100   new_variable -> simple_variable
Rule 101   new_variable -> new_variable LBRACKET expression_opt RBRACKET
Rule 102   new_variable -> new_variable LBRACE expression RBRACE
Rule 103   new_variable -> new_variable ARROW member_name
Rule 104   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 105   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 106   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 107   expression_opt -> expression
Rule 108   expression_opt -> <empty>
Rule 109   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 110   array_creation_expression -> LBRACKET array_initializer_opt RBRACKET
Rule 111   array_initializer_opt -> array_initializer
Rule 112   array_initializer_opt -> <empty>
Rule 113   array_initializer -> array_initializer_list _opt
Rule 114   array_initializer_list -> array_element_initializer _opt
Rule 115   array_element_initializer -> AMPERSAND_opt element_value
Rule 116   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 117   element_key -> expression
Rule 118   element_value -> expression
Rule 119   subscript_expression -> dereferencable_expression LBRACKET expression_opt RBRACKET
Rule 120   subscript_expression -> dereferencable_expression LBRACE expression RBRACE
Rule 121   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 122   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 123   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 124   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 125   argument_expression_list -> argument_expression
Rule 126   argument_expression_list -> argument_expression_list argument_expression
Rule 127   argument_expression -> variadic_unpacking
Rule 128   argument_expression -> expression
Rule 129   variadic_unpacking -> ELLIPSIS expression
Rule 130   member_access_expression -> dereferencable_expression ARROW member_name
Rule 131   member_name -> NAME
Rule 132   member_name -> simple_variable
Rule 133   member_name -> LBRACE expression RBRACE
Rule 134   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 135   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 136   postfix_increment_expression -> variable INCREMENT
Rule 137   postfix_decrement_expression -> variable DECREMENT
Rule 138   prefix_increment_expression -> INCREMENT variable
Rule 139   prefix_decrement_expression -> DECREMENT variable
Rule 140   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 141   dq_char_sequence_opt -> dq_char_sequence
Rule 142   dq_char_sequence_opt -> <empty>
Rule 143   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 144   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 145   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 146   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 147   scope_resolution_qualifier -> relative_scope
Rule 148   scope_resolution_qualifier -> qualified_name
Rule 149   scope_resolution_qualifier -> dereferencable_expression
Rule 150   relative_scope -> SELF
Rule 151   relative_scope -> PARENT
Rule 152   relative_scope -> STATIC
Rule 153   clone_expression -> primary_expression
Rule 154   clone_expression -> CLONE primary_expression
Rule 155   exponentiation_expression -> clone_expression
Rule 156   exponentiation_expression -> clone_expression EXPONENTIATION exponentiation_expression
Rule 157   unary_expression -> exponentiation_expression
Rule 158   unary_expression -> unary_op_expression
Rule 159   unary_expression -> error_control_expression
Rule 160   unary_expression -> cast_expression
Rule 161   unary_op_expression -> unary_operator unary_expression
Rule 162   unary_operator -> PLUS
Rule 163   unary_operator -> MINUS
Rule 164   unary_operator -> TILDE
Rule 165   error_control_expression -> AT unary_expression
Rule 166   cast_expression -> LEFT_PARENTHESIS cast_type RIGHT_PARENTHESIS unary_expression
Rule 167   cast_type -> ARRAY
Rule 168   cast_type -> BINARY
Rule 169   cast_type -> BOOL
Rule 170   cast_type -> BOOLEAN
Rule 171   cast_type -> DOUBLE
Rule 172   cast_type -> INT
Rule 173   cast_type -> INTEGER
Rule 174   cast_type -> FLOAT
Rule 175   cast_type -> OBJECT
Rule 176   cast_type -> REAL
Rule 177   cast_type -> STRING
Rule 178   cast_type -> UNSET
Rule 179   instanceof_expression -> unary_expression
Rule 180   instanceof_expression -> instanceof_subj instanceof class_type_designator
Rule 181   instanceof_subj -> instanceof_expression
Rule 182   logical_not_expression -> instanceof_expression
Rule 183   logical_not_expression -> NOT instanceof_expression
Rule 184   multiplicative_expression -> logical_not_expression
Rule 185   multiplicative_expression -> multiplicative_expression TIMES logical_not_expression
Rule 186   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 187   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 188   additive-expression -> multiplicative-expression
Rule 189   additive-expression -> additive-expression PLUS multiplicative-expression
Rule 190   additive-expression -> additive-expression LESS multiplicative-expression
Rule 191   additive-expression -> additive-expression CONCAT multiplicative-expression
Rule 192   shift-expression -> additive-expression
Rule 193   shift-expression -> shift-expression SL additive-expression
Rule 194   shift-expression -> shift-expression SR additive-expression
Rule 195   relational-expression -> shift-expression
Rule 196   relational-expression -> relational-expression LESS_THAN shift-expression
Rule 197   relational-expression -> relational-expression IS_SMALLER_OR_EQUAL shift-expression
Rule 198   relational-expression -> relational-expression IS_GREATER_OR_EQUAL shift-expression
Rule 199   relational-expression -> relational-expression GREATER_THAN_OR_EQUAL shift-expression
Rule 200   relational-expression -> relational-expression SPACESHIP shift-expression
Rule 201   equality-expression -> relational-expression
Rule 202   equality-expression -> equality-expression EQUAL relational-expression
Rule 203   equality-expression -> equality-expression IS_NOT_EQUAL relational-expression
Rule 204   equality-expression -> equality-expression IS_IDENTICAL relational-expression
Rule 205   equality-expression -> equality-expression IS_NOT_IDENTICAL relational-expression
Rule 206   bitwise-AND-expression -> equality-expression
Rule 207   bitwise-AND-expression -> bitwise-AND-expression AMPERSAND equality-expression
Rule 208   bitwise-exc-OR-expression -> bitwise-AND-expression
Rule 209   bitwise-exc-OR-expression -> bitwise-exc-OR-expression BITWISE_XOR bitwise-AND-expression
Rule 210   bitwise-inc-OR-expression -> bitwise-exc-OR-expression
Rule 211   bitwise-inc-OR-expression -> bitwise-inc-OR-expression BITWISE_OR bitwise-exc-OR-expression
Rule 212   logical-AND-expression-1 -> bitwise-inc-OR-expression
Rule 213   logical-AND-expression-1 -> logical-AND-expression-1 AMPERSAND AMPERSAND bitwise-inc-OR-expression
Rule 214   logical-inc-OR-expression-1 -> logical-AND-expression-1
Rule 215   logical-inc-OR-expression-1 -> logical-inc-OR-expression-1 BITWISE_OR BITWISE_OR logical-AND-expression-1
Rule 216   coalesce-expression -> logical-inc-OR-expression-1
Rule 217   coalesce-expression -> logical-inc-OR-expression-1 COALESCE coalesce-expression
Rule 218   conditional-expression -> coalesce-expression
Rule 219   conditional-expression -> conditional-expression TERNARY_OPERATION expression DOUBLE_POINT coalesce-expression
Rule 220   conditional-expression -> conditional-expression TERNARY_OPERATION DOUBLE_POINT coalesce-expression
Rule 221   assignment-expression -> conditional-expression
Rule 222   assignment-expression -> simple-assignment-expression
Rule 223   assignment-expression -> compound-assignment-expression
Rule 224   simple-assignment-expression -> variable EQUAL assignment-expression
Rule 225   simple-assignment-expression -> list-intrinsic EQUAL assignment-expression
Rule 226   list-intrinsic -> LIST LEFT_PARENTHESIS list-expression-list RIGHT_PARENTHESIS
Rule 227   list-expression-list -> unkeyed-list-expression-list
Rule 228   list-expression-list -> keyed-list-expression-list COLON
Rule 229   list-expression-list -> keyed-list-expression-list
Rule 230   unkeyed-list-expression-list -> list-or-variable
Rule 231   unkeyed-list-expression-list -> COLON
Rule 232   unkeyed-list-expression-list -> unkeyed-list-expression-list COLON list-or-variable COLON
Rule 233   unkeyed-list-expression-list -> unkeyed-list-expression-list COLON list-or-variable
Rule 234   keyed-list-expression-list -> expression DOUBLE_ARROW list-or-variable
Rule 235   keyed-list-expression-list -> keyed-list-expression-list COLON expression DOUBLE_ARROW list-or-variable
Rule 236   list-or-variable -> list-intrinsic
Rule 237   list-or-variable -> AMPERSAND variable
Rule 238   list-or-variable -> variable
Rule 239   byref-assignment-expression -> variable EQUAL AMPERSAND variable
Rule 240   compound-assignment-expression -> variable compound-assignment-operator assignment-expression
Rule 241   compound-assignment-operator -> POW_EQUAL
Rule 242   compound-assignment-operator -> MUL_EQUAL
Rule 243   compound-assignment-operator -> DIV_EQUAL
Rule 244   compound-assignment-operator -> MOD_EQUAL
Rule 245   compound-assignment-operator -> PLUS_EQUAL
Rule 246   compound-assignment-operator -> MINUS_EQUAL
Rule 247   compound-assignment-operator -> CONCAT_EQUAL
Rule 248   compound-assignment-operator -> SL_EQUAL
Rule 249   compound-assignment-operator -> SR_EQUAL
Rule 250   compound-assignment-operator -> AND_EQUAL
Rule 251   compound-assignment-operator -> XOR_EQUAL
Rule 252   compound-assignment-operator -> OR_EQUAL
Rule 253   yield-from-expression -> YIELD_FROM assignment-expression
Rule 254   yield-expression -> yield-from-expression
Rule 255   yield-expression -> YIELD
Rule 256   yield-expression -> YIELD yield-expression
Rule 257   yield-expression -> YIELD yield-from-expression DOUBLE_ARROW yield-expression
Rule 258   print-expression -> yield-expression
Rule 259   print-expression -> PRINT print-expression
Rule 260   logical-AND-expression-2 -> print-expression
Rule 261   logical-AND-expression-2 -> logical-AND-expression-2 AND yield-expression
Rule 262   logical-exc-OR-expression -> logical-AND-expression-2
Rule 263   logical-exc-OR-expression -> logical-exc-OR-expression XOR logical-AND-expression-2
Rule 264   logical-inc-OR-expression-2 -> logical-exc-OR-expression
Rule 265   logical-inc-OR-expression-2 -> logical-inc-OR-expression-2 OR logical-exc-OR-expression
Rule 266   expression -> logical-inc-OR-expression-2
Rule 267   expression -> include-expression
Rule 268   expression -> include-once-expression
Rule 269   expression -> require-expression
Rule 270   expression -> require-once-expression
Rule 271   include-expression -> INCLUDE expression
Rule 272   include-once-expression -> INCLUDE_ONCE expression
Rule 273   require-expression -> REQUIRE expression
Rule 274   require-once-expression -> REQUIRE_ONCE expression
Rule 275   constant-expression -> expression
Rule 276   statement -> compound-statement
Rule 277   statement -> named-label-statement
Rule 278   statement -> expression-statement
Rule 279   statement -> selection-statement
Rule 280   statement -> iteration-statement
Rule 281   statement -> jump-statement
Rule 282   statement -> try-statement
Rule 283   statement -> declare-statement
Rule 284   statement -> echo-statement
Rule 285   statement -> unset-statement
Rule 286   statement -> const-declaration
Rule 287   statement -> function-definition
Rule 288   statement -> class-declaration
Rule 289   statement -> interface-declaration
Rule 290   statement -> trait-declaration
Rule 291   statement -> namespace-definition
Rule 292   statement -> namespace-use-declaration
Rule 293   statement -> global-declaration
Rule 294   statement -> function-static-declaration
Rule 295   compound-statement -> LEFT_CBRAC statement-list RIGHT_CBRAC
Rule 296   compound-statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 297   statement-list -> statement
Rule 298   statement-list -> statement-list statement
Rule 299   named-label-statement -> name DOUBLE_POINT
Rule 300   expression-statement -> expression SEMICOLON
Rule 301   expression-statement -> SEMICOLON
Rule 302   selection-statement -> if-statement
Rule 303   selection-statement -> switch-statement
Rule 304   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif-clauses-1 else-clause-1
Rule 305   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif-clauses-1
Rule 306   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else-clause-1
Rule 307   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 308   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list elseif-clauses-2 else-clause-2 ENDIF SEMICOLON
Rule 309   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list elseif-clauses-2 ENDIF SEMICOLON
Rule 310   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list else-clause-2 ENDIF SEMICOLON
Rule 311   elseif-clauses-1 -> elseif-clause-1
Rule 312   elseif-clauses-1 -> elseif-clauses-1 elseif-clause-1
Rule 313   elseif-clause-1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 314   else-clause-1 -> ELSE statement
Rule 315   elseif-clauses-2 -> elseif-clause-2
Rule 316   elseif-clauses-2 -> elseif-clauses-2 elseif-clause-2
Rule 317   elseif-clause-2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list
Rule 318   else-clause-2 -> ELSE DOUBLE_POINT statement-list
Rule 319   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case-statements RIGHT_CBRAC
Rule 320   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 321   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case-statements ENDSWITCH SEMICOLON
Rule 322   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 323   case-statements -> case-statement case-statements
Rule 324   case-statements -> case-statement
Rule 325   case-statements -> default-statement case-statements
Rule 326   case-statements -> default-statement
Rule 327   case-statement -> CASE expression case-default-label-terminator statement-list
Rule 328   case-statement -> CASE expression case-default-label-terminator
Rule 329   default-statement -> DEFAULT case-default-label-terminator statement-list
Rule 330   default-statement -> DEFAULT case-default-label-terminator
Rule 331   case-default-label-terminator -> DOUBLE_POINT
Rule 332   case-default-label-terminator -> SEMICOLON
Rule 333   iteration-statement -> while-statement
Rule 334   iteration-statement -> do-statement
Rule 335   iteration-statement -> for-statement
Rule 336   iteration-statement -> foreach-statement
Rule 337   while-statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 338   while-statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDWHILE SEMICOLON
Rule 339   do-statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 340   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 341   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS statement
Rule 342   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 343   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 344   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 345   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS statement
Rule 346   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 347   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 348   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 349   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 350   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 351   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 352   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 353   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 354   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 355   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 356   for-initializer -> for-expression-group
Rule 357   for-control -> for-expression-group
Rule 358   for-end-of-loop -> for-expression-group
Rule 359   for-expression-group -> expression
Rule 360   for-expression-group -> for-expression-group COLON expression
Rule 361   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-key foreach-value RIGHT_PARENTHESIS statement
Rule 362   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-value RIGHT_PARENTHESIS statement
Rule 363   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-key foreach-value RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOREACH SEMICOLON
Rule 364   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-value RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOREACH SEMICOLON
Rule 365   foreach-collection-name -> expression
Rule 366   foreach-key -> expression DOUBLE_ARROW
Rule 367   foreach-value -> foreach-value_expression
Rule 368   foreach-value -> AMPERSAND expression
Rule 369   foreach-value -> list-intrinsic
Rule 370   jump-statement -> goto-statement
Rule 371   jump-statement -> continue-statement
Rule 372   jump-statement -> break-statement
Rule 373   jump-statement -> return-statement
Rule 374   jump-statement -> throw-statement
Rule 375   goto-statement -> GOTO name SEMICOLON
Rule 376   continue-statement -> CONTINUE breakout-level SEMICOLON
Rule 377   continue-statement -> CONTINUE SEMICOLON
Rule 378   breakout-level -> INTEGER_LITERAL
Rule 379   breakout-level -> LEFT_PARENTHESIS breakout-level RIGHT_PARENTHESIS
Rule 380   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 381   breakout_levelopt -> breakout_level
Rule 382   breakout_levelopt -> <empty>
Rule 383   breakout_level -> expression
Rule 384   return_statement -> RETURN expressionopt SEMICOLON
Rule 385   expressionopt -> expression
Rule 386   expressionopt -> <empty>
Rule 387   throw_statement -> THROW expression SEMICOLON
Rule 388   try_statement -> TRY compound_statement catch_clauses
Rule 389   try_statement -> TRY compound_statement finally_clause
Rule 390   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 391   catch_clauses -> catch_clause
Rule 392   catch_clauses -> catch_clauses catch_clause
Rule 393   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 394   catch_name_list -> qualified_name
Rule 395   catch_name_list -> catch_name_list
Rule 396   finally_clause -> FINALLY compound_statement
Rule 397   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 398   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 399   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 400   declare_directive -> TICKS EQUALS literal
Rule 401   declare_directive -> ENCODING EQUALS literal
Rule 402   declare_directive -> STRICT_TYPES EQUALS literal
Rule 403   echo_statement -> ECHO expression_list SEMICOLON
Rule 404   expression_list -> expression
Rule 405   expression_list -> expression_list expression
Rule 406   unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
Rule 407   unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
Rule 408   function_definition -> function_definition_header compound_statement
Rule 409   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_typeopt
Rule 410   ampersandopt -> AMPERSAND
Rule 411   ampersandopt -> <empty>
Rule 412   parameter_declaration_list -> simple_parameter_declaration_list
Rule 413   parameter_declaration_list -> variadic_declaration_list
Rule 414   simple_parameter_declaration_list -> parameter_declaration
Rule 415   simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration
Rule 416   variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter
Rule 417   variadic_declaration_list -> variadic_parameter
Rule 418   parameter_declaration -> type_declarationopt ampersandopt variable_name default_argument_specifieropt
Rule 419   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS variable_name
Rule 420   return_type -> DOUBLE_POINT type_declaration
Rule 421   return_type -> DOUBLE_POINT VOID
Rule 422   type_declarationopt -> type_declaration
Rule 423   type_declarationopt -> <empty>
Rule 424   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 425   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 426   TERNARY_OPERATIONopt -> <empty>
Rule 427   base_type_declaration -> array
Rule 428   base_type_declaration -> callable
Rule 429   base_type_declaration -> iterable
Rule 430   base_type_declaration -> scalar_type
Rule 431   base_type_declaration -> qualified_name
Rule 432   scalar_type -> BOOL
Rule 433   scalar_type -> FLOAT
Rule 434   scalar_type -> INT
Rule 435   scalar_type -> STRING
Rule 436   default_argument_specifieropt -> default_argument_specifier
Rule 437   default_argument_specifieropt -> <empty>
Rule 438   default_argument_specifier -> EQUAL constant_expression
Rule 439   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 440   class_modifieropt -> class_modifier
Rule 441   class_modifieropt -> <empty>
Rule 442   class_base_clauseopt -> class_base_clause
Rule 443   class_base_clauseopt -> <empty>
Rule 444   class_interface_clauseopt -> class_interface_clause
Rule 445   class_interface_clauseopt -> <empty>
Rule 446   class_member_declarationsopt -> class_member_declarations
Rule 447   class_member_declarationsopt -> <empty>
Rule 448   class_modifier -> ABSTRACT
Rule 449   class_modifier -> FINAL
Rule 450   class_base_clause -> EXTENDS qualified_name
Rule 451   class_interface_clause -> IMPLEMENTS qualified_name
Rule 452   class_interface_clause -> class_interface_clause qualified_name
Rule 453   class_member_declarations -> class_member_declaration
Rule 454   class_member_declarations -> class_member_declarations class_member_declaration
Rule 455   class_member_declaration -> class_const_declaration
Rule 456   class_member_declaration -> property_declaration
Rule 457   class_member_declaration -> method_declaration
Rule 458   class_member_declaration -> constructor_declaration
Rule 459   class_member_declaration -> destructor_declaration
Rule 460   class_member_declaration -> trait_use_clause
Rule 461   const_declaration -> CONST const_elements SEMICOLON
Rule 462   class_const_declaration -> visibility_modifieropt CONST const_elements SEMICOLON
Rule 463   const_elements -> const_element
Rule 464   const_elements -> const_elements const_element
Rule 465   const_element -> name EQUAL constant_expression
Rule 466   property_declaration -> property_modifier property_elements SEMICOLON
Rule 467   property_modifier -> VAR
Rule 468   property_modifier -> visibility_modifier static_modifieropt
Rule 469   property_modifier -> static_modifier visibility_modifieropt
Rule 470   static_modifieropt -> static_modifier
Rule 471   static_modifieropt -> <empty>
Rule 472   visibility_modifier -> PUBLIC
Rule 473   visibility_modifier -> PROTECTED
Rule 474   visibility_modifier -> PRIVATE
Rule 475   static_modifier -> STATIC
Rule 476   property_elements -> property_element
Rule 477   property_elements -> property_elements property_element
Rule 478   property_element -> variable_name property_initializeropt SEMICOLON
Rule 479   property_initializeropt -> property_initializer
Rule 480   property_initializeropt -> <empty>
Rule 481   property_initializer -> EQUAL constant_expression
Rule 482   method_declaration -> method_modifiersopt function_definition
Rule 483   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 484   method_modifiersopt -> method_modifiers
Rule 485   method_modifiersopt -> <empty>
Rule 486   method_modifiers -> method_modifier
Rule 487   method_modifiers -> method_modifiers method_modifier
Rule 488   method_modifier -> visibility_modifier
Rule 489   method_modifier -> static_modifier
Rule 490   method_modifier -> class_modifier
Rule 491   constructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __construct LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 492   destructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __destruct LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 493   parameter_declaration_listopt -> parameter_declaration_list
Rule 494   parameter_declaration_listopt -> <empty>
Rule 495   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 496   interface_base_clauseopt -> interface_base_clause
Rule 497   interface_base_clauseopt -> <empty>
Rule 498   interface_member_declarationsopt -> interface_member_declarations
Rule 499   interface_member_declarationsopt -> <empty>
Rule 500   interface_base_clause -> EXTENDS qualified_name
Rule 501   interface_base_clause -> interface_base_clause qualified_name
Rule 502   interface_member_declarations -> interface_member_declaration
Rule 503   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 504   interface_member_declaration -> class_const_declaration
Rule 505   interface_member_declaration -> method_declaration
Rule 506   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 507   trait_member_declarationsopt -> trait_member_declarations
Rule 508   trait_member_declarationsopt -> <empty>
Rule 509   trait_member_declarations -> trait_member_declaration
Rule 510   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 511   trait_member_declaration -> property_declaration
Rule 512   trait_member_declaration -> method_declaration
Rule 513   trait_member_declaration -> constructor_declaration
Rule 514   trait_member_declaration -> destructor_declaration
Rule 515   trait_member_declaration -> trait_use_clauses
Rule 516   trait_use_clauses -> trait_use_clause
Rule 517   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 518   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 519   trait_name_list -> qualified_name
Rule 520   trait_name_list -> trait_name_list qualified_name
Rule 521   trait_use_specification -> SEMICOLON
Rule 522   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 523   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 524   trait_select_and_alias_clausesopt -> <empty>
Rule 525   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 526   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 527   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 528   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 529   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 530   trait_alias_as_clause -> name AS visibility_modifieropt name
Rule 531   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 532   nameopt -> name
Rule 533   nameopt -> <empty>
Rule 534   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 535   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 536   namespace_nameopt -> namespace_name
Rule 537   namespace_nameopt -> <empty>
Rule 538   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 539   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 540   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 541   namespace_function_or_constopt -> namespace_function_or_const
Rule 542   namespace_function_or_constopt -> <empty>
Rule 543   NS_SEPARATORopt -> NS_SEPARATOR
Rule 544   NS_SEPARATORopt -> <empty>
Rule 545   namespace_use_clauses -> namespace_use_clause
Rule 546   namespace_use_clauses -> namespace_use_clauses namespace_use_clause
Rule 547   namespace_use_clause -> qualified_name namespace_aliasing_clauseopt
Rule 548   namespace_aliasing_clause -> AS name
Rule 549   namespace_function_or_const -> FUNCTION
Rule 550   namespace_function_or_const -> CONST
Rule 551   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 552   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1
Rule 553   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clauseopt
Rule 554   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 555   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2
Rule 556   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clauseopt

Terminals, with rules where they appear

ABSTRACT             : 448
AMPERSAND            : 74 207 213 213 237 239 368 410
AND                  : 261
AND_EQUAL            : 250
ARRAY                : 109 167
AS                   : 361 362 363 364 530 531 548
ASTERISK             : 
ATTRIBUTE            : 
BACKTICK             : 140 140
BAD_CARACTER         : 
BITWISE_NOT          : 
BITWISE_OR           : 211 215 215
BITWISE_XOR          : 209
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 380
CALLABLE             : 
CASE                 : 327 328
CATCH                : 393
CLASS                : 88 89 439
CLONE                : 154
CLOSE_TAG            : 7
COALESCE             : 217
COALESCE_EQUAL       : 
COLON                : 228 231 232 232 233 235 360 406
COMMENT              : 
CONCAT               : 191
CONCAT_EQUAL         : 247
CONST                : 461 462 550
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 376 377
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 397 398 399
DEFAULT              : 329 330
DIE                  : 66 67
DIVIDE               : 186
DIV_EQUAL            : 243
DNUMBER              : 
DO                   : 339
DOC_COMMENT          : 
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLE_ARROW         : 234 235 257 366
DOUBLE_COLON         : 104 105 106 143 144 145 146 529
DOUBLE_POINT         : 219 220 299 308 309 310 317 318 321 322 331 338 348 349 350 351 352 353 354 355 363 364 398 420 421
DQUOTATION_MARK      : 
ECHO                 : 403
ELLIPSIS             : 129 419
ELSE                 : 314 318
ELSEIF               : 313 317
EMPTY                : 62
ENDDECLARE           : 398
ENDFOR               : 348 349 350 351 352 353 354 355
ENDFOREACH           : 363 364
ENDIF                : 308 309 310
ENDSWITCH            : 321 322
ENDWHILE             : 338
EQUAL                : 16 202 224 225 239 438 465 481
EQUALS               : 400 401 402
EVAL                 : 63
EXIT                 : 64 65
EXPONENT_DNUMBER     : 
EXTENDS              : 450 500
FINAL                : 449
FINALLY              : 396
FN                   : 
FOR                  : 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355
FOREACH              : 361 362 363 364
FUNCTION             : 71 409 491 492 549
GLOBAL               : 17
GOTO                 : 375
IF                   : 304 305 306 307 308 309 310
IMPLEMENTS           : 451
INC                  : 
INCLUDE              : 271
INCLUDE_ONCE         : 272
INSTANCEOF           : 
INSTEADOF            : 529
INTERFACE            : 495
ISSET                : 68
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 198
IS_IDENTICAL         : 204
IS_NOT_EQUAL         : 203
IS_NOT_IDENTICAL     : 205
IS_SMALLER_OR_EQUAL  : 197
LEFT_CBRAC           : 295 296 319 320 439 495 506 522 539 540
LEFT_PARENTHESIS     : 34 39 43 62 63 65 67 68 71 82 85 86 88 109 121 122 123 124 134 135 144 145 166 226 304 305 306 307 308 309 310 313 317 319 320 321 322 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 361 362 363 364 379 393 397 398 399 406 407 409 491 492
LEFT_SQRBRAC         : 
LESS                 : 190
LESS_THAN            : 196
LIST                 : 226
LNUMBER              : 
MINUS_EQUAL          : 246
MOD_EQUAL            : 244
MORE_THAN            : 
MUL_EQUAL            : 242
NAMESPACE            : 534 535
NEGATION             : 
NEW                  : 85 86 87 88 89
NS_SEPARATOR         : 539 540 543
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 5
OPEN_TAG_WITH_ECHO   : 6
OR                   : 265
OR_EQUAL             : 252
PLUS                 : 162 189
PLUS_EQUAL           : 245
POW                  : 
POW_EQUAL            : 241
PRINT                : 259
PRIVATE              : 474
PROTECTED            : 473
PUBLIC               : 472
REQUIRE              : 273
REQUIRE_ONCE         : 274
RETURN               : 384
RIGHT_CBRAC          : 295 296 319 320 439 495 506 522 539 540
RIGHT_PARENTHESIS    : 34 37 39 43 62 63 65 67 68 71 82 85 86 88 109 121 122 123 124 134 135 144 145 166 226 304 305 306 307 308 309 310 313 317 319 320 321 322 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 361 362 363 364 379 393 397 398 399 406 407 409 491 492
RIGHT_SQRBRAC        : 
SEMICOLON            : 10 17 300 301 308 309 310 321 322 332 338 339 340 340 341 341 342 342 343 343 344 344 345 345 346 346 347 347 348 348 348 349 349 349 350 350 350 351 351 351 352 352 352 353 353 353 354 354 354 355 355 355 363 364 375 376 377 380 384 387 398 399 403 406 407 461 462 466 478 483 521 527 528 534 538 539 540
SL                   : 193
SL_EQUAL             : 248
SPACESHIP            : 200
SR                   : 194
SR_EQUAL             : 249
START_HEREDOC        : 
STATIC               : 10 152 475
STRING               : 177 435
SWITCH               : 319 320 321 322
TERNARY_OPERATION    : 219 220 425
THROW                : 387
TRAIT                : 506
TRY                  : 388 389 390
UNSET                : 178 406 407
USE                  : 82 518 538 539 540
VAR                  : 467
VARIABLE             : 393
WHILE                : 337 338 339
WHITESPACE           : 
XOR                  : 263
XOR_EQUAL            : 251
YIELD                : 255 256 257
YIELD_FROM           : 253
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 71 83 84 115 116
AMPERSANDopt         : 491 492
ARBITRARY_TEXT       : 9
ARROW                : 103 116 130 134 135
AT                   : 165
BINARY               : 168
BOOL                 : 169 432
BOOLEAN              : 170
DECREMENT            : 137 139
DOLLAR               : 36 37
DOUBLE               : 171
ENCODING             : 401
EXPONENTIATION       : 156
FLOAT                : 174 433
GREATER_THAN_OR_EQUAL : 199
INCREMENT            : 136 138
INT                  : 172 434
INTEGER              : 173
INTEGER_LITERAL      : 378
LBRACE               : 37 88 89 102 120 133
LBRACKET             : 101 110 119
MINUS                : 163
MODULO               : 187
NAME                 : 131 146
NOT                  : 183
NS_SEPARATORopt      : 539 540
OBJECT               : 175
PARENT               : 151
RBRACE               : 88 89 102 120 133
RBRACKET             : 101 110 119
REAL                 : 176
SELF                 : 150
STRICT_TYPES         : 402
TERNARY_OPERATIONopt : 424
TICKS                : 400
TILDE                : 164
TIMES                : 185
VOID                 : 421
__construct          : 491
__destruct           : 492
_opt                 : 86 113 114
additive-expression  : 189 190 191 192 193 194
ampersandopt         : 409 418 419
anonymous_function_creation_expression : 26
anonymous_function_use_clause : 78
anonymous_function_use_clause_opt : 71
argument_expression  : 125 126
argument_expression_list : 86 90 122 124 126 135 145
argument_expression_list_opt : 85 88 121 123 134 144
array                : 427
array_creation_expression : 24 40 44
array_element_initializer : 114
array_initializer    : 111
array_initializer_list : 113
array_initializer_opt : 109 110
assignment-expression : 224 225 240 253
base_type_declaration : 424
bitwise-AND-expression : 207 208 209
bitwise-exc-OR-expression : 209 210 211
bitwise-inc-OR-expression : 211 212 213
break-statement      : 372
break_statement      : 
breakout-level       : 376 379
breakout_level       : 381
breakout_levelopt    : 380
byref-assignment-expression : 
byref_assignment_expression : 32
callable             : 428
callable_expression  : 123 124
callable_variable    : 42 51
case-default-label-terminator : 327 328 329 330
case-statement       : 323 324
case-statements      : 319 321 323 325
cast_expression      : 160
cast_type            : 166
catch_clause         : 391 392
catch_clauses        : 388 390 392
catch_name_list      : 393 395
class-declaration    : 288
class_base_clause    : 92 442
class_base_clause_opt : 88 89
class_base_clauseopt : 439
class_const_declaration : 455 504
class_constant_access_expression : 21
class_declaration    : 
class_interface_clause : 94 444 452
class_interface_clause_opt : 88 89
class_interface_clauseopt : 439
class_member_declaration : 453 454
class_member_declarations : 96 446 454
class_member_declarations_opt : 88 89
class_member_declarationsopt : 439
class_modifier       : 440 490
class_modifieropt    : 439
class_type_designator : 85 86 87 180
clone_expression     : 155 156
coalesce-expression  : 217 218 219 220
compound-assignment-expression : 223
compound-assignment-operator : 240
compound-statement   : 276
compound_statement   : 71 388 389 390 393 396 408 491 492 535
conditional-expression : 219 220 221
const-declaration    : 286
const_declaration    : 
const_element        : 463 464
const_elements       : 461 462 464
constant-expression  : 
constant_access_expression : 22
constant_expression  : 16 438 465 481
constructor_declaration : 458 513
continue-statement   : 371
declare-statement    : 283
declare_directive    : 397 398 399
declare_statement    : 
default-statement    : 325 326
default_argument_specifier : 436
default_argument_specifieropt : 418
dereferencable_expression : 119 120 130 134 135 149
destructor_declaration : 459 514
do-statement         : 334
dq_char_sequence     : 141
dq_char_sequence_opt : 140
echo-statement       : 284
echo_statement       : 
element_key          : 116
element_value        : 115 116
else-clause-1        : 304 306
else-clause-2        : 308 310
elseif-clause-1      : 311 312
elseif-clause-2      : 315 316
elseif-clauses-1     : 304 305 312
elseif-clauses-2     : 308 309 316
empty_intrinsic      : 58
end_tag              : 
equality-expression  : 202 203 204 205 206 207
error_control_expression : 159
eval_intrinsic       : 59
exit_intrinsic       : 60
exponentiation_expression : 156 157
expression           : 34 37 39 43 62 63 102 107 117 118 120 128 129 133 219 234 235 271 272 273 274 275 300 304 305 306 307 308 309 310 313 317 319 320 321 322 327 328 337 338 339 359 360 365 366 368 383 385 387 404 405
expression-statement : 278
expression_list      : 403 405
expression_opt       : 65 67 101 119
expressionopt        : 384
finally_clause       : 389 390
floating_literal     : 56
for-control          : 340 341 344 345 348 349 352 353
for-end-of-loop      : 340 342 344 346 348 350 352 354
for-expression-group : 356 357 358 360
for-initializer      : 340 341 342 343 348 349 350 351
for-statement        : 335
foreach-collection-name : 361 362 363 364
foreach-key          : 361 363
foreach-statement    : 336
foreach-value        : 361 362 363 364
foreach-value_expression : 367
function-definition  : 287
function-static-declaration : 294
function_call_expression : 50
function_definition  : 482
function_definition_header : 408 483
function_static_declaration : 
function_static_initializer : 14
function_static_initializer_opt : 13
global-declaration   : 293
global_declaration   : 
goto-statement       : 370
if-statement         : 302
include-expression   : 267
include-once-expression : 268
instanceof           : 180
instanceof_expression : 181 182 183
instanceof_subj      : 180
integer_literal      : 55
interface-declaration : 289
interface_base_clause : 496 501
interface_base_clauseopt : 495
interface_declaration : 
interface_member_declaration : 502 503
interface_member_declarations : 498 503
interface_member_declarationsopt : 495
intrinsic            : 25
isset_intrinsic      : 61
iterable             : 429
iteration-statement  : 280
jump-statement       : 281
keyed-list-expression-list : 228 229 235
list-expression-list : 226
list-intrinsic       : 225 236 369
list-or-variable     : 230 232 233 234 235
literal              : 23 400 401 402
logical-AND-expression-1 : 213 214 215
logical-AND-expression-2 : 261 262 263
logical-exc-OR-expression : 263 264 265
logical-inc-OR-expression-1 : 215 216 217
logical-inc-OR-expression-2 : 265 266
logical_not_expression : 184 185 186 187
member_access_expression : 53
member_call_expression : 48
member_name          : 103 130 134 135 144 145
method_declaration   : 457 505 512
method_modifier      : 486 487
method_modifiers     : 483 484 487 491 492
method_modifiersopt  : 482
multiplicative-expression : 188 189 190 191
multiplicative_expression : 185 186 187
name                 : 299 375 409 439 465 491 492 495 506 529 530 530 531 532 548
named-label-statement : 277
nameopt              : 531
namespace-definition : 291
namespace-use-declaration : 292
namespace_aliasing_clause : 
namespace_aliasing_clauseopt : 547 553 556
namespace_definition : 
namespace_function_or_const : 539 541
namespace_function_or_constopt : 538 556
namespace_name       : 534 536 539 540 553 556
namespace_nameopt    : 535
namespace_use_clause : 545 546
namespace_use_clauses : 538 546
namespace_use_declaration : 
namespace_use_group_clause_1 : 551 552
namespace_use_group_clause_2 : 554 555
namespace_use_group_clauses_1 : 539 552
namespace_use_group_clauses_2 : 540 555
new_variable         : 99 101 102 103 106
object_creation_expression : 27
parameter_declaration : 414 415
parameter_declaration_list : 76 415 493
parameter_declaration_list_opt : 71
parameter_declaration_listopt : 409 491
postfix_decrement_expression : 29
postfix_increment_expression : 28
prefix_decrement_expression : 31
prefix_increment_expression : 30
primary_expression   : 153 154
print-expression     : 259 260
property_declaration : 456 511
property_element     : 476 477
property_elements    : 466 477
property_initializer : 479
property_initializeropt : 478
property_modifier    : 466
qualified_name       : 54 98 104 121 122 148 394 431 450 451 452 500 501 519 520 529 547
relational-expression : 196 197 198 199 200 201 202 203 204 205
relative_scope       : 105 147
require-expression   : 269
require-once-expression : 270
return-statement     : 373
return_statement     : 
return_type          : 80
return_type_opt      : 71
return_typeopt       : 409
scalar_type          : 430
scope_resolution_qualifier : 143 144 145 146
scoped_call_expression : 49
scoped_property_access_expression : 52
script               : 2 0
script_section       : 1 2
selection-statement  : 279
shell_command_expression : 33
shift-expression     : 193 194 195 196 197 198 199 200
simple-assignment-expression : 222
simple_parameter_declaration_list : 412 416
simple_variable      : 18 19 36 46 100 104 105 106 132 143
start_tag            : 
statement            : 297 298 304 305 306 307 313 314 337 339 340 341 342 343 344 345 346 347 361 362 397
statement-list       : 295 298 308 309 310 317 318 327 329 338 348 349 350 351 352 353 354 355 363 364
statement_list       : 3 398
statement_list_opt   : 
static               : 72
static_modifier      : 469 470 489
static_modifieropt   : 468
static_opt           : 71
static_variable_declaration : 11 12
static_variable_name_list : 10 12
string_literal       : 41 45 57
subscript_expression : 47
switch-statement     : 303
text                 : 
throw-statement      : 374
throw_statement      : 
trait-declaration    : 290
trait_alias_as_clause : 528
trait_declaration    : 
trait_member_declaration : 509 510
trait_member_declarations : 507 510
trait_member_declarationsopt : 506
trait_name_list      : 518 520 529
trait_select_and_alias_clause : 525 526
trait_select_and_alias_clauses : 523 526
trait_select_and_alias_clausesopt : 522
trait_select_insteadof_clause : 527
trait_use_clause     : 460 516 517
trait_use_clauses    : 515 517
trait_use_specification : 518
try-statement        : 282
try_statement        : 
type_declaration     : 420 422
type_declarationopt  : 418 419
unary_expression     : 161 165 166 179
unary_op_expression  : 158
unary_operator       : 161
unkeyed-list-expression-list : 227 232 233
unset-statement      : 285
unset_statement      : 
use_variable_name_list : 82 84
variable             : 20 38 69 70 136 137 138 139 224 237 238 239 239 240
variable_list        : 70 406 407
variable_list_opt    : 68
variable_name        : 13 35 83 84 418 419 478
variable_name_list   : 17 19
variadic_declaration_list : 413
variadic_parameter   : 416 417
variadic_unpacking   : 127
visibility_modifier  : 468 488 531
visibility_modifieropt : 462 469 530
while-statement      : 333
yield-expression     : 256 257 258 261
yield-from-expression : 254 257

