Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTRIBUTE
    BAD_CARACTER
    BOOLEAN_AND
    BOOLEAN_OR
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    IS_EQUAL
    LEFT_SQRBRAC
    MORE_THAN
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    WHITESPACE
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> statement_list_opt
Rule 1     statement_list_opt -> statement_list
Rule 2     statement_list_opt -> <empty>
Rule 3     start_tag -> OPEN_TAG
Rule 4     start_tag -> OPEN_TAG_WITH_ECHO
Rule 5     end_tag -> CLOSE_TAG
Rule 6     end_tag -> <empty>
Rule 7     namespace_name -> NAME
Rule 8     namespace_name -> namespace_name NS_SEPARATOR NAME
Rule 9     function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 10    static_variable_name_list -> static_variable_declaration
Rule 11    static_variable_name_list -> static_variable_name_list static_variable_declaration
Rule 12    static_variable_declaration -> VARIABLE function_static_initializer_opt
Rule 13    function_static_initializer -> EQUAL constant_expression
Rule 14    function_static_initializer_opt -> function_static_initializer
Rule 15    function_static_initializer_opt -> <empty>
Rule 16    function_static_initializer_opt -> EQUAL constant_expression
Rule 17    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 18    variable_name_list -> simple_variable
Rule 19    variable_name_list -> variable_name_list simple_variable
Rule 20    primary_expression -> variable
Rule 21    primary_expression -> class_constant_access_expression
Rule 22    primary_expression -> constant_access_expression
Rule 23    primary_expression -> literal
Rule 24    primary_expression -> array_creation_expression
Rule 25    primary_expression -> intrinsic
Rule 26    primary_expression -> anonymous_function_creation_expression
Rule 27    primary_expression -> object_creation_expression
Rule 28    primary_expression -> postfix_increment_expression
Rule 29    primary_expression -> postfix_decrement_expression
Rule 30    primary_expression -> prefix_increment_expression
Rule 31    primary_expression -> prefix_decrement_expression
Rule 32    primary_expression -> byref_assignment_expression
Rule 33    primary_expression -> shell_command_expression
Rule 34    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 35    simple_variable -> VARIABLE
Rule 36    simple_variable -> DOLLAR simple_variable
Rule 37    simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
Rule 38    dereferencable_expression -> variable
Rule 39    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 40    dereferencable_expression -> array_creation_expression
Rule 41    dereferencable_expression -> string_literal
Rule 42    callable_expression -> callable_variable
Rule 43    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 44    callable_expression -> array_creation_expression
Rule 45    callable_expression -> string_literal
Rule 46    callable_variable -> simple_variable
Rule 47    callable_variable -> subscript_expression
Rule 48    callable_variable -> member_call_expression
Rule 49    callable_variable -> scoped_call_expression
Rule 50    callable_variable -> function_call_expression
Rule 51    variable -> callable_variable
Rule 52    variable -> scoped_property_access_expression
Rule 53    variable -> member_access_expression
Rule 54    constant_access_expression -> qualified_name
Rule 55    literal -> integer_literal
Rule 56    literal -> floating_literal
Rule 57    literal -> string_literal
Rule 58    integer_literal -> LNUMBER
Rule 59    floating_literal -> DNUMBER
Rule 60    string_literal -> STRING
Rule 61    intrinsic -> empty_intrinsic
Rule 62    intrinsic -> eval_intrinsic
Rule 63    intrinsic -> exit_intrinsic
Rule 64    intrinsic -> isset_intrinsic
Rule 65    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 66    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 67    exit_intrinsic -> EXIT
Rule 68    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 69    exit_intrinsic -> DIE
Rule 70    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 71    isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
Rule 72    variable_list_opt -> variable_list
Rule 73    variable_list -> variable
Rule 74    variable_list -> variable_list variable
Rule 75    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 76    static_opt -> STATIC
Rule 77    static_opt -> <empty>
Rule 78    AMPERSAND_opt -> AMPERSAND
Rule 79    AMPERSAND_opt -> <empty>
Rule 80    parameter_declaration_list_opt -> parameter_declaration_list
Rule 81    parameter_declaration_list_opt -> <empty>
Rule 82    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 83    anonymous_function_use_clause_opt -> <empty>
Rule 84    return_type_opt -> return_type
Rule 85    return_type_opt -> <empty>
Rule 86    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 87    use_variable_name_list -> AMPERSAND_opt VARIABLE
Rule 88    use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE
Rule 89    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 90    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
Rule 91    object_creation_expression -> NEW class_type_designator
Rule 92    object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
Rule 93    object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
Rule 94    argument_expression_list_opt -> argument_expression_list
Rule 95    argument_expression_list_opt -> <empty>
Rule 96    class_base_clause_opt -> class_base_clause
Rule 97    class_base_clause_opt -> <empty>
Rule 98    class_interface_clause_opt -> class_interface_clause
Rule 99    class_interface_clause_opt -> <empty>
Rule 100   class_member_declarations_opt -> class_member_declarations
Rule 101   class_member_declarations_opt -> <empty>
Rule 102   class_type_designator -> qualified_name
Rule 103   class_type_designator -> new_variable
Rule 104   new_variable -> simple_variable
Rule 105   new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 106   new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 107   new_variable -> new_variable ARROW member_name
Rule 108   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 109   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 110   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 111   expression_opt -> expression
Rule 112   expression_opt -> <empty>
Rule 113   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 114   array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
Rule 115   array_initializer_opt -> array_initializer
Rule 116   array_initializer_opt -> <empty>
Rule 117   array_initializer -> array_initializer_list
Rule 118   array_initializer -> array_initializer_list COLON
Rule 119   array_initializer_list -> array_element_initializer
Rule 120   array_initializer_list -> array_element_initializer COLON array_element_initializer
Rule 121   array_element_initializer -> AMPERSAND_opt element_value
Rule 122   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 123   element_key -> expression
Rule 124   element_value -> expression
Rule 125   subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 126   subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 127   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 128   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 129   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 130   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 131   argument_expression_list -> argument_expression
Rule 132   argument_expression_list -> argument_expression_list argument_expression
Rule 133   argument_expression -> variadic_unpacking
Rule 134   argument_expression -> expression
Rule 135   variadic_unpacking -> ELLIPSIS expression
Rule 136   member_access_expression -> dereferencable_expression ARROW member_name
Rule 137   member_name -> NAME
Rule 138   member_name -> simple_variable
Rule 139   member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 140   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 141   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 142   postfix_increment_expression -> variable DOUBLEPLUS
Rule 143   postfix_decrement_expression -> variable DOUBLELESS
Rule 144   prefix_increment_expression -> DOUBLEPLUS variable
Rule 145   prefix_decrement_expression -> DOUBLELESS variable
Rule 146   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 147   dq_char_sequence_opt -> DQ_CHAR_SEQUENCE
Rule 148   dq_char_sequence_opt -> <empty>
Rule 149   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 150   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 151   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 152   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 153   scope_resolution_qualifier -> relative_scope
Rule 154   scope_resolution_qualifier -> qualified_name
Rule 155   scope_resolution_qualifier -> dereferencable_expression
Rule 156   relative_scope -> SELF
Rule 157   relative_scope -> PARENT
Rule 158   relative_scope -> STATIC
Rule 159   clone_expression -> primary_expression
Rule 160   clone_expression -> CLONE primary_expression
Rule 161   exponentiation_expression -> clone_expression
Rule 162   exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression
Rule 163   unary_expression -> exponentiation_expression
Rule 164   unary_expression -> unary_op_expression
Rule 165   unary_expression -> error_control_expression
Rule 166   unary_expression -> cast_expression
Rule 167   unary_op_expression -> unary_operator unary_expression
Rule 168   unary_operator -> PLUS
Rule 169   unary_operator -> LESS
Rule 170   unary_operator -> BITWISE_NOT
Rule 171   error_control_expression -> AT unary_expression
Rule 172   cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
Rule 173   instanceof_expression -> unary_expression
Rule 174   instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator
Rule 175   instanceof_subj -> instanceof_expression
Rule 176   logical_not_expression -> instanceof_expression
Rule 177   logical_not_expression -> NEGATION instanceof_expression
Rule 178   multiplicative_expression -> logical_not_expression
Rule 179   multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression
Rule 180   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 181   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 182   additive_expression -> multiplicative_expression
Rule 183   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 184   additive_expression -> additive_expression LESS multiplicative_expression
Rule 185   additive_expression -> additive_expression CONCAT multiplicative_expression
Rule 186   shift_expression -> additive_expression
Rule 187   shift_expression -> shift_expression SL additive_expression
Rule 188   shift_expression -> shift_expression SR additive_expression
Rule 189   relational_expression -> shift_expression
Rule 190   relational_expression -> relational_expression LESS_THAN shift_expression
Rule 191   relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression
Rule 192   relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression
Rule 193   relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression
Rule 194   relational_expression -> relational_expression SPACESHIP shift_expression
Rule 195   equality_expression -> relational_expression
Rule 196   equality_expression -> equality_expression EQUAL relational_expression
Rule 197   equality_expression -> equality_expression IS_NOT_EQUAL relational_expression
Rule 198   equality_expression -> equality_expression IS_IDENTICAL relational_expression
Rule 199   equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression
Rule 200   bitwise_AND_expression -> equality_expression
Rule 201   bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression
Rule 202   bitwise_exc_OR_expression -> bitwise_AND_expression
Rule 203   bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
Rule 204   bitwise_inc_OR_expression -> bitwise_exc_OR_expression
Rule 205   bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
Rule 206   logical_AND_expression_1 -> bitwise_inc_OR_expression
Rule 207   logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
Rule 208   logical_inc_OR_expression_1 -> logical_AND_expression_1
Rule 209   logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
Rule 210   coalesce_expression -> logical_inc_OR_expression_1
Rule 211   coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression
Rule 212   conditional_expression -> coalesce_expression
Rule 213   conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
Rule 214   conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
Rule 215   assignment_expression -> conditional_expression
Rule 216   assignment_expression -> simple_assignment_expression
Rule 217   assignment_expression -> compound_assignment_expression
Rule 218   simple_assignment_expression -> variable EQUAL assignment_expression
Rule 219   simple_assignment_expression -> list_intrinsic EQUAL assignment_expression
Rule 220   list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
Rule 221   list_expression_list -> unkeyed_list_expression_list
Rule 222   list_expression_list -> keyed_list_expression_list COLON
Rule 223   list_expression_list -> keyed_list_expression_list
Rule 224   unkeyed_list_expression_list -> list_or_variable
Rule 225   unkeyed_list_expression_list -> COLON
Rule 226   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON
Rule 227   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable
Rule 228   keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable
Rule 229   keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
Rule 230   list_or_variable -> list_intrinsic
Rule 231   list_or_variable -> AMPERSAND variable
Rule 232   list_or_variable -> variable
Rule 233   byref_assignment_expression -> variable EQUAL AMPERSAND variable
Rule 234   compound_assignment_expression -> variable compound_assignment_operator assignment_expression
Rule 235   compound_assignment_operator -> POW_EQUAL
Rule 236   compound_assignment_operator -> MUL_EQUAL
Rule 237   compound_assignment_operator -> DIV_EQUAL
Rule 238   compound_assignment_operator -> MOD_EQUAL
Rule 239   compound_assignment_operator -> PLUS_EQUAL
Rule 240   compound_assignment_operator -> MINUS_EQUAL
Rule 241   compound_assignment_operator -> CONCAT_EQUAL
Rule 242   compound_assignment_operator -> SL_EQUAL
Rule 243   compound_assignment_operator -> SR_EQUAL
Rule 244   compound_assignment_operator -> AND_EQUAL
Rule 245   compound_assignment_operator -> XOR_EQUAL
Rule 246   compound_assignment_operator -> OR_EQUAL
Rule 247   yield_from_expression -> YIELD_FROM assignment_expression
Rule 248   yield_expression -> yield_from_expression
Rule 249   yield_expression -> YIELD
Rule 250   yield_expression -> YIELD yield_expression
Rule 251   yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression
Rule 252   print_expression -> yield_expression
Rule 253   print_expression -> PRINT print_expression
Rule 254   logical_AND_expression_2 -> print_expression
Rule 255   logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression
Rule 256   logical_exc_OR_expression -> logical_AND_expression_2
Rule 257   logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2
Rule 258   logical_inc_OR_expression_2 -> logical_exc_OR_expression
Rule 259   logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression
Rule 260   expression -> logical_inc_OR_expression_2
Rule 261   expression -> include_expression
Rule 262   expression -> include_once_expression
Rule 263   expression -> require_expression
Rule 264   expression -> require_once_expression
Rule 265   include_expression -> INCLUDE expression
Rule 266   include_once_expression -> INCLUDE_ONCE expression
Rule 267   require_expression -> REQUIRE expression
Rule 268   require_once_expression -> REQUIRE_ONCE expression
Rule 269   constant_expression -> expression
Rule 270   statement -> compound_statement
Rule 271   statement -> named_label_statement
Rule 272   statement -> expression_statement
Rule 273   statement -> selection_statement
Rule 274   statement -> iteration_statement
Rule 275   statement -> jump_statement
Rule 276   statement -> try_statement
Rule 277   statement -> declare_statement
Rule 278   statement -> echo_statement
Rule 279   statement -> unset_statement
Rule 280   statement -> const_declaration
Rule 281   statement -> function_definition
Rule 282   statement -> class_declaration
Rule 283   statement -> interface_declaration
Rule 284   statement -> trait_declaration
Rule 285   statement -> namespace_definition
Rule 286   statement -> namespace_use_declaration
Rule 287   statement -> global_declaration
Rule 288   statement -> function_static_declaration
Rule 289   compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC
Rule 290   compound_statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 291   statement_list -> statement
Rule 292   statement_list -> statement_list statement
Rule 293   named_label_statement -> name DOUBLE_POINT
Rule 294   expression_statement -> expression SEMICOLON
Rule 295   expression_statement -> SEMICOLON
Rule 296   selection_statement -> if_statement
Rule 297   selection_statement -> switch_statement
Rule 298   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
Rule 299   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
Rule 300   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
Rule 301   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 302   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
Rule 303   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
Rule 304   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
Rule 305   elseif_clauses_1 -> elseif_clause_1
Rule 306   elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1
Rule 307   elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 308   else_clause_1 -> ELSE statement
Rule 309   elseif_clauses_2 -> elseif_clause_2
Rule 310   elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2
Rule 311   elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
Rule 312   else_clause_2 -> ELSE DOUBLE_POINT statement_list
Rule 313   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
Rule 314   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 315   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
Rule 316   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 317   case_statements -> case_statement case_statements
Rule 318   case_statements -> case_statement
Rule 319   case_statements -> default_statement case_statements
Rule 320   case_statements -> default_statement
Rule 321   case_statement -> CASE expression case_default_label_terminator statement_list
Rule 322   case_statement -> CASE expression case_default_label_terminator
Rule 323   default_statement -> DEFAULT case_default_label_terminator statement_list
Rule 324   default_statement -> DEFAULT case_default_label_terminator
Rule 325   case_default_label_terminator -> DOUBLE_POINT
Rule 326   case_default_label_terminator -> SEMICOLON
Rule 327   iteration_statement -> while_statement
Rule 328   iteration_statement -> do_statement
Rule 329   iteration_statement -> for_statement
Rule 330   iteration_statement -> foreach_statement
Rule 331   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 332   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
Rule 333   do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 334   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 335   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 336   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 337   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 338   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 339   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 340   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 341   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 342   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 343   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 344   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 345   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 346   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 347   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 348   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 349   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 350   for_initializer -> for_expression_group
Rule 351   for_control -> for_expression_group
Rule 352   for_end_of_loop -> for_expression_group
Rule 353   for_expression_group -> expression
Rule 354   for_expression_group -> for_expression_group COLON expression
Rule 355   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
Rule 356   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
Rule 357   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 358   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 359   foreach_collection_name -> expression
Rule 360   foreach_key -> expression DOUBLE_ARROW
Rule 361   foreach_value -> AMPERSAND_opt expression
Rule 362   foreach_value -> AMPERSAND expression
Rule 363   foreach_value -> list_intrinsic
Rule 364   jump_statement -> goto_statement
Rule 365   jump_statement -> continue_statement
Rule 366   jump_statement -> break_statement
Rule 367   jump_statement -> return_statement
Rule 368   jump_statement -> throw_statement
Rule 369   goto_statement -> GOTO name SEMICOLON
Rule 370   continue_statement -> CONTINUE breakout_level SEMICOLON
Rule 371   continue_statement -> CONTINUE SEMICOLON
Rule 372   breakout_level -> INTEGER_LITERAL
Rule 373   breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
Rule 374   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 375   breakout_levelopt -> breakout_level
Rule 376   breakout_levelopt -> <empty>
Rule 377   breakout_level -> expression
Rule 378   return_statement -> RETURN expressionopt SEMICOLON
Rule 379   expressionopt -> expression
Rule 380   expressionopt -> <empty>
Rule 381   throw_statement -> THROW expression SEMICOLON
Rule 382   try_statement -> TRY compound_statement catch_clauses
Rule 383   try_statement -> TRY compound_statement finally_clause
Rule 384   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 385   catch_clauses -> catch_clause
Rule 386   catch_clauses -> catch_clauses catch_clause
Rule 387   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 388   catch_name_list -> qualified_name
Rule 389   catch_name_list -> catch_name_list
Rule 390   finally_clause -> FINALLY compound_statement
Rule 391   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 392   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 393   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 394   declare_directive -> TICKS EQUALS literal
Rule 395   declare_directive -> ENCODING EQUALS literal
Rule 396   declare_directive -> STRICT_TYPES EQUALS literal
Rule 397   echo_statement -> ECHO expression_list SEMICOLON
Rule 398   expression_list -> expression
Rule 399   expression_list -> expression_list expression
Rule 400   unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
Rule 401   unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
Rule 402   function_definition -> function_definition_header compound_statement
Rule 403   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
Rule 404   ampersandopt -> AMPERSAND
Rule 405   ampersandopt -> <empty>
Rule 406   parameter_declaration_list -> simple_parameter_declaration_list
Rule 407   parameter_declaration_list -> variadic_declaration_list
Rule 408   simple_parameter_declaration_list -> parameter_declaration
Rule 409   simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration
Rule 410   variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter
Rule 411   variadic_declaration_list -> variadic_parameter
Rule 412   parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
Rule 413   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE
Rule 414   return_type -> DOUBLE_POINT type_declaration
Rule 415   return_type -> DOUBLE_POINT VOID
Rule 416   type_declarationopt -> type_declaration
Rule 417   type_declarationopt -> <empty>
Rule 418   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 419   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 420   TERNARY_OPERATIONopt -> <empty>
Rule 421   base_type_declaration -> ARRAY
Rule 422   base_type_declaration -> CALLABLE
Rule 423   base_type_declaration -> ITERABLE
Rule 424   base_type_declaration -> scalar_type
Rule 425   base_type_declaration -> qualified_name
Rule 426   scalar_type -> BOOL
Rule 427   scalar_type -> FLOAT
Rule 428   scalar_type -> INT
Rule 429   scalar_type -> STRING
Rule 430   default_argument_specifieropt -> default_argument_specifier
Rule 431   default_argument_specifieropt -> <empty>
Rule 432   default_argument_specifier -> EQUAL constant_expression
Rule 433   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 434   class_modifieropt -> class_modifier
Rule 435   class_modifieropt -> <empty>
Rule 436   class_base_clauseopt -> class_base_clause
Rule 437   class_base_clauseopt -> <empty>
Rule 438   class_interface_clauseopt -> class_interface_clause
Rule 439   class_interface_clauseopt -> <empty>
Rule 440   class_member_declarationsopt -> class_member_declarations
Rule 441   class_member_declarationsopt -> <empty>
Rule 442   class_modifier -> ABSTRACT
Rule 443   class_modifier -> FINAL
Rule 444   class_base_clause -> EXTENDS qualified_name
Rule 445   class_interface_clause -> IMPLEMENTS qualified_name
Rule 446   class_interface_clause -> class_interface_clause qualified_name
Rule 447   class_member_declarations -> class_member_declaration
Rule 448   class_member_declarations -> class_member_declarations class_member_declaration
Rule 449   class_member_declaration -> class_const_declaration
Rule 450   class_member_declaration -> property_declaration
Rule 451   class_member_declaration -> method_declaration
Rule 452   class_member_declaration -> constructor_declaration
Rule 453   class_member_declaration -> destructor_declaration
Rule 454   class_member_declaration -> trait_use_clause
Rule 455   const_declaration -> CONST const_elements SEMICOLON
Rule 456   class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON
Rule 457   const_elements -> const_element
Rule 458   const_elements -> const_elements const_element
Rule 459   const_element -> name EQUAL constant_expression
Rule 460   property_declaration -> property_modifier property_elements SEMICOLON
Rule 461   property_modifier -> VAR
Rule 462   property_modifier -> visibility_modifier static_modifieropt
Rule 463   property_modifier -> static_modifier visibility_modifier_opt
Rule 464   static_modifieropt -> static_modifier
Rule 465   static_modifieropt -> <empty>
Rule 466   visibility_modifier -> PUBLIC
Rule 467   visibility_modifier -> PROTECTED
Rule 468   visibility_modifier -> PRIVATE
Rule 469   static_modifier -> STATIC
Rule 470   property_elements -> property_element
Rule 471   property_elements -> property_elements property_element
Rule 472   property_element -> VARIABLE property_initializeropt SEMICOLON
Rule 473   property_initializeropt -> property_initializer
Rule 474   property_initializeropt -> <empty>
Rule 475   property_initializer -> EQUAL constant_expression
Rule 476   method_declaration -> method_modifiersopt function_definition
Rule 477   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 478   method_modifiersopt -> method_modifiers
Rule 479   method_modifiersopt -> <empty>
Rule 480   method_modifiers -> method_modifier
Rule 481   method_modifiers -> method_modifiers method_modifier
Rule 482   method_modifier -> visibility_modifier
Rule 483   method_modifier -> static_modifier
Rule 484   method_modifier -> class_modifier
Rule 485   constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 486   destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 487   parameter_declaration_listopt -> parameter_declaration_list
Rule 488   parameter_declaration_listopt -> <empty>
Rule 489   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 490   interface_base_clauseopt -> interface_base_clause
Rule 491   interface_base_clauseopt -> <empty>
Rule 492   interface_member_declarationsopt -> interface_member_declarations
Rule 493   interface_member_declarationsopt -> <empty>
Rule 494   interface_base_clause -> EXTENDS qualified_name
Rule 495   interface_base_clause -> interface_base_clause qualified_name
Rule 496   interface_member_declarations -> interface_member_declaration
Rule 497   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 498   interface_member_declaration -> class_const_declaration
Rule 499   interface_member_declaration -> method_declaration
Rule 500   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 501   trait_member_declarationsopt -> trait_member_declarations
Rule 502   trait_member_declarationsopt -> <empty>
Rule 503   trait_member_declarations -> trait_member_declaration
Rule 504   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 505   trait_member_declaration -> property_declaration
Rule 506   trait_member_declaration -> method_declaration
Rule 507   trait_member_declaration -> constructor_declaration
Rule 508   trait_member_declaration -> destructor_declaration
Rule 509   trait_member_declaration -> trait_use_clauses
Rule 510   trait_use_clauses -> trait_use_clause
Rule 511   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 512   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 513   trait_name_list -> qualified_name
Rule 514   trait_name_list -> trait_name_list qualified_name
Rule 515   trait_use_specification -> SEMICOLON
Rule 516   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 517   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 518   trait_select_and_alias_clausesopt -> <empty>
Rule 519   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 520   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 521   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 522   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 523   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 524   trait_alias_as_clause -> name AS visibility_modifier_opt name
Rule 525   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 526   visibility_modifier_opt -> visibility_modifier
Rule 527   visibility_modifier_opt -> <empty>
Rule 528   nameopt -> name
Rule 529   nameopt -> <empty>
Rule 530   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 531   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 532   namespace_nameopt -> namespace_name
Rule 533   namespace_nameopt -> <empty>
Rule 534   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 535   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 536   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 537   namespace_function_or_constopt -> namespace_function_or_const
Rule 538   namespace_function_or_constopt -> <empty>
Rule 539   NS_SEPARATORopt -> NS_SEPARATOR
Rule 540   NS_SEPARATORopt -> <empty>
Rule 541   namespace_use_clauses -> namespace_use_clause
Rule 542   namespace_use_clauses -> namespace_use_clauses namespace_use_clause
Rule 543   namespace_use_clause -> qualified_name namespace_aliasing_clause_opt
Rule 544   namespace_aliasing_clause_opt -> namespace_aliasing_clause
Rule 545   qualified_name -> name
Rule 546   namespace_aliasing_clause -> AS name
Rule 547   namespace_function_or_const -> FUNCTION
Rule 548   namespace_function_or_const -> CONST
Rule 549   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 550   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1
Rule 551   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt
Rule 552   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 553   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2
Rule 554   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt
Rule 555   name -> STRING

Terminals, with rules where they appear

ABSTRACT             : 442
AMPERSAND            : 78 201 207 207 231 233 362 404
AND                  : 255
AND_EQUAL            : 244
ARRAY                : 113 421
ARROW                : 107 122 136 140 141
AS                   : 355 356 357 358 524 525 546
ASTERISK             : 179
AT                   : 171
ATTRIBUTE            : 
BACKTICK             : 146 146
BAD_CARACTER         : 
BITWISE_NOT          : 170
BITWISE_OR           : 205 209 209
BITWISE_XOR          : 203
BOOL                 : 426
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 374
CALLABLE             : 422
CASE                 : 321 322
CATCH                : 387
CLASS                : 92 93 433
CLONE                : 160
CLOSE_TAG            : 5
COALESCE             : 211
COALESCE_EQUAL       : 
COLON                : 90 118 120 222 225 226 226 227 229 354 400
COMMENT              : 
CONCAT               : 185
CONCAT_EQUAL         : 241
CONST                : 455 456 548
CONSTANT_ENCAPSED_STRING : 
CONSTRUCT            : 485
CONTINUE             : 370 371
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 391 392 393
DEFAULT              : 323 324
DESTRUCT             : 486
DIE                  : 69 70
DIVIDE               : 180
DIV_EQUAL            : 237
DNUMBER              : 59
DO                   : 333
DOC_COMMENT          : 
DOLLAR               : 36 37
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLEASTERISK       : 162
DOUBLELESS           : 143 145
DOUBLEPLUS           : 142 144
DOUBLE_ARROW         : 228 229 251 360
DOUBLE_COLON         : 108 109 110 149 150 151 152 523
DOUBLE_POINT         : 213 214 293 302 303 304 311 312 315 316 325 332 342 343 344 345 346 347 348 349 357 358 392 414 415
DQUOTATION_MARK      : 
DQ_CHAR_SEQUENCE     : 147
ECHO                 : 397
ELLIPSIS             : 135 413
ELSE                 : 308 312
ELSEIF               : 307 311
EMPTY                : 65
ENCODING             : 395
ENDDECLARE           : 392
ENDFOR               : 342 343 344 345 346 347 348 349
ENDFOREACH           : 357 358
ENDIF                : 302 303 304
ENDSWITCH            : 315 316
ENDWHILE             : 332
EQUAL                : 13 16 196 218 219 233 432 459 475
EQUALS               : 394 395 396
EVAL                 : 66
EXIT                 : 67 68
EXPONENT_DNUMBER     : 
EXTENDS              : 444 494
FINAL                : 443
FINALLY              : 390
FLOAT                : 427
FN                   : 
FOR                  : 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349
FOREACH              : 355 356 357 358
FUNCTION             : 75 403 485 486 547
GLOBAL               : 17
GOTO                 : 369
GREATER_THAN_OR_EQUAL : 193
IF                   : 298 299 300 301 302 303 304
IMPLEMENTS           : 445
INC                  : 
INCLUDE              : 265
INCLUDE_ONCE         : 266
INSTANCEOF           : 174
INSTEADOF            : 523
INT                  : 428
INTEGER_LITERAL      : 372
INTERFACE            : 489
ISSET                : 71
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 192
IS_IDENTICAL         : 198
IS_NOT_EQUAL         : 197
IS_NOT_IDENTICAL     : 199
IS_SMALLER_OR_EQUAL  : 191
ITERABLE             : 423
LEFT_CBRAC           : 37 92 93 105 106 114 125 126 139 289 290 313 314 433 489 500 516 535 536
LEFT_PARENTHESIS     : 34 39 43 65 66 68 70 71 75 86 89 90 92 113 127 128 129 130 140 141 150 151 172 220 298 299 300 301 302 303 304 307 311 313 314 315 316 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 355 356 357 358 373 387 391 392 393 400 401 403 485 486
LEFT_SQRBRAC         : 
LESS                 : 169 184
LESS_THAN            : 190
LIST                 : 220
LNUMBER              : 58
MINUS_EQUAL          : 240
MODULO               : 181
MOD_EQUAL            : 238
MORE_THAN            : 
MUL_EQUAL            : 236
NAME                 : 7 8 137 152
NAMESPACE            : 530 531
NEGATION             : 177
NEW                  : 89 90 91 92 93
NS_SEPARATOR         : 8 535 536 539
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 3
OPEN_TAG_WITH_ECHO   : 4
OR                   : 259
OR_EQUAL             : 246
PARENT               : 157
PLUS                 : 168 183
PLUS_EQUAL           : 239
POW                  : 
POW_EQUAL            : 235
PRINT                : 253
PRIVATE              : 468
PROTECTED            : 467
PUBLIC               : 466
REQUIRE              : 267
REQUIRE_ONCE         : 268
RETURN               : 378
RIGHT_CBRAC          : 37 105 114 125 289 290 313 314 433 489 500 516 535 536
RIGHT_PARENTHESIS    : 34 39 43 65 66 68 70 71 75 86 89 90 92 92 93 106 113 126 127 128 129 130 139 140 141 150 151 172 220 298 299 300 301 302 303 304 307 311 313 314 315 316 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 355 356 357 358 373 387 391 392 393 400 401 403 485 486
RIGHT_SQRBRAC        : 
SELF                 : 156
SEMICOLON            : 9 17 294 295 302 303 304 315 316 326 332 333 334 334 335 335 336 336 337 337 338 338 339 339 340 340 341 341 342 342 342 343 343 343 344 344 344 345 345 345 346 346 346 347 347 347 348 348 348 349 349 349 357 358 369 370 371 374 378 381 392 393 397 400 401 455 456 460 472 477 515 521 522 530 534 535 536
SL                   : 187
SL_EQUAL             : 242
SPACESHIP            : 194
SR                   : 188
SR_EQUAL             : 243
START_HEREDOC        : 
STATIC               : 9 76 158 469
STRICT_TYPES         : 396
STRING               : 60 429 555
SWITCH               : 313 314 315 316
TERNARY_OPERATION    : 213 214 419
THROW                : 381
TICKS                : 394
TRAIT                : 500
TRY                  : 382 383 384
UNSET                : 400 401
USE                  : 86 512 534 535 536
VAR                  : 461
VARIABLE             : 12 35 87 88 387 412 413 472
VOID                 : 415
WHILE                : 331 332 333
WHITESPACE           : 
XOR                  : 257
XOR_EQUAL            : 245
YIELD                : 249 250 251
YIELD_FROM           : 247
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 75 87 88 121 122 361 485 486
NS_SEPARATORopt      : 535 536
TERNARY_OPERATIONopt : 418
additive_expression  : 183 184 185 186 187 188
ampersandopt         : 403 412 413
anonymous_function_creation_expression : 26
anonymous_function_use_clause : 82
anonymous_function_use_clause_opt : 75
argument_expression  : 131 132
argument_expression_list : 90 94 128 130 132 141 151
argument_expression_list_opt : 89 92 127 129 140 150
array_creation_expression : 24 40 44
array_element_initializer : 119 120 120
array_initializer    : 115
array_initializer_list : 117 118
array_initializer_opt : 113 114
assignment_expression : 218 219 234 247
base_type_declaration : 418
bitwise_AND_expression : 201 202 203
bitwise_exc_OR_expression : 203 204 205
bitwise_inc_OR_expression : 205 206 207
break_statement      : 366
breakout_level       : 370 373 375
breakout_levelopt    : 374
byref_assignment_expression : 32
callable_expression  : 129 130
callable_variable    : 42 51
case_default_label_terminator : 321 322 323 324
case_statement       : 317 318
case_statements      : 313 315 317 319
cast_expression      : 166
catch_clause         : 385 386
catch_clauses        : 382 384 386
catch_name_list      : 387 389
class_base_clause    : 96 436
class_base_clause_opt : 92 93
class_base_clauseopt : 433
class_const_declaration : 449 498
class_constant_access_expression : 21
class_declaration    : 282
class_interface_clause : 98 438 446
class_interface_clause_opt : 92 93
class_interface_clauseopt : 433
class_member_declaration : 447 448
class_member_declarations : 100 440 448
class_member_declarations_opt : 92 93
class_member_declarationsopt : 433
class_modifier       : 434 484
class_modifieropt    : 433
class_type_designator : 89 90 91 174
clone_expression     : 161 162
coalesce_expression  : 211 212 213 214
compound_assignment_expression : 217
compound_assignment_operator : 234
compound_statement   : 75 270 382 383 384 387 390 402 485 486 531
conditional_expression : 213 214 215
const_declaration    : 280
const_element        : 457 458
const_elements       : 455 456 458
constant_access_expression : 22
constant_expression  : 13 16 432 459 475
constructor_declaration : 452 507
continue_statement   : 365
declare_directive    : 391 392 393
declare_statement    : 277
default_argument_specifier : 430
default_argument_specifieropt : 412
default_statement    : 319 320
dereferencable_expression : 125 126 136 140 141 155
destructor_declaration : 453 508
do_statement         : 328
dq_char_sequence_opt : 146
echo_statement       : 278
element_key          : 122
element_value        : 121 122
else_clause_1        : 298 300
else_clause_2        : 302 304
elseif_clause_1      : 305 306
elseif_clause_2      : 309 310
elseif_clauses_1     : 298 299 306
elseif_clauses_2     : 302 303 310
empty_intrinsic      : 61
end_tag              : 
equality_expression  : 196 197 198 199 200 201
error_control_expression : 165
eval_intrinsic       : 62
exit_intrinsic       : 63
exponentiation_expression : 162 163
expression           : 34 37 39 43 65 66 106 111 123 124 126 134 135 139 213 228 229 265 266 267 268 269 294 298 299 300 301 302 303 304 307 311 313 314 315 316 321 322 331 332 333 353 354 359 360 361 362 377 379 381 398 399
expression_list      : 397 399
expression_opt       : 68 70 105 125
expression_statement : 272
expressionopt        : 378
finally_clause       : 383 384
floating_literal     : 56
for_control          : 334 335 338 339 342 343 346 347
for_end_of_loop      : 334 336 338 340 342 344 346 348
for_expression_group : 350 351 352 354
for_initializer      : 334 335 336 337 342 343 344 345
for_statement        : 329
foreach_collection_name : 355 356 357 358
foreach_key          : 355 357
foreach_statement    : 330
foreach_value        : 355 356 357 358
function_call_expression : 50
function_definition  : 281 476
function_definition_header : 402 477
function_static_declaration : 288
function_static_initializer : 14
function_static_initializer_opt : 12
global_declaration   : 287
goto_statement       : 364
if_statement         : 296
include_expression   : 261
include_once_expression : 262
instanceof_expression : 175 176 177
instanceof_subj      : 174
integer_literal      : 55
interface_base_clause : 490 495
interface_base_clauseopt : 489
interface_declaration : 283
interface_member_declaration : 496 497
interface_member_declarations : 492 497
interface_member_declarationsopt : 489
intrinsic            : 25
isset_intrinsic      : 64
iteration_statement  : 274
jump_statement       : 275
keyed_list_expression_list : 222 223 229
list_expression_list : 220
list_intrinsic       : 219 230 363
list_or_variable     : 224 226 227 228 229
literal              : 23 394 395 396
logical_AND_expression_1 : 207 208 209
logical_AND_expression_2 : 255 256 257
logical_exc_OR_expression : 257 258 259
logical_inc_OR_expression_1 : 209 210 211
logical_inc_OR_expression_2 : 259 260
logical_not_expression : 178 179 180 181
member_access_expression : 53
member_call_expression : 48
member_name          : 107 136 140 141 150 151
method_declaration   : 451 499 506
method_modifier      : 480 481
method_modifiers     : 477 478 481 485 486
method_modifiersopt  : 476
multiplicative_expression : 179 180 181 182 183 184 185
name                 : 293 369 403 433 459 485 486 489 500 523 524 524 525 528 545 546
named_label_statement : 271
nameopt              : 525
namespace_aliasing_clause : 544
namespace_aliasing_clause_opt : 543 551 554
namespace_definition : 285
namespace_function_or_const : 535 537
namespace_function_or_constopt : 534 554
namespace_name       : 8 530 532 535 536 551 554
namespace_nameopt    : 531
namespace_use_clause : 541 542
namespace_use_clauses : 534 542
namespace_use_declaration : 286
namespace_use_group_clause_1 : 549 550
namespace_use_group_clause_2 : 552 553
namespace_use_group_clauses_1 : 535 550
namespace_use_group_clauses_2 : 536 553
new_variable         : 103 105 106 107 110
object_creation_expression : 27
parameter_declaration : 408 409
parameter_declaration_list : 80 409 487
parameter_declaration_list_opt : 75
parameter_declaration_listopt : 403 485
postfix_decrement_expression : 29
postfix_increment_expression : 28
prefix_decrement_expression : 31
prefix_increment_expression : 30
primary_expression   : 159 160
print_expression     : 253 254
property_declaration : 450 505
property_element     : 470 471
property_elements    : 460 471
property_initializer : 473
property_initializeropt : 472
property_modifier    : 460
qualified_name       : 54 102 108 127 128 154 388 425 444 445 446 494 495 513 514 523 543
relational_expression : 190 191 192 193 194 195 196 197 198 199
relative_scope       : 109 153
require_expression   : 263
require_once_expression : 264
return_statement     : 367
return_type          : 84
return_type_opt      : 75 403
scalar_type          : 424
scope_resolution_qualifier : 149 150 151 152
scoped_call_expression : 49
scoped_property_access_expression : 52
selection_statement  : 273
shell_command_expression : 33
shift_expression     : 187 188 189 190 191 192 193 194
simple_assignment_expression : 216
simple_parameter_declaration_list : 406 410
simple_variable      : 18 19 36 46 104 108 109 110 138 149
start_tag            : 
statement            : 291 292 298 299 300 301 307 308 331 333 334 335 336 337 338 339 340 341 355 356 391
statement_list       : 1 289 292 302 303 304 311 312 321 323 332 342 343 344 345 346 347 348 349 357 358 392
statement_list_opt   : 0
static_modifier      : 463 464 483
static_modifieropt   : 462
static_opt           : 75
static_variable_declaration : 10 11
static_variable_name_list : 9 11
string_literal       : 41 45 57
subscript_expression : 47
switch_statement     : 297
throw_statement      : 368
trait_alias_as_clause : 522
trait_declaration    : 284
trait_member_declaration : 503 504
trait_member_declarations : 501 504
trait_member_declarationsopt : 500
trait_name_list      : 512 514 523
trait_select_and_alias_clause : 519 520
trait_select_and_alias_clauses : 517 520
trait_select_and_alias_clausesopt : 516
trait_select_insteadof_clause : 521
trait_use_clause     : 454 510 511
trait_use_clauses    : 509 511
trait_use_specification : 512
try_statement        : 276
type_declaration     : 414 416
type_declarationopt  : 412 413
unary_expression     : 167 171 172 173
unary_op_expression  : 164
unary_operator       : 167
unkeyed_list_expression_list : 221 226 227
unset_statement      : 279
use_variable_name_list : 86 88
variable             : 20 38 73 74 142 143 144 145 218 231 232 233 233 234
variable_list        : 72 74 400 401
variable_list_opt    : 71
variable_name_list   : 17 19
variadic_declaration_list : 407
variadic_parameter   : 410 411
variadic_unpacking   : 133
visibility_modifier  : 462 482 525 526
visibility_modifier_opt : 456 463 524
while_statement      : 327
yield_expression     : 250 251 252 255
yield_from_expression : 248 251

Parsing method: LALR

state 0

    (0) S' -> . statement_list_opt
    (1) statement_list_opt -> . statement_list
    (2) statement_list_opt -> .
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    $end            reduce using rule 2 (statement_list_opt -> .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list_opt             shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 1

    (0) S' -> statement_list_opt .



state 2

    (1) statement_list_opt -> statement_list .
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    $end            reduce using rule 1 (statement_list_opt -> statement_list .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 3

    (291) statement_list -> statement .

    LEFT_CBRAC      reduce using rule 291 (statement_list -> statement .)
    SEMICOLON       reduce using rule 291 (statement_list -> statement .)
    TRY             reduce using rule 291 (statement_list -> statement .)
    DECLARE         reduce using rule 291 (statement_list -> statement .)
    ECHO            reduce using rule 291 (statement_list -> statement .)
    UNSET           reduce using rule 291 (statement_list -> statement .)
    CONST           reduce using rule 291 (statement_list -> statement .)
    INTERFACE       reduce using rule 291 (statement_list -> statement .)
    TRAIT           reduce using rule 291 (statement_list -> statement .)
    NAMESPACE       reduce using rule 291 (statement_list -> statement .)
    USE             reduce using rule 291 (statement_list -> statement .)
    GLOBAL          reduce using rule 291 (statement_list -> statement .)
    STATIC          reduce using rule 291 (statement_list -> statement .)
    STRING          reduce using rule 291 (statement_list -> statement .)
    IF              reduce using rule 291 (statement_list -> statement .)
    SWITCH          reduce using rule 291 (statement_list -> statement .)
    WHILE           reduce using rule 291 (statement_list -> statement .)
    DO              reduce using rule 291 (statement_list -> statement .)
    FOR             reduce using rule 291 (statement_list -> statement .)
    FOREACH         reduce using rule 291 (statement_list -> statement .)
    GOTO            reduce using rule 291 (statement_list -> statement .)
    CONTINUE        reduce using rule 291 (statement_list -> statement .)
    BREAK           reduce using rule 291 (statement_list -> statement .)
    RETURN          reduce using rule 291 (statement_list -> statement .)
    THROW           reduce using rule 291 (statement_list -> statement .)
    FUNCTION        reduce using rule 291 (statement_list -> statement .)
    INCLUDE         reduce using rule 291 (statement_list -> statement .)
    INCLUDE_ONCE    reduce using rule 291 (statement_list -> statement .)
    REQUIRE         reduce using rule 291 (statement_list -> statement .)
    REQUIRE_ONCE    reduce using rule 291 (statement_list -> statement .)
    ABSTRACT        reduce using rule 291 (statement_list -> statement .)
    FINAL           reduce using rule 291 (statement_list -> statement .)
    PRINT           reduce using rule 291 (statement_list -> statement .)
    YIELD           reduce using rule 291 (statement_list -> statement .)
    YIELD_FROM      reduce using rule 291 (statement_list -> statement .)
    CLASS           reduce using rule 291 (statement_list -> statement .)
    $end            reduce using rule 291 (statement_list -> statement .)
    RIGHT_CBRAC     reduce using rule 291 (statement_list -> statement .)
    ENDDECLARE      reduce using rule 291 (statement_list -> statement .)
    ELSE            reduce using rule 291 (statement_list -> statement .)
    ELSEIF          reduce using rule 291 (statement_list -> statement .)
    ENDWHILE        reduce using rule 291 (statement_list -> statement .)
    ENDFOR          reduce using rule 291 (statement_list -> statement .)
    CASE            reduce using rule 291 (statement_list -> statement .)
    DEFAULT         reduce using rule 291 (statement_list -> statement .)
    ENDSWITCH       reduce using rule 291 (statement_list -> statement .)
    ENDFOREACH      reduce using rule 291 (statement_list -> statement .)
    ENDIF           reduce using rule 291 (statement_list -> statement .)


state 4

    (270) statement -> compound_statement .

    LEFT_CBRAC      reduce using rule 270 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 270 (statement -> compound_statement .)
    TRY             reduce using rule 270 (statement -> compound_statement .)
    DECLARE         reduce using rule 270 (statement -> compound_statement .)
    ECHO            reduce using rule 270 (statement -> compound_statement .)
    UNSET           reduce using rule 270 (statement -> compound_statement .)
    CONST           reduce using rule 270 (statement -> compound_statement .)
    INTERFACE       reduce using rule 270 (statement -> compound_statement .)
    TRAIT           reduce using rule 270 (statement -> compound_statement .)
    NAMESPACE       reduce using rule 270 (statement -> compound_statement .)
    USE             reduce using rule 270 (statement -> compound_statement .)
    GLOBAL          reduce using rule 270 (statement -> compound_statement .)
    STATIC          reduce using rule 270 (statement -> compound_statement .)
    STRING          reduce using rule 270 (statement -> compound_statement .)
    IF              reduce using rule 270 (statement -> compound_statement .)
    SWITCH          reduce using rule 270 (statement -> compound_statement .)
    WHILE           reduce using rule 270 (statement -> compound_statement .)
    DO              reduce using rule 270 (statement -> compound_statement .)
    FOR             reduce using rule 270 (statement -> compound_statement .)
    FOREACH         reduce using rule 270 (statement -> compound_statement .)
    GOTO            reduce using rule 270 (statement -> compound_statement .)
    CONTINUE        reduce using rule 270 (statement -> compound_statement .)
    BREAK           reduce using rule 270 (statement -> compound_statement .)
    RETURN          reduce using rule 270 (statement -> compound_statement .)
    THROW           reduce using rule 270 (statement -> compound_statement .)
    FUNCTION        reduce using rule 270 (statement -> compound_statement .)
    INCLUDE         reduce using rule 270 (statement -> compound_statement .)
    INCLUDE_ONCE    reduce using rule 270 (statement -> compound_statement .)
    REQUIRE         reduce using rule 270 (statement -> compound_statement .)
    REQUIRE_ONCE    reduce using rule 270 (statement -> compound_statement .)
    ABSTRACT        reduce using rule 270 (statement -> compound_statement .)
    FINAL           reduce using rule 270 (statement -> compound_statement .)
    PRINT           reduce using rule 270 (statement -> compound_statement .)
    YIELD           reduce using rule 270 (statement -> compound_statement .)
    YIELD_FROM      reduce using rule 270 (statement -> compound_statement .)
    CLASS           reduce using rule 270 (statement -> compound_statement .)
    $end            reduce using rule 270 (statement -> compound_statement .)
    RIGHT_CBRAC     reduce using rule 270 (statement -> compound_statement .)
    ELSE            reduce using rule 270 (statement -> compound_statement .)
    ELSEIF          reduce using rule 270 (statement -> compound_statement .)
    ENDDECLARE      reduce using rule 270 (statement -> compound_statement .)
    ENDWHILE        reduce using rule 270 (statement -> compound_statement .)
    ENDFOR          reduce using rule 270 (statement -> compound_statement .)
    CASE            reduce using rule 270 (statement -> compound_statement .)
    DEFAULT         reduce using rule 270 (statement -> compound_statement .)
    ENDSWITCH       reduce using rule 270 (statement -> compound_statement .)
    ENDFOREACH      reduce using rule 270 (statement -> compound_statement .)
    ENDIF           reduce using rule 270 (statement -> compound_statement .)


state 5

    (271) statement -> named_label_statement .

    LEFT_CBRAC      reduce using rule 271 (statement -> named_label_statement .)
    SEMICOLON       reduce using rule 271 (statement -> named_label_statement .)
    TRY             reduce using rule 271 (statement -> named_label_statement .)
    DECLARE         reduce using rule 271 (statement -> named_label_statement .)
    ECHO            reduce using rule 271 (statement -> named_label_statement .)
    UNSET           reduce using rule 271 (statement -> named_label_statement .)
    CONST           reduce using rule 271 (statement -> named_label_statement .)
    INTERFACE       reduce using rule 271 (statement -> named_label_statement .)
    TRAIT           reduce using rule 271 (statement -> named_label_statement .)
    NAMESPACE       reduce using rule 271 (statement -> named_label_statement .)
    USE             reduce using rule 271 (statement -> named_label_statement .)
    GLOBAL          reduce using rule 271 (statement -> named_label_statement .)
    STATIC          reduce using rule 271 (statement -> named_label_statement .)
    STRING          reduce using rule 271 (statement -> named_label_statement .)
    IF              reduce using rule 271 (statement -> named_label_statement .)
    SWITCH          reduce using rule 271 (statement -> named_label_statement .)
    WHILE           reduce using rule 271 (statement -> named_label_statement .)
    DO              reduce using rule 271 (statement -> named_label_statement .)
    FOR             reduce using rule 271 (statement -> named_label_statement .)
    FOREACH         reduce using rule 271 (statement -> named_label_statement .)
    GOTO            reduce using rule 271 (statement -> named_label_statement .)
    CONTINUE        reduce using rule 271 (statement -> named_label_statement .)
    BREAK           reduce using rule 271 (statement -> named_label_statement .)
    RETURN          reduce using rule 271 (statement -> named_label_statement .)
    THROW           reduce using rule 271 (statement -> named_label_statement .)
    FUNCTION        reduce using rule 271 (statement -> named_label_statement .)
    INCLUDE         reduce using rule 271 (statement -> named_label_statement .)
    INCLUDE_ONCE    reduce using rule 271 (statement -> named_label_statement .)
    REQUIRE         reduce using rule 271 (statement -> named_label_statement .)
    REQUIRE_ONCE    reduce using rule 271 (statement -> named_label_statement .)
    ABSTRACT        reduce using rule 271 (statement -> named_label_statement .)
    FINAL           reduce using rule 271 (statement -> named_label_statement .)
    PRINT           reduce using rule 271 (statement -> named_label_statement .)
    YIELD           reduce using rule 271 (statement -> named_label_statement .)
    YIELD_FROM      reduce using rule 271 (statement -> named_label_statement .)
    CLASS           reduce using rule 271 (statement -> named_label_statement .)
    $end            reduce using rule 271 (statement -> named_label_statement .)
    RIGHT_CBRAC     reduce using rule 271 (statement -> named_label_statement .)
    ELSE            reduce using rule 271 (statement -> named_label_statement .)
    ELSEIF          reduce using rule 271 (statement -> named_label_statement .)
    ENDDECLARE      reduce using rule 271 (statement -> named_label_statement .)
    ENDWHILE        reduce using rule 271 (statement -> named_label_statement .)
    ENDFOR          reduce using rule 271 (statement -> named_label_statement .)
    CASE            reduce using rule 271 (statement -> named_label_statement .)
    DEFAULT         reduce using rule 271 (statement -> named_label_statement .)
    ENDSWITCH       reduce using rule 271 (statement -> named_label_statement .)
    ENDFOREACH      reduce using rule 271 (statement -> named_label_statement .)
    ENDIF           reduce using rule 271 (statement -> named_label_statement .)


state 6

    (272) statement -> expression_statement .

    LEFT_CBRAC      reduce using rule 272 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 272 (statement -> expression_statement .)
    TRY             reduce using rule 272 (statement -> expression_statement .)
    DECLARE         reduce using rule 272 (statement -> expression_statement .)
    ECHO            reduce using rule 272 (statement -> expression_statement .)
    UNSET           reduce using rule 272 (statement -> expression_statement .)
    CONST           reduce using rule 272 (statement -> expression_statement .)
    INTERFACE       reduce using rule 272 (statement -> expression_statement .)
    TRAIT           reduce using rule 272 (statement -> expression_statement .)
    NAMESPACE       reduce using rule 272 (statement -> expression_statement .)
    USE             reduce using rule 272 (statement -> expression_statement .)
    GLOBAL          reduce using rule 272 (statement -> expression_statement .)
    STATIC          reduce using rule 272 (statement -> expression_statement .)
    STRING          reduce using rule 272 (statement -> expression_statement .)
    IF              reduce using rule 272 (statement -> expression_statement .)
    SWITCH          reduce using rule 272 (statement -> expression_statement .)
    WHILE           reduce using rule 272 (statement -> expression_statement .)
    DO              reduce using rule 272 (statement -> expression_statement .)
    FOR             reduce using rule 272 (statement -> expression_statement .)
    FOREACH         reduce using rule 272 (statement -> expression_statement .)
    GOTO            reduce using rule 272 (statement -> expression_statement .)
    CONTINUE        reduce using rule 272 (statement -> expression_statement .)
    BREAK           reduce using rule 272 (statement -> expression_statement .)
    RETURN          reduce using rule 272 (statement -> expression_statement .)
    THROW           reduce using rule 272 (statement -> expression_statement .)
    FUNCTION        reduce using rule 272 (statement -> expression_statement .)
    INCLUDE         reduce using rule 272 (statement -> expression_statement .)
    INCLUDE_ONCE    reduce using rule 272 (statement -> expression_statement .)
    REQUIRE         reduce using rule 272 (statement -> expression_statement .)
    REQUIRE_ONCE    reduce using rule 272 (statement -> expression_statement .)
    ABSTRACT        reduce using rule 272 (statement -> expression_statement .)
    FINAL           reduce using rule 272 (statement -> expression_statement .)
    PRINT           reduce using rule 272 (statement -> expression_statement .)
    YIELD           reduce using rule 272 (statement -> expression_statement .)
    YIELD_FROM      reduce using rule 272 (statement -> expression_statement .)
    CLASS           reduce using rule 272 (statement -> expression_statement .)
    $end            reduce using rule 272 (statement -> expression_statement .)
    RIGHT_CBRAC     reduce using rule 272 (statement -> expression_statement .)
    ELSE            reduce using rule 272 (statement -> expression_statement .)
    ELSEIF          reduce using rule 272 (statement -> expression_statement .)
    ENDDECLARE      reduce using rule 272 (statement -> expression_statement .)
    ENDWHILE        reduce using rule 272 (statement -> expression_statement .)
    ENDFOR          reduce using rule 272 (statement -> expression_statement .)
    CASE            reduce using rule 272 (statement -> expression_statement .)
    DEFAULT         reduce using rule 272 (statement -> expression_statement .)
    ENDSWITCH       reduce using rule 272 (statement -> expression_statement .)
    ENDFOREACH      reduce using rule 272 (statement -> expression_statement .)
    ENDIF           reduce using rule 272 (statement -> expression_statement .)


state 7

    (273) statement -> selection_statement .

    LEFT_CBRAC      reduce using rule 273 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 273 (statement -> selection_statement .)
    TRY             reduce using rule 273 (statement -> selection_statement .)
    DECLARE         reduce using rule 273 (statement -> selection_statement .)
    ECHO            reduce using rule 273 (statement -> selection_statement .)
    UNSET           reduce using rule 273 (statement -> selection_statement .)
    CONST           reduce using rule 273 (statement -> selection_statement .)
    INTERFACE       reduce using rule 273 (statement -> selection_statement .)
    TRAIT           reduce using rule 273 (statement -> selection_statement .)
    NAMESPACE       reduce using rule 273 (statement -> selection_statement .)
    USE             reduce using rule 273 (statement -> selection_statement .)
    GLOBAL          reduce using rule 273 (statement -> selection_statement .)
    STATIC          reduce using rule 273 (statement -> selection_statement .)
    STRING          reduce using rule 273 (statement -> selection_statement .)
    IF              reduce using rule 273 (statement -> selection_statement .)
    SWITCH          reduce using rule 273 (statement -> selection_statement .)
    WHILE           reduce using rule 273 (statement -> selection_statement .)
    DO              reduce using rule 273 (statement -> selection_statement .)
    FOR             reduce using rule 273 (statement -> selection_statement .)
    FOREACH         reduce using rule 273 (statement -> selection_statement .)
    GOTO            reduce using rule 273 (statement -> selection_statement .)
    CONTINUE        reduce using rule 273 (statement -> selection_statement .)
    BREAK           reduce using rule 273 (statement -> selection_statement .)
    RETURN          reduce using rule 273 (statement -> selection_statement .)
    THROW           reduce using rule 273 (statement -> selection_statement .)
    FUNCTION        reduce using rule 273 (statement -> selection_statement .)
    INCLUDE         reduce using rule 273 (statement -> selection_statement .)
    INCLUDE_ONCE    reduce using rule 273 (statement -> selection_statement .)
    REQUIRE         reduce using rule 273 (statement -> selection_statement .)
    REQUIRE_ONCE    reduce using rule 273 (statement -> selection_statement .)
    ABSTRACT        reduce using rule 273 (statement -> selection_statement .)
    FINAL           reduce using rule 273 (statement -> selection_statement .)
    PRINT           reduce using rule 273 (statement -> selection_statement .)
    YIELD           reduce using rule 273 (statement -> selection_statement .)
    YIELD_FROM      reduce using rule 273 (statement -> selection_statement .)
    CLASS           reduce using rule 273 (statement -> selection_statement .)
    $end            reduce using rule 273 (statement -> selection_statement .)
    RIGHT_CBRAC     reduce using rule 273 (statement -> selection_statement .)
    ELSE            reduce using rule 273 (statement -> selection_statement .)
    ELSEIF          reduce using rule 273 (statement -> selection_statement .)
    ENDDECLARE      reduce using rule 273 (statement -> selection_statement .)
    ENDWHILE        reduce using rule 273 (statement -> selection_statement .)
    ENDFOR          reduce using rule 273 (statement -> selection_statement .)
    CASE            reduce using rule 273 (statement -> selection_statement .)
    DEFAULT         reduce using rule 273 (statement -> selection_statement .)
    ENDSWITCH       reduce using rule 273 (statement -> selection_statement .)
    ENDFOREACH      reduce using rule 273 (statement -> selection_statement .)
    ENDIF           reduce using rule 273 (statement -> selection_statement .)


state 8

    (274) statement -> iteration_statement .

    LEFT_CBRAC      reduce using rule 274 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 274 (statement -> iteration_statement .)
    TRY             reduce using rule 274 (statement -> iteration_statement .)
    DECLARE         reduce using rule 274 (statement -> iteration_statement .)
    ECHO            reduce using rule 274 (statement -> iteration_statement .)
    UNSET           reduce using rule 274 (statement -> iteration_statement .)
    CONST           reduce using rule 274 (statement -> iteration_statement .)
    INTERFACE       reduce using rule 274 (statement -> iteration_statement .)
    TRAIT           reduce using rule 274 (statement -> iteration_statement .)
    NAMESPACE       reduce using rule 274 (statement -> iteration_statement .)
    USE             reduce using rule 274 (statement -> iteration_statement .)
    GLOBAL          reduce using rule 274 (statement -> iteration_statement .)
    STATIC          reduce using rule 274 (statement -> iteration_statement .)
    STRING          reduce using rule 274 (statement -> iteration_statement .)
    IF              reduce using rule 274 (statement -> iteration_statement .)
    SWITCH          reduce using rule 274 (statement -> iteration_statement .)
    WHILE           reduce using rule 274 (statement -> iteration_statement .)
    DO              reduce using rule 274 (statement -> iteration_statement .)
    FOR             reduce using rule 274 (statement -> iteration_statement .)
    FOREACH         reduce using rule 274 (statement -> iteration_statement .)
    GOTO            reduce using rule 274 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 274 (statement -> iteration_statement .)
    BREAK           reduce using rule 274 (statement -> iteration_statement .)
    RETURN          reduce using rule 274 (statement -> iteration_statement .)
    THROW           reduce using rule 274 (statement -> iteration_statement .)
    FUNCTION        reduce using rule 274 (statement -> iteration_statement .)
    INCLUDE         reduce using rule 274 (statement -> iteration_statement .)
    INCLUDE_ONCE    reduce using rule 274 (statement -> iteration_statement .)
    REQUIRE         reduce using rule 274 (statement -> iteration_statement .)
    REQUIRE_ONCE    reduce using rule 274 (statement -> iteration_statement .)
    ABSTRACT        reduce using rule 274 (statement -> iteration_statement .)
    FINAL           reduce using rule 274 (statement -> iteration_statement .)
    PRINT           reduce using rule 274 (statement -> iteration_statement .)
    YIELD           reduce using rule 274 (statement -> iteration_statement .)
    YIELD_FROM      reduce using rule 274 (statement -> iteration_statement .)
    CLASS           reduce using rule 274 (statement -> iteration_statement .)
    $end            reduce using rule 274 (statement -> iteration_statement .)
    RIGHT_CBRAC     reduce using rule 274 (statement -> iteration_statement .)
    ELSE            reduce using rule 274 (statement -> iteration_statement .)
    ELSEIF          reduce using rule 274 (statement -> iteration_statement .)
    ENDDECLARE      reduce using rule 274 (statement -> iteration_statement .)
    ENDWHILE        reduce using rule 274 (statement -> iteration_statement .)
    ENDFOR          reduce using rule 274 (statement -> iteration_statement .)
    CASE            reduce using rule 274 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 274 (statement -> iteration_statement .)
    ENDSWITCH       reduce using rule 274 (statement -> iteration_statement .)
    ENDFOREACH      reduce using rule 274 (statement -> iteration_statement .)
    ENDIF           reduce using rule 274 (statement -> iteration_statement .)


state 9

    (275) statement -> jump_statement .

    LEFT_CBRAC      reduce using rule 275 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 275 (statement -> jump_statement .)
    TRY             reduce using rule 275 (statement -> jump_statement .)
    DECLARE         reduce using rule 275 (statement -> jump_statement .)
    ECHO            reduce using rule 275 (statement -> jump_statement .)
    UNSET           reduce using rule 275 (statement -> jump_statement .)
    CONST           reduce using rule 275 (statement -> jump_statement .)
    INTERFACE       reduce using rule 275 (statement -> jump_statement .)
    TRAIT           reduce using rule 275 (statement -> jump_statement .)
    NAMESPACE       reduce using rule 275 (statement -> jump_statement .)
    USE             reduce using rule 275 (statement -> jump_statement .)
    GLOBAL          reduce using rule 275 (statement -> jump_statement .)
    STATIC          reduce using rule 275 (statement -> jump_statement .)
    STRING          reduce using rule 275 (statement -> jump_statement .)
    IF              reduce using rule 275 (statement -> jump_statement .)
    SWITCH          reduce using rule 275 (statement -> jump_statement .)
    WHILE           reduce using rule 275 (statement -> jump_statement .)
    DO              reduce using rule 275 (statement -> jump_statement .)
    FOR             reduce using rule 275 (statement -> jump_statement .)
    FOREACH         reduce using rule 275 (statement -> jump_statement .)
    GOTO            reduce using rule 275 (statement -> jump_statement .)
    CONTINUE        reduce using rule 275 (statement -> jump_statement .)
    BREAK           reduce using rule 275 (statement -> jump_statement .)
    RETURN          reduce using rule 275 (statement -> jump_statement .)
    THROW           reduce using rule 275 (statement -> jump_statement .)
    FUNCTION        reduce using rule 275 (statement -> jump_statement .)
    INCLUDE         reduce using rule 275 (statement -> jump_statement .)
    INCLUDE_ONCE    reduce using rule 275 (statement -> jump_statement .)
    REQUIRE         reduce using rule 275 (statement -> jump_statement .)
    REQUIRE_ONCE    reduce using rule 275 (statement -> jump_statement .)
    ABSTRACT        reduce using rule 275 (statement -> jump_statement .)
    FINAL           reduce using rule 275 (statement -> jump_statement .)
    PRINT           reduce using rule 275 (statement -> jump_statement .)
    YIELD           reduce using rule 275 (statement -> jump_statement .)
    YIELD_FROM      reduce using rule 275 (statement -> jump_statement .)
    CLASS           reduce using rule 275 (statement -> jump_statement .)
    $end            reduce using rule 275 (statement -> jump_statement .)
    RIGHT_CBRAC     reduce using rule 275 (statement -> jump_statement .)
    ELSE            reduce using rule 275 (statement -> jump_statement .)
    ELSEIF          reduce using rule 275 (statement -> jump_statement .)
    ENDDECLARE      reduce using rule 275 (statement -> jump_statement .)
    ENDWHILE        reduce using rule 275 (statement -> jump_statement .)
    ENDFOR          reduce using rule 275 (statement -> jump_statement .)
    CASE            reduce using rule 275 (statement -> jump_statement .)
    DEFAULT         reduce using rule 275 (statement -> jump_statement .)
    ENDSWITCH       reduce using rule 275 (statement -> jump_statement .)
    ENDFOREACH      reduce using rule 275 (statement -> jump_statement .)
    ENDIF           reduce using rule 275 (statement -> jump_statement .)


state 10

    (276) statement -> try_statement .

    LEFT_CBRAC      reduce using rule 276 (statement -> try_statement .)
    SEMICOLON       reduce using rule 276 (statement -> try_statement .)
    TRY             reduce using rule 276 (statement -> try_statement .)
    DECLARE         reduce using rule 276 (statement -> try_statement .)
    ECHO            reduce using rule 276 (statement -> try_statement .)
    UNSET           reduce using rule 276 (statement -> try_statement .)
    CONST           reduce using rule 276 (statement -> try_statement .)
    INTERFACE       reduce using rule 276 (statement -> try_statement .)
    TRAIT           reduce using rule 276 (statement -> try_statement .)
    NAMESPACE       reduce using rule 276 (statement -> try_statement .)
    USE             reduce using rule 276 (statement -> try_statement .)
    GLOBAL          reduce using rule 276 (statement -> try_statement .)
    STATIC          reduce using rule 276 (statement -> try_statement .)
    STRING          reduce using rule 276 (statement -> try_statement .)
    IF              reduce using rule 276 (statement -> try_statement .)
    SWITCH          reduce using rule 276 (statement -> try_statement .)
    WHILE           reduce using rule 276 (statement -> try_statement .)
    DO              reduce using rule 276 (statement -> try_statement .)
    FOR             reduce using rule 276 (statement -> try_statement .)
    FOREACH         reduce using rule 276 (statement -> try_statement .)
    GOTO            reduce using rule 276 (statement -> try_statement .)
    CONTINUE        reduce using rule 276 (statement -> try_statement .)
    BREAK           reduce using rule 276 (statement -> try_statement .)
    RETURN          reduce using rule 276 (statement -> try_statement .)
    THROW           reduce using rule 276 (statement -> try_statement .)
    FUNCTION        reduce using rule 276 (statement -> try_statement .)
    INCLUDE         reduce using rule 276 (statement -> try_statement .)
    INCLUDE_ONCE    reduce using rule 276 (statement -> try_statement .)
    REQUIRE         reduce using rule 276 (statement -> try_statement .)
    REQUIRE_ONCE    reduce using rule 276 (statement -> try_statement .)
    ABSTRACT        reduce using rule 276 (statement -> try_statement .)
    FINAL           reduce using rule 276 (statement -> try_statement .)
    PRINT           reduce using rule 276 (statement -> try_statement .)
    YIELD           reduce using rule 276 (statement -> try_statement .)
    YIELD_FROM      reduce using rule 276 (statement -> try_statement .)
    CLASS           reduce using rule 276 (statement -> try_statement .)
    $end            reduce using rule 276 (statement -> try_statement .)
    RIGHT_CBRAC     reduce using rule 276 (statement -> try_statement .)
    ELSE            reduce using rule 276 (statement -> try_statement .)
    ELSEIF          reduce using rule 276 (statement -> try_statement .)
    ENDDECLARE      reduce using rule 276 (statement -> try_statement .)
    ENDWHILE        reduce using rule 276 (statement -> try_statement .)
    ENDFOR          reduce using rule 276 (statement -> try_statement .)
    CASE            reduce using rule 276 (statement -> try_statement .)
    DEFAULT         reduce using rule 276 (statement -> try_statement .)
    ENDSWITCH       reduce using rule 276 (statement -> try_statement .)
    ENDFOREACH      reduce using rule 276 (statement -> try_statement .)
    ENDIF           reduce using rule 276 (statement -> try_statement .)


state 11

    (277) statement -> declare_statement .

    LEFT_CBRAC      reduce using rule 277 (statement -> declare_statement .)
    SEMICOLON       reduce using rule 277 (statement -> declare_statement .)
    TRY             reduce using rule 277 (statement -> declare_statement .)
    DECLARE         reduce using rule 277 (statement -> declare_statement .)
    ECHO            reduce using rule 277 (statement -> declare_statement .)
    UNSET           reduce using rule 277 (statement -> declare_statement .)
    CONST           reduce using rule 277 (statement -> declare_statement .)
    INTERFACE       reduce using rule 277 (statement -> declare_statement .)
    TRAIT           reduce using rule 277 (statement -> declare_statement .)
    NAMESPACE       reduce using rule 277 (statement -> declare_statement .)
    USE             reduce using rule 277 (statement -> declare_statement .)
    GLOBAL          reduce using rule 277 (statement -> declare_statement .)
    STATIC          reduce using rule 277 (statement -> declare_statement .)
    STRING          reduce using rule 277 (statement -> declare_statement .)
    IF              reduce using rule 277 (statement -> declare_statement .)
    SWITCH          reduce using rule 277 (statement -> declare_statement .)
    WHILE           reduce using rule 277 (statement -> declare_statement .)
    DO              reduce using rule 277 (statement -> declare_statement .)
    FOR             reduce using rule 277 (statement -> declare_statement .)
    FOREACH         reduce using rule 277 (statement -> declare_statement .)
    GOTO            reduce using rule 277 (statement -> declare_statement .)
    CONTINUE        reduce using rule 277 (statement -> declare_statement .)
    BREAK           reduce using rule 277 (statement -> declare_statement .)
    RETURN          reduce using rule 277 (statement -> declare_statement .)
    THROW           reduce using rule 277 (statement -> declare_statement .)
    FUNCTION        reduce using rule 277 (statement -> declare_statement .)
    INCLUDE         reduce using rule 277 (statement -> declare_statement .)
    INCLUDE_ONCE    reduce using rule 277 (statement -> declare_statement .)
    REQUIRE         reduce using rule 277 (statement -> declare_statement .)
    REQUIRE_ONCE    reduce using rule 277 (statement -> declare_statement .)
    ABSTRACT        reduce using rule 277 (statement -> declare_statement .)
    FINAL           reduce using rule 277 (statement -> declare_statement .)
    PRINT           reduce using rule 277 (statement -> declare_statement .)
    YIELD           reduce using rule 277 (statement -> declare_statement .)
    YIELD_FROM      reduce using rule 277 (statement -> declare_statement .)
    CLASS           reduce using rule 277 (statement -> declare_statement .)
    $end            reduce using rule 277 (statement -> declare_statement .)
    RIGHT_CBRAC     reduce using rule 277 (statement -> declare_statement .)
    ELSE            reduce using rule 277 (statement -> declare_statement .)
    ELSEIF          reduce using rule 277 (statement -> declare_statement .)
    ENDDECLARE      reduce using rule 277 (statement -> declare_statement .)
    ENDWHILE        reduce using rule 277 (statement -> declare_statement .)
    ENDFOR          reduce using rule 277 (statement -> declare_statement .)
    CASE            reduce using rule 277 (statement -> declare_statement .)
    DEFAULT         reduce using rule 277 (statement -> declare_statement .)
    ENDSWITCH       reduce using rule 277 (statement -> declare_statement .)
    ENDFOREACH      reduce using rule 277 (statement -> declare_statement .)
    ENDIF           reduce using rule 277 (statement -> declare_statement .)


state 12

    (278) statement -> echo_statement .

    LEFT_CBRAC      reduce using rule 278 (statement -> echo_statement .)
    SEMICOLON       reduce using rule 278 (statement -> echo_statement .)
    TRY             reduce using rule 278 (statement -> echo_statement .)
    DECLARE         reduce using rule 278 (statement -> echo_statement .)
    ECHO            reduce using rule 278 (statement -> echo_statement .)
    UNSET           reduce using rule 278 (statement -> echo_statement .)
    CONST           reduce using rule 278 (statement -> echo_statement .)
    INTERFACE       reduce using rule 278 (statement -> echo_statement .)
    TRAIT           reduce using rule 278 (statement -> echo_statement .)
    NAMESPACE       reduce using rule 278 (statement -> echo_statement .)
    USE             reduce using rule 278 (statement -> echo_statement .)
    GLOBAL          reduce using rule 278 (statement -> echo_statement .)
    STATIC          reduce using rule 278 (statement -> echo_statement .)
    STRING          reduce using rule 278 (statement -> echo_statement .)
    IF              reduce using rule 278 (statement -> echo_statement .)
    SWITCH          reduce using rule 278 (statement -> echo_statement .)
    WHILE           reduce using rule 278 (statement -> echo_statement .)
    DO              reduce using rule 278 (statement -> echo_statement .)
    FOR             reduce using rule 278 (statement -> echo_statement .)
    FOREACH         reduce using rule 278 (statement -> echo_statement .)
    GOTO            reduce using rule 278 (statement -> echo_statement .)
    CONTINUE        reduce using rule 278 (statement -> echo_statement .)
    BREAK           reduce using rule 278 (statement -> echo_statement .)
    RETURN          reduce using rule 278 (statement -> echo_statement .)
    THROW           reduce using rule 278 (statement -> echo_statement .)
    FUNCTION        reduce using rule 278 (statement -> echo_statement .)
    INCLUDE         reduce using rule 278 (statement -> echo_statement .)
    INCLUDE_ONCE    reduce using rule 278 (statement -> echo_statement .)
    REQUIRE         reduce using rule 278 (statement -> echo_statement .)
    REQUIRE_ONCE    reduce using rule 278 (statement -> echo_statement .)
    ABSTRACT        reduce using rule 278 (statement -> echo_statement .)
    FINAL           reduce using rule 278 (statement -> echo_statement .)
    PRINT           reduce using rule 278 (statement -> echo_statement .)
    YIELD           reduce using rule 278 (statement -> echo_statement .)
    YIELD_FROM      reduce using rule 278 (statement -> echo_statement .)
    CLASS           reduce using rule 278 (statement -> echo_statement .)
    $end            reduce using rule 278 (statement -> echo_statement .)
    RIGHT_CBRAC     reduce using rule 278 (statement -> echo_statement .)
    ELSE            reduce using rule 278 (statement -> echo_statement .)
    ELSEIF          reduce using rule 278 (statement -> echo_statement .)
    ENDDECLARE      reduce using rule 278 (statement -> echo_statement .)
    ENDWHILE        reduce using rule 278 (statement -> echo_statement .)
    ENDFOR          reduce using rule 278 (statement -> echo_statement .)
    CASE            reduce using rule 278 (statement -> echo_statement .)
    DEFAULT         reduce using rule 278 (statement -> echo_statement .)
    ENDSWITCH       reduce using rule 278 (statement -> echo_statement .)
    ENDFOREACH      reduce using rule 278 (statement -> echo_statement .)
    ENDIF           reduce using rule 278 (statement -> echo_statement .)


state 13

    (279) statement -> unset_statement .

    LEFT_CBRAC      reduce using rule 279 (statement -> unset_statement .)
    SEMICOLON       reduce using rule 279 (statement -> unset_statement .)
    TRY             reduce using rule 279 (statement -> unset_statement .)
    DECLARE         reduce using rule 279 (statement -> unset_statement .)
    ECHO            reduce using rule 279 (statement -> unset_statement .)
    UNSET           reduce using rule 279 (statement -> unset_statement .)
    CONST           reduce using rule 279 (statement -> unset_statement .)
    INTERFACE       reduce using rule 279 (statement -> unset_statement .)
    TRAIT           reduce using rule 279 (statement -> unset_statement .)
    NAMESPACE       reduce using rule 279 (statement -> unset_statement .)
    USE             reduce using rule 279 (statement -> unset_statement .)
    GLOBAL          reduce using rule 279 (statement -> unset_statement .)
    STATIC          reduce using rule 279 (statement -> unset_statement .)
    STRING          reduce using rule 279 (statement -> unset_statement .)
    IF              reduce using rule 279 (statement -> unset_statement .)
    SWITCH          reduce using rule 279 (statement -> unset_statement .)
    WHILE           reduce using rule 279 (statement -> unset_statement .)
    DO              reduce using rule 279 (statement -> unset_statement .)
    FOR             reduce using rule 279 (statement -> unset_statement .)
    FOREACH         reduce using rule 279 (statement -> unset_statement .)
    GOTO            reduce using rule 279 (statement -> unset_statement .)
    CONTINUE        reduce using rule 279 (statement -> unset_statement .)
    BREAK           reduce using rule 279 (statement -> unset_statement .)
    RETURN          reduce using rule 279 (statement -> unset_statement .)
    THROW           reduce using rule 279 (statement -> unset_statement .)
    FUNCTION        reduce using rule 279 (statement -> unset_statement .)
    INCLUDE         reduce using rule 279 (statement -> unset_statement .)
    INCLUDE_ONCE    reduce using rule 279 (statement -> unset_statement .)
    REQUIRE         reduce using rule 279 (statement -> unset_statement .)
    REQUIRE_ONCE    reduce using rule 279 (statement -> unset_statement .)
    ABSTRACT        reduce using rule 279 (statement -> unset_statement .)
    FINAL           reduce using rule 279 (statement -> unset_statement .)
    PRINT           reduce using rule 279 (statement -> unset_statement .)
    YIELD           reduce using rule 279 (statement -> unset_statement .)
    YIELD_FROM      reduce using rule 279 (statement -> unset_statement .)
    CLASS           reduce using rule 279 (statement -> unset_statement .)
    $end            reduce using rule 279 (statement -> unset_statement .)
    RIGHT_CBRAC     reduce using rule 279 (statement -> unset_statement .)
    ELSE            reduce using rule 279 (statement -> unset_statement .)
    ELSEIF          reduce using rule 279 (statement -> unset_statement .)
    ENDDECLARE      reduce using rule 279 (statement -> unset_statement .)
    ENDWHILE        reduce using rule 279 (statement -> unset_statement .)
    ENDFOR          reduce using rule 279 (statement -> unset_statement .)
    CASE            reduce using rule 279 (statement -> unset_statement .)
    DEFAULT         reduce using rule 279 (statement -> unset_statement .)
    ENDSWITCH       reduce using rule 279 (statement -> unset_statement .)
    ENDFOREACH      reduce using rule 279 (statement -> unset_statement .)
    ENDIF           reduce using rule 279 (statement -> unset_statement .)


state 14

    (280) statement -> const_declaration .

    LEFT_CBRAC      reduce using rule 280 (statement -> const_declaration .)
    SEMICOLON       reduce using rule 280 (statement -> const_declaration .)
    TRY             reduce using rule 280 (statement -> const_declaration .)
    DECLARE         reduce using rule 280 (statement -> const_declaration .)
    ECHO            reduce using rule 280 (statement -> const_declaration .)
    UNSET           reduce using rule 280 (statement -> const_declaration .)
    CONST           reduce using rule 280 (statement -> const_declaration .)
    INTERFACE       reduce using rule 280 (statement -> const_declaration .)
    TRAIT           reduce using rule 280 (statement -> const_declaration .)
    NAMESPACE       reduce using rule 280 (statement -> const_declaration .)
    USE             reduce using rule 280 (statement -> const_declaration .)
    GLOBAL          reduce using rule 280 (statement -> const_declaration .)
    STATIC          reduce using rule 280 (statement -> const_declaration .)
    STRING          reduce using rule 280 (statement -> const_declaration .)
    IF              reduce using rule 280 (statement -> const_declaration .)
    SWITCH          reduce using rule 280 (statement -> const_declaration .)
    WHILE           reduce using rule 280 (statement -> const_declaration .)
    DO              reduce using rule 280 (statement -> const_declaration .)
    FOR             reduce using rule 280 (statement -> const_declaration .)
    FOREACH         reduce using rule 280 (statement -> const_declaration .)
    GOTO            reduce using rule 280 (statement -> const_declaration .)
    CONTINUE        reduce using rule 280 (statement -> const_declaration .)
    BREAK           reduce using rule 280 (statement -> const_declaration .)
    RETURN          reduce using rule 280 (statement -> const_declaration .)
    THROW           reduce using rule 280 (statement -> const_declaration .)
    FUNCTION        reduce using rule 280 (statement -> const_declaration .)
    INCLUDE         reduce using rule 280 (statement -> const_declaration .)
    INCLUDE_ONCE    reduce using rule 280 (statement -> const_declaration .)
    REQUIRE         reduce using rule 280 (statement -> const_declaration .)
    REQUIRE_ONCE    reduce using rule 280 (statement -> const_declaration .)
    ABSTRACT        reduce using rule 280 (statement -> const_declaration .)
    FINAL           reduce using rule 280 (statement -> const_declaration .)
    PRINT           reduce using rule 280 (statement -> const_declaration .)
    YIELD           reduce using rule 280 (statement -> const_declaration .)
    YIELD_FROM      reduce using rule 280 (statement -> const_declaration .)
    CLASS           reduce using rule 280 (statement -> const_declaration .)
    $end            reduce using rule 280 (statement -> const_declaration .)
    RIGHT_CBRAC     reduce using rule 280 (statement -> const_declaration .)
    ELSE            reduce using rule 280 (statement -> const_declaration .)
    ELSEIF          reduce using rule 280 (statement -> const_declaration .)
    ENDDECLARE      reduce using rule 280 (statement -> const_declaration .)
    ENDWHILE        reduce using rule 280 (statement -> const_declaration .)
    ENDFOR          reduce using rule 280 (statement -> const_declaration .)
    CASE            reduce using rule 280 (statement -> const_declaration .)
    DEFAULT         reduce using rule 280 (statement -> const_declaration .)
    ENDSWITCH       reduce using rule 280 (statement -> const_declaration .)
    ENDFOREACH      reduce using rule 280 (statement -> const_declaration .)
    ENDIF           reduce using rule 280 (statement -> const_declaration .)


state 15

    (281) statement -> function_definition .

    LEFT_CBRAC      reduce using rule 281 (statement -> function_definition .)
    SEMICOLON       reduce using rule 281 (statement -> function_definition .)
    TRY             reduce using rule 281 (statement -> function_definition .)
    DECLARE         reduce using rule 281 (statement -> function_definition .)
    ECHO            reduce using rule 281 (statement -> function_definition .)
    UNSET           reduce using rule 281 (statement -> function_definition .)
    CONST           reduce using rule 281 (statement -> function_definition .)
    INTERFACE       reduce using rule 281 (statement -> function_definition .)
    TRAIT           reduce using rule 281 (statement -> function_definition .)
    NAMESPACE       reduce using rule 281 (statement -> function_definition .)
    USE             reduce using rule 281 (statement -> function_definition .)
    GLOBAL          reduce using rule 281 (statement -> function_definition .)
    STATIC          reduce using rule 281 (statement -> function_definition .)
    STRING          reduce using rule 281 (statement -> function_definition .)
    IF              reduce using rule 281 (statement -> function_definition .)
    SWITCH          reduce using rule 281 (statement -> function_definition .)
    WHILE           reduce using rule 281 (statement -> function_definition .)
    DO              reduce using rule 281 (statement -> function_definition .)
    FOR             reduce using rule 281 (statement -> function_definition .)
    FOREACH         reduce using rule 281 (statement -> function_definition .)
    GOTO            reduce using rule 281 (statement -> function_definition .)
    CONTINUE        reduce using rule 281 (statement -> function_definition .)
    BREAK           reduce using rule 281 (statement -> function_definition .)
    RETURN          reduce using rule 281 (statement -> function_definition .)
    THROW           reduce using rule 281 (statement -> function_definition .)
    FUNCTION        reduce using rule 281 (statement -> function_definition .)
    INCLUDE         reduce using rule 281 (statement -> function_definition .)
    INCLUDE_ONCE    reduce using rule 281 (statement -> function_definition .)
    REQUIRE         reduce using rule 281 (statement -> function_definition .)
    REQUIRE_ONCE    reduce using rule 281 (statement -> function_definition .)
    ABSTRACT        reduce using rule 281 (statement -> function_definition .)
    FINAL           reduce using rule 281 (statement -> function_definition .)
    PRINT           reduce using rule 281 (statement -> function_definition .)
    YIELD           reduce using rule 281 (statement -> function_definition .)
    YIELD_FROM      reduce using rule 281 (statement -> function_definition .)
    CLASS           reduce using rule 281 (statement -> function_definition .)
    $end            reduce using rule 281 (statement -> function_definition .)
    RIGHT_CBRAC     reduce using rule 281 (statement -> function_definition .)
    ELSE            reduce using rule 281 (statement -> function_definition .)
    ELSEIF          reduce using rule 281 (statement -> function_definition .)
    ENDDECLARE      reduce using rule 281 (statement -> function_definition .)
    ENDWHILE        reduce using rule 281 (statement -> function_definition .)
    ENDFOR          reduce using rule 281 (statement -> function_definition .)
    CASE            reduce using rule 281 (statement -> function_definition .)
    DEFAULT         reduce using rule 281 (statement -> function_definition .)
    ENDSWITCH       reduce using rule 281 (statement -> function_definition .)
    ENDFOREACH      reduce using rule 281 (statement -> function_definition .)
    ENDIF           reduce using rule 281 (statement -> function_definition .)


state 16

    (282) statement -> class_declaration .

    LEFT_CBRAC      reduce using rule 282 (statement -> class_declaration .)
    SEMICOLON       reduce using rule 282 (statement -> class_declaration .)
    TRY             reduce using rule 282 (statement -> class_declaration .)
    DECLARE         reduce using rule 282 (statement -> class_declaration .)
    ECHO            reduce using rule 282 (statement -> class_declaration .)
    UNSET           reduce using rule 282 (statement -> class_declaration .)
    CONST           reduce using rule 282 (statement -> class_declaration .)
    INTERFACE       reduce using rule 282 (statement -> class_declaration .)
    TRAIT           reduce using rule 282 (statement -> class_declaration .)
    NAMESPACE       reduce using rule 282 (statement -> class_declaration .)
    USE             reduce using rule 282 (statement -> class_declaration .)
    GLOBAL          reduce using rule 282 (statement -> class_declaration .)
    STATIC          reduce using rule 282 (statement -> class_declaration .)
    STRING          reduce using rule 282 (statement -> class_declaration .)
    IF              reduce using rule 282 (statement -> class_declaration .)
    SWITCH          reduce using rule 282 (statement -> class_declaration .)
    WHILE           reduce using rule 282 (statement -> class_declaration .)
    DO              reduce using rule 282 (statement -> class_declaration .)
    FOR             reduce using rule 282 (statement -> class_declaration .)
    FOREACH         reduce using rule 282 (statement -> class_declaration .)
    GOTO            reduce using rule 282 (statement -> class_declaration .)
    CONTINUE        reduce using rule 282 (statement -> class_declaration .)
    BREAK           reduce using rule 282 (statement -> class_declaration .)
    RETURN          reduce using rule 282 (statement -> class_declaration .)
    THROW           reduce using rule 282 (statement -> class_declaration .)
    FUNCTION        reduce using rule 282 (statement -> class_declaration .)
    INCLUDE         reduce using rule 282 (statement -> class_declaration .)
    INCLUDE_ONCE    reduce using rule 282 (statement -> class_declaration .)
    REQUIRE         reduce using rule 282 (statement -> class_declaration .)
    REQUIRE_ONCE    reduce using rule 282 (statement -> class_declaration .)
    ABSTRACT        reduce using rule 282 (statement -> class_declaration .)
    FINAL           reduce using rule 282 (statement -> class_declaration .)
    PRINT           reduce using rule 282 (statement -> class_declaration .)
    YIELD           reduce using rule 282 (statement -> class_declaration .)
    YIELD_FROM      reduce using rule 282 (statement -> class_declaration .)
    CLASS           reduce using rule 282 (statement -> class_declaration .)
    $end            reduce using rule 282 (statement -> class_declaration .)
    RIGHT_CBRAC     reduce using rule 282 (statement -> class_declaration .)
    ELSE            reduce using rule 282 (statement -> class_declaration .)
    ELSEIF          reduce using rule 282 (statement -> class_declaration .)
    ENDDECLARE      reduce using rule 282 (statement -> class_declaration .)
    ENDWHILE        reduce using rule 282 (statement -> class_declaration .)
    ENDFOR          reduce using rule 282 (statement -> class_declaration .)
    CASE            reduce using rule 282 (statement -> class_declaration .)
    DEFAULT         reduce using rule 282 (statement -> class_declaration .)
    ENDSWITCH       reduce using rule 282 (statement -> class_declaration .)
    ENDFOREACH      reduce using rule 282 (statement -> class_declaration .)
    ENDIF           reduce using rule 282 (statement -> class_declaration .)


state 17

    (283) statement -> interface_declaration .

    LEFT_CBRAC      reduce using rule 283 (statement -> interface_declaration .)
    SEMICOLON       reduce using rule 283 (statement -> interface_declaration .)
    TRY             reduce using rule 283 (statement -> interface_declaration .)
    DECLARE         reduce using rule 283 (statement -> interface_declaration .)
    ECHO            reduce using rule 283 (statement -> interface_declaration .)
    UNSET           reduce using rule 283 (statement -> interface_declaration .)
    CONST           reduce using rule 283 (statement -> interface_declaration .)
    INTERFACE       reduce using rule 283 (statement -> interface_declaration .)
    TRAIT           reduce using rule 283 (statement -> interface_declaration .)
    NAMESPACE       reduce using rule 283 (statement -> interface_declaration .)
    USE             reduce using rule 283 (statement -> interface_declaration .)
    GLOBAL          reduce using rule 283 (statement -> interface_declaration .)
    STATIC          reduce using rule 283 (statement -> interface_declaration .)
    STRING          reduce using rule 283 (statement -> interface_declaration .)
    IF              reduce using rule 283 (statement -> interface_declaration .)
    SWITCH          reduce using rule 283 (statement -> interface_declaration .)
    WHILE           reduce using rule 283 (statement -> interface_declaration .)
    DO              reduce using rule 283 (statement -> interface_declaration .)
    FOR             reduce using rule 283 (statement -> interface_declaration .)
    FOREACH         reduce using rule 283 (statement -> interface_declaration .)
    GOTO            reduce using rule 283 (statement -> interface_declaration .)
    CONTINUE        reduce using rule 283 (statement -> interface_declaration .)
    BREAK           reduce using rule 283 (statement -> interface_declaration .)
    RETURN          reduce using rule 283 (statement -> interface_declaration .)
    THROW           reduce using rule 283 (statement -> interface_declaration .)
    FUNCTION        reduce using rule 283 (statement -> interface_declaration .)
    INCLUDE         reduce using rule 283 (statement -> interface_declaration .)
    INCLUDE_ONCE    reduce using rule 283 (statement -> interface_declaration .)
    REQUIRE         reduce using rule 283 (statement -> interface_declaration .)
    REQUIRE_ONCE    reduce using rule 283 (statement -> interface_declaration .)
    ABSTRACT        reduce using rule 283 (statement -> interface_declaration .)
    FINAL           reduce using rule 283 (statement -> interface_declaration .)
    PRINT           reduce using rule 283 (statement -> interface_declaration .)
    YIELD           reduce using rule 283 (statement -> interface_declaration .)
    YIELD_FROM      reduce using rule 283 (statement -> interface_declaration .)
    CLASS           reduce using rule 283 (statement -> interface_declaration .)
    $end            reduce using rule 283 (statement -> interface_declaration .)
    RIGHT_CBRAC     reduce using rule 283 (statement -> interface_declaration .)
    ELSE            reduce using rule 283 (statement -> interface_declaration .)
    ELSEIF          reduce using rule 283 (statement -> interface_declaration .)
    ENDDECLARE      reduce using rule 283 (statement -> interface_declaration .)
    ENDWHILE        reduce using rule 283 (statement -> interface_declaration .)
    ENDFOR          reduce using rule 283 (statement -> interface_declaration .)
    CASE            reduce using rule 283 (statement -> interface_declaration .)
    DEFAULT         reduce using rule 283 (statement -> interface_declaration .)
    ENDSWITCH       reduce using rule 283 (statement -> interface_declaration .)
    ENDFOREACH      reduce using rule 283 (statement -> interface_declaration .)
    ENDIF           reduce using rule 283 (statement -> interface_declaration .)


state 18

    (284) statement -> trait_declaration .

    LEFT_CBRAC      reduce using rule 284 (statement -> trait_declaration .)
    SEMICOLON       reduce using rule 284 (statement -> trait_declaration .)
    TRY             reduce using rule 284 (statement -> trait_declaration .)
    DECLARE         reduce using rule 284 (statement -> trait_declaration .)
    ECHO            reduce using rule 284 (statement -> trait_declaration .)
    UNSET           reduce using rule 284 (statement -> trait_declaration .)
    CONST           reduce using rule 284 (statement -> trait_declaration .)
    INTERFACE       reduce using rule 284 (statement -> trait_declaration .)
    TRAIT           reduce using rule 284 (statement -> trait_declaration .)
    NAMESPACE       reduce using rule 284 (statement -> trait_declaration .)
    USE             reduce using rule 284 (statement -> trait_declaration .)
    GLOBAL          reduce using rule 284 (statement -> trait_declaration .)
    STATIC          reduce using rule 284 (statement -> trait_declaration .)
    STRING          reduce using rule 284 (statement -> trait_declaration .)
    IF              reduce using rule 284 (statement -> trait_declaration .)
    SWITCH          reduce using rule 284 (statement -> trait_declaration .)
    WHILE           reduce using rule 284 (statement -> trait_declaration .)
    DO              reduce using rule 284 (statement -> trait_declaration .)
    FOR             reduce using rule 284 (statement -> trait_declaration .)
    FOREACH         reduce using rule 284 (statement -> trait_declaration .)
    GOTO            reduce using rule 284 (statement -> trait_declaration .)
    CONTINUE        reduce using rule 284 (statement -> trait_declaration .)
    BREAK           reduce using rule 284 (statement -> trait_declaration .)
    RETURN          reduce using rule 284 (statement -> trait_declaration .)
    THROW           reduce using rule 284 (statement -> trait_declaration .)
    FUNCTION        reduce using rule 284 (statement -> trait_declaration .)
    INCLUDE         reduce using rule 284 (statement -> trait_declaration .)
    INCLUDE_ONCE    reduce using rule 284 (statement -> trait_declaration .)
    REQUIRE         reduce using rule 284 (statement -> trait_declaration .)
    REQUIRE_ONCE    reduce using rule 284 (statement -> trait_declaration .)
    ABSTRACT        reduce using rule 284 (statement -> trait_declaration .)
    FINAL           reduce using rule 284 (statement -> trait_declaration .)
    PRINT           reduce using rule 284 (statement -> trait_declaration .)
    YIELD           reduce using rule 284 (statement -> trait_declaration .)
    YIELD_FROM      reduce using rule 284 (statement -> trait_declaration .)
    CLASS           reduce using rule 284 (statement -> trait_declaration .)
    $end            reduce using rule 284 (statement -> trait_declaration .)
    RIGHT_CBRAC     reduce using rule 284 (statement -> trait_declaration .)
    ELSE            reduce using rule 284 (statement -> trait_declaration .)
    ELSEIF          reduce using rule 284 (statement -> trait_declaration .)
    ENDDECLARE      reduce using rule 284 (statement -> trait_declaration .)
    ENDWHILE        reduce using rule 284 (statement -> trait_declaration .)
    ENDFOR          reduce using rule 284 (statement -> trait_declaration .)
    CASE            reduce using rule 284 (statement -> trait_declaration .)
    DEFAULT         reduce using rule 284 (statement -> trait_declaration .)
    ENDSWITCH       reduce using rule 284 (statement -> trait_declaration .)
    ENDFOREACH      reduce using rule 284 (statement -> trait_declaration .)
    ENDIF           reduce using rule 284 (statement -> trait_declaration .)


state 19

    (285) statement -> namespace_definition .

    LEFT_CBRAC      reduce using rule 285 (statement -> namespace_definition .)
    SEMICOLON       reduce using rule 285 (statement -> namespace_definition .)
    TRY             reduce using rule 285 (statement -> namespace_definition .)
    DECLARE         reduce using rule 285 (statement -> namespace_definition .)
    ECHO            reduce using rule 285 (statement -> namespace_definition .)
    UNSET           reduce using rule 285 (statement -> namespace_definition .)
    CONST           reduce using rule 285 (statement -> namespace_definition .)
    INTERFACE       reduce using rule 285 (statement -> namespace_definition .)
    TRAIT           reduce using rule 285 (statement -> namespace_definition .)
    NAMESPACE       reduce using rule 285 (statement -> namespace_definition .)
    USE             reduce using rule 285 (statement -> namespace_definition .)
    GLOBAL          reduce using rule 285 (statement -> namespace_definition .)
    STATIC          reduce using rule 285 (statement -> namespace_definition .)
    STRING          reduce using rule 285 (statement -> namespace_definition .)
    IF              reduce using rule 285 (statement -> namespace_definition .)
    SWITCH          reduce using rule 285 (statement -> namespace_definition .)
    WHILE           reduce using rule 285 (statement -> namespace_definition .)
    DO              reduce using rule 285 (statement -> namespace_definition .)
    FOR             reduce using rule 285 (statement -> namespace_definition .)
    FOREACH         reduce using rule 285 (statement -> namespace_definition .)
    GOTO            reduce using rule 285 (statement -> namespace_definition .)
    CONTINUE        reduce using rule 285 (statement -> namespace_definition .)
    BREAK           reduce using rule 285 (statement -> namespace_definition .)
    RETURN          reduce using rule 285 (statement -> namespace_definition .)
    THROW           reduce using rule 285 (statement -> namespace_definition .)
    FUNCTION        reduce using rule 285 (statement -> namespace_definition .)
    INCLUDE         reduce using rule 285 (statement -> namespace_definition .)
    INCLUDE_ONCE    reduce using rule 285 (statement -> namespace_definition .)
    REQUIRE         reduce using rule 285 (statement -> namespace_definition .)
    REQUIRE_ONCE    reduce using rule 285 (statement -> namespace_definition .)
    ABSTRACT        reduce using rule 285 (statement -> namespace_definition .)
    FINAL           reduce using rule 285 (statement -> namespace_definition .)
    PRINT           reduce using rule 285 (statement -> namespace_definition .)
    YIELD           reduce using rule 285 (statement -> namespace_definition .)
    YIELD_FROM      reduce using rule 285 (statement -> namespace_definition .)
    CLASS           reduce using rule 285 (statement -> namespace_definition .)
    $end            reduce using rule 285 (statement -> namespace_definition .)
    RIGHT_CBRAC     reduce using rule 285 (statement -> namespace_definition .)
    ELSE            reduce using rule 285 (statement -> namespace_definition .)
    ELSEIF          reduce using rule 285 (statement -> namespace_definition .)
    ENDDECLARE      reduce using rule 285 (statement -> namespace_definition .)
    ENDWHILE        reduce using rule 285 (statement -> namespace_definition .)
    ENDFOR          reduce using rule 285 (statement -> namespace_definition .)
    CASE            reduce using rule 285 (statement -> namespace_definition .)
    DEFAULT         reduce using rule 285 (statement -> namespace_definition .)
    ENDSWITCH       reduce using rule 285 (statement -> namespace_definition .)
    ENDFOREACH      reduce using rule 285 (statement -> namespace_definition .)
    ENDIF           reduce using rule 285 (statement -> namespace_definition .)


state 20

    (286) statement -> namespace_use_declaration .

    LEFT_CBRAC      reduce using rule 286 (statement -> namespace_use_declaration .)
    SEMICOLON       reduce using rule 286 (statement -> namespace_use_declaration .)
    TRY             reduce using rule 286 (statement -> namespace_use_declaration .)
    DECLARE         reduce using rule 286 (statement -> namespace_use_declaration .)
    ECHO            reduce using rule 286 (statement -> namespace_use_declaration .)
    UNSET           reduce using rule 286 (statement -> namespace_use_declaration .)
    CONST           reduce using rule 286 (statement -> namespace_use_declaration .)
    INTERFACE       reduce using rule 286 (statement -> namespace_use_declaration .)
    TRAIT           reduce using rule 286 (statement -> namespace_use_declaration .)
    NAMESPACE       reduce using rule 286 (statement -> namespace_use_declaration .)
    USE             reduce using rule 286 (statement -> namespace_use_declaration .)
    GLOBAL          reduce using rule 286 (statement -> namespace_use_declaration .)
    STATIC          reduce using rule 286 (statement -> namespace_use_declaration .)
    STRING          reduce using rule 286 (statement -> namespace_use_declaration .)
    IF              reduce using rule 286 (statement -> namespace_use_declaration .)
    SWITCH          reduce using rule 286 (statement -> namespace_use_declaration .)
    WHILE           reduce using rule 286 (statement -> namespace_use_declaration .)
    DO              reduce using rule 286 (statement -> namespace_use_declaration .)
    FOR             reduce using rule 286 (statement -> namespace_use_declaration .)
    FOREACH         reduce using rule 286 (statement -> namespace_use_declaration .)
    GOTO            reduce using rule 286 (statement -> namespace_use_declaration .)
    CONTINUE        reduce using rule 286 (statement -> namespace_use_declaration .)
    BREAK           reduce using rule 286 (statement -> namespace_use_declaration .)
    RETURN          reduce using rule 286 (statement -> namespace_use_declaration .)
    THROW           reduce using rule 286 (statement -> namespace_use_declaration .)
    FUNCTION        reduce using rule 286 (statement -> namespace_use_declaration .)
    INCLUDE         reduce using rule 286 (statement -> namespace_use_declaration .)
    INCLUDE_ONCE    reduce using rule 286 (statement -> namespace_use_declaration .)
    REQUIRE         reduce using rule 286 (statement -> namespace_use_declaration .)
    REQUIRE_ONCE    reduce using rule 286 (statement -> namespace_use_declaration .)
    ABSTRACT        reduce using rule 286 (statement -> namespace_use_declaration .)
    FINAL           reduce using rule 286 (statement -> namespace_use_declaration .)
    PRINT           reduce using rule 286 (statement -> namespace_use_declaration .)
    YIELD           reduce using rule 286 (statement -> namespace_use_declaration .)
    YIELD_FROM      reduce using rule 286 (statement -> namespace_use_declaration .)
    CLASS           reduce using rule 286 (statement -> namespace_use_declaration .)
    $end            reduce using rule 286 (statement -> namespace_use_declaration .)
    RIGHT_CBRAC     reduce using rule 286 (statement -> namespace_use_declaration .)
    ELSE            reduce using rule 286 (statement -> namespace_use_declaration .)
    ELSEIF          reduce using rule 286 (statement -> namespace_use_declaration .)
    ENDDECLARE      reduce using rule 286 (statement -> namespace_use_declaration .)
    ENDWHILE        reduce using rule 286 (statement -> namespace_use_declaration .)
    ENDFOR          reduce using rule 286 (statement -> namespace_use_declaration .)
    CASE            reduce using rule 286 (statement -> namespace_use_declaration .)
    DEFAULT         reduce using rule 286 (statement -> namespace_use_declaration .)
    ENDSWITCH       reduce using rule 286 (statement -> namespace_use_declaration .)
    ENDFOREACH      reduce using rule 286 (statement -> namespace_use_declaration .)
    ENDIF           reduce using rule 286 (statement -> namespace_use_declaration .)


state 21

    (287) statement -> global_declaration .

    LEFT_CBRAC      reduce using rule 287 (statement -> global_declaration .)
    SEMICOLON       reduce using rule 287 (statement -> global_declaration .)
    TRY             reduce using rule 287 (statement -> global_declaration .)
    DECLARE         reduce using rule 287 (statement -> global_declaration .)
    ECHO            reduce using rule 287 (statement -> global_declaration .)
    UNSET           reduce using rule 287 (statement -> global_declaration .)
    CONST           reduce using rule 287 (statement -> global_declaration .)
    INTERFACE       reduce using rule 287 (statement -> global_declaration .)
    TRAIT           reduce using rule 287 (statement -> global_declaration .)
    NAMESPACE       reduce using rule 287 (statement -> global_declaration .)
    USE             reduce using rule 287 (statement -> global_declaration .)
    GLOBAL          reduce using rule 287 (statement -> global_declaration .)
    STATIC          reduce using rule 287 (statement -> global_declaration .)
    STRING          reduce using rule 287 (statement -> global_declaration .)
    IF              reduce using rule 287 (statement -> global_declaration .)
    SWITCH          reduce using rule 287 (statement -> global_declaration .)
    WHILE           reduce using rule 287 (statement -> global_declaration .)
    DO              reduce using rule 287 (statement -> global_declaration .)
    FOR             reduce using rule 287 (statement -> global_declaration .)
    FOREACH         reduce using rule 287 (statement -> global_declaration .)
    GOTO            reduce using rule 287 (statement -> global_declaration .)
    CONTINUE        reduce using rule 287 (statement -> global_declaration .)
    BREAK           reduce using rule 287 (statement -> global_declaration .)
    RETURN          reduce using rule 287 (statement -> global_declaration .)
    THROW           reduce using rule 287 (statement -> global_declaration .)
    FUNCTION        reduce using rule 287 (statement -> global_declaration .)
    INCLUDE         reduce using rule 287 (statement -> global_declaration .)
    INCLUDE_ONCE    reduce using rule 287 (statement -> global_declaration .)
    REQUIRE         reduce using rule 287 (statement -> global_declaration .)
    REQUIRE_ONCE    reduce using rule 287 (statement -> global_declaration .)
    ABSTRACT        reduce using rule 287 (statement -> global_declaration .)
    FINAL           reduce using rule 287 (statement -> global_declaration .)
    PRINT           reduce using rule 287 (statement -> global_declaration .)
    YIELD           reduce using rule 287 (statement -> global_declaration .)
    YIELD_FROM      reduce using rule 287 (statement -> global_declaration .)
    CLASS           reduce using rule 287 (statement -> global_declaration .)
    $end            reduce using rule 287 (statement -> global_declaration .)
    RIGHT_CBRAC     reduce using rule 287 (statement -> global_declaration .)
    ELSE            reduce using rule 287 (statement -> global_declaration .)
    ELSEIF          reduce using rule 287 (statement -> global_declaration .)
    ENDDECLARE      reduce using rule 287 (statement -> global_declaration .)
    ENDWHILE        reduce using rule 287 (statement -> global_declaration .)
    ENDFOR          reduce using rule 287 (statement -> global_declaration .)
    CASE            reduce using rule 287 (statement -> global_declaration .)
    DEFAULT         reduce using rule 287 (statement -> global_declaration .)
    ENDSWITCH       reduce using rule 287 (statement -> global_declaration .)
    ENDFOREACH      reduce using rule 287 (statement -> global_declaration .)
    ENDIF           reduce using rule 287 (statement -> global_declaration .)


state 22

    (288) statement -> function_static_declaration .

    LEFT_CBRAC      reduce using rule 288 (statement -> function_static_declaration .)
    SEMICOLON       reduce using rule 288 (statement -> function_static_declaration .)
    TRY             reduce using rule 288 (statement -> function_static_declaration .)
    DECLARE         reduce using rule 288 (statement -> function_static_declaration .)
    ECHO            reduce using rule 288 (statement -> function_static_declaration .)
    UNSET           reduce using rule 288 (statement -> function_static_declaration .)
    CONST           reduce using rule 288 (statement -> function_static_declaration .)
    INTERFACE       reduce using rule 288 (statement -> function_static_declaration .)
    TRAIT           reduce using rule 288 (statement -> function_static_declaration .)
    NAMESPACE       reduce using rule 288 (statement -> function_static_declaration .)
    USE             reduce using rule 288 (statement -> function_static_declaration .)
    GLOBAL          reduce using rule 288 (statement -> function_static_declaration .)
    STATIC          reduce using rule 288 (statement -> function_static_declaration .)
    STRING          reduce using rule 288 (statement -> function_static_declaration .)
    IF              reduce using rule 288 (statement -> function_static_declaration .)
    SWITCH          reduce using rule 288 (statement -> function_static_declaration .)
    WHILE           reduce using rule 288 (statement -> function_static_declaration .)
    DO              reduce using rule 288 (statement -> function_static_declaration .)
    FOR             reduce using rule 288 (statement -> function_static_declaration .)
    FOREACH         reduce using rule 288 (statement -> function_static_declaration .)
    GOTO            reduce using rule 288 (statement -> function_static_declaration .)
    CONTINUE        reduce using rule 288 (statement -> function_static_declaration .)
    BREAK           reduce using rule 288 (statement -> function_static_declaration .)
    RETURN          reduce using rule 288 (statement -> function_static_declaration .)
    THROW           reduce using rule 288 (statement -> function_static_declaration .)
    FUNCTION        reduce using rule 288 (statement -> function_static_declaration .)
    INCLUDE         reduce using rule 288 (statement -> function_static_declaration .)
    INCLUDE_ONCE    reduce using rule 288 (statement -> function_static_declaration .)
    REQUIRE         reduce using rule 288 (statement -> function_static_declaration .)
    REQUIRE_ONCE    reduce using rule 288 (statement -> function_static_declaration .)
    ABSTRACT        reduce using rule 288 (statement -> function_static_declaration .)
    FINAL           reduce using rule 288 (statement -> function_static_declaration .)
    PRINT           reduce using rule 288 (statement -> function_static_declaration .)
    YIELD           reduce using rule 288 (statement -> function_static_declaration .)
    YIELD_FROM      reduce using rule 288 (statement -> function_static_declaration .)
    CLASS           reduce using rule 288 (statement -> function_static_declaration .)
    $end            reduce using rule 288 (statement -> function_static_declaration .)
    RIGHT_CBRAC     reduce using rule 288 (statement -> function_static_declaration .)
    ELSE            reduce using rule 288 (statement -> function_static_declaration .)
    ELSEIF          reduce using rule 288 (statement -> function_static_declaration .)
    ENDDECLARE      reduce using rule 288 (statement -> function_static_declaration .)
    ENDWHILE        reduce using rule 288 (statement -> function_static_declaration .)
    ENDFOR          reduce using rule 288 (statement -> function_static_declaration .)
    CASE            reduce using rule 288 (statement -> function_static_declaration .)
    DEFAULT         reduce using rule 288 (statement -> function_static_declaration .)
    ENDSWITCH       reduce using rule 288 (statement -> function_static_declaration .)
    ENDFOREACH      reduce using rule 288 (statement -> function_static_declaration .)
    ENDIF           reduce using rule 288 (statement -> function_static_declaration .)


state 23

    (289) compound_statement -> LEFT_CBRAC . statement_list RIGHT_CBRAC
    (290) compound_statement -> LEFT_CBRAC . RIGHT_CBRAC
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     shift and go to state 86
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 85
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 24

    (293) named_label_statement -> name . DOUBLE_POINT

    DOUBLE_POINT    shift and go to state 87


state 25

    (294) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 88


state 26

    (295) expression_statement -> SEMICOLON .

    LEFT_CBRAC      reduce using rule 295 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 295 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 295 (expression_statement -> SEMICOLON .)
    DECLARE         reduce using rule 295 (expression_statement -> SEMICOLON .)
    ECHO            reduce using rule 295 (expression_statement -> SEMICOLON .)
    UNSET           reduce using rule 295 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 295 (expression_statement -> SEMICOLON .)
    INTERFACE       reduce using rule 295 (expression_statement -> SEMICOLON .)
    TRAIT           reduce using rule 295 (expression_statement -> SEMICOLON .)
    NAMESPACE       reduce using rule 295 (expression_statement -> SEMICOLON .)
    USE             reduce using rule 295 (expression_statement -> SEMICOLON .)
    GLOBAL          reduce using rule 295 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 295 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 295 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 295 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 295 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 295 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 295 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 295 (expression_statement -> SEMICOLON .)
    FOREACH         reduce using rule 295 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 295 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 295 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 295 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 295 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 295 (expression_statement -> SEMICOLON .)
    FUNCTION        reduce using rule 295 (expression_statement -> SEMICOLON .)
    INCLUDE         reduce using rule 295 (expression_statement -> SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 295 (expression_statement -> SEMICOLON .)
    REQUIRE         reduce using rule 295 (expression_statement -> SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 295 (expression_statement -> SEMICOLON .)
    ABSTRACT        reduce using rule 295 (expression_statement -> SEMICOLON .)
    FINAL           reduce using rule 295 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 295 (expression_statement -> SEMICOLON .)
    YIELD           reduce using rule 295 (expression_statement -> SEMICOLON .)
    YIELD_FROM      reduce using rule 295 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 295 (expression_statement -> SEMICOLON .)
    $end            reduce using rule 295 (expression_statement -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 295 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 295 (expression_statement -> SEMICOLON .)
    ELSEIF          reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDDECLARE      reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDWHILE        reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDFOR          reduce using rule 295 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 295 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDSWITCH       reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDFOREACH      reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDIF           reduce using rule 295 (expression_statement -> SEMICOLON .)


state 27

    (296) selection_statement -> if_statement .

    LEFT_CBRAC      reduce using rule 296 (selection_statement -> if_statement .)
    SEMICOLON       reduce using rule 296 (selection_statement -> if_statement .)
    TRY             reduce using rule 296 (selection_statement -> if_statement .)
    DECLARE         reduce using rule 296 (selection_statement -> if_statement .)
    ECHO            reduce using rule 296 (selection_statement -> if_statement .)
    UNSET           reduce using rule 296 (selection_statement -> if_statement .)
    CONST           reduce using rule 296 (selection_statement -> if_statement .)
    INTERFACE       reduce using rule 296 (selection_statement -> if_statement .)
    TRAIT           reduce using rule 296 (selection_statement -> if_statement .)
    NAMESPACE       reduce using rule 296 (selection_statement -> if_statement .)
    USE             reduce using rule 296 (selection_statement -> if_statement .)
    GLOBAL          reduce using rule 296 (selection_statement -> if_statement .)
    STATIC          reduce using rule 296 (selection_statement -> if_statement .)
    STRING          reduce using rule 296 (selection_statement -> if_statement .)
    IF              reduce using rule 296 (selection_statement -> if_statement .)
    SWITCH          reduce using rule 296 (selection_statement -> if_statement .)
    WHILE           reduce using rule 296 (selection_statement -> if_statement .)
    DO              reduce using rule 296 (selection_statement -> if_statement .)
    FOR             reduce using rule 296 (selection_statement -> if_statement .)
    FOREACH         reduce using rule 296 (selection_statement -> if_statement .)
    GOTO            reduce using rule 296 (selection_statement -> if_statement .)
    CONTINUE        reduce using rule 296 (selection_statement -> if_statement .)
    BREAK           reduce using rule 296 (selection_statement -> if_statement .)
    RETURN          reduce using rule 296 (selection_statement -> if_statement .)
    THROW           reduce using rule 296 (selection_statement -> if_statement .)
    FUNCTION        reduce using rule 296 (selection_statement -> if_statement .)
    INCLUDE         reduce using rule 296 (selection_statement -> if_statement .)
    INCLUDE_ONCE    reduce using rule 296 (selection_statement -> if_statement .)
    REQUIRE         reduce using rule 296 (selection_statement -> if_statement .)
    REQUIRE_ONCE    reduce using rule 296 (selection_statement -> if_statement .)
    ABSTRACT        reduce using rule 296 (selection_statement -> if_statement .)
    FINAL           reduce using rule 296 (selection_statement -> if_statement .)
    PRINT           reduce using rule 296 (selection_statement -> if_statement .)
    YIELD           reduce using rule 296 (selection_statement -> if_statement .)
    YIELD_FROM      reduce using rule 296 (selection_statement -> if_statement .)
    CLASS           reduce using rule 296 (selection_statement -> if_statement .)
    $end            reduce using rule 296 (selection_statement -> if_statement .)
    RIGHT_CBRAC     reduce using rule 296 (selection_statement -> if_statement .)
    ELSE            reduce using rule 296 (selection_statement -> if_statement .)
    ELSEIF          reduce using rule 296 (selection_statement -> if_statement .)
    ENDDECLARE      reduce using rule 296 (selection_statement -> if_statement .)
    ENDWHILE        reduce using rule 296 (selection_statement -> if_statement .)
    ENDFOR          reduce using rule 296 (selection_statement -> if_statement .)
    CASE            reduce using rule 296 (selection_statement -> if_statement .)
    DEFAULT         reduce using rule 296 (selection_statement -> if_statement .)
    ENDSWITCH       reduce using rule 296 (selection_statement -> if_statement .)
    ENDFOREACH      reduce using rule 296 (selection_statement -> if_statement .)
    ENDIF           reduce using rule 296 (selection_statement -> if_statement .)


state 28

    (297) selection_statement -> switch_statement .

    LEFT_CBRAC      reduce using rule 297 (selection_statement -> switch_statement .)
    SEMICOLON       reduce using rule 297 (selection_statement -> switch_statement .)
    TRY             reduce using rule 297 (selection_statement -> switch_statement .)
    DECLARE         reduce using rule 297 (selection_statement -> switch_statement .)
    ECHO            reduce using rule 297 (selection_statement -> switch_statement .)
    UNSET           reduce using rule 297 (selection_statement -> switch_statement .)
    CONST           reduce using rule 297 (selection_statement -> switch_statement .)
    INTERFACE       reduce using rule 297 (selection_statement -> switch_statement .)
    TRAIT           reduce using rule 297 (selection_statement -> switch_statement .)
    NAMESPACE       reduce using rule 297 (selection_statement -> switch_statement .)
    USE             reduce using rule 297 (selection_statement -> switch_statement .)
    GLOBAL          reduce using rule 297 (selection_statement -> switch_statement .)
    STATIC          reduce using rule 297 (selection_statement -> switch_statement .)
    STRING          reduce using rule 297 (selection_statement -> switch_statement .)
    IF              reduce using rule 297 (selection_statement -> switch_statement .)
    SWITCH          reduce using rule 297 (selection_statement -> switch_statement .)
    WHILE           reduce using rule 297 (selection_statement -> switch_statement .)
    DO              reduce using rule 297 (selection_statement -> switch_statement .)
    FOR             reduce using rule 297 (selection_statement -> switch_statement .)
    FOREACH         reduce using rule 297 (selection_statement -> switch_statement .)
    GOTO            reduce using rule 297 (selection_statement -> switch_statement .)
    CONTINUE        reduce using rule 297 (selection_statement -> switch_statement .)
    BREAK           reduce using rule 297 (selection_statement -> switch_statement .)
    RETURN          reduce using rule 297 (selection_statement -> switch_statement .)
    THROW           reduce using rule 297 (selection_statement -> switch_statement .)
    FUNCTION        reduce using rule 297 (selection_statement -> switch_statement .)
    INCLUDE         reduce using rule 297 (selection_statement -> switch_statement .)
    INCLUDE_ONCE    reduce using rule 297 (selection_statement -> switch_statement .)
    REQUIRE         reduce using rule 297 (selection_statement -> switch_statement .)
    REQUIRE_ONCE    reduce using rule 297 (selection_statement -> switch_statement .)
    ABSTRACT        reduce using rule 297 (selection_statement -> switch_statement .)
    FINAL           reduce using rule 297 (selection_statement -> switch_statement .)
    PRINT           reduce using rule 297 (selection_statement -> switch_statement .)
    YIELD           reduce using rule 297 (selection_statement -> switch_statement .)
    YIELD_FROM      reduce using rule 297 (selection_statement -> switch_statement .)
    CLASS           reduce using rule 297 (selection_statement -> switch_statement .)
    $end            reduce using rule 297 (selection_statement -> switch_statement .)
    RIGHT_CBRAC     reduce using rule 297 (selection_statement -> switch_statement .)
    ELSE            reduce using rule 297 (selection_statement -> switch_statement .)
    ELSEIF          reduce using rule 297 (selection_statement -> switch_statement .)
    ENDDECLARE      reduce using rule 297 (selection_statement -> switch_statement .)
    ENDWHILE        reduce using rule 297 (selection_statement -> switch_statement .)
    ENDFOR          reduce using rule 297 (selection_statement -> switch_statement .)
    CASE            reduce using rule 297 (selection_statement -> switch_statement .)
    DEFAULT         reduce using rule 297 (selection_statement -> switch_statement .)
    ENDSWITCH       reduce using rule 297 (selection_statement -> switch_statement .)
    ENDFOREACH      reduce using rule 297 (selection_statement -> switch_statement .)
    ENDIF           reduce using rule 297 (selection_statement -> switch_statement .)


state 29

    (327) iteration_statement -> while_statement .

    LEFT_CBRAC      reduce using rule 327 (iteration_statement -> while_statement .)
    SEMICOLON       reduce using rule 327 (iteration_statement -> while_statement .)
    TRY             reduce using rule 327 (iteration_statement -> while_statement .)
    DECLARE         reduce using rule 327 (iteration_statement -> while_statement .)
    ECHO            reduce using rule 327 (iteration_statement -> while_statement .)
    UNSET           reduce using rule 327 (iteration_statement -> while_statement .)
    CONST           reduce using rule 327 (iteration_statement -> while_statement .)
    INTERFACE       reduce using rule 327 (iteration_statement -> while_statement .)
    TRAIT           reduce using rule 327 (iteration_statement -> while_statement .)
    NAMESPACE       reduce using rule 327 (iteration_statement -> while_statement .)
    USE             reduce using rule 327 (iteration_statement -> while_statement .)
    GLOBAL          reduce using rule 327 (iteration_statement -> while_statement .)
    STATIC          reduce using rule 327 (iteration_statement -> while_statement .)
    STRING          reduce using rule 327 (iteration_statement -> while_statement .)
    IF              reduce using rule 327 (iteration_statement -> while_statement .)
    SWITCH          reduce using rule 327 (iteration_statement -> while_statement .)
    WHILE           reduce using rule 327 (iteration_statement -> while_statement .)
    DO              reduce using rule 327 (iteration_statement -> while_statement .)
    FOR             reduce using rule 327 (iteration_statement -> while_statement .)
    FOREACH         reduce using rule 327 (iteration_statement -> while_statement .)
    GOTO            reduce using rule 327 (iteration_statement -> while_statement .)
    CONTINUE        reduce using rule 327 (iteration_statement -> while_statement .)
    BREAK           reduce using rule 327 (iteration_statement -> while_statement .)
    RETURN          reduce using rule 327 (iteration_statement -> while_statement .)
    THROW           reduce using rule 327 (iteration_statement -> while_statement .)
    FUNCTION        reduce using rule 327 (iteration_statement -> while_statement .)
    INCLUDE         reduce using rule 327 (iteration_statement -> while_statement .)
    INCLUDE_ONCE    reduce using rule 327 (iteration_statement -> while_statement .)
    REQUIRE         reduce using rule 327 (iteration_statement -> while_statement .)
    REQUIRE_ONCE    reduce using rule 327 (iteration_statement -> while_statement .)
    ABSTRACT        reduce using rule 327 (iteration_statement -> while_statement .)
    FINAL           reduce using rule 327 (iteration_statement -> while_statement .)
    PRINT           reduce using rule 327 (iteration_statement -> while_statement .)
    YIELD           reduce using rule 327 (iteration_statement -> while_statement .)
    YIELD_FROM      reduce using rule 327 (iteration_statement -> while_statement .)
    CLASS           reduce using rule 327 (iteration_statement -> while_statement .)
    $end            reduce using rule 327 (iteration_statement -> while_statement .)
    RIGHT_CBRAC     reduce using rule 327 (iteration_statement -> while_statement .)
    ELSE            reduce using rule 327 (iteration_statement -> while_statement .)
    ELSEIF          reduce using rule 327 (iteration_statement -> while_statement .)
    ENDDECLARE      reduce using rule 327 (iteration_statement -> while_statement .)
    ENDWHILE        reduce using rule 327 (iteration_statement -> while_statement .)
    ENDFOR          reduce using rule 327 (iteration_statement -> while_statement .)
    CASE            reduce using rule 327 (iteration_statement -> while_statement .)
    DEFAULT         reduce using rule 327 (iteration_statement -> while_statement .)
    ENDSWITCH       reduce using rule 327 (iteration_statement -> while_statement .)
    ENDFOREACH      reduce using rule 327 (iteration_statement -> while_statement .)
    ENDIF           reduce using rule 327 (iteration_statement -> while_statement .)


state 30

    (328) iteration_statement -> do_statement .

    LEFT_CBRAC      reduce using rule 328 (iteration_statement -> do_statement .)
    SEMICOLON       reduce using rule 328 (iteration_statement -> do_statement .)
    TRY             reduce using rule 328 (iteration_statement -> do_statement .)
    DECLARE         reduce using rule 328 (iteration_statement -> do_statement .)
    ECHO            reduce using rule 328 (iteration_statement -> do_statement .)
    UNSET           reduce using rule 328 (iteration_statement -> do_statement .)
    CONST           reduce using rule 328 (iteration_statement -> do_statement .)
    INTERFACE       reduce using rule 328 (iteration_statement -> do_statement .)
    TRAIT           reduce using rule 328 (iteration_statement -> do_statement .)
    NAMESPACE       reduce using rule 328 (iteration_statement -> do_statement .)
    USE             reduce using rule 328 (iteration_statement -> do_statement .)
    GLOBAL          reduce using rule 328 (iteration_statement -> do_statement .)
    STATIC          reduce using rule 328 (iteration_statement -> do_statement .)
    STRING          reduce using rule 328 (iteration_statement -> do_statement .)
    IF              reduce using rule 328 (iteration_statement -> do_statement .)
    SWITCH          reduce using rule 328 (iteration_statement -> do_statement .)
    WHILE           reduce using rule 328 (iteration_statement -> do_statement .)
    DO              reduce using rule 328 (iteration_statement -> do_statement .)
    FOR             reduce using rule 328 (iteration_statement -> do_statement .)
    FOREACH         reduce using rule 328 (iteration_statement -> do_statement .)
    GOTO            reduce using rule 328 (iteration_statement -> do_statement .)
    CONTINUE        reduce using rule 328 (iteration_statement -> do_statement .)
    BREAK           reduce using rule 328 (iteration_statement -> do_statement .)
    RETURN          reduce using rule 328 (iteration_statement -> do_statement .)
    THROW           reduce using rule 328 (iteration_statement -> do_statement .)
    FUNCTION        reduce using rule 328 (iteration_statement -> do_statement .)
    INCLUDE         reduce using rule 328 (iteration_statement -> do_statement .)
    INCLUDE_ONCE    reduce using rule 328 (iteration_statement -> do_statement .)
    REQUIRE         reduce using rule 328 (iteration_statement -> do_statement .)
    REQUIRE_ONCE    reduce using rule 328 (iteration_statement -> do_statement .)
    ABSTRACT        reduce using rule 328 (iteration_statement -> do_statement .)
    FINAL           reduce using rule 328 (iteration_statement -> do_statement .)
    PRINT           reduce using rule 328 (iteration_statement -> do_statement .)
    YIELD           reduce using rule 328 (iteration_statement -> do_statement .)
    YIELD_FROM      reduce using rule 328 (iteration_statement -> do_statement .)
    CLASS           reduce using rule 328 (iteration_statement -> do_statement .)
    $end            reduce using rule 328 (iteration_statement -> do_statement .)
    RIGHT_CBRAC     reduce using rule 328 (iteration_statement -> do_statement .)
    ELSE            reduce using rule 328 (iteration_statement -> do_statement .)
    ELSEIF          reduce using rule 328 (iteration_statement -> do_statement .)
    ENDDECLARE      reduce using rule 328 (iteration_statement -> do_statement .)
    ENDWHILE        reduce using rule 328 (iteration_statement -> do_statement .)
    ENDFOR          reduce using rule 328 (iteration_statement -> do_statement .)
    CASE            reduce using rule 328 (iteration_statement -> do_statement .)
    DEFAULT         reduce using rule 328 (iteration_statement -> do_statement .)
    ENDSWITCH       reduce using rule 328 (iteration_statement -> do_statement .)
    ENDFOREACH      reduce using rule 328 (iteration_statement -> do_statement .)
    ENDIF           reduce using rule 328 (iteration_statement -> do_statement .)


state 31

    (329) iteration_statement -> for_statement .

    LEFT_CBRAC      reduce using rule 329 (iteration_statement -> for_statement .)
    SEMICOLON       reduce using rule 329 (iteration_statement -> for_statement .)
    TRY             reduce using rule 329 (iteration_statement -> for_statement .)
    DECLARE         reduce using rule 329 (iteration_statement -> for_statement .)
    ECHO            reduce using rule 329 (iteration_statement -> for_statement .)
    UNSET           reduce using rule 329 (iteration_statement -> for_statement .)
    CONST           reduce using rule 329 (iteration_statement -> for_statement .)
    INTERFACE       reduce using rule 329 (iteration_statement -> for_statement .)
    TRAIT           reduce using rule 329 (iteration_statement -> for_statement .)
    NAMESPACE       reduce using rule 329 (iteration_statement -> for_statement .)
    USE             reduce using rule 329 (iteration_statement -> for_statement .)
    GLOBAL          reduce using rule 329 (iteration_statement -> for_statement .)
    STATIC          reduce using rule 329 (iteration_statement -> for_statement .)
    STRING          reduce using rule 329 (iteration_statement -> for_statement .)
    IF              reduce using rule 329 (iteration_statement -> for_statement .)
    SWITCH          reduce using rule 329 (iteration_statement -> for_statement .)
    WHILE           reduce using rule 329 (iteration_statement -> for_statement .)
    DO              reduce using rule 329 (iteration_statement -> for_statement .)
    FOR             reduce using rule 329 (iteration_statement -> for_statement .)
    FOREACH         reduce using rule 329 (iteration_statement -> for_statement .)
    GOTO            reduce using rule 329 (iteration_statement -> for_statement .)
    CONTINUE        reduce using rule 329 (iteration_statement -> for_statement .)
    BREAK           reduce using rule 329 (iteration_statement -> for_statement .)
    RETURN          reduce using rule 329 (iteration_statement -> for_statement .)
    THROW           reduce using rule 329 (iteration_statement -> for_statement .)
    FUNCTION        reduce using rule 329 (iteration_statement -> for_statement .)
    INCLUDE         reduce using rule 329 (iteration_statement -> for_statement .)
    INCLUDE_ONCE    reduce using rule 329 (iteration_statement -> for_statement .)
    REQUIRE         reduce using rule 329 (iteration_statement -> for_statement .)
    REQUIRE_ONCE    reduce using rule 329 (iteration_statement -> for_statement .)
    ABSTRACT        reduce using rule 329 (iteration_statement -> for_statement .)
    FINAL           reduce using rule 329 (iteration_statement -> for_statement .)
    PRINT           reduce using rule 329 (iteration_statement -> for_statement .)
    YIELD           reduce using rule 329 (iteration_statement -> for_statement .)
    YIELD_FROM      reduce using rule 329 (iteration_statement -> for_statement .)
    CLASS           reduce using rule 329 (iteration_statement -> for_statement .)
    $end            reduce using rule 329 (iteration_statement -> for_statement .)
    RIGHT_CBRAC     reduce using rule 329 (iteration_statement -> for_statement .)
    ELSE            reduce using rule 329 (iteration_statement -> for_statement .)
    ELSEIF          reduce using rule 329 (iteration_statement -> for_statement .)
    ENDDECLARE      reduce using rule 329 (iteration_statement -> for_statement .)
    ENDWHILE        reduce using rule 329 (iteration_statement -> for_statement .)
    ENDFOR          reduce using rule 329 (iteration_statement -> for_statement .)
    CASE            reduce using rule 329 (iteration_statement -> for_statement .)
    DEFAULT         reduce using rule 329 (iteration_statement -> for_statement .)
    ENDSWITCH       reduce using rule 329 (iteration_statement -> for_statement .)
    ENDFOREACH      reduce using rule 329 (iteration_statement -> for_statement .)
    ENDIF           reduce using rule 329 (iteration_statement -> for_statement .)


state 32

    (330) iteration_statement -> foreach_statement .

    LEFT_CBRAC      reduce using rule 330 (iteration_statement -> foreach_statement .)
    SEMICOLON       reduce using rule 330 (iteration_statement -> foreach_statement .)
    TRY             reduce using rule 330 (iteration_statement -> foreach_statement .)
    DECLARE         reduce using rule 330 (iteration_statement -> foreach_statement .)
    ECHO            reduce using rule 330 (iteration_statement -> foreach_statement .)
    UNSET           reduce using rule 330 (iteration_statement -> foreach_statement .)
    CONST           reduce using rule 330 (iteration_statement -> foreach_statement .)
    INTERFACE       reduce using rule 330 (iteration_statement -> foreach_statement .)
    TRAIT           reduce using rule 330 (iteration_statement -> foreach_statement .)
    NAMESPACE       reduce using rule 330 (iteration_statement -> foreach_statement .)
    USE             reduce using rule 330 (iteration_statement -> foreach_statement .)
    GLOBAL          reduce using rule 330 (iteration_statement -> foreach_statement .)
    STATIC          reduce using rule 330 (iteration_statement -> foreach_statement .)
    STRING          reduce using rule 330 (iteration_statement -> foreach_statement .)
    IF              reduce using rule 330 (iteration_statement -> foreach_statement .)
    SWITCH          reduce using rule 330 (iteration_statement -> foreach_statement .)
    WHILE           reduce using rule 330 (iteration_statement -> foreach_statement .)
    DO              reduce using rule 330 (iteration_statement -> foreach_statement .)
    FOR             reduce using rule 330 (iteration_statement -> foreach_statement .)
    FOREACH         reduce using rule 330 (iteration_statement -> foreach_statement .)
    GOTO            reduce using rule 330 (iteration_statement -> foreach_statement .)
    CONTINUE        reduce using rule 330 (iteration_statement -> foreach_statement .)
    BREAK           reduce using rule 330 (iteration_statement -> foreach_statement .)
    RETURN          reduce using rule 330 (iteration_statement -> foreach_statement .)
    THROW           reduce using rule 330 (iteration_statement -> foreach_statement .)
    FUNCTION        reduce using rule 330 (iteration_statement -> foreach_statement .)
    INCLUDE         reduce using rule 330 (iteration_statement -> foreach_statement .)
    INCLUDE_ONCE    reduce using rule 330 (iteration_statement -> foreach_statement .)
    REQUIRE         reduce using rule 330 (iteration_statement -> foreach_statement .)
    REQUIRE_ONCE    reduce using rule 330 (iteration_statement -> foreach_statement .)
    ABSTRACT        reduce using rule 330 (iteration_statement -> foreach_statement .)
    FINAL           reduce using rule 330 (iteration_statement -> foreach_statement .)
    PRINT           reduce using rule 330 (iteration_statement -> foreach_statement .)
    YIELD           reduce using rule 330 (iteration_statement -> foreach_statement .)
    YIELD_FROM      reduce using rule 330 (iteration_statement -> foreach_statement .)
    CLASS           reduce using rule 330 (iteration_statement -> foreach_statement .)
    $end            reduce using rule 330 (iteration_statement -> foreach_statement .)
    RIGHT_CBRAC     reduce using rule 330 (iteration_statement -> foreach_statement .)
    ELSE            reduce using rule 330 (iteration_statement -> foreach_statement .)
    ELSEIF          reduce using rule 330 (iteration_statement -> foreach_statement .)
    ENDDECLARE      reduce using rule 330 (iteration_statement -> foreach_statement .)
    ENDWHILE        reduce using rule 330 (iteration_statement -> foreach_statement .)
    ENDFOR          reduce using rule 330 (iteration_statement -> foreach_statement .)
    CASE            reduce using rule 330 (iteration_statement -> foreach_statement .)
    DEFAULT         reduce using rule 330 (iteration_statement -> foreach_statement .)
    ENDSWITCH       reduce using rule 330 (iteration_statement -> foreach_statement .)
    ENDFOREACH      reduce using rule 330 (iteration_statement -> foreach_statement .)
    ENDIF           reduce using rule 330 (iteration_statement -> foreach_statement .)


state 33

    (364) jump_statement -> goto_statement .

    LEFT_CBRAC      reduce using rule 364 (jump_statement -> goto_statement .)
    SEMICOLON       reduce using rule 364 (jump_statement -> goto_statement .)
    TRY             reduce using rule 364 (jump_statement -> goto_statement .)
    DECLARE         reduce using rule 364 (jump_statement -> goto_statement .)
    ECHO            reduce using rule 364 (jump_statement -> goto_statement .)
    UNSET           reduce using rule 364 (jump_statement -> goto_statement .)
    CONST           reduce using rule 364 (jump_statement -> goto_statement .)
    INTERFACE       reduce using rule 364 (jump_statement -> goto_statement .)
    TRAIT           reduce using rule 364 (jump_statement -> goto_statement .)
    NAMESPACE       reduce using rule 364 (jump_statement -> goto_statement .)
    USE             reduce using rule 364 (jump_statement -> goto_statement .)
    GLOBAL          reduce using rule 364 (jump_statement -> goto_statement .)
    STATIC          reduce using rule 364 (jump_statement -> goto_statement .)
    STRING          reduce using rule 364 (jump_statement -> goto_statement .)
    IF              reduce using rule 364 (jump_statement -> goto_statement .)
    SWITCH          reduce using rule 364 (jump_statement -> goto_statement .)
    WHILE           reduce using rule 364 (jump_statement -> goto_statement .)
    DO              reduce using rule 364 (jump_statement -> goto_statement .)
    FOR             reduce using rule 364 (jump_statement -> goto_statement .)
    FOREACH         reduce using rule 364 (jump_statement -> goto_statement .)
    GOTO            reduce using rule 364 (jump_statement -> goto_statement .)
    CONTINUE        reduce using rule 364 (jump_statement -> goto_statement .)
    BREAK           reduce using rule 364 (jump_statement -> goto_statement .)
    RETURN          reduce using rule 364 (jump_statement -> goto_statement .)
    THROW           reduce using rule 364 (jump_statement -> goto_statement .)
    FUNCTION        reduce using rule 364 (jump_statement -> goto_statement .)
    INCLUDE         reduce using rule 364 (jump_statement -> goto_statement .)
    INCLUDE_ONCE    reduce using rule 364 (jump_statement -> goto_statement .)
    REQUIRE         reduce using rule 364 (jump_statement -> goto_statement .)
    REQUIRE_ONCE    reduce using rule 364 (jump_statement -> goto_statement .)
    ABSTRACT        reduce using rule 364 (jump_statement -> goto_statement .)
    FINAL           reduce using rule 364 (jump_statement -> goto_statement .)
    PRINT           reduce using rule 364 (jump_statement -> goto_statement .)
    YIELD           reduce using rule 364 (jump_statement -> goto_statement .)
    YIELD_FROM      reduce using rule 364 (jump_statement -> goto_statement .)
    CLASS           reduce using rule 364 (jump_statement -> goto_statement .)
    $end            reduce using rule 364 (jump_statement -> goto_statement .)
    RIGHT_CBRAC     reduce using rule 364 (jump_statement -> goto_statement .)
    ELSE            reduce using rule 364 (jump_statement -> goto_statement .)
    ELSEIF          reduce using rule 364 (jump_statement -> goto_statement .)
    ENDDECLARE      reduce using rule 364 (jump_statement -> goto_statement .)
    ENDWHILE        reduce using rule 364 (jump_statement -> goto_statement .)
    ENDFOR          reduce using rule 364 (jump_statement -> goto_statement .)
    CASE            reduce using rule 364 (jump_statement -> goto_statement .)
    DEFAULT         reduce using rule 364 (jump_statement -> goto_statement .)
    ENDSWITCH       reduce using rule 364 (jump_statement -> goto_statement .)
    ENDFOREACH      reduce using rule 364 (jump_statement -> goto_statement .)
    ENDIF           reduce using rule 364 (jump_statement -> goto_statement .)


state 34

    (365) jump_statement -> continue_statement .

    LEFT_CBRAC      reduce using rule 365 (jump_statement -> continue_statement .)
    SEMICOLON       reduce using rule 365 (jump_statement -> continue_statement .)
    TRY             reduce using rule 365 (jump_statement -> continue_statement .)
    DECLARE         reduce using rule 365 (jump_statement -> continue_statement .)
    ECHO            reduce using rule 365 (jump_statement -> continue_statement .)
    UNSET           reduce using rule 365 (jump_statement -> continue_statement .)
    CONST           reduce using rule 365 (jump_statement -> continue_statement .)
    INTERFACE       reduce using rule 365 (jump_statement -> continue_statement .)
    TRAIT           reduce using rule 365 (jump_statement -> continue_statement .)
    NAMESPACE       reduce using rule 365 (jump_statement -> continue_statement .)
    USE             reduce using rule 365 (jump_statement -> continue_statement .)
    GLOBAL          reduce using rule 365 (jump_statement -> continue_statement .)
    STATIC          reduce using rule 365 (jump_statement -> continue_statement .)
    STRING          reduce using rule 365 (jump_statement -> continue_statement .)
    IF              reduce using rule 365 (jump_statement -> continue_statement .)
    SWITCH          reduce using rule 365 (jump_statement -> continue_statement .)
    WHILE           reduce using rule 365 (jump_statement -> continue_statement .)
    DO              reduce using rule 365 (jump_statement -> continue_statement .)
    FOR             reduce using rule 365 (jump_statement -> continue_statement .)
    FOREACH         reduce using rule 365 (jump_statement -> continue_statement .)
    GOTO            reduce using rule 365 (jump_statement -> continue_statement .)
    CONTINUE        reduce using rule 365 (jump_statement -> continue_statement .)
    BREAK           reduce using rule 365 (jump_statement -> continue_statement .)
    RETURN          reduce using rule 365 (jump_statement -> continue_statement .)
    THROW           reduce using rule 365 (jump_statement -> continue_statement .)
    FUNCTION        reduce using rule 365 (jump_statement -> continue_statement .)
    INCLUDE         reduce using rule 365 (jump_statement -> continue_statement .)
    INCLUDE_ONCE    reduce using rule 365 (jump_statement -> continue_statement .)
    REQUIRE         reduce using rule 365 (jump_statement -> continue_statement .)
    REQUIRE_ONCE    reduce using rule 365 (jump_statement -> continue_statement .)
    ABSTRACT        reduce using rule 365 (jump_statement -> continue_statement .)
    FINAL           reduce using rule 365 (jump_statement -> continue_statement .)
    PRINT           reduce using rule 365 (jump_statement -> continue_statement .)
    YIELD           reduce using rule 365 (jump_statement -> continue_statement .)
    YIELD_FROM      reduce using rule 365 (jump_statement -> continue_statement .)
    CLASS           reduce using rule 365 (jump_statement -> continue_statement .)
    $end            reduce using rule 365 (jump_statement -> continue_statement .)
    RIGHT_CBRAC     reduce using rule 365 (jump_statement -> continue_statement .)
    ELSE            reduce using rule 365 (jump_statement -> continue_statement .)
    ELSEIF          reduce using rule 365 (jump_statement -> continue_statement .)
    ENDDECLARE      reduce using rule 365 (jump_statement -> continue_statement .)
    ENDWHILE        reduce using rule 365 (jump_statement -> continue_statement .)
    ENDFOR          reduce using rule 365 (jump_statement -> continue_statement .)
    CASE            reduce using rule 365 (jump_statement -> continue_statement .)
    DEFAULT         reduce using rule 365 (jump_statement -> continue_statement .)
    ENDSWITCH       reduce using rule 365 (jump_statement -> continue_statement .)
    ENDFOREACH      reduce using rule 365 (jump_statement -> continue_statement .)
    ENDIF           reduce using rule 365 (jump_statement -> continue_statement .)


state 35

    (366) jump_statement -> break_statement .

    LEFT_CBRAC      reduce using rule 366 (jump_statement -> break_statement .)
    SEMICOLON       reduce using rule 366 (jump_statement -> break_statement .)
    TRY             reduce using rule 366 (jump_statement -> break_statement .)
    DECLARE         reduce using rule 366 (jump_statement -> break_statement .)
    ECHO            reduce using rule 366 (jump_statement -> break_statement .)
    UNSET           reduce using rule 366 (jump_statement -> break_statement .)
    CONST           reduce using rule 366 (jump_statement -> break_statement .)
    INTERFACE       reduce using rule 366 (jump_statement -> break_statement .)
    TRAIT           reduce using rule 366 (jump_statement -> break_statement .)
    NAMESPACE       reduce using rule 366 (jump_statement -> break_statement .)
    USE             reduce using rule 366 (jump_statement -> break_statement .)
    GLOBAL          reduce using rule 366 (jump_statement -> break_statement .)
    STATIC          reduce using rule 366 (jump_statement -> break_statement .)
    STRING          reduce using rule 366 (jump_statement -> break_statement .)
    IF              reduce using rule 366 (jump_statement -> break_statement .)
    SWITCH          reduce using rule 366 (jump_statement -> break_statement .)
    WHILE           reduce using rule 366 (jump_statement -> break_statement .)
    DO              reduce using rule 366 (jump_statement -> break_statement .)
    FOR             reduce using rule 366 (jump_statement -> break_statement .)
    FOREACH         reduce using rule 366 (jump_statement -> break_statement .)
    GOTO            reduce using rule 366 (jump_statement -> break_statement .)
    CONTINUE        reduce using rule 366 (jump_statement -> break_statement .)
    BREAK           reduce using rule 366 (jump_statement -> break_statement .)
    RETURN          reduce using rule 366 (jump_statement -> break_statement .)
    THROW           reduce using rule 366 (jump_statement -> break_statement .)
    FUNCTION        reduce using rule 366 (jump_statement -> break_statement .)
    INCLUDE         reduce using rule 366 (jump_statement -> break_statement .)
    INCLUDE_ONCE    reduce using rule 366 (jump_statement -> break_statement .)
    REQUIRE         reduce using rule 366 (jump_statement -> break_statement .)
    REQUIRE_ONCE    reduce using rule 366 (jump_statement -> break_statement .)
    ABSTRACT        reduce using rule 366 (jump_statement -> break_statement .)
    FINAL           reduce using rule 366 (jump_statement -> break_statement .)
    PRINT           reduce using rule 366 (jump_statement -> break_statement .)
    YIELD           reduce using rule 366 (jump_statement -> break_statement .)
    YIELD_FROM      reduce using rule 366 (jump_statement -> break_statement .)
    CLASS           reduce using rule 366 (jump_statement -> break_statement .)
    $end            reduce using rule 366 (jump_statement -> break_statement .)
    RIGHT_CBRAC     reduce using rule 366 (jump_statement -> break_statement .)
    ELSE            reduce using rule 366 (jump_statement -> break_statement .)
    ELSEIF          reduce using rule 366 (jump_statement -> break_statement .)
    ENDDECLARE      reduce using rule 366 (jump_statement -> break_statement .)
    ENDWHILE        reduce using rule 366 (jump_statement -> break_statement .)
    ENDFOR          reduce using rule 366 (jump_statement -> break_statement .)
    CASE            reduce using rule 366 (jump_statement -> break_statement .)
    DEFAULT         reduce using rule 366 (jump_statement -> break_statement .)
    ENDSWITCH       reduce using rule 366 (jump_statement -> break_statement .)
    ENDFOREACH      reduce using rule 366 (jump_statement -> break_statement .)
    ENDIF           reduce using rule 366 (jump_statement -> break_statement .)


state 36

    (367) jump_statement -> return_statement .

    LEFT_CBRAC      reduce using rule 367 (jump_statement -> return_statement .)
    SEMICOLON       reduce using rule 367 (jump_statement -> return_statement .)
    TRY             reduce using rule 367 (jump_statement -> return_statement .)
    DECLARE         reduce using rule 367 (jump_statement -> return_statement .)
    ECHO            reduce using rule 367 (jump_statement -> return_statement .)
    UNSET           reduce using rule 367 (jump_statement -> return_statement .)
    CONST           reduce using rule 367 (jump_statement -> return_statement .)
    INTERFACE       reduce using rule 367 (jump_statement -> return_statement .)
    TRAIT           reduce using rule 367 (jump_statement -> return_statement .)
    NAMESPACE       reduce using rule 367 (jump_statement -> return_statement .)
    USE             reduce using rule 367 (jump_statement -> return_statement .)
    GLOBAL          reduce using rule 367 (jump_statement -> return_statement .)
    STATIC          reduce using rule 367 (jump_statement -> return_statement .)
    STRING          reduce using rule 367 (jump_statement -> return_statement .)
    IF              reduce using rule 367 (jump_statement -> return_statement .)
    SWITCH          reduce using rule 367 (jump_statement -> return_statement .)
    WHILE           reduce using rule 367 (jump_statement -> return_statement .)
    DO              reduce using rule 367 (jump_statement -> return_statement .)
    FOR             reduce using rule 367 (jump_statement -> return_statement .)
    FOREACH         reduce using rule 367 (jump_statement -> return_statement .)
    GOTO            reduce using rule 367 (jump_statement -> return_statement .)
    CONTINUE        reduce using rule 367 (jump_statement -> return_statement .)
    BREAK           reduce using rule 367 (jump_statement -> return_statement .)
    RETURN          reduce using rule 367 (jump_statement -> return_statement .)
    THROW           reduce using rule 367 (jump_statement -> return_statement .)
    FUNCTION        reduce using rule 367 (jump_statement -> return_statement .)
    INCLUDE         reduce using rule 367 (jump_statement -> return_statement .)
    INCLUDE_ONCE    reduce using rule 367 (jump_statement -> return_statement .)
    REQUIRE         reduce using rule 367 (jump_statement -> return_statement .)
    REQUIRE_ONCE    reduce using rule 367 (jump_statement -> return_statement .)
    ABSTRACT        reduce using rule 367 (jump_statement -> return_statement .)
    FINAL           reduce using rule 367 (jump_statement -> return_statement .)
    PRINT           reduce using rule 367 (jump_statement -> return_statement .)
    YIELD           reduce using rule 367 (jump_statement -> return_statement .)
    YIELD_FROM      reduce using rule 367 (jump_statement -> return_statement .)
    CLASS           reduce using rule 367 (jump_statement -> return_statement .)
    $end            reduce using rule 367 (jump_statement -> return_statement .)
    RIGHT_CBRAC     reduce using rule 367 (jump_statement -> return_statement .)
    ELSE            reduce using rule 367 (jump_statement -> return_statement .)
    ELSEIF          reduce using rule 367 (jump_statement -> return_statement .)
    ENDDECLARE      reduce using rule 367 (jump_statement -> return_statement .)
    ENDWHILE        reduce using rule 367 (jump_statement -> return_statement .)
    ENDFOR          reduce using rule 367 (jump_statement -> return_statement .)
    CASE            reduce using rule 367 (jump_statement -> return_statement .)
    DEFAULT         reduce using rule 367 (jump_statement -> return_statement .)
    ENDSWITCH       reduce using rule 367 (jump_statement -> return_statement .)
    ENDFOREACH      reduce using rule 367 (jump_statement -> return_statement .)
    ENDIF           reduce using rule 367 (jump_statement -> return_statement .)


state 37

    (368) jump_statement -> throw_statement .

    LEFT_CBRAC      reduce using rule 368 (jump_statement -> throw_statement .)
    SEMICOLON       reduce using rule 368 (jump_statement -> throw_statement .)
    TRY             reduce using rule 368 (jump_statement -> throw_statement .)
    DECLARE         reduce using rule 368 (jump_statement -> throw_statement .)
    ECHO            reduce using rule 368 (jump_statement -> throw_statement .)
    UNSET           reduce using rule 368 (jump_statement -> throw_statement .)
    CONST           reduce using rule 368 (jump_statement -> throw_statement .)
    INTERFACE       reduce using rule 368 (jump_statement -> throw_statement .)
    TRAIT           reduce using rule 368 (jump_statement -> throw_statement .)
    NAMESPACE       reduce using rule 368 (jump_statement -> throw_statement .)
    USE             reduce using rule 368 (jump_statement -> throw_statement .)
    GLOBAL          reduce using rule 368 (jump_statement -> throw_statement .)
    STATIC          reduce using rule 368 (jump_statement -> throw_statement .)
    STRING          reduce using rule 368 (jump_statement -> throw_statement .)
    IF              reduce using rule 368 (jump_statement -> throw_statement .)
    SWITCH          reduce using rule 368 (jump_statement -> throw_statement .)
    WHILE           reduce using rule 368 (jump_statement -> throw_statement .)
    DO              reduce using rule 368 (jump_statement -> throw_statement .)
    FOR             reduce using rule 368 (jump_statement -> throw_statement .)
    FOREACH         reduce using rule 368 (jump_statement -> throw_statement .)
    GOTO            reduce using rule 368 (jump_statement -> throw_statement .)
    CONTINUE        reduce using rule 368 (jump_statement -> throw_statement .)
    BREAK           reduce using rule 368 (jump_statement -> throw_statement .)
    RETURN          reduce using rule 368 (jump_statement -> throw_statement .)
    THROW           reduce using rule 368 (jump_statement -> throw_statement .)
    FUNCTION        reduce using rule 368 (jump_statement -> throw_statement .)
    INCLUDE         reduce using rule 368 (jump_statement -> throw_statement .)
    INCLUDE_ONCE    reduce using rule 368 (jump_statement -> throw_statement .)
    REQUIRE         reduce using rule 368 (jump_statement -> throw_statement .)
    REQUIRE_ONCE    reduce using rule 368 (jump_statement -> throw_statement .)
    ABSTRACT        reduce using rule 368 (jump_statement -> throw_statement .)
    FINAL           reduce using rule 368 (jump_statement -> throw_statement .)
    PRINT           reduce using rule 368 (jump_statement -> throw_statement .)
    YIELD           reduce using rule 368 (jump_statement -> throw_statement .)
    YIELD_FROM      reduce using rule 368 (jump_statement -> throw_statement .)
    CLASS           reduce using rule 368 (jump_statement -> throw_statement .)
    $end            reduce using rule 368 (jump_statement -> throw_statement .)
    RIGHT_CBRAC     reduce using rule 368 (jump_statement -> throw_statement .)
    ELSE            reduce using rule 368 (jump_statement -> throw_statement .)
    ELSEIF          reduce using rule 368 (jump_statement -> throw_statement .)
    ENDDECLARE      reduce using rule 368 (jump_statement -> throw_statement .)
    ENDWHILE        reduce using rule 368 (jump_statement -> throw_statement .)
    ENDFOR          reduce using rule 368 (jump_statement -> throw_statement .)
    CASE            reduce using rule 368 (jump_statement -> throw_statement .)
    DEFAULT         reduce using rule 368 (jump_statement -> throw_statement .)
    ENDSWITCH       reduce using rule 368 (jump_statement -> throw_statement .)
    ENDFOREACH      reduce using rule 368 (jump_statement -> throw_statement .)
    ENDIF           reduce using rule 368 (jump_statement -> throw_statement .)


state 38

    (382) try_statement -> TRY . compound_statement catch_clauses
    (383) try_statement -> TRY . compound_statement finally_clause
    (384) try_statement -> TRY . compound_statement catch_clauses finally_clause
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 89

state 39

    (391) declare_statement -> DECLARE . LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> DECLARE . LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> DECLARE . LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 90


state 40

    (397) echo_statement -> ECHO . expression_list SEMICOLON
    (398) expression_list -> . expression
    (399) expression_list -> . expression_list expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression_list                shift and go to state 91
    expression                     shift and go to state 92
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 41

    (400) unset_statement -> UNSET . LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> UNSET . LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 93


state 42

    (455) const_declaration -> CONST . const_elements SEMICOLON
    (457) const_elements -> . const_element
    (458) const_elements -> . const_elements const_element
    (459) const_element -> . name EQUAL constant_expression
    (555) name -> . STRING

    STRING          shift and go to state 51

    const_elements                 shift and go to state 94
    const_element                  shift and go to state 95
    name                           shift and go to state 96

state 43

    (402) function_definition -> function_definition_header . compound_statement
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 97

state 44

    (433) class_declaration -> class_modifieropt . CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC

    CLASS           shift and go to state 98


state 45

    (489) interface_declaration -> INTERFACE . name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 99

state 46

    (500) trait_declaration -> TRAIT . name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 100

state 47

    (530) namespace_definition -> NAMESPACE . namespace_name SEMICOLON
    (531) namespace_definition -> NAMESPACE . namespace_nameopt compound_statement
    (7) namespace_name -> . NAME
    (8) namespace_name -> . namespace_name NS_SEPARATOR NAME
    (532) namespace_nameopt -> . namespace_name
    (533) namespace_nameopt -> .

    NAME            shift and go to state 103
    LEFT_CBRAC      reduce using rule 533 (namespace_nameopt -> .)

    namespace_name                 shift and go to state 101
    namespace_nameopt              shift and go to state 102

state 48

    (534) namespace_use_declaration -> USE . namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> USE . namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> USE . NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (537) namespace_function_or_constopt -> . namespace_function_or_const
    (538) namespace_function_or_constopt -> .
    (547) namespace_function_or_const -> . FUNCTION
    (548) namespace_function_or_const -> . CONST
    (539) NS_SEPARATORopt -> . NS_SEPARATOR
    (540) NS_SEPARATORopt -> .

    STRING          reduce using rule 538 (namespace_function_or_constopt -> .)
    FUNCTION        shift and go to state 108
    CONST           shift and go to state 109
    NS_SEPARATOR    shift and go to state 107
    NAME            reduce using rule 540 (NS_SEPARATORopt -> .)

    namespace_function_or_constopt shift and go to state 104
    namespace_function_or_const    shift and go to state 105
    NS_SEPARATORopt                shift and go to state 106

state 49

    (17) global_declaration -> GLOBAL . variable_name_list SEMICOLON
    (18) variable_name_list -> . simple_variable
    (19) variable_name_list -> . variable_name_list simple_variable
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    variable_name_list             shift and go to state 110
    simple_variable                shift and go to state 111

state 50

    (9) function_static_declaration -> STATIC . static_variable_name_list SEMICOLON
    (10) static_variable_name_list -> . static_variable_declaration
    (11) static_variable_name_list -> . static_variable_name_list static_variable_declaration
    (12) static_variable_declaration -> . VARIABLE function_static_initializer_opt

    VARIABLE        shift and go to state 116

    static_variable_name_list      shift and go to state 114
    static_variable_declaration    shift and go to state 115

state 51

    (555) name -> STRING .

    DOUBLE_POINT    reduce using rule 555 (name -> STRING .)
    EQUAL           reduce using rule 555 (name -> STRING .)
    EXTENDS         reduce using rule 555 (name -> STRING .)
    LEFT_CBRAC      reduce using rule 555 (name -> STRING .)
    SEMICOLON       reduce using rule 555 (name -> STRING .)
    IMPLEMENTS      reduce using rule 555 (name -> STRING .)
    AS              reduce using rule 555 (name -> STRING .)
    LEFT_PARENTHESIS reduce using rule 555 (name -> STRING .)
    DOUBLE_COLON    reduce using rule 555 (name -> STRING .)
    DOUBLEASTERISK  reduce using rule 555 (name -> STRING .)
    ASTERISK        reduce using rule 555 (name -> STRING .)
    DIVIDE          reduce using rule 555 (name -> STRING .)
    MODULO          reduce using rule 555 (name -> STRING .)
    PLUS            reduce using rule 555 (name -> STRING .)
    LESS            reduce using rule 555 (name -> STRING .)
    CONCAT          reduce using rule 555 (name -> STRING .)
    SL              reduce using rule 555 (name -> STRING .)
    SR              reduce using rule 555 (name -> STRING .)
    LESS_THAN       reduce using rule 555 (name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 555 (name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 555 (name -> STRING .)
    GREATER_THAN_OR_EQUAL reduce using rule 555 (name -> STRING .)
    SPACESHIP       reduce using rule 555 (name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 555 (name -> STRING .)
    IS_IDENTICAL    reduce using rule 555 (name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 555 (name -> STRING .)
    AMPERSAND       reduce using rule 555 (name -> STRING .)
    BITWISE_XOR     reduce using rule 555 (name -> STRING .)
    BITWISE_OR      reduce using rule 555 (name -> STRING .)
    COALESCE        reduce using rule 555 (name -> STRING .)
    TERNARY_OPERATION reduce using rule 555 (name -> STRING .)
    AND             reduce using rule 555 (name -> STRING .)
    XOR             reduce using rule 555 (name -> STRING .)
    OR              reduce using rule 555 (name -> STRING .)
    INCLUDE         reduce using rule 555 (name -> STRING .)
    INCLUDE_ONCE    reduce using rule 555 (name -> STRING .)
    REQUIRE         reduce using rule 555 (name -> STRING .)
    REQUIRE_ONCE    reduce using rule 555 (name -> STRING .)
    PRINT           reduce using rule 555 (name -> STRING .)
    YIELD           reduce using rule 555 (name -> STRING .)
    YIELD_FROM      reduce using rule 555 (name -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 555 (name -> STRING .)
    COLON           reduce using rule 555 (name -> STRING .)
    ARROW           reduce using rule 555 (name -> STRING .)
    STRING          reduce using rule 555 (name -> STRING .)
    RIGHT_CBRAC     reduce using rule 555 (name -> STRING .)
    VARIABLE        reduce using rule 555 (name -> STRING .)
    DOUBLE_ARROW    reduce using rule 555 (name -> STRING .)
    ELLIPSIS        reduce using rule 555 (name -> STRING .)
    ARRAY           reduce using rule 555 (name -> STRING .)
    CALLABLE        reduce using rule 555 (name -> STRING .)
    ITERABLE        reduce using rule 555 (name -> STRING .)
    BOOL            reduce using rule 555 (name -> STRING .)
    FLOAT           reduce using rule 555 (name -> STRING .)
    INT             reduce using rule 555 (name -> STRING .)
    INSTANCEOF      reduce using rule 555 (name -> STRING .)
    NAME            reduce using rule 555 (name -> STRING .)
    FUNCTION        reduce using rule 555 (name -> STRING .)
    CONST           reduce using rule 555 (name -> STRING .)
    CONSTRUCT       reduce using rule 555 (name -> STRING .)
    DESTRUCT        reduce using rule 555 (name -> STRING .)
    INSTEADOF       reduce using rule 555 (name -> STRING .)


state 52

    (260) expression -> logical_inc_OR_expression_2 .
    (259) logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 . OR logical_exc_OR_expression

    SEMICOLON       reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    INCLUDE         reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    INCLUDE_ONCE    reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    REQUIRE         reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    REQUIRE_ONCE    reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    PRINT           reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    YIELD           reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    YIELD_FROM      reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    RIGHT_PARENTHESIS reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    COLON           reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    AS              reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    ARROW           reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    STRING          reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    RIGHT_CBRAC     reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    VARIABLE        reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    DOUBLE_POINT    reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    DOUBLE_ARROW    reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    ELLIPSIS        reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    TERNARY_OPERATION reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    AMPERSAND       reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    ARRAY           reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    CALLABLE        reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    ITERABLE        reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    BOOL            reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    FLOAT           reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    INT             reduce using rule 260 (expression -> logical_inc_OR_expression_2 .)
    OR              shift and go to state 117


state 53

    (261) expression -> include_expression .

    SEMICOLON       reduce using rule 261 (expression -> include_expression .)
    INCLUDE         reduce using rule 261 (expression -> include_expression .)
    INCLUDE_ONCE    reduce using rule 261 (expression -> include_expression .)
    REQUIRE         reduce using rule 261 (expression -> include_expression .)
    REQUIRE_ONCE    reduce using rule 261 (expression -> include_expression .)
    PRINT           reduce using rule 261 (expression -> include_expression .)
    YIELD           reduce using rule 261 (expression -> include_expression .)
    YIELD_FROM      reduce using rule 261 (expression -> include_expression .)
    RIGHT_PARENTHESIS reduce using rule 261 (expression -> include_expression .)
    COLON           reduce using rule 261 (expression -> include_expression .)
    AS              reduce using rule 261 (expression -> include_expression .)
    ARROW           reduce using rule 261 (expression -> include_expression .)
    STRING          reduce using rule 261 (expression -> include_expression .)
    RIGHT_CBRAC     reduce using rule 261 (expression -> include_expression .)
    VARIABLE        reduce using rule 261 (expression -> include_expression .)
    DOUBLE_POINT    reduce using rule 261 (expression -> include_expression .)
    DOUBLE_ARROW    reduce using rule 261 (expression -> include_expression .)
    ELLIPSIS        reduce using rule 261 (expression -> include_expression .)
    TERNARY_OPERATION reduce using rule 261 (expression -> include_expression .)
    AMPERSAND       reduce using rule 261 (expression -> include_expression .)
    ARRAY           reduce using rule 261 (expression -> include_expression .)
    CALLABLE        reduce using rule 261 (expression -> include_expression .)
    ITERABLE        reduce using rule 261 (expression -> include_expression .)
    BOOL            reduce using rule 261 (expression -> include_expression .)
    FLOAT           reduce using rule 261 (expression -> include_expression .)
    INT             reduce using rule 261 (expression -> include_expression .)


state 54

    (262) expression -> include_once_expression .

    SEMICOLON       reduce using rule 262 (expression -> include_once_expression .)
    INCLUDE         reduce using rule 262 (expression -> include_once_expression .)
    INCLUDE_ONCE    reduce using rule 262 (expression -> include_once_expression .)
    REQUIRE         reduce using rule 262 (expression -> include_once_expression .)
    REQUIRE_ONCE    reduce using rule 262 (expression -> include_once_expression .)
    PRINT           reduce using rule 262 (expression -> include_once_expression .)
    YIELD           reduce using rule 262 (expression -> include_once_expression .)
    YIELD_FROM      reduce using rule 262 (expression -> include_once_expression .)
    RIGHT_PARENTHESIS reduce using rule 262 (expression -> include_once_expression .)
    COLON           reduce using rule 262 (expression -> include_once_expression .)
    AS              reduce using rule 262 (expression -> include_once_expression .)
    ARROW           reduce using rule 262 (expression -> include_once_expression .)
    STRING          reduce using rule 262 (expression -> include_once_expression .)
    RIGHT_CBRAC     reduce using rule 262 (expression -> include_once_expression .)
    VARIABLE        reduce using rule 262 (expression -> include_once_expression .)
    DOUBLE_POINT    reduce using rule 262 (expression -> include_once_expression .)
    DOUBLE_ARROW    reduce using rule 262 (expression -> include_once_expression .)
    ELLIPSIS        reduce using rule 262 (expression -> include_once_expression .)
    TERNARY_OPERATION reduce using rule 262 (expression -> include_once_expression .)
    AMPERSAND       reduce using rule 262 (expression -> include_once_expression .)
    ARRAY           reduce using rule 262 (expression -> include_once_expression .)
    CALLABLE        reduce using rule 262 (expression -> include_once_expression .)
    ITERABLE        reduce using rule 262 (expression -> include_once_expression .)
    BOOL            reduce using rule 262 (expression -> include_once_expression .)
    FLOAT           reduce using rule 262 (expression -> include_once_expression .)
    INT             reduce using rule 262 (expression -> include_once_expression .)


state 55

    (263) expression -> require_expression .

    SEMICOLON       reduce using rule 263 (expression -> require_expression .)
    INCLUDE         reduce using rule 263 (expression -> require_expression .)
    INCLUDE_ONCE    reduce using rule 263 (expression -> require_expression .)
    REQUIRE         reduce using rule 263 (expression -> require_expression .)
    REQUIRE_ONCE    reduce using rule 263 (expression -> require_expression .)
    PRINT           reduce using rule 263 (expression -> require_expression .)
    YIELD           reduce using rule 263 (expression -> require_expression .)
    YIELD_FROM      reduce using rule 263 (expression -> require_expression .)
    RIGHT_PARENTHESIS reduce using rule 263 (expression -> require_expression .)
    COLON           reduce using rule 263 (expression -> require_expression .)
    AS              reduce using rule 263 (expression -> require_expression .)
    ARROW           reduce using rule 263 (expression -> require_expression .)
    STRING          reduce using rule 263 (expression -> require_expression .)
    RIGHT_CBRAC     reduce using rule 263 (expression -> require_expression .)
    VARIABLE        reduce using rule 263 (expression -> require_expression .)
    DOUBLE_POINT    reduce using rule 263 (expression -> require_expression .)
    DOUBLE_ARROW    reduce using rule 263 (expression -> require_expression .)
    ELLIPSIS        reduce using rule 263 (expression -> require_expression .)
    TERNARY_OPERATION reduce using rule 263 (expression -> require_expression .)
    AMPERSAND       reduce using rule 263 (expression -> require_expression .)
    ARRAY           reduce using rule 263 (expression -> require_expression .)
    CALLABLE        reduce using rule 263 (expression -> require_expression .)
    ITERABLE        reduce using rule 263 (expression -> require_expression .)
    BOOL            reduce using rule 263 (expression -> require_expression .)
    FLOAT           reduce using rule 263 (expression -> require_expression .)
    INT             reduce using rule 263 (expression -> require_expression .)


state 56

    (264) expression -> require_once_expression .

    SEMICOLON       reduce using rule 264 (expression -> require_once_expression .)
    INCLUDE         reduce using rule 264 (expression -> require_once_expression .)
    INCLUDE_ONCE    reduce using rule 264 (expression -> require_once_expression .)
    REQUIRE         reduce using rule 264 (expression -> require_once_expression .)
    REQUIRE_ONCE    reduce using rule 264 (expression -> require_once_expression .)
    PRINT           reduce using rule 264 (expression -> require_once_expression .)
    YIELD           reduce using rule 264 (expression -> require_once_expression .)
    YIELD_FROM      reduce using rule 264 (expression -> require_once_expression .)
    RIGHT_PARENTHESIS reduce using rule 264 (expression -> require_once_expression .)
    COLON           reduce using rule 264 (expression -> require_once_expression .)
    AS              reduce using rule 264 (expression -> require_once_expression .)
    ARROW           reduce using rule 264 (expression -> require_once_expression .)
    STRING          reduce using rule 264 (expression -> require_once_expression .)
    RIGHT_CBRAC     reduce using rule 264 (expression -> require_once_expression .)
    VARIABLE        reduce using rule 264 (expression -> require_once_expression .)
    DOUBLE_POINT    reduce using rule 264 (expression -> require_once_expression .)
    DOUBLE_ARROW    reduce using rule 264 (expression -> require_once_expression .)
    ELLIPSIS        reduce using rule 264 (expression -> require_once_expression .)
    TERNARY_OPERATION reduce using rule 264 (expression -> require_once_expression .)
    AMPERSAND       reduce using rule 264 (expression -> require_once_expression .)
    ARRAY           reduce using rule 264 (expression -> require_once_expression .)
    CALLABLE        reduce using rule 264 (expression -> require_once_expression .)
    ITERABLE        reduce using rule 264 (expression -> require_once_expression .)
    BOOL            reduce using rule 264 (expression -> require_once_expression .)
    FLOAT           reduce using rule 264 (expression -> require_once_expression .)
    INT             reduce using rule 264 (expression -> require_once_expression .)


state 57

    (298) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON

    LEFT_PARENTHESIS shift and go to state 118


state 58

    (313) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON

    LEFT_PARENTHESIS shift and go to state 119


state 59

    (331) while_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON

    LEFT_PARENTHESIS shift and go to state 120


state 60

    (333) do_statement -> DO . statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 121
    expression                     shift and go to state 25
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 61

    (334) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    LEFT_PARENTHESIS shift and go to state 122


state 62

    (355) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    LEFT_PARENTHESIS shift and go to state 123


state 63

    (369) goto_statement -> GOTO . name SEMICOLON
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 124

state 64

    (370) continue_statement -> CONTINUE . breakout_level SEMICOLON
    (371) continue_statement -> CONTINUE . SEMICOLON
    (372) breakout_level -> . INTEGER_LITERAL
    (373) breakout_level -> . LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
    (377) breakout_level -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 126
    INTEGER_LITERAL shift and go to state 127
    LEFT_PARENTHESIS shift and go to state 128
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    breakout_level                 shift and go to state 125
    expression                     shift and go to state 129
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 65

    (374) break_statement -> BREAK . breakout_levelopt SEMICOLON
    (375) breakout_levelopt -> . breakout_level
    (376) breakout_levelopt -> .
    (372) breakout_level -> . INTEGER_LITERAL
    (373) breakout_level -> . LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
    (377) breakout_level -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       reduce using rule 376 (breakout_levelopt -> .)
    INTEGER_LITERAL shift and go to state 127
    LEFT_PARENTHESIS shift and go to state 128
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    breakout_levelopt              shift and go to state 130
    breakout_level                 shift and go to state 131
    expression                     shift and go to state 129
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 66

    (378) return_statement -> RETURN . expressionopt SEMICOLON
    (379) expressionopt -> . expression
    (380) expressionopt -> .
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       reduce using rule 380 (expressionopt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expressionopt                  shift and go to state 132
    expression                     shift and go to state 133
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 67

    (381) throw_statement -> THROW . expression SEMICOLON
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 134
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 68

    (403) function_definition_header -> FUNCTION . ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (404) ampersandopt -> . AMPERSAND
    (405) ampersandopt -> .

    AMPERSAND       shift and go to state 136
    STRING          reduce using rule 405 (ampersandopt -> .)

    ampersandopt                   shift and go to state 135

state 69

    (434) class_modifieropt -> class_modifier .

    CLASS           reduce using rule 434 (class_modifieropt -> class_modifier .)


state 70

    (258) logical_inc_OR_expression_2 -> logical_exc_OR_expression .
    (257) logical_exc_OR_expression -> logical_exc_OR_expression . XOR logical_AND_expression_2

    OR              reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    SEMICOLON       reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    INCLUDE         reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    REQUIRE         reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    PRINT           reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    YIELD           reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    YIELD_FROM      reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    COLON           reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    AS              reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ARROW           reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    STRING          reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    VARIABLE        reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ELLIPSIS        reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    AMPERSAND       reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ARRAY           reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    CALLABLE        reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ITERABLE        reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    BOOL            reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    FLOAT           reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    INT             reduce using rule 258 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    XOR             shift and go to state 137


state 71

    (265) include_expression -> INCLUDE . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 138
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 72

    (266) include_once_expression -> INCLUDE_ONCE . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 139
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 73

    (267) require_expression -> REQUIRE . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 140
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 74

    (268) require_once_expression -> REQUIRE_ONCE . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 141
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 75

    (442) class_modifier -> ABSTRACT .

    CLASS           reduce using rule 442 (class_modifier -> ABSTRACT .)
    FUNCTION        reduce using rule 442 (class_modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 442 (class_modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 442 (class_modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 442 (class_modifier -> ABSTRACT .)
    STATIC          reduce using rule 442 (class_modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 442 (class_modifier -> ABSTRACT .)
    FINAL           reduce using rule 442 (class_modifier -> ABSTRACT .)


state 76

    (443) class_modifier -> FINAL .

    CLASS           reduce using rule 443 (class_modifier -> FINAL .)
    FUNCTION        reduce using rule 443 (class_modifier -> FINAL .)
    PUBLIC          reduce using rule 443 (class_modifier -> FINAL .)
    PROTECTED       reduce using rule 443 (class_modifier -> FINAL .)
    PRIVATE         reduce using rule 443 (class_modifier -> FINAL .)
    STATIC          reduce using rule 443 (class_modifier -> FINAL .)
    ABSTRACT        reduce using rule 443 (class_modifier -> FINAL .)
    FINAL           reduce using rule 443 (class_modifier -> FINAL .)


state 77

    (256) logical_exc_OR_expression -> logical_AND_expression_2 .
    (255) logical_AND_expression_2 -> logical_AND_expression_2 . AND yield_expression

    XOR             reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    OR              reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    SEMICOLON       reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    INCLUDE         reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    INCLUDE_ONCE    reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    REQUIRE         reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    REQUIRE_ONCE    reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    PRINT           reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    YIELD           reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    YIELD_FROM      reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    RIGHT_PARENTHESIS reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    COLON           reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    AS              reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ARROW           reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    STRING          reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    RIGHT_CBRAC     reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    VARIABLE        reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    DOUBLE_POINT    reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    DOUBLE_ARROW    reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ELLIPSIS        reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    TERNARY_OPERATION reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    AMPERSAND       reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ARRAY           reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    CALLABLE        reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ITERABLE        reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    BOOL            reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    FLOAT           reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    INT             reduce using rule 256 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    AND             shift and go to state 142


state 78

    (254) logical_AND_expression_2 -> print_expression .

    AND             reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    XOR             reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    OR              reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    SEMICOLON       reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    INCLUDE         reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    INCLUDE_ONCE    reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    REQUIRE         reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    REQUIRE_ONCE    reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    PRINT           reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    YIELD           reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    YIELD_FROM      reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    RIGHT_PARENTHESIS reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    COLON           reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    AS              reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    ARROW           reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    STRING          reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    RIGHT_CBRAC     reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    VARIABLE        reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    DOUBLE_POINT    reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    DOUBLE_ARROW    reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    ELLIPSIS        reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    TERNARY_OPERATION reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    AMPERSAND       reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    ARRAY           reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    CALLABLE        reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    ITERABLE        reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    BOOL            reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    FLOAT           reduce using rule 254 (logical_AND_expression_2 -> print_expression .)
    INT             reduce using rule 254 (logical_AND_expression_2 -> print_expression .)


state 79

    (252) print_expression -> yield_expression .

    AND             reduce using rule 252 (print_expression -> yield_expression .)
    XOR             reduce using rule 252 (print_expression -> yield_expression .)
    OR              reduce using rule 252 (print_expression -> yield_expression .)
    SEMICOLON       reduce using rule 252 (print_expression -> yield_expression .)
    INCLUDE         reduce using rule 252 (print_expression -> yield_expression .)
    INCLUDE_ONCE    reduce using rule 252 (print_expression -> yield_expression .)
    REQUIRE         reduce using rule 252 (print_expression -> yield_expression .)
    REQUIRE_ONCE    reduce using rule 252 (print_expression -> yield_expression .)
    PRINT           reduce using rule 252 (print_expression -> yield_expression .)
    YIELD           reduce using rule 252 (print_expression -> yield_expression .)
    YIELD_FROM      reduce using rule 252 (print_expression -> yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 252 (print_expression -> yield_expression .)
    COLON           reduce using rule 252 (print_expression -> yield_expression .)
    AS              reduce using rule 252 (print_expression -> yield_expression .)
    ARROW           reduce using rule 252 (print_expression -> yield_expression .)
    STRING          reduce using rule 252 (print_expression -> yield_expression .)
    RIGHT_CBRAC     reduce using rule 252 (print_expression -> yield_expression .)
    VARIABLE        reduce using rule 252 (print_expression -> yield_expression .)
    DOUBLE_POINT    reduce using rule 252 (print_expression -> yield_expression .)
    DOUBLE_ARROW    reduce using rule 252 (print_expression -> yield_expression .)
    ELLIPSIS        reduce using rule 252 (print_expression -> yield_expression .)
    TERNARY_OPERATION reduce using rule 252 (print_expression -> yield_expression .)
    AMPERSAND       reduce using rule 252 (print_expression -> yield_expression .)
    ARRAY           reduce using rule 252 (print_expression -> yield_expression .)
    CALLABLE        reduce using rule 252 (print_expression -> yield_expression .)
    ITERABLE        reduce using rule 252 (print_expression -> yield_expression .)
    BOOL            reduce using rule 252 (print_expression -> yield_expression .)
    FLOAT           reduce using rule 252 (print_expression -> yield_expression .)
    INT             reduce using rule 252 (print_expression -> yield_expression .)


state 80

    (253) print_expression -> PRINT . print_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    print_expression               shift and go to state 143
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 81

    (248) yield_expression -> yield_from_expression .

    AND             reduce using rule 248 (yield_expression -> yield_from_expression .)
    XOR             reduce using rule 248 (yield_expression -> yield_from_expression .)
    OR              reduce using rule 248 (yield_expression -> yield_from_expression .)
    SEMICOLON       reduce using rule 248 (yield_expression -> yield_from_expression .)
    INCLUDE         reduce using rule 248 (yield_expression -> yield_from_expression .)
    INCLUDE_ONCE    reduce using rule 248 (yield_expression -> yield_from_expression .)
    REQUIRE         reduce using rule 248 (yield_expression -> yield_from_expression .)
    REQUIRE_ONCE    reduce using rule 248 (yield_expression -> yield_from_expression .)
    PRINT           reduce using rule 248 (yield_expression -> yield_from_expression .)
    YIELD           reduce using rule 248 (yield_expression -> yield_from_expression .)
    YIELD_FROM      reduce using rule 248 (yield_expression -> yield_from_expression .)
    RIGHT_PARENTHESIS reduce using rule 248 (yield_expression -> yield_from_expression .)
    COLON           reduce using rule 248 (yield_expression -> yield_from_expression .)
    AS              reduce using rule 248 (yield_expression -> yield_from_expression .)
    ARROW           reduce using rule 248 (yield_expression -> yield_from_expression .)
    STRING          reduce using rule 248 (yield_expression -> yield_from_expression .)
    RIGHT_CBRAC     reduce using rule 248 (yield_expression -> yield_from_expression .)
    VARIABLE        reduce using rule 248 (yield_expression -> yield_from_expression .)
    DOUBLE_POINT    reduce using rule 248 (yield_expression -> yield_from_expression .)
    DOUBLE_ARROW    reduce using rule 248 (yield_expression -> yield_from_expression .)
    ELLIPSIS        reduce using rule 248 (yield_expression -> yield_from_expression .)
    TERNARY_OPERATION reduce using rule 248 (yield_expression -> yield_from_expression .)
    AMPERSAND       reduce using rule 248 (yield_expression -> yield_from_expression .)
    ARRAY           reduce using rule 248 (yield_expression -> yield_from_expression .)
    CALLABLE        reduce using rule 248 (yield_expression -> yield_from_expression .)
    ITERABLE        reduce using rule 248 (yield_expression -> yield_from_expression .)
    BOOL            reduce using rule 248 (yield_expression -> yield_from_expression .)
    FLOAT           reduce using rule 248 (yield_expression -> yield_from_expression .)
    INT             reduce using rule 248 (yield_expression -> yield_from_expression .)


state 82

    (249) yield_expression -> YIELD .
    (250) yield_expression -> YIELD . yield_expression
    (251) yield_expression -> YIELD . yield_from_expression DOUBLE_ARROW yield_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    AND             reduce using rule 249 (yield_expression -> YIELD .)
    XOR             reduce using rule 249 (yield_expression -> YIELD .)
    OR              reduce using rule 249 (yield_expression -> YIELD .)
    SEMICOLON       reduce using rule 249 (yield_expression -> YIELD .)
    INCLUDE         reduce using rule 249 (yield_expression -> YIELD .)
    INCLUDE_ONCE    reduce using rule 249 (yield_expression -> YIELD .)
    REQUIRE         reduce using rule 249 (yield_expression -> YIELD .)
    REQUIRE_ONCE    reduce using rule 249 (yield_expression -> YIELD .)
    PRINT           reduce using rule 249 (yield_expression -> YIELD .)
    RIGHT_PARENTHESIS reduce using rule 249 (yield_expression -> YIELD .)
    COLON           reduce using rule 249 (yield_expression -> YIELD .)
    AS              reduce using rule 249 (yield_expression -> YIELD .)
    ARROW           reduce using rule 249 (yield_expression -> YIELD .)
    STRING          reduce using rule 249 (yield_expression -> YIELD .)
    RIGHT_CBRAC     reduce using rule 249 (yield_expression -> YIELD .)
    VARIABLE        reduce using rule 249 (yield_expression -> YIELD .)
    DOUBLE_POINT    reduce using rule 249 (yield_expression -> YIELD .)
    DOUBLE_ARROW    reduce using rule 249 (yield_expression -> YIELD .)
    ELLIPSIS        reduce using rule 249 (yield_expression -> YIELD .)
    TERNARY_OPERATION reduce using rule 249 (yield_expression -> YIELD .)
    AMPERSAND       reduce using rule 249 (yield_expression -> YIELD .)
    ARRAY           reduce using rule 249 (yield_expression -> YIELD .)
    CALLABLE        reduce using rule 249 (yield_expression -> YIELD .)
    ITERABLE        reduce using rule 249 (yield_expression -> YIELD .)
    BOOL            reduce using rule 249 (yield_expression -> YIELD .)
    FLOAT           reduce using rule 249 (yield_expression -> YIELD .)
    INT             reduce using rule 249 (yield_expression -> YIELD .)
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! YIELD           [ reduce using rule 249 (yield_expression -> YIELD .) ]
  ! YIELD_FROM      [ reduce using rule 249 (yield_expression -> YIELD .) ]

    yield_expression               shift and go to state 144
    yield_from_expression          shift and go to state 145

state 83

    (247) yield_from_expression -> YIELD_FROM . assignment_expression
    (215) assignment_expression -> . conditional_expression
    (216) assignment_expression -> . simple_assignment_expression
    (217) assignment_expression -> . compound_assignment_expression
    (212) conditional_expression -> . coalesce_expression
    (213) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (214) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (218) simple_assignment_expression -> . variable EQUAL assignment_expression
    (219) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (234) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (210) coalesce_expression -> . logical_inc_OR_expression_1
    (211) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (208) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (209) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (555) name -> . STRING
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .

    LIST            shift and go to state 157
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 158
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 178
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180
    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    FUNCTION        reduce using rule 77 (static_opt -> .)

    assignment_expression          shift and go to state 146
    conditional_expression         shift and go to state 147
    simple_assignment_expression   shift and go to state 148
    compound_assignment_expression shift and go to state 149
    coalesce_expression            shift and go to state 150
    variable                       shift and go to state 151
    list_intrinsic                 shift and go to state 152
    logical_inc_OR_expression_1    shift and go to state 153
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    logical_AND_expression_1       shift and go to state 159
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 165
    dereferencable_expression      shift and go to state 166
    bitwise_inc_OR_expression      shift and go to state 167
    qualified_name                 shift and go to state 169
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 172
    string_literal                 shift and go to state 173
    bitwise_exc_OR_expression      shift and go to state 174
    name                           shift and go to state 175
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222

state 84

    (292) statement_list -> statement_list statement .

    LEFT_CBRAC      reduce using rule 292 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 292 (statement_list -> statement_list statement .)
    TRY             reduce using rule 292 (statement_list -> statement_list statement .)
    DECLARE         reduce using rule 292 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 292 (statement_list -> statement_list statement .)
    UNSET           reduce using rule 292 (statement_list -> statement_list statement .)
    CONST           reduce using rule 292 (statement_list -> statement_list statement .)
    INTERFACE       reduce using rule 292 (statement_list -> statement_list statement .)
    TRAIT           reduce using rule 292 (statement_list -> statement_list statement .)
    NAMESPACE       reduce using rule 292 (statement_list -> statement_list statement .)
    USE             reduce using rule 292 (statement_list -> statement_list statement .)
    GLOBAL          reduce using rule 292 (statement_list -> statement_list statement .)
    STATIC          reduce using rule 292 (statement_list -> statement_list statement .)
    STRING          reduce using rule 292 (statement_list -> statement_list statement .)
    IF              reduce using rule 292 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 292 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 292 (statement_list -> statement_list statement .)
    DO              reduce using rule 292 (statement_list -> statement_list statement .)
    FOR             reduce using rule 292 (statement_list -> statement_list statement .)
    FOREACH         reduce using rule 292 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 292 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 292 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 292 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 292 (statement_list -> statement_list statement .)
    THROW           reduce using rule 292 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 292 (statement_list -> statement_list statement .)
    INCLUDE         reduce using rule 292 (statement_list -> statement_list statement .)
    INCLUDE_ONCE    reduce using rule 292 (statement_list -> statement_list statement .)
    REQUIRE         reduce using rule 292 (statement_list -> statement_list statement .)
    REQUIRE_ONCE    reduce using rule 292 (statement_list -> statement_list statement .)
    ABSTRACT        reduce using rule 292 (statement_list -> statement_list statement .)
    FINAL           reduce using rule 292 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 292 (statement_list -> statement_list statement .)
    YIELD           reduce using rule 292 (statement_list -> statement_list statement .)
    YIELD_FROM      reduce using rule 292 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 292 (statement_list -> statement_list statement .)
    $end            reduce using rule 292 (statement_list -> statement_list statement .)
    RIGHT_CBRAC     reduce using rule 292 (statement_list -> statement_list statement .)
    ENDDECLARE      reduce using rule 292 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 292 (statement_list -> statement_list statement .)
    ELSEIF          reduce using rule 292 (statement_list -> statement_list statement .)
    ENDWHILE        reduce using rule 292 (statement_list -> statement_list statement .)
    ENDFOR          reduce using rule 292 (statement_list -> statement_list statement .)
    CASE            reduce using rule 292 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 292 (statement_list -> statement_list statement .)
    ENDSWITCH       reduce using rule 292 (statement_list -> statement_list statement .)
    ENDFOREACH      reduce using rule 292 (statement_list -> statement_list statement .)
    ENDIF           reduce using rule 292 (statement_list -> statement_list statement .)


state 85

    (289) compound_statement -> LEFT_CBRAC statement_list . RIGHT_CBRAC
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     shift and go to state 234
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 86

    (290) compound_statement -> LEFT_CBRAC RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    TRY             reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DECLARE         reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ECHO            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    UNSET           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CONST           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INTERFACE       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    TRAIT           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    USE             reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    GLOBAL          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    STATIC          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    STRING          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IF              reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SWITCH          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    WHILE           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DO              reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FOR             reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FOREACH         reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    GOTO            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CONTINUE        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BREAK           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    RETURN          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    THROW           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FUNCTION        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE         reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE         reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FINAL           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PRINT           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    YIELD           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CLASS           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    $end            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FINALLY         reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CATCH           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ELSE            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ELSEIF          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOR          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CASE            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DEFAULT         reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDIF           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    VAR             reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PUBLIC          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PROTECTED       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PRIVATE         reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ASTERISK        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DIVIDE          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    MODULO          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PLUS            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    LESS            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CONCAT          reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SL              reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SR              reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    EQUAL           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    COALESCE        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    AND             reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    XOR             reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    OR              reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    COLON           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    AS              reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ARROW           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    VARIABLE        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ARRAY           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CALLABLE        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ITERABLE        reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BOOL            reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FLOAT           reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INT             reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 290 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)


state 87

    (293) named_label_statement -> name DOUBLE_POINT .

    LEFT_CBRAC      reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    SEMICOLON       reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    TRY             reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    DECLARE         reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ECHO            reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    UNSET           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    CONST           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    INTERFACE       reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    TRAIT           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    NAMESPACE       reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    USE             reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    GLOBAL          reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    STATIC          reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    STRING          reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    IF              reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    SWITCH          reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    WHILE           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    DO              reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    FOR             reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    FOREACH         reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    GOTO            reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    CONTINUE        reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    BREAK           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    RETURN          reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    THROW           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    FUNCTION        reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    INCLUDE         reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    INCLUDE_ONCE    reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    REQUIRE         reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    REQUIRE_ONCE    reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ABSTRACT        reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    FINAL           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    PRINT           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    YIELD           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    YIELD_FROM      reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    CLASS           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    $end            reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    RIGHT_CBRAC     reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ELSE            reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ELSEIF          reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ENDDECLARE      reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ENDWHILE        reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ENDFOR          reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    CASE            reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    DEFAULT         reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ENDSWITCH       reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ENDFOREACH      reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)
    ENDIF           reduce using rule 293 (named_label_statement -> name DOUBLE_POINT .)


state 88

    (294) expression_statement -> expression SEMICOLON .

    LEFT_CBRAC      reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    DECLARE         reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ECHO            reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    UNSET           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    INTERFACE       reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    TRAIT           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    NAMESPACE       reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    USE             reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    GLOBAL          reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    FOREACH         reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    INCLUDE         reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    REQUIRE         reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ABSTRACT        reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    FINAL           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    YIELD           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    YIELD_FROM      reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ELSEIF          reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ENDDECLARE      reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ENDWHILE        reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ENDFOR          reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ENDSWITCH       reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ENDFOREACH      reduce using rule 294 (expression_statement -> expression SEMICOLON .)
    ENDIF           reduce using rule 294 (expression_statement -> expression SEMICOLON .)


state 89

    (382) try_statement -> TRY compound_statement . catch_clauses
    (383) try_statement -> TRY compound_statement . finally_clause
    (384) try_statement -> TRY compound_statement . catch_clauses finally_clause
    (385) catch_clauses -> . catch_clause
    (386) catch_clauses -> . catch_clauses catch_clause
    (390) finally_clause -> . FINALLY compound_statement
    (387) catch_clause -> . CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement

    FINALLY         shift and go to state 238
    CATCH           shift and go to state 239

    catch_clauses                  shift and go to state 235
    finally_clause                 shift and go to state 236
    catch_clause                   shift and go to state 237

state 90

    (391) declare_statement -> DECLARE LEFT_PARENTHESIS . declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> DECLARE LEFT_PARENTHESIS . declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> DECLARE LEFT_PARENTHESIS . declare_directive RIGHT_PARENTHESIS SEMICOLON
    (394) declare_directive -> . TICKS EQUALS literal
    (395) declare_directive -> . ENCODING EQUALS literal
    (396) declare_directive -> . STRICT_TYPES EQUALS literal

    TICKS           shift and go to state 241
    ENCODING        shift and go to state 242
    STRICT_TYPES    shift and go to state 243

    declare_directive              shift and go to state 240

state 91

    (397) echo_statement -> ECHO expression_list . SEMICOLON
    (399) expression_list -> expression_list . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 244
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 245
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 92

    (398) expression_list -> expression .

    SEMICOLON       reduce using rule 398 (expression_list -> expression .)
    INCLUDE         reduce using rule 398 (expression_list -> expression .)
    INCLUDE_ONCE    reduce using rule 398 (expression_list -> expression .)
    REQUIRE         reduce using rule 398 (expression_list -> expression .)
    REQUIRE_ONCE    reduce using rule 398 (expression_list -> expression .)
    PRINT           reduce using rule 398 (expression_list -> expression .)
    YIELD           reduce using rule 398 (expression_list -> expression .)
    YIELD_FROM      reduce using rule 398 (expression_list -> expression .)


state 93

    (400) unset_statement -> UNSET LEFT_PARENTHESIS . variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> UNSET LEFT_PARENTHESIS . variable_list RIGHT_PARENTHESIS SEMICOLON
    (73) variable_list -> . variable
    (74) variable_list -> . variable_list variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable_list                  shift and go to state 247
    variable                       shift and go to state 248
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 94

    (455) const_declaration -> CONST const_elements . SEMICOLON
    (458) const_elements -> const_elements . const_element
    (459) const_element -> . name EQUAL constant_expression
    (555) name -> . STRING

    SEMICOLON       shift and go to state 254
    STRING          shift and go to state 51

    const_element                  shift and go to state 255
    name                           shift and go to state 96

state 95

    (457) const_elements -> const_element .

    SEMICOLON       reduce using rule 457 (const_elements -> const_element .)
    STRING          reduce using rule 457 (const_elements -> const_element .)


state 96

    (459) const_element -> name . EQUAL constant_expression

    EQUAL           shift and go to state 256


state 97

    (402) function_definition -> function_definition_header compound_statement .

    LEFT_CBRAC      reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    SEMICOLON       reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    TRY             reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    DECLARE         reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ECHO            reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    UNSET           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    CONST           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    INTERFACE       reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    TRAIT           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    NAMESPACE       reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    USE             reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    GLOBAL          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    STATIC          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    STRING          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    IF              reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    SWITCH          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    WHILE           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    DO              reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    FOR             reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    FOREACH         reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    GOTO            reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    CONTINUE        reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    BREAK           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    RETURN          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    THROW           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    FUNCTION        reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    INCLUDE         reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    INCLUDE_ONCE    reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    REQUIRE         reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    REQUIRE_ONCE    reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ABSTRACT        reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    FINAL           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    PRINT           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    YIELD           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    YIELD_FROM      reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    CLASS           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    $end            reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    RIGHT_CBRAC     reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ELSE            reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ELSEIF          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ENDDECLARE      reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ENDWHILE        reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ENDFOR          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    CASE            reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    DEFAULT         reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ENDSWITCH       reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ENDFOREACH      reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    ENDIF           reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    VAR             reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    PUBLIC          reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    PROTECTED       reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    PRIVATE         reduce using rule 402 (function_definition -> function_definition_header compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 402 (function_definition -> function_definition_header compound_statement .)


state 98

    (433) class_declaration -> class_modifieropt CLASS . name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 257

state 99

    (489) interface_declaration -> INTERFACE name . interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (490) interface_base_clauseopt -> . interface_base_clause
    (491) interface_base_clauseopt -> .
    (494) interface_base_clause -> . EXTENDS qualified_name
    (495) interface_base_clause -> . interface_base_clause qualified_name

    LEFT_CBRAC      reduce using rule 491 (interface_base_clauseopt -> .)
    EXTENDS         shift and go to state 260

    interface_base_clauseopt       shift and go to state 258
    interface_base_clause          shift and go to state 259

state 100

    (500) trait_declaration -> TRAIT name . LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 261


state 101

    (530) namespace_definition -> NAMESPACE namespace_name . SEMICOLON
    (8) namespace_name -> namespace_name . NS_SEPARATOR NAME
    (532) namespace_nameopt -> namespace_name .

    SEMICOLON       shift and go to state 262
    NS_SEPARATOR    shift and go to state 263
    LEFT_CBRAC      reduce using rule 532 (namespace_nameopt -> namespace_name .)


state 102

    (531) namespace_definition -> NAMESPACE namespace_nameopt . compound_statement
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 264

state 103

    (7) namespace_name -> NAME .

    SEMICOLON       reduce using rule 7 (namespace_name -> NAME .)
    NS_SEPARATOR    reduce using rule 7 (namespace_name -> NAME .)
    LEFT_CBRAC      reduce using rule 7 (namespace_name -> NAME .)
    AS              reduce using rule 7 (namespace_name -> NAME .)


state 104

    (534) namespace_use_declaration -> USE namespace_function_or_constopt . namespace_use_clauses SEMICOLON
    (541) namespace_use_clauses -> . namespace_use_clause
    (542) namespace_use_clauses -> . namespace_use_clauses namespace_use_clause
    (543) namespace_use_clause -> . qualified_name namespace_aliasing_clause_opt
    (545) qualified_name -> . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    namespace_use_clauses          shift and go to state 265
    namespace_use_clause           shift and go to state 266
    qualified_name                 shift and go to state 267
    name                           shift and go to state 175

state 105

    (535) namespace_use_declaration -> USE namespace_function_or_const . NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (537) namespace_function_or_constopt -> namespace_function_or_const .
    (539) NS_SEPARATORopt -> . NS_SEPARATOR
    (540) NS_SEPARATORopt -> .

    STRING          reduce using rule 537 (namespace_function_or_constopt -> namespace_function_or_const .)
    NS_SEPARATOR    shift and go to state 107
    NAME            reduce using rule 540 (NS_SEPARATORopt -> .)

    NS_SEPARATORopt                shift and go to state 268

state 106

    (536) namespace_use_declaration -> USE NS_SEPARATORopt . namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (7) namespace_name -> . NAME
    (8) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 103

    namespace_name                 shift and go to state 269

state 107

    (539) NS_SEPARATORopt -> NS_SEPARATOR .

    NAME            reduce using rule 539 (NS_SEPARATORopt -> NS_SEPARATOR .)


state 108

    (547) namespace_function_or_const -> FUNCTION .

    NS_SEPARATOR    reduce using rule 547 (namespace_function_or_const -> FUNCTION .)
    NAME            reduce using rule 547 (namespace_function_or_const -> FUNCTION .)
    STRING          reduce using rule 547 (namespace_function_or_const -> FUNCTION .)


state 109

    (548) namespace_function_or_const -> CONST .

    NS_SEPARATOR    reduce using rule 548 (namespace_function_or_const -> CONST .)
    NAME            reduce using rule 548 (namespace_function_or_const -> CONST .)
    STRING          reduce using rule 548 (namespace_function_or_const -> CONST .)


state 110

    (17) global_declaration -> GLOBAL variable_name_list . SEMICOLON
    (19) variable_name_list -> variable_name_list . simple_variable
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    SEMICOLON       shift and go to state 270
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    simple_variable                shift and go to state 271

state 111

    (18) variable_name_list -> simple_variable .

    SEMICOLON       reduce using rule 18 (variable_name_list -> simple_variable .)
    VARIABLE        reduce using rule 18 (variable_name_list -> simple_variable .)
    DOLLAR          reduce using rule 18 (variable_name_list -> simple_variable .)


state 112

    (35) simple_variable -> VARIABLE .

    SEMICOLON       reduce using rule 35 (simple_variable -> VARIABLE .)
    VARIABLE        reduce using rule 35 (simple_variable -> VARIABLE .)
    DOLLAR          reduce using rule 35 (simple_variable -> VARIABLE .)
    EQUAL           reduce using rule 35 (simple_variable -> VARIABLE .)
    DOUBLEPLUS      reduce using rule 35 (simple_variable -> VARIABLE .)
    DOUBLELESS      reduce using rule 35 (simple_variable -> VARIABLE .)
    POW_EQUAL       reduce using rule 35 (simple_variable -> VARIABLE .)
    MUL_EQUAL       reduce using rule 35 (simple_variable -> VARIABLE .)
    DIV_EQUAL       reduce using rule 35 (simple_variable -> VARIABLE .)
    MOD_EQUAL       reduce using rule 35 (simple_variable -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 35 (simple_variable -> VARIABLE .)
    MINUS_EQUAL     reduce using rule 35 (simple_variable -> VARIABLE .)
    CONCAT_EQUAL    reduce using rule 35 (simple_variable -> VARIABLE .)
    SL_EQUAL        reduce using rule 35 (simple_variable -> VARIABLE .)
    SR_EQUAL        reduce using rule 35 (simple_variable -> VARIABLE .)
    AND_EQUAL       reduce using rule 35 (simple_variable -> VARIABLE .)
    XOR_EQUAL       reduce using rule 35 (simple_variable -> VARIABLE .)
    OR_EQUAL        reduce using rule 35 (simple_variable -> VARIABLE .)
    ARROW           reduce using rule 35 (simple_variable -> VARIABLE .)
    LEFT_CBRAC      reduce using rule 35 (simple_variable -> VARIABLE .)
    DOUBLE_COLON    reduce using rule 35 (simple_variable -> VARIABLE .)
    DOUBLEASTERISK  reduce using rule 35 (simple_variable -> VARIABLE .)
    ASTERISK        reduce using rule 35 (simple_variable -> VARIABLE .)
    DIVIDE          reduce using rule 35 (simple_variable -> VARIABLE .)
    MODULO          reduce using rule 35 (simple_variable -> VARIABLE .)
    PLUS            reduce using rule 35 (simple_variable -> VARIABLE .)
    LESS            reduce using rule 35 (simple_variable -> VARIABLE .)
    CONCAT          reduce using rule 35 (simple_variable -> VARIABLE .)
    SL              reduce using rule 35 (simple_variable -> VARIABLE .)
    SR              reduce using rule 35 (simple_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 35 (simple_variable -> VARIABLE .)
    IS_SMALLER_OR_EQUAL reduce using rule 35 (simple_variable -> VARIABLE .)
    IS_GREATER_OR_EQUAL reduce using rule 35 (simple_variable -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 35 (simple_variable -> VARIABLE .)
    SPACESHIP       reduce using rule 35 (simple_variable -> VARIABLE .)
    IS_NOT_EQUAL    reduce using rule 35 (simple_variable -> VARIABLE .)
    IS_IDENTICAL    reduce using rule 35 (simple_variable -> VARIABLE .)
    IS_NOT_IDENTICAL reduce using rule 35 (simple_variable -> VARIABLE .)
    AMPERSAND       reduce using rule 35 (simple_variable -> VARIABLE .)
    BITWISE_XOR     reduce using rule 35 (simple_variable -> VARIABLE .)
    BITWISE_OR      reduce using rule 35 (simple_variable -> VARIABLE .)
    COALESCE        reduce using rule 35 (simple_variable -> VARIABLE .)
    TERNARY_OPERATION reduce using rule 35 (simple_variable -> VARIABLE .)
    AND             reduce using rule 35 (simple_variable -> VARIABLE .)
    XOR             reduce using rule 35 (simple_variable -> VARIABLE .)
    OR              reduce using rule 35 (simple_variable -> VARIABLE .)
    INCLUDE         reduce using rule 35 (simple_variable -> VARIABLE .)
    INCLUDE_ONCE    reduce using rule 35 (simple_variable -> VARIABLE .)
    REQUIRE         reduce using rule 35 (simple_variable -> VARIABLE .)
    REQUIRE_ONCE    reduce using rule 35 (simple_variable -> VARIABLE .)
    PRINT           reduce using rule 35 (simple_variable -> VARIABLE .)
    YIELD           reduce using rule 35 (simple_variable -> VARIABLE .)
    YIELD_FROM      reduce using rule 35 (simple_variable -> VARIABLE .)
    RIGHT_PARENTHESIS reduce using rule 35 (simple_variable -> VARIABLE .)
    COLON           reduce using rule 35 (simple_variable -> VARIABLE .)
    AS              reduce using rule 35 (simple_variable -> VARIABLE .)
    STRING          reduce using rule 35 (simple_variable -> VARIABLE .)
    RIGHT_CBRAC     reduce using rule 35 (simple_variable -> VARIABLE .)
    DOUBLE_POINT    reduce using rule 35 (simple_variable -> VARIABLE .)
    DOUBLE_ARROW    reduce using rule 35 (simple_variable -> VARIABLE .)
    ELLIPSIS        reduce using rule 35 (simple_variable -> VARIABLE .)
    ARRAY           reduce using rule 35 (simple_variable -> VARIABLE .)
    CALLABLE        reduce using rule 35 (simple_variable -> VARIABLE .)
    ITERABLE        reduce using rule 35 (simple_variable -> VARIABLE .)
    BOOL            reduce using rule 35 (simple_variable -> VARIABLE .)
    FLOAT           reduce using rule 35 (simple_variable -> VARIABLE .)
    INT             reduce using rule 35 (simple_variable -> VARIABLE .)
    INSTANCEOF      reduce using rule 35 (simple_variable -> VARIABLE .)
    LEFT_PARENTHESIS reduce using rule 35 (simple_variable -> VARIABLE .)
    SELF            reduce using rule 35 (simple_variable -> VARIABLE .)
    PARENT          reduce using rule 35 (simple_variable -> VARIABLE .)
    STATIC          reduce using rule 35 (simple_variable -> VARIABLE .)


state 113

    (36) simple_variable -> DOLLAR . simple_variable
    (37) simple_variable -> DOLLAR . LEFT_CBRAC expression RIGHT_CBRAC
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 273
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    simple_variable                shift and go to state 272

state 114

    (9) function_static_declaration -> STATIC static_variable_name_list . SEMICOLON
    (11) static_variable_name_list -> static_variable_name_list . static_variable_declaration
    (12) static_variable_declaration -> . VARIABLE function_static_initializer_opt

    SEMICOLON       shift and go to state 274
    VARIABLE        shift and go to state 116

    static_variable_declaration    shift and go to state 275

state 115

    (10) static_variable_name_list -> static_variable_declaration .

    SEMICOLON       reduce using rule 10 (static_variable_name_list -> static_variable_declaration .)
    VARIABLE        reduce using rule 10 (static_variable_name_list -> static_variable_declaration .)


state 116

    (12) static_variable_declaration -> VARIABLE . function_static_initializer_opt
    (14) function_static_initializer_opt -> . function_static_initializer
    (15) function_static_initializer_opt -> .
    (16) function_static_initializer_opt -> . EQUAL constant_expression
    (13) function_static_initializer -> . EQUAL constant_expression

    SEMICOLON       reduce using rule 15 (function_static_initializer_opt -> .)
    VARIABLE        reduce using rule 15 (function_static_initializer_opt -> .)
    EQUAL           shift and go to state 278

    function_static_initializer_opt shift and go to state 276
    function_static_initializer    shift and go to state 277

state 117

    (259) logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR . logical_exc_OR_expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    logical_exc_OR_expression      shift and go to state 279
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 118

    (298) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (302) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 280
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 119

    (313) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 281
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 120

    (331) while_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (332) while_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 282
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 121

    (333) do_statement -> DO statement . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    WHILE           shift and go to state 283


state 122

    (334) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (350) for_initializer -> . for_expression_group
    (353) for_expression_group -> . expression
    (354) for_expression_group -> . for_expression_group COLON expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 285
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    for_initializer                shift and go to state 284
    for_expression_group           shift and go to state 286
    expression                     shift and go to state 287
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 123

    (355) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (359) foreach_collection_name -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    foreach_collection_name        shift and go to state 288
    expression                     shift and go to state 289
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 124

    (369) goto_statement -> GOTO name . SEMICOLON

    SEMICOLON       shift and go to state 290


state 125

    (370) continue_statement -> CONTINUE breakout_level . SEMICOLON

    SEMICOLON       shift and go to state 291


state 126

    (371) continue_statement -> CONTINUE SEMICOLON .

    LEFT_CBRAC      reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    DECLARE         reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ECHO            reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    UNSET           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    TRAIT           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    NAMESPACE       reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    USE             reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    INCLUDE         reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    REQUIRE         reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ABSTRACT        reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    YIELD           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    YIELD_FROM      reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ENDDECLARE      reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ENDWHILE        reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ENDFOR          reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ENDSWITCH       reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ENDFOREACH      reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)
    ENDIF           reduce using rule 371 (continue_statement -> CONTINUE SEMICOLON .)


state 127

    (372) breakout_level -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 372 (breakout_level -> INTEGER_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 372 (breakout_level -> INTEGER_LITERAL .)


state 128

    (373) breakout_level -> LEFT_PARENTHESIS . breakout_level RIGHT_PARENTHESIS
    (372) breakout_level -> . INTEGER_LITERAL
    (373) breakout_level -> . LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
    (377) breakout_level -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INTEGER_LITERAL shift and go to state 127
    LEFT_PARENTHESIS shift and go to state 128
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    breakout_level                 shift and go to state 292
    expression                     shift and go to state 129
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 129

    (377) breakout_level -> expression .

    SEMICOLON       reduce using rule 377 (breakout_level -> expression .)
    RIGHT_PARENTHESIS reduce using rule 377 (breakout_level -> expression .)


state 130

    (374) break_statement -> BREAK breakout_levelopt . SEMICOLON

    SEMICOLON       shift and go to state 293


state 131

    (375) breakout_levelopt -> breakout_level .

    SEMICOLON       reduce using rule 375 (breakout_levelopt -> breakout_level .)


state 132

    (378) return_statement -> RETURN expressionopt . SEMICOLON

    SEMICOLON       shift and go to state 294


state 133

    (379) expressionopt -> expression .

    SEMICOLON       reduce using rule 379 (expressionopt -> expression .)


state 134

    (381) throw_statement -> THROW expression . SEMICOLON

    SEMICOLON       shift and go to state 295


state 135

    (403) function_definition_header -> FUNCTION ampersandopt . name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 296

state 136

    (404) ampersandopt -> AMPERSAND .

    STRING          reduce using rule 404 (ampersandopt -> AMPERSAND .)
    VARIABLE        reduce using rule 404 (ampersandopt -> AMPERSAND .)
    ELLIPSIS        reduce using rule 404 (ampersandopt -> AMPERSAND .)


state 137

    (257) logical_exc_OR_expression -> logical_exc_OR_expression XOR . logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    logical_AND_expression_2       shift and go to state 297
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 138

    (265) include_expression -> INCLUDE expression .

    SEMICOLON       reduce using rule 265 (include_expression -> INCLUDE expression .)
    INCLUDE         reduce using rule 265 (include_expression -> INCLUDE expression .)
    INCLUDE_ONCE    reduce using rule 265 (include_expression -> INCLUDE expression .)
    REQUIRE         reduce using rule 265 (include_expression -> INCLUDE expression .)
    REQUIRE_ONCE    reduce using rule 265 (include_expression -> INCLUDE expression .)
    PRINT           reduce using rule 265 (include_expression -> INCLUDE expression .)
    YIELD           reduce using rule 265 (include_expression -> INCLUDE expression .)
    YIELD_FROM      reduce using rule 265 (include_expression -> INCLUDE expression .)
    RIGHT_PARENTHESIS reduce using rule 265 (include_expression -> INCLUDE expression .)
    COLON           reduce using rule 265 (include_expression -> INCLUDE expression .)
    AS              reduce using rule 265 (include_expression -> INCLUDE expression .)
    ARROW           reduce using rule 265 (include_expression -> INCLUDE expression .)
    STRING          reduce using rule 265 (include_expression -> INCLUDE expression .)
    RIGHT_CBRAC     reduce using rule 265 (include_expression -> INCLUDE expression .)
    VARIABLE        reduce using rule 265 (include_expression -> INCLUDE expression .)
    DOUBLE_POINT    reduce using rule 265 (include_expression -> INCLUDE expression .)
    DOUBLE_ARROW    reduce using rule 265 (include_expression -> INCLUDE expression .)
    ELLIPSIS        reduce using rule 265 (include_expression -> INCLUDE expression .)
    TERNARY_OPERATION reduce using rule 265 (include_expression -> INCLUDE expression .)
    AMPERSAND       reduce using rule 265 (include_expression -> INCLUDE expression .)
    ARRAY           reduce using rule 265 (include_expression -> INCLUDE expression .)
    CALLABLE        reduce using rule 265 (include_expression -> INCLUDE expression .)
    ITERABLE        reduce using rule 265 (include_expression -> INCLUDE expression .)
    BOOL            reduce using rule 265 (include_expression -> INCLUDE expression .)
    FLOAT           reduce using rule 265 (include_expression -> INCLUDE expression .)
    INT             reduce using rule 265 (include_expression -> INCLUDE expression .)


state 139

    (266) include_once_expression -> INCLUDE_ONCE expression .

    SEMICOLON       reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    INCLUDE         reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    INCLUDE_ONCE    reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    REQUIRE         reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    REQUIRE_ONCE    reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    PRINT           reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    YIELD           reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    YIELD_FROM      reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    RIGHT_PARENTHESIS reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    COLON           reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    AS              reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    ARROW           reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    STRING          reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    RIGHT_CBRAC     reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    VARIABLE        reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    DOUBLE_POINT    reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    DOUBLE_ARROW    reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    ELLIPSIS        reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    TERNARY_OPERATION reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    AMPERSAND       reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    ARRAY           reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    CALLABLE        reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    ITERABLE        reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    BOOL            reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    FLOAT           reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)
    INT             reduce using rule 266 (include_once_expression -> INCLUDE_ONCE expression .)


state 140

    (267) require_expression -> REQUIRE expression .

    SEMICOLON       reduce using rule 267 (require_expression -> REQUIRE expression .)
    INCLUDE         reduce using rule 267 (require_expression -> REQUIRE expression .)
    INCLUDE_ONCE    reduce using rule 267 (require_expression -> REQUIRE expression .)
    REQUIRE         reduce using rule 267 (require_expression -> REQUIRE expression .)
    REQUIRE_ONCE    reduce using rule 267 (require_expression -> REQUIRE expression .)
    PRINT           reduce using rule 267 (require_expression -> REQUIRE expression .)
    YIELD           reduce using rule 267 (require_expression -> REQUIRE expression .)
    YIELD_FROM      reduce using rule 267 (require_expression -> REQUIRE expression .)
    RIGHT_PARENTHESIS reduce using rule 267 (require_expression -> REQUIRE expression .)
    COLON           reduce using rule 267 (require_expression -> REQUIRE expression .)
    AS              reduce using rule 267 (require_expression -> REQUIRE expression .)
    ARROW           reduce using rule 267 (require_expression -> REQUIRE expression .)
    STRING          reduce using rule 267 (require_expression -> REQUIRE expression .)
    RIGHT_CBRAC     reduce using rule 267 (require_expression -> REQUIRE expression .)
    VARIABLE        reduce using rule 267 (require_expression -> REQUIRE expression .)
    DOUBLE_POINT    reduce using rule 267 (require_expression -> REQUIRE expression .)
    DOUBLE_ARROW    reduce using rule 267 (require_expression -> REQUIRE expression .)
    ELLIPSIS        reduce using rule 267 (require_expression -> REQUIRE expression .)
    TERNARY_OPERATION reduce using rule 267 (require_expression -> REQUIRE expression .)
    AMPERSAND       reduce using rule 267 (require_expression -> REQUIRE expression .)
    ARRAY           reduce using rule 267 (require_expression -> REQUIRE expression .)
    CALLABLE        reduce using rule 267 (require_expression -> REQUIRE expression .)
    ITERABLE        reduce using rule 267 (require_expression -> REQUIRE expression .)
    BOOL            reduce using rule 267 (require_expression -> REQUIRE expression .)
    FLOAT           reduce using rule 267 (require_expression -> REQUIRE expression .)
    INT             reduce using rule 267 (require_expression -> REQUIRE expression .)


state 141

    (268) require_once_expression -> REQUIRE_ONCE expression .

    SEMICOLON       reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    INCLUDE         reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    INCLUDE_ONCE    reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    REQUIRE         reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    REQUIRE_ONCE    reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    PRINT           reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    YIELD           reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    YIELD_FROM      reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    RIGHT_PARENTHESIS reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    COLON           reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    AS              reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    ARROW           reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    STRING          reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    RIGHT_CBRAC     reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    VARIABLE        reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    DOUBLE_POINT    reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    DOUBLE_ARROW    reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    ELLIPSIS        reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    TERNARY_OPERATION reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    AMPERSAND       reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    ARRAY           reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    CALLABLE        reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    ITERABLE        reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    BOOL            reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    FLOAT           reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)
    INT             reduce using rule 268 (require_once_expression -> REQUIRE_ONCE expression .)


state 142

    (255) logical_AND_expression_2 -> logical_AND_expression_2 AND . yield_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    yield_expression               shift and go to state 298
    yield_from_expression          shift and go to state 81

state 143

    (253) print_expression -> PRINT print_expression .

    AND             reduce using rule 253 (print_expression -> PRINT print_expression .)
    XOR             reduce using rule 253 (print_expression -> PRINT print_expression .)
    OR              reduce using rule 253 (print_expression -> PRINT print_expression .)
    SEMICOLON       reduce using rule 253 (print_expression -> PRINT print_expression .)
    INCLUDE         reduce using rule 253 (print_expression -> PRINT print_expression .)
    INCLUDE_ONCE    reduce using rule 253 (print_expression -> PRINT print_expression .)
    REQUIRE         reduce using rule 253 (print_expression -> PRINT print_expression .)
    REQUIRE_ONCE    reduce using rule 253 (print_expression -> PRINT print_expression .)
    PRINT           reduce using rule 253 (print_expression -> PRINT print_expression .)
    YIELD           reduce using rule 253 (print_expression -> PRINT print_expression .)
    YIELD_FROM      reduce using rule 253 (print_expression -> PRINT print_expression .)
    RIGHT_PARENTHESIS reduce using rule 253 (print_expression -> PRINT print_expression .)
    COLON           reduce using rule 253 (print_expression -> PRINT print_expression .)
    AS              reduce using rule 253 (print_expression -> PRINT print_expression .)
    ARROW           reduce using rule 253 (print_expression -> PRINT print_expression .)
    STRING          reduce using rule 253 (print_expression -> PRINT print_expression .)
    RIGHT_CBRAC     reduce using rule 253 (print_expression -> PRINT print_expression .)
    VARIABLE        reduce using rule 253 (print_expression -> PRINT print_expression .)
    DOUBLE_POINT    reduce using rule 253 (print_expression -> PRINT print_expression .)
    DOUBLE_ARROW    reduce using rule 253 (print_expression -> PRINT print_expression .)
    ELLIPSIS        reduce using rule 253 (print_expression -> PRINT print_expression .)
    TERNARY_OPERATION reduce using rule 253 (print_expression -> PRINT print_expression .)
    AMPERSAND       reduce using rule 253 (print_expression -> PRINT print_expression .)
    ARRAY           reduce using rule 253 (print_expression -> PRINT print_expression .)
    CALLABLE        reduce using rule 253 (print_expression -> PRINT print_expression .)
    ITERABLE        reduce using rule 253 (print_expression -> PRINT print_expression .)
    BOOL            reduce using rule 253 (print_expression -> PRINT print_expression .)
    FLOAT           reduce using rule 253 (print_expression -> PRINT print_expression .)
    INT             reduce using rule 253 (print_expression -> PRINT print_expression .)


state 144

    (250) yield_expression -> YIELD yield_expression .

    AND             reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    XOR             reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    OR              reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    SEMICOLON       reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    INCLUDE         reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    INCLUDE_ONCE    reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    REQUIRE         reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    REQUIRE_ONCE    reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    PRINT           reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    YIELD           reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    YIELD_FROM      reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    COLON           reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    AS              reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    ARROW           reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    STRING          reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    RIGHT_CBRAC     reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    VARIABLE        reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    DOUBLE_POINT    reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    DOUBLE_ARROW    reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    ELLIPSIS        reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    TERNARY_OPERATION reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    AMPERSAND       reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    ARRAY           reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    CALLABLE        reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    ITERABLE        reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    BOOL            reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    FLOAT           reduce using rule 250 (yield_expression -> YIELD yield_expression .)
    INT             reduce using rule 250 (yield_expression -> YIELD yield_expression .)


state 145

    (251) yield_expression -> YIELD yield_from_expression . DOUBLE_ARROW yield_expression
    (248) yield_expression -> yield_from_expression .

  ! shift/reduce conflict for DOUBLE_ARROW resolved as shift
    DOUBLE_ARROW    shift and go to state 299
    AND             reduce using rule 248 (yield_expression -> yield_from_expression .)
    XOR             reduce using rule 248 (yield_expression -> yield_from_expression .)
    OR              reduce using rule 248 (yield_expression -> yield_from_expression .)
    SEMICOLON       reduce using rule 248 (yield_expression -> yield_from_expression .)
    INCLUDE         reduce using rule 248 (yield_expression -> yield_from_expression .)
    INCLUDE_ONCE    reduce using rule 248 (yield_expression -> yield_from_expression .)
    REQUIRE         reduce using rule 248 (yield_expression -> yield_from_expression .)
    REQUIRE_ONCE    reduce using rule 248 (yield_expression -> yield_from_expression .)
    PRINT           reduce using rule 248 (yield_expression -> yield_from_expression .)
    YIELD           reduce using rule 248 (yield_expression -> yield_from_expression .)
    YIELD_FROM      reduce using rule 248 (yield_expression -> yield_from_expression .)
    RIGHT_PARENTHESIS reduce using rule 248 (yield_expression -> yield_from_expression .)
    COLON           reduce using rule 248 (yield_expression -> yield_from_expression .)
    AS              reduce using rule 248 (yield_expression -> yield_from_expression .)
    ARROW           reduce using rule 248 (yield_expression -> yield_from_expression .)
    STRING          reduce using rule 248 (yield_expression -> yield_from_expression .)
    RIGHT_CBRAC     reduce using rule 248 (yield_expression -> yield_from_expression .)
    VARIABLE        reduce using rule 248 (yield_expression -> yield_from_expression .)
    DOUBLE_POINT    reduce using rule 248 (yield_expression -> yield_from_expression .)
    ELLIPSIS        reduce using rule 248 (yield_expression -> yield_from_expression .)
    TERNARY_OPERATION reduce using rule 248 (yield_expression -> yield_from_expression .)
    AMPERSAND       reduce using rule 248 (yield_expression -> yield_from_expression .)
    ARRAY           reduce using rule 248 (yield_expression -> yield_from_expression .)
    CALLABLE        reduce using rule 248 (yield_expression -> yield_from_expression .)
    ITERABLE        reduce using rule 248 (yield_expression -> yield_from_expression .)
    BOOL            reduce using rule 248 (yield_expression -> yield_from_expression .)
    FLOAT           reduce using rule 248 (yield_expression -> yield_from_expression .)
    INT             reduce using rule 248 (yield_expression -> yield_from_expression .)

  ! DOUBLE_ARROW    [ reduce using rule 248 (yield_expression -> yield_from_expression .) ]


state 146

    (247) yield_from_expression -> YIELD_FROM assignment_expression .

    AND             reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    XOR             reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    OR              reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    SEMICOLON       reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    INCLUDE         reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    INCLUDE_ONCE    reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    REQUIRE         reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    REQUIRE_ONCE    reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    PRINT           reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    YIELD           reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    YIELD_FROM      reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    COLON           reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    AS              reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ARROW           reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    STRING          reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    RIGHT_CBRAC     reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    VARIABLE        reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    DOUBLE_POINT    reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    DOUBLE_ARROW    reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ELLIPSIS        reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    TERNARY_OPERATION reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    AMPERSAND       reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ARRAY           reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    CALLABLE        reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ITERABLE        reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    BOOL            reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    FLOAT           reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)
    INT             reduce using rule 247 (yield_from_expression -> YIELD_FROM assignment_expression .)


state 147

    (215) assignment_expression -> conditional_expression .
    (213) conditional_expression -> conditional_expression . TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (214) conditional_expression -> conditional_expression . TERNARY_OPERATION DOUBLE_POINT coalesce_expression

  ! shift/reduce conflict for TERNARY_OPERATION resolved as shift
    AND             reduce using rule 215 (assignment_expression -> conditional_expression .)
    XOR             reduce using rule 215 (assignment_expression -> conditional_expression .)
    OR              reduce using rule 215 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 215 (assignment_expression -> conditional_expression .)
    INCLUDE         reduce using rule 215 (assignment_expression -> conditional_expression .)
    INCLUDE_ONCE    reduce using rule 215 (assignment_expression -> conditional_expression .)
    REQUIRE         reduce using rule 215 (assignment_expression -> conditional_expression .)
    REQUIRE_ONCE    reduce using rule 215 (assignment_expression -> conditional_expression .)
    PRINT           reduce using rule 215 (assignment_expression -> conditional_expression .)
    YIELD           reduce using rule 215 (assignment_expression -> conditional_expression .)
    YIELD_FROM      reduce using rule 215 (assignment_expression -> conditional_expression .)
    RIGHT_PARENTHESIS reduce using rule 215 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 215 (assignment_expression -> conditional_expression .)
    AS              reduce using rule 215 (assignment_expression -> conditional_expression .)
    ARROW           reduce using rule 215 (assignment_expression -> conditional_expression .)
    STRING          reduce using rule 215 (assignment_expression -> conditional_expression .)
    RIGHT_CBRAC     reduce using rule 215 (assignment_expression -> conditional_expression .)
    VARIABLE        reduce using rule 215 (assignment_expression -> conditional_expression .)
    DOUBLE_POINT    reduce using rule 215 (assignment_expression -> conditional_expression .)
    DOUBLE_ARROW    reduce using rule 215 (assignment_expression -> conditional_expression .)
    ELLIPSIS        reduce using rule 215 (assignment_expression -> conditional_expression .)
    AMPERSAND       reduce using rule 215 (assignment_expression -> conditional_expression .)
    ARRAY           reduce using rule 215 (assignment_expression -> conditional_expression .)
    CALLABLE        reduce using rule 215 (assignment_expression -> conditional_expression .)
    ITERABLE        reduce using rule 215 (assignment_expression -> conditional_expression .)
    BOOL            reduce using rule 215 (assignment_expression -> conditional_expression .)
    FLOAT           reduce using rule 215 (assignment_expression -> conditional_expression .)
    INT             reduce using rule 215 (assignment_expression -> conditional_expression .)
    TERNARY_OPERATION shift and go to state 300

  ! TERNARY_OPERATION [ reduce using rule 215 (assignment_expression -> conditional_expression .) ]


state 148

    (216) assignment_expression -> simple_assignment_expression .

    AND             reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    XOR             reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    OR              reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    SEMICOLON       reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    INCLUDE         reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    INCLUDE_ONCE    reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    REQUIRE         reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    REQUIRE_ONCE    reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    PRINT           reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    YIELD           reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    YIELD_FROM      reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    COLON           reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    AS              reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    ARROW           reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    STRING          reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    RIGHT_CBRAC     reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    VARIABLE        reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    DOUBLE_POINT    reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    DOUBLE_ARROW    reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    ELLIPSIS        reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    TERNARY_OPERATION reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    AMPERSAND       reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    ARRAY           reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    CALLABLE        reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    ITERABLE        reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    BOOL            reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    FLOAT           reduce using rule 216 (assignment_expression -> simple_assignment_expression .)
    INT             reduce using rule 216 (assignment_expression -> simple_assignment_expression .)


state 149

    (217) assignment_expression -> compound_assignment_expression .

    AND             reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    XOR             reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    OR              reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    SEMICOLON       reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    INCLUDE         reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    INCLUDE_ONCE    reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    REQUIRE         reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    REQUIRE_ONCE    reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    PRINT           reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    YIELD           reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    YIELD_FROM      reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    COLON           reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    AS              reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    ARROW           reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    STRING          reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    RIGHT_CBRAC     reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    VARIABLE        reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    DOUBLE_POINT    reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    DOUBLE_ARROW    reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    ELLIPSIS        reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    TERNARY_OPERATION reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    AMPERSAND       reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    ARRAY           reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    CALLABLE        reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    ITERABLE        reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    BOOL            reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    FLOAT           reduce using rule 217 (assignment_expression -> compound_assignment_expression .)
    INT             reduce using rule 217 (assignment_expression -> compound_assignment_expression .)


state 150

    (212) conditional_expression -> coalesce_expression .

    TERNARY_OPERATION reduce using rule 212 (conditional_expression -> coalesce_expression .)
    AND             reduce using rule 212 (conditional_expression -> coalesce_expression .)
    XOR             reduce using rule 212 (conditional_expression -> coalesce_expression .)
    OR              reduce using rule 212 (conditional_expression -> coalesce_expression .)
    SEMICOLON       reduce using rule 212 (conditional_expression -> coalesce_expression .)
    INCLUDE         reduce using rule 212 (conditional_expression -> coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 212 (conditional_expression -> coalesce_expression .)
    REQUIRE         reduce using rule 212 (conditional_expression -> coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 212 (conditional_expression -> coalesce_expression .)
    PRINT           reduce using rule 212 (conditional_expression -> coalesce_expression .)
    YIELD           reduce using rule 212 (conditional_expression -> coalesce_expression .)
    YIELD_FROM      reduce using rule 212 (conditional_expression -> coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 212 (conditional_expression -> coalesce_expression .)
    COLON           reduce using rule 212 (conditional_expression -> coalesce_expression .)
    AS              reduce using rule 212 (conditional_expression -> coalesce_expression .)
    ARROW           reduce using rule 212 (conditional_expression -> coalesce_expression .)
    STRING          reduce using rule 212 (conditional_expression -> coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 212 (conditional_expression -> coalesce_expression .)
    VARIABLE        reduce using rule 212 (conditional_expression -> coalesce_expression .)
    DOUBLE_POINT    reduce using rule 212 (conditional_expression -> coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 212 (conditional_expression -> coalesce_expression .)
    ELLIPSIS        reduce using rule 212 (conditional_expression -> coalesce_expression .)
    AMPERSAND       reduce using rule 212 (conditional_expression -> coalesce_expression .)
    ARRAY           reduce using rule 212 (conditional_expression -> coalesce_expression .)
    CALLABLE        reduce using rule 212 (conditional_expression -> coalesce_expression .)
    ITERABLE        reduce using rule 212 (conditional_expression -> coalesce_expression .)
    BOOL            reduce using rule 212 (conditional_expression -> coalesce_expression .)
    FLOAT           reduce using rule 212 (conditional_expression -> coalesce_expression .)
    INT             reduce using rule 212 (conditional_expression -> coalesce_expression .)


state 151

    (218) simple_assignment_expression -> variable . EQUAL assignment_expression
    (234) compound_assignment_expression -> variable . compound_assignment_operator assignment_expression
    (38) dereferencable_expression -> variable .
    (20) primary_expression -> variable .
    (142) postfix_increment_expression -> variable . DOUBLEPLUS
    (143) postfix_decrement_expression -> variable . DOUBLELESS
    (233) byref_assignment_expression -> variable . EQUAL AMPERSAND variable
    (235) compound_assignment_operator -> . POW_EQUAL
    (236) compound_assignment_operator -> . MUL_EQUAL
    (237) compound_assignment_operator -> . DIV_EQUAL
    (238) compound_assignment_operator -> . MOD_EQUAL
    (239) compound_assignment_operator -> . PLUS_EQUAL
    (240) compound_assignment_operator -> . MINUS_EQUAL
    (241) compound_assignment_operator -> . CONCAT_EQUAL
    (242) compound_assignment_operator -> . SL_EQUAL
    (243) compound_assignment_operator -> . SR_EQUAL
    (244) compound_assignment_operator -> . AND_EQUAL
    (245) compound_assignment_operator -> . XOR_EQUAL
    (246) compound_assignment_operator -> . OR_EQUAL

  ! shift/reduce conflict for EQUAL resolved as shift
  ! reduce/reduce conflict for ARROW resolved using rule 20 (primary_expression -> variable .)
    EQUAL           shift and go to state 301
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 20 (primary_expression -> variable .)
    ASTERISK        reduce using rule 20 (primary_expression -> variable .)
    DIVIDE          reduce using rule 20 (primary_expression -> variable .)
    MODULO          reduce using rule 20 (primary_expression -> variable .)
    PLUS            reduce using rule 20 (primary_expression -> variable .)
    LESS            reduce using rule 20 (primary_expression -> variable .)
    CONCAT          reduce using rule 20 (primary_expression -> variable .)
    SL              reduce using rule 20 (primary_expression -> variable .)
    SR              reduce using rule 20 (primary_expression -> variable .)
    LESS_THAN       reduce using rule 20 (primary_expression -> variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 20 (primary_expression -> variable .)
    IS_GREATER_OR_EQUAL reduce using rule 20 (primary_expression -> variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 20 (primary_expression -> variable .)
    SPACESHIP       reduce using rule 20 (primary_expression -> variable .)
    IS_NOT_EQUAL    reduce using rule 20 (primary_expression -> variable .)
    IS_IDENTICAL    reduce using rule 20 (primary_expression -> variable .)
    IS_NOT_IDENTICAL reduce using rule 20 (primary_expression -> variable .)
    AMPERSAND       reduce using rule 20 (primary_expression -> variable .)
    BITWISE_XOR     reduce using rule 20 (primary_expression -> variable .)
    BITWISE_OR      reduce using rule 20 (primary_expression -> variable .)
    COALESCE        reduce using rule 20 (primary_expression -> variable .)
    TERNARY_OPERATION reduce using rule 20 (primary_expression -> variable .)
    AND             reduce using rule 20 (primary_expression -> variable .)
    XOR             reduce using rule 20 (primary_expression -> variable .)
    OR              reduce using rule 20 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 20 (primary_expression -> variable .)
    INCLUDE         reduce using rule 20 (primary_expression -> variable .)
    INCLUDE_ONCE    reduce using rule 20 (primary_expression -> variable .)
    REQUIRE         reduce using rule 20 (primary_expression -> variable .)
    REQUIRE_ONCE    reduce using rule 20 (primary_expression -> variable .)
    PRINT           reduce using rule 20 (primary_expression -> variable .)
    YIELD           reduce using rule 20 (primary_expression -> variable .)
    YIELD_FROM      reduce using rule 20 (primary_expression -> variable .)
    RIGHT_PARENTHESIS reduce using rule 20 (primary_expression -> variable .)
    COLON           reduce using rule 20 (primary_expression -> variable .)
    AS              reduce using rule 20 (primary_expression -> variable .)
    ARROW           reduce using rule 20 (primary_expression -> variable .)
    STRING          reduce using rule 20 (primary_expression -> variable .)
    RIGHT_CBRAC     reduce using rule 20 (primary_expression -> variable .)
    VARIABLE        reduce using rule 20 (primary_expression -> variable .)
    DOUBLE_POINT    reduce using rule 20 (primary_expression -> variable .)
    DOUBLE_ARROW    reduce using rule 20 (primary_expression -> variable .)
    ELLIPSIS        reduce using rule 20 (primary_expression -> variable .)
    ARRAY           reduce using rule 20 (primary_expression -> variable .)
    CALLABLE        reduce using rule 20 (primary_expression -> variable .)
    ITERABLE        reduce using rule 20 (primary_expression -> variable .)
    BOOL            reduce using rule 20 (primary_expression -> variable .)
    FLOAT           reduce using rule 20 (primary_expression -> variable .)
    INT             reduce using rule 20 (primary_expression -> variable .)
    INSTANCEOF      reduce using rule 20 (primary_expression -> variable .)
    DOUBLEPLUS      shift and go to state 303
    DOUBLELESS      shift and go to state 304
    POW_EQUAL       shift and go to state 305
    MUL_EQUAL       shift and go to state 306
    DIV_EQUAL       shift and go to state 307
    MOD_EQUAL       shift and go to state 308
    PLUS_EQUAL      shift and go to state 309
    MINUS_EQUAL     shift and go to state 310
    CONCAT_EQUAL    shift and go to state 311
    SL_EQUAL        shift and go to state 312
    SR_EQUAL        shift and go to state 313
    AND_EQUAL       shift and go to state 314
    XOR_EQUAL       shift and go to state 315
    OR_EQUAL        shift and go to state 316

  ! ARROW           [ reduce using rule 38 (dereferencable_expression -> variable .) ]
  ! EQUAL           [ reduce using rule 20 (primary_expression -> variable .) ]

    compound_assignment_operator   shift and go to state 302

state 152

    (219) simple_assignment_expression -> list_intrinsic . EQUAL assignment_expression

    EQUAL           shift and go to state 317


state 153

    (210) coalesce_expression -> logical_inc_OR_expression_1 .
    (211) coalesce_expression -> logical_inc_OR_expression_1 . COALESCE coalesce_expression
    (209) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 . BITWISE_OR BITWISE_OR logical_AND_expression_1

    TERNARY_OPERATION reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    AND             reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    XOR             reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    OR              reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    SEMICOLON       reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    INCLUDE         reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    INCLUDE_ONCE    reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    REQUIRE         reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    REQUIRE_ONCE    reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    PRINT           reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    YIELD           reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    YIELD_FROM      reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    RIGHT_PARENTHESIS reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    COLON           reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    AS              reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ARROW           reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    STRING          reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    RIGHT_CBRAC     reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    VARIABLE        reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    DOUBLE_POINT    reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    DOUBLE_ARROW    reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ELLIPSIS        reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    AMPERSAND       reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ARRAY           reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    CALLABLE        reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ITERABLE        reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    BOOL            reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    FLOAT           reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    INT             reduce using rule 210 (coalesce_expression -> logical_inc_OR_expression_1 .)
    COALESCE        shift and go to state 318
    BITWISE_OR      shift and go to state 319


state 154

    (51) variable -> callable_variable .
    (42) callable_expression -> callable_variable .

  ! reduce/reduce conflict for LEFT_PARENTHESIS resolved using rule 42 (callable_expression -> callable_variable .)
    EQUAL           reduce using rule 51 (variable -> callable_variable .)
    DOUBLEPLUS      reduce using rule 51 (variable -> callable_variable .)
    DOUBLELESS      reduce using rule 51 (variable -> callable_variable .)
    POW_EQUAL       reduce using rule 51 (variable -> callable_variable .)
    MUL_EQUAL       reduce using rule 51 (variable -> callable_variable .)
    DIV_EQUAL       reduce using rule 51 (variable -> callable_variable .)
    MOD_EQUAL       reduce using rule 51 (variable -> callable_variable .)
    PLUS_EQUAL      reduce using rule 51 (variable -> callable_variable .)
    MINUS_EQUAL     reduce using rule 51 (variable -> callable_variable .)
    CONCAT_EQUAL    reduce using rule 51 (variable -> callable_variable .)
    SL_EQUAL        reduce using rule 51 (variable -> callable_variable .)
    SR_EQUAL        reduce using rule 51 (variable -> callable_variable .)
    AND_EQUAL       reduce using rule 51 (variable -> callable_variable .)
    XOR_EQUAL       reduce using rule 51 (variable -> callable_variable .)
    OR_EQUAL        reduce using rule 51 (variable -> callable_variable .)
    ARROW           reduce using rule 51 (variable -> callable_variable .)
    LEFT_CBRAC      reduce using rule 51 (variable -> callable_variable .)
    DOUBLE_COLON    reduce using rule 51 (variable -> callable_variable .)
    DOUBLEASTERISK  reduce using rule 51 (variable -> callable_variable .)
    ASTERISK        reduce using rule 51 (variable -> callable_variable .)
    DIVIDE          reduce using rule 51 (variable -> callable_variable .)
    MODULO          reduce using rule 51 (variable -> callable_variable .)
    PLUS            reduce using rule 51 (variable -> callable_variable .)
    LESS            reduce using rule 51 (variable -> callable_variable .)
    CONCAT          reduce using rule 51 (variable -> callable_variable .)
    SL              reduce using rule 51 (variable -> callable_variable .)
    SR              reduce using rule 51 (variable -> callable_variable .)
    LESS_THAN       reduce using rule 51 (variable -> callable_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 51 (variable -> callable_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 51 (variable -> callable_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 51 (variable -> callable_variable .)
    SPACESHIP       reduce using rule 51 (variable -> callable_variable .)
    IS_NOT_EQUAL    reduce using rule 51 (variable -> callable_variable .)
    IS_IDENTICAL    reduce using rule 51 (variable -> callable_variable .)
    IS_NOT_IDENTICAL reduce using rule 51 (variable -> callable_variable .)
    AMPERSAND       reduce using rule 51 (variable -> callable_variable .)
    BITWISE_XOR     reduce using rule 51 (variable -> callable_variable .)
    BITWISE_OR      reduce using rule 51 (variable -> callable_variable .)
    COALESCE        reduce using rule 51 (variable -> callable_variable .)
    TERNARY_OPERATION reduce using rule 51 (variable -> callable_variable .)
    AND             reduce using rule 51 (variable -> callable_variable .)
    XOR             reduce using rule 51 (variable -> callable_variable .)
    OR              reduce using rule 51 (variable -> callable_variable .)
    SEMICOLON       reduce using rule 51 (variable -> callable_variable .)
    INCLUDE         reduce using rule 51 (variable -> callable_variable .)
    INCLUDE_ONCE    reduce using rule 51 (variable -> callable_variable .)
    REQUIRE         reduce using rule 51 (variable -> callable_variable .)
    REQUIRE_ONCE    reduce using rule 51 (variable -> callable_variable .)
    PRINT           reduce using rule 51 (variable -> callable_variable .)
    YIELD           reduce using rule 51 (variable -> callable_variable .)
    YIELD_FROM      reduce using rule 51 (variable -> callable_variable .)
    RIGHT_PARENTHESIS reduce using rule 51 (variable -> callable_variable .)
    COLON           reduce using rule 51 (variable -> callable_variable .)
    AS              reduce using rule 51 (variable -> callable_variable .)
    STRING          reduce using rule 51 (variable -> callable_variable .)
    RIGHT_CBRAC     reduce using rule 51 (variable -> callable_variable .)
    VARIABLE        reduce using rule 51 (variable -> callable_variable .)
    DOUBLE_POINT    reduce using rule 51 (variable -> callable_variable .)
    DOUBLE_ARROW    reduce using rule 51 (variable -> callable_variable .)
    ELLIPSIS        reduce using rule 51 (variable -> callable_variable .)
    ARRAY           reduce using rule 51 (variable -> callable_variable .)
    CALLABLE        reduce using rule 51 (variable -> callable_variable .)
    ITERABLE        reduce using rule 51 (variable -> callable_variable .)
    BOOL            reduce using rule 51 (variable -> callable_variable .)
    FLOAT           reduce using rule 51 (variable -> callable_variable .)
    INT             reduce using rule 51 (variable -> callable_variable .)
    INSTANCEOF      reduce using rule 51 (variable -> callable_variable .)
    DOLLAR          reduce using rule 51 (variable -> callable_variable .)
    SELF            reduce using rule 51 (variable -> callable_variable .)
    PARENT          reduce using rule 51 (variable -> callable_variable .)
    STATIC          reduce using rule 51 (variable -> callable_variable .)
    LEFT_PARENTHESIS reduce using rule 42 (callable_expression -> callable_variable .)

  ! LEFT_PARENTHESIS [ reduce using rule 51 (variable -> callable_variable .) ]


state 155

    (52) variable -> scoped_property_access_expression .

    EQUAL           reduce using rule 52 (variable -> scoped_property_access_expression .)
    DOUBLEPLUS      reduce using rule 52 (variable -> scoped_property_access_expression .)
    DOUBLELESS      reduce using rule 52 (variable -> scoped_property_access_expression .)
    POW_EQUAL       reduce using rule 52 (variable -> scoped_property_access_expression .)
    MUL_EQUAL       reduce using rule 52 (variable -> scoped_property_access_expression .)
    DIV_EQUAL       reduce using rule 52 (variable -> scoped_property_access_expression .)
    MOD_EQUAL       reduce using rule 52 (variable -> scoped_property_access_expression .)
    PLUS_EQUAL      reduce using rule 52 (variable -> scoped_property_access_expression .)
    MINUS_EQUAL     reduce using rule 52 (variable -> scoped_property_access_expression .)
    CONCAT_EQUAL    reduce using rule 52 (variable -> scoped_property_access_expression .)
    SL_EQUAL        reduce using rule 52 (variable -> scoped_property_access_expression .)
    SR_EQUAL        reduce using rule 52 (variable -> scoped_property_access_expression .)
    AND_EQUAL       reduce using rule 52 (variable -> scoped_property_access_expression .)
    XOR_EQUAL       reduce using rule 52 (variable -> scoped_property_access_expression .)
    OR_EQUAL        reduce using rule 52 (variable -> scoped_property_access_expression .)
    ARROW           reduce using rule 52 (variable -> scoped_property_access_expression .)
    LEFT_CBRAC      reduce using rule 52 (variable -> scoped_property_access_expression .)
    DOUBLE_COLON    reduce using rule 52 (variable -> scoped_property_access_expression .)
    DOUBLEASTERISK  reduce using rule 52 (variable -> scoped_property_access_expression .)
    ASTERISK        reduce using rule 52 (variable -> scoped_property_access_expression .)
    DIVIDE          reduce using rule 52 (variable -> scoped_property_access_expression .)
    MODULO          reduce using rule 52 (variable -> scoped_property_access_expression .)
    PLUS            reduce using rule 52 (variable -> scoped_property_access_expression .)
    LESS            reduce using rule 52 (variable -> scoped_property_access_expression .)
    CONCAT          reduce using rule 52 (variable -> scoped_property_access_expression .)
    SL              reduce using rule 52 (variable -> scoped_property_access_expression .)
    SR              reduce using rule 52 (variable -> scoped_property_access_expression .)
    LESS_THAN       reduce using rule 52 (variable -> scoped_property_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 52 (variable -> scoped_property_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 52 (variable -> scoped_property_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 52 (variable -> scoped_property_access_expression .)
    SPACESHIP       reduce using rule 52 (variable -> scoped_property_access_expression .)
    IS_NOT_EQUAL    reduce using rule 52 (variable -> scoped_property_access_expression .)
    IS_IDENTICAL    reduce using rule 52 (variable -> scoped_property_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 52 (variable -> scoped_property_access_expression .)
    AMPERSAND       reduce using rule 52 (variable -> scoped_property_access_expression .)
    BITWISE_XOR     reduce using rule 52 (variable -> scoped_property_access_expression .)
    BITWISE_OR      reduce using rule 52 (variable -> scoped_property_access_expression .)
    COALESCE        reduce using rule 52 (variable -> scoped_property_access_expression .)
    TERNARY_OPERATION reduce using rule 52 (variable -> scoped_property_access_expression .)
    AND             reduce using rule 52 (variable -> scoped_property_access_expression .)
    XOR             reduce using rule 52 (variable -> scoped_property_access_expression .)
    OR              reduce using rule 52 (variable -> scoped_property_access_expression .)
    SEMICOLON       reduce using rule 52 (variable -> scoped_property_access_expression .)
    INCLUDE         reduce using rule 52 (variable -> scoped_property_access_expression .)
    INCLUDE_ONCE    reduce using rule 52 (variable -> scoped_property_access_expression .)
    REQUIRE         reduce using rule 52 (variable -> scoped_property_access_expression .)
    REQUIRE_ONCE    reduce using rule 52 (variable -> scoped_property_access_expression .)
    PRINT           reduce using rule 52 (variable -> scoped_property_access_expression .)
    YIELD           reduce using rule 52 (variable -> scoped_property_access_expression .)
    YIELD_FROM      reduce using rule 52 (variable -> scoped_property_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 52 (variable -> scoped_property_access_expression .)
    COLON           reduce using rule 52 (variable -> scoped_property_access_expression .)
    AS              reduce using rule 52 (variable -> scoped_property_access_expression .)
    STRING          reduce using rule 52 (variable -> scoped_property_access_expression .)
    RIGHT_CBRAC     reduce using rule 52 (variable -> scoped_property_access_expression .)
    VARIABLE        reduce using rule 52 (variable -> scoped_property_access_expression .)
    DOUBLE_POINT    reduce using rule 52 (variable -> scoped_property_access_expression .)
    DOUBLE_ARROW    reduce using rule 52 (variable -> scoped_property_access_expression .)
    ELLIPSIS        reduce using rule 52 (variable -> scoped_property_access_expression .)
    ARRAY           reduce using rule 52 (variable -> scoped_property_access_expression .)
    CALLABLE        reduce using rule 52 (variable -> scoped_property_access_expression .)
    ITERABLE        reduce using rule 52 (variable -> scoped_property_access_expression .)
    BOOL            reduce using rule 52 (variable -> scoped_property_access_expression .)
    FLOAT           reduce using rule 52 (variable -> scoped_property_access_expression .)
    INT             reduce using rule 52 (variable -> scoped_property_access_expression .)
    INSTANCEOF      reduce using rule 52 (variable -> scoped_property_access_expression .)
    DOLLAR          reduce using rule 52 (variable -> scoped_property_access_expression .)
    LEFT_PARENTHESIS reduce using rule 52 (variable -> scoped_property_access_expression .)
    SELF            reduce using rule 52 (variable -> scoped_property_access_expression .)
    PARENT          reduce using rule 52 (variable -> scoped_property_access_expression .)
    STATIC          reduce using rule 52 (variable -> scoped_property_access_expression .)


state 156

    (53) variable -> member_access_expression .

    EQUAL           reduce using rule 53 (variable -> member_access_expression .)
    DOUBLEPLUS      reduce using rule 53 (variable -> member_access_expression .)
    DOUBLELESS      reduce using rule 53 (variable -> member_access_expression .)
    POW_EQUAL       reduce using rule 53 (variable -> member_access_expression .)
    MUL_EQUAL       reduce using rule 53 (variable -> member_access_expression .)
    DIV_EQUAL       reduce using rule 53 (variable -> member_access_expression .)
    MOD_EQUAL       reduce using rule 53 (variable -> member_access_expression .)
    PLUS_EQUAL      reduce using rule 53 (variable -> member_access_expression .)
    MINUS_EQUAL     reduce using rule 53 (variable -> member_access_expression .)
    CONCAT_EQUAL    reduce using rule 53 (variable -> member_access_expression .)
    SL_EQUAL        reduce using rule 53 (variable -> member_access_expression .)
    SR_EQUAL        reduce using rule 53 (variable -> member_access_expression .)
    AND_EQUAL       reduce using rule 53 (variable -> member_access_expression .)
    XOR_EQUAL       reduce using rule 53 (variable -> member_access_expression .)
    OR_EQUAL        reduce using rule 53 (variable -> member_access_expression .)
    ARROW           reduce using rule 53 (variable -> member_access_expression .)
    LEFT_CBRAC      reduce using rule 53 (variable -> member_access_expression .)
    DOUBLE_COLON    reduce using rule 53 (variable -> member_access_expression .)
    DOUBLEASTERISK  reduce using rule 53 (variable -> member_access_expression .)
    ASTERISK        reduce using rule 53 (variable -> member_access_expression .)
    DIVIDE          reduce using rule 53 (variable -> member_access_expression .)
    MODULO          reduce using rule 53 (variable -> member_access_expression .)
    PLUS            reduce using rule 53 (variable -> member_access_expression .)
    LESS            reduce using rule 53 (variable -> member_access_expression .)
    CONCAT          reduce using rule 53 (variable -> member_access_expression .)
    SL              reduce using rule 53 (variable -> member_access_expression .)
    SR              reduce using rule 53 (variable -> member_access_expression .)
    LESS_THAN       reduce using rule 53 (variable -> member_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 53 (variable -> member_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 53 (variable -> member_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 53 (variable -> member_access_expression .)
    SPACESHIP       reduce using rule 53 (variable -> member_access_expression .)
    IS_NOT_EQUAL    reduce using rule 53 (variable -> member_access_expression .)
    IS_IDENTICAL    reduce using rule 53 (variable -> member_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 53 (variable -> member_access_expression .)
    AMPERSAND       reduce using rule 53 (variable -> member_access_expression .)
    BITWISE_XOR     reduce using rule 53 (variable -> member_access_expression .)
    BITWISE_OR      reduce using rule 53 (variable -> member_access_expression .)
    COALESCE        reduce using rule 53 (variable -> member_access_expression .)
    TERNARY_OPERATION reduce using rule 53 (variable -> member_access_expression .)
    AND             reduce using rule 53 (variable -> member_access_expression .)
    XOR             reduce using rule 53 (variable -> member_access_expression .)
    OR              reduce using rule 53 (variable -> member_access_expression .)
    SEMICOLON       reduce using rule 53 (variable -> member_access_expression .)
    INCLUDE         reduce using rule 53 (variable -> member_access_expression .)
    INCLUDE_ONCE    reduce using rule 53 (variable -> member_access_expression .)
    REQUIRE         reduce using rule 53 (variable -> member_access_expression .)
    REQUIRE_ONCE    reduce using rule 53 (variable -> member_access_expression .)
    PRINT           reduce using rule 53 (variable -> member_access_expression .)
    YIELD           reduce using rule 53 (variable -> member_access_expression .)
    YIELD_FROM      reduce using rule 53 (variable -> member_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 53 (variable -> member_access_expression .)
    COLON           reduce using rule 53 (variable -> member_access_expression .)
    AS              reduce using rule 53 (variable -> member_access_expression .)
    STRING          reduce using rule 53 (variable -> member_access_expression .)
    RIGHT_CBRAC     reduce using rule 53 (variable -> member_access_expression .)
    VARIABLE        reduce using rule 53 (variable -> member_access_expression .)
    DOUBLE_POINT    reduce using rule 53 (variable -> member_access_expression .)
    DOUBLE_ARROW    reduce using rule 53 (variable -> member_access_expression .)
    ELLIPSIS        reduce using rule 53 (variable -> member_access_expression .)
    ARRAY           reduce using rule 53 (variable -> member_access_expression .)
    CALLABLE        reduce using rule 53 (variable -> member_access_expression .)
    ITERABLE        reduce using rule 53 (variable -> member_access_expression .)
    BOOL            reduce using rule 53 (variable -> member_access_expression .)
    FLOAT           reduce using rule 53 (variable -> member_access_expression .)
    INT             reduce using rule 53 (variable -> member_access_expression .)
    INSTANCEOF      reduce using rule 53 (variable -> member_access_expression .)
    DOLLAR          reduce using rule 53 (variable -> member_access_expression .)
    LEFT_PARENTHESIS reduce using rule 53 (variable -> member_access_expression .)
    SELF            reduce using rule 53 (variable -> member_access_expression .)
    PARENT          reduce using rule 53 (variable -> member_access_expression .)
    STATIC          reduce using rule 53 (variable -> member_access_expression .)


state 157

    (220) list_intrinsic -> LIST . LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 320


state 158

    (39) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (43) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (172) cast_expression -> LEFT_PARENTHESIS . RIGHT_PARENTHESIS unary_expression
    (34) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 322
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 321
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 159

    (208) logical_inc_OR_expression_1 -> logical_AND_expression_1 .
    (207) logical_AND_expression_1 -> logical_AND_expression_1 . AMPERSAND AMPERSAND bitwise_inc_OR_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    COALESCE        reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    BITWISE_OR      reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    TERNARY_OPERATION reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    AND             reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    XOR             reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    OR              reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    SEMICOLON       reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    INCLUDE         reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    INCLUDE_ONCE    reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    REQUIRE         reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    REQUIRE_ONCE    reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    PRINT           reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    YIELD           reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    YIELD_FROM      reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    RIGHT_PARENTHESIS reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    COLON           reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    AS              reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ARROW           reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    STRING          reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    RIGHT_CBRAC     reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    VARIABLE        reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    DOUBLE_POINT    reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    DOUBLE_ARROW    reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ELLIPSIS        reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ARRAY           reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    CALLABLE        reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ITERABLE        reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    BOOL            reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    FLOAT           reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    INT             reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    AMPERSAND       shift and go to state 323

  ! AMPERSAND       [ reduce using rule 208 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .) ]


state 160

    (46) callable_variable -> simple_variable .

    EQUAL           reduce using rule 46 (callable_variable -> simple_variable .)
    DOUBLEPLUS      reduce using rule 46 (callable_variable -> simple_variable .)
    DOUBLELESS      reduce using rule 46 (callable_variable -> simple_variable .)
    POW_EQUAL       reduce using rule 46 (callable_variable -> simple_variable .)
    MUL_EQUAL       reduce using rule 46 (callable_variable -> simple_variable .)
    DIV_EQUAL       reduce using rule 46 (callable_variable -> simple_variable .)
    MOD_EQUAL       reduce using rule 46 (callable_variable -> simple_variable .)
    PLUS_EQUAL      reduce using rule 46 (callable_variable -> simple_variable .)
    MINUS_EQUAL     reduce using rule 46 (callable_variable -> simple_variable .)
    CONCAT_EQUAL    reduce using rule 46 (callable_variable -> simple_variable .)
    SL_EQUAL        reduce using rule 46 (callable_variable -> simple_variable .)
    SR_EQUAL        reduce using rule 46 (callable_variable -> simple_variable .)
    AND_EQUAL       reduce using rule 46 (callable_variable -> simple_variable .)
    XOR_EQUAL       reduce using rule 46 (callable_variable -> simple_variable .)
    OR_EQUAL        reduce using rule 46 (callable_variable -> simple_variable .)
    ARROW           reduce using rule 46 (callable_variable -> simple_variable .)
    LEFT_CBRAC      reduce using rule 46 (callable_variable -> simple_variable .)
    DOUBLE_COLON    reduce using rule 46 (callable_variable -> simple_variable .)
    DOUBLEASTERISK  reduce using rule 46 (callable_variable -> simple_variable .)
    ASTERISK        reduce using rule 46 (callable_variable -> simple_variable .)
    DIVIDE          reduce using rule 46 (callable_variable -> simple_variable .)
    MODULO          reduce using rule 46 (callable_variable -> simple_variable .)
    PLUS            reduce using rule 46 (callable_variable -> simple_variable .)
    LESS            reduce using rule 46 (callable_variable -> simple_variable .)
    CONCAT          reduce using rule 46 (callable_variable -> simple_variable .)
    SL              reduce using rule 46 (callable_variable -> simple_variable .)
    SR              reduce using rule 46 (callable_variable -> simple_variable .)
    LESS_THAN       reduce using rule 46 (callable_variable -> simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 46 (callable_variable -> simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 46 (callable_variable -> simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 46 (callable_variable -> simple_variable .)
    SPACESHIP       reduce using rule 46 (callable_variable -> simple_variable .)
    IS_NOT_EQUAL    reduce using rule 46 (callable_variable -> simple_variable .)
    IS_IDENTICAL    reduce using rule 46 (callable_variable -> simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 46 (callable_variable -> simple_variable .)
    AMPERSAND       reduce using rule 46 (callable_variable -> simple_variable .)
    BITWISE_XOR     reduce using rule 46 (callable_variable -> simple_variable .)
    BITWISE_OR      reduce using rule 46 (callable_variable -> simple_variable .)
    COALESCE        reduce using rule 46 (callable_variable -> simple_variable .)
    TERNARY_OPERATION reduce using rule 46 (callable_variable -> simple_variable .)
    AND             reduce using rule 46 (callable_variable -> simple_variable .)
    XOR             reduce using rule 46 (callable_variable -> simple_variable .)
    OR              reduce using rule 46 (callable_variable -> simple_variable .)
    SEMICOLON       reduce using rule 46 (callable_variable -> simple_variable .)
    INCLUDE         reduce using rule 46 (callable_variable -> simple_variable .)
    INCLUDE_ONCE    reduce using rule 46 (callable_variable -> simple_variable .)
    REQUIRE         reduce using rule 46 (callable_variable -> simple_variable .)
    REQUIRE_ONCE    reduce using rule 46 (callable_variable -> simple_variable .)
    PRINT           reduce using rule 46 (callable_variable -> simple_variable .)
    YIELD           reduce using rule 46 (callable_variable -> simple_variable .)
    YIELD_FROM      reduce using rule 46 (callable_variable -> simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 46 (callable_variable -> simple_variable .)
    COLON           reduce using rule 46 (callable_variable -> simple_variable .)
    AS              reduce using rule 46 (callable_variable -> simple_variable .)
    STRING          reduce using rule 46 (callable_variable -> simple_variable .)
    RIGHT_CBRAC     reduce using rule 46 (callable_variable -> simple_variable .)
    VARIABLE        reduce using rule 46 (callable_variable -> simple_variable .)
    DOUBLE_POINT    reduce using rule 46 (callable_variable -> simple_variable .)
    DOUBLE_ARROW    reduce using rule 46 (callable_variable -> simple_variable .)
    ELLIPSIS        reduce using rule 46 (callable_variable -> simple_variable .)
    ARRAY           reduce using rule 46 (callable_variable -> simple_variable .)
    CALLABLE        reduce using rule 46 (callable_variable -> simple_variable .)
    ITERABLE        reduce using rule 46 (callable_variable -> simple_variable .)
    BOOL            reduce using rule 46 (callable_variable -> simple_variable .)
    FLOAT           reduce using rule 46 (callable_variable -> simple_variable .)
    INT             reduce using rule 46 (callable_variable -> simple_variable .)
    INSTANCEOF      reduce using rule 46 (callable_variable -> simple_variable .)
    LEFT_PARENTHESIS reduce using rule 46 (callable_variable -> simple_variable .)
    DOLLAR          reduce using rule 46 (callable_variable -> simple_variable .)
    SELF            reduce using rule 46 (callable_variable -> simple_variable .)
    PARENT          reduce using rule 46 (callable_variable -> simple_variable .)
    STATIC          reduce using rule 46 (callable_variable -> simple_variable .)


state 161

    (47) callable_variable -> subscript_expression .

    EQUAL           reduce using rule 47 (callable_variable -> subscript_expression .)
    DOUBLEPLUS      reduce using rule 47 (callable_variable -> subscript_expression .)
    DOUBLELESS      reduce using rule 47 (callable_variable -> subscript_expression .)
    POW_EQUAL       reduce using rule 47 (callable_variable -> subscript_expression .)
    MUL_EQUAL       reduce using rule 47 (callable_variable -> subscript_expression .)
    DIV_EQUAL       reduce using rule 47 (callable_variable -> subscript_expression .)
    MOD_EQUAL       reduce using rule 47 (callable_variable -> subscript_expression .)
    PLUS_EQUAL      reduce using rule 47 (callable_variable -> subscript_expression .)
    MINUS_EQUAL     reduce using rule 47 (callable_variable -> subscript_expression .)
    CONCAT_EQUAL    reduce using rule 47 (callable_variable -> subscript_expression .)
    SL_EQUAL        reduce using rule 47 (callable_variable -> subscript_expression .)
    SR_EQUAL        reduce using rule 47 (callable_variable -> subscript_expression .)
    AND_EQUAL       reduce using rule 47 (callable_variable -> subscript_expression .)
    XOR_EQUAL       reduce using rule 47 (callable_variable -> subscript_expression .)
    OR_EQUAL        reduce using rule 47 (callable_variable -> subscript_expression .)
    ARROW           reduce using rule 47 (callable_variable -> subscript_expression .)
    LEFT_CBRAC      reduce using rule 47 (callable_variable -> subscript_expression .)
    DOUBLE_COLON    reduce using rule 47 (callable_variable -> subscript_expression .)
    DOUBLEASTERISK  reduce using rule 47 (callable_variable -> subscript_expression .)
    ASTERISK        reduce using rule 47 (callable_variable -> subscript_expression .)
    DIVIDE          reduce using rule 47 (callable_variable -> subscript_expression .)
    MODULO          reduce using rule 47 (callable_variable -> subscript_expression .)
    PLUS            reduce using rule 47 (callable_variable -> subscript_expression .)
    LESS            reduce using rule 47 (callable_variable -> subscript_expression .)
    CONCAT          reduce using rule 47 (callable_variable -> subscript_expression .)
    SL              reduce using rule 47 (callable_variable -> subscript_expression .)
    SR              reduce using rule 47 (callable_variable -> subscript_expression .)
    LESS_THAN       reduce using rule 47 (callable_variable -> subscript_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 47 (callable_variable -> subscript_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 47 (callable_variable -> subscript_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 47 (callable_variable -> subscript_expression .)
    SPACESHIP       reduce using rule 47 (callable_variable -> subscript_expression .)
    IS_NOT_EQUAL    reduce using rule 47 (callable_variable -> subscript_expression .)
    IS_IDENTICAL    reduce using rule 47 (callable_variable -> subscript_expression .)
    IS_NOT_IDENTICAL reduce using rule 47 (callable_variable -> subscript_expression .)
    AMPERSAND       reduce using rule 47 (callable_variable -> subscript_expression .)
    BITWISE_XOR     reduce using rule 47 (callable_variable -> subscript_expression .)
    BITWISE_OR      reduce using rule 47 (callable_variable -> subscript_expression .)
    COALESCE        reduce using rule 47 (callable_variable -> subscript_expression .)
    TERNARY_OPERATION reduce using rule 47 (callable_variable -> subscript_expression .)
    AND             reduce using rule 47 (callable_variable -> subscript_expression .)
    XOR             reduce using rule 47 (callable_variable -> subscript_expression .)
    OR              reduce using rule 47 (callable_variable -> subscript_expression .)
    SEMICOLON       reduce using rule 47 (callable_variable -> subscript_expression .)
    INCLUDE         reduce using rule 47 (callable_variable -> subscript_expression .)
    INCLUDE_ONCE    reduce using rule 47 (callable_variable -> subscript_expression .)
    REQUIRE         reduce using rule 47 (callable_variable -> subscript_expression .)
    REQUIRE_ONCE    reduce using rule 47 (callable_variable -> subscript_expression .)
    PRINT           reduce using rule 47 (callable_variable -> subscript_expression .)
    YIELD           reduce using rule 47 (callable_variable -> subscript_expression .)
    YIELD_FROM      reduce using rule 47 (callable_variable -> subscript_expression .)
    RIGHT_PARENTHESIS reduce using rule 47 (callable_variable -> subscript_expression .)
    COLON           reduce using rule 47 (callable_variable -> subscript_expression .)
    AS              reduce using rule 47 (callable_variable -> subscript_expression .)
    STRING          reduce using rule 47 (callable_variable -> subscript_expression .)
    RIGHT_CBRAC     reduce using rule 47 (callable_variable -> subscript_expression .)
    VARIABLE        reduce using rule 47 (callable_variable -> subscript_expression .)
    DOUBLE_POINT    reduce using rule 47 (callable_variable -> subscript_expression .)
    DOUBLE_ARROW    reduce using rule 47 (callable_variable -> subscript_expression .)
    ELLIPSIS        reduce using rule 47 (callable_variable -> subscript_expression .)
    ARRAY           reduce using rule 47 (callable_variable -> subscript_expression .)
    CALLABLE        reduce using rule 47 (callable_variable -> subscript_expression .)
    ITERABLE        reduce using rule 47 (callable_variable -> subscript_expression .)
    BOOL            reduce using rule 47 (callable_variable -> subscript_expression .)
    FLOAT           reduce using rule 47 (callable_variable -> subscript_expression .)
    INT             reduce using rule 47 (callable_variable -> subscript_expression .)
    INSTANCEOF      reduce using rule 47 (callable_variable -> subscript_expression .)
    LEFT_PARENTHESIS reduce using rule 47 (callable_variable -> subscript_expression .)
    DOLLAR          reduce using rule 47 (callable_variable -> subscript_expression .)
    SELF            reduce using rule 47 (callable_variable -> subscript_expression .)
    PARENT          reduce using rule 47 (callable_variable -> subscript_expression .)
    STATIC          reduce using rule 47 (callable_variable -> subscript_expression .)


state 162

    (48) callable_variable -> member_call_expression .

    EQUAL           reduce using rule 48 (callable_variable -> member_call_expression .)
    DOUBLEPLUS      reduce using rule 48 (callable_variable -> member_call_expression .)
    DOUBLELESS      reduce using rule 48 (callable_variable -> member_call_expression .)
    POW_EQUAL       reduce using rule 48 (callable_variable -> member_call_expression .)
    MUL_EQUAL       reduce using rule 48 (callable_variable -> member_call_expression .)
    DIV_EQUAL       reduce using rule 48 (callable_variable -> member_call_expression .)
    MOD_EQUAL       reduce using rule 48 (callable_variable -> member_call_expression .)
    PLUS_EQUAL      reduce using rule 48 (callable_variable -> member_call_expression .)
    MINUS_EQUAL     reduce using rule 48 (callable_variable -> member_call_expression .)
    CONCAT_EQUAL    reduce using rule 48 (callable_variable -> member_call_expression .)
    SL_EQUAL        reduce using rule 48 (callable_variable -> member_call_expression .)
    SR_EQUAL        reduce using rule 48 (callable_variable -> member_call_expression .)
    AND_EQUAL       reduce using rule 48 (callable_variable -> member_call_expression .)
    XOR_EQUAL       reduce using rule 48 (callable_variable -> member_call_expression .)
    OR_EQUAL        reduce using rule 48 (callable_variable -> member_call_expression .)
    ARROW           reduce using rule 48 (callable_variable -> member_call_expression .)
    LEFT_CBRAC      reduce using rule 48 (callable_variable -> member_call_expression .)
    DOUBLE_COLON    reduce using rule 48 (callable_variable -> member_call_expression .)
    DOUBLEASTERISK  reduce using rule 48 (callable_variable -> member_call_expression .)
    ASTERISK        reduce using rule 48 (callable_variable -> member_call_expression .)
    DIVIDE          reduce using rule 48 (callable_variable -> member_call_expression .)
    MODULO          reduce using rule 48 (callable_variable -> member_call_expression .)
    PLUS            reduce using rule 48 (callable_variable -> member_call_expression .)
    LESS            reduce using rule 48 (callable_variable -> member_call_expression .)
    CONCAT          reduce using rule 48 (callable_variable -> member_call_expression .)
    SL              reduce using rule 48 (callable_variable -> member_call_expression .)
    SR              reduce using rule 48 (callable_variable -> member_call_expression .)
    LESS_THAN       reduce using rule 48 (callable_variable -> member_call_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 48 (callable_variable -> member_call_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 48 (callable_variable -> member_call_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 48 (callable_variable -> member_call_expression .)
    SPACESHIP       reduce using rule 48 (callable_variable -> member_call_expression .)
    IS_NOT_EQUAL    reduce using rule 48 (callable_variable -> member_call_expression .)
    IS_IDENTICAL    reduce using rule 48 (callable_variable -> member_call_expression .)
    IS_NOT_IDENTICAL reduce using rule 48 (callable_variable -> member_call_expression .)
    AMPERSAND       reduce using rule 48 (callable_variable -> member_call_expression .)
    BITWISE_XOR     reduce using rule 48 (callable_variable -> member_call_expression .)
    BITWISE_OR      reduce using rule 48 (callable_variable -> member_call_expression .)
    COALESCE        reduce using rule 48 (callable_variable -> member_call_expression .)
    TERNARY_OPERATION reduce using rule 48 (callable_variable -> member_call_expression .)
    AND             reduce using rule 48 (callable_variable -> member_call_expression .)
    XOR             reduce using rule 48 (callable_variable -> member_call_expression .)
    OR              reduce using rule 48 (callable_variable -> member_call_expression .)
    SEMICOLON       reduce using rule 48 (callable_variable -> member_call_expression .)
    INCLUDE         reduce using rule 48 (callable_variable -> member_call_expression .)
    INCLUDE_ONCE    reduce using rule 48 (callable_variable -> member_call_expression .)
    REQUIRE         reduce using rule 48 (callable_variable -> member_call_expression .)
    REQUIRE_ONCE    reduce using rule 48 (callable_variable -> member_call_expression .)
    PRINT           reduce using rule 48 (callable_variable -> member_call_expression .)
    YIELD           reduce using rule 48 (callable_variable -> member_call_expression .)
    YIELD_FROM      reduce using rule 48 (callable_variable -> member_call_expression .)
    RIGHT_PARENTHESIS reduce using rule 48 (callable_variable -> member_call_expression .)
    COLON           reduce using rule 48 (callable_variable -> member_call_expression .)
    AS              reduce using rule 48 (callable_variable -> member_call_expression .)
    STRING          reduce using rule 48 (callable_variable -> member_call_expression .)
    RIGHT_CBRAC     reduce using rule 48 (callable_variable -> member_call_expression .)
    VARIABLE        reduce using rule 48 (callable_variable -> member_call_expression .)
    DOUBLE_POINT    reduce using rule 48 (callable_variable -> member_call_expression .)
    DOUBLE_ARROW    reduce using rule 48 (callable_variable -> member_call_expression .)
    ELLIPSIS        reduce using rule 48 (callable_variable -> member_call_expression .)
    ARRAY           reduce using rule 48 (callable_variable -> member_call_expression .)
    CALLABLE        reduce using rule 48 (callable_variable -> member_call_expression .)
    ITERABLE        reduce using rule 48 (callable_variable -> member_call_expression .)
    BOOL            reduce using rule 48 (callable_variable -> member_call_expression .)
    FLOAT           reduce using rule 48 (callable_variable -> member_call_expression .)
    INT             reduce using rule 48 (callable_variable -> member_call_expression .)
    INSTANCEOF      reduce using rule 48 (callable_variable -> member_call_expression .)
    LEFT_PARENTHESIS reduce using rule 48 (callable_variable -> member_call_expression .)
    DOLLAR          reduce using rule 48 (callable_variable -> member_call_expression .)
    SELF            reduce using rule 48 (callable_variable -> member_call_expression .)
    PARENT          reduce using rule 48 (callable_variable -> member_call_expression .)
    STATIC          reduce using rule 48 (callable_variable -> member_call_expression .)


state 163

    (49) callable_variable -> scoped_call_expression .

    EQUAL           reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DOUBLEPLUS      reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DOUBLELESS      reduce using rule 49 (callable_variable -> scoped_call_expression .)
    POW_EQUAL       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    MUL_EQUAL       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DIV_EQUAL       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    MOD_EQUAL       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    PLUS_EQUAL      reduce using rule 49 (callable_variable -> scoped_call_expression .)
    MINUS_EQUAL     reduce using rule 49 (callable_variable -> scoped_call_expression .)
    CONCAT_EQUAL    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    SL_EQUAL        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    SR_EQUAL        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    AND_EQUAL       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    XOR_EQUAL       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    OR_EQUAL        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    ARROW           reduce using rule 49 (callable_variable -> scoped_call_expression .)
    LEFT_CBRAC      reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DOUBLE_COLON    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DOUBLEASTERISK  reduce using rule 49 (callable_variable -> scoped_call_expression .)
    ASTERISK        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DIVIDE          reduce using rule 49 (callable_variable -> scoped_call_expression .)
    MODULO          reduce using rule 49 (callable_variable -> scoped_call_expression .)
    PLUS            reduce using rule 49 (callable_variable -> scoped_call_expression .)
    LESS            reduce using rule 49 (callable_variable -> scoped_call_expression .)
    CONCAT          reduce using rule 49 (callable_variable -> scoped_call_expression .)
    SL              reduce using rule 49 (callable_variable -> scoped_call_expression .)
    SR              reduce using rule 49 (callable_variable -> scoped_call_expression .)
    LESS_THAN       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 49 (callable_variable -> scoped_call_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 49 (callable_variable -> scoped_call_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 49 (callable_variable -> scoped_call_expression .)
    SPACESHIP       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    IS_NOT_EQUAL    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    IS_IDENTICAL    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    IS_NOT_IDENTICAL reduce using rule 49 (callable_variable -> scoped_call_expression .)
    AMPERSAND       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    BITWISE_XOR     reduce using rule 49 (callable_variable -> scoped_call_expression .)
    BITWISE_OR      reduce using rule 49 (callable_variable -> scoped_call_expression .)
    COALESCE        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    TERNARY_OPERATION reduce using rule 49 (callable_variable -> scoped_call_expression .)
    AND             reduce using rule 49 (callable_variable -> scoped_call_expression .)
    XOR             reduce using rule 49 (callable_variable -> scoped_call_expression .)
    OR              reduce using rule 49 (callable_variable -> scoped_call_expression .)
    SEMICOLON       reduce using rule 49 (callable_variable -> scoped_call_expression .)
    INCLUDE         reduce using rule 49 (callable_variable -> scoped_call_expression .)
    INCLUDE_ONCE    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    REQUIRE         reduce using rule 49 (callable_variable -> scoped_call_expression .)
    REQUIRE_ONCE    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    PRINT           reduce using rule 49 (callable_variable -> scoped_call_expression .)
    YIELD           reduce using rule 49 (callable_variable -> scoped_call_expression .)
    YIELD_FROM      reduce using rule 49 (callable_variable -> scoped_call_expression .)
    RIGHT_PARENTHESIS reduce using rule 49 (callable_variable -> scoped_call_expression .)
    COLON           reduce using rule 49 (callable_variable -> scoped_call_expression .)
    AS              reduce using rule 49 (callable_variable -> scoped_call_expression .)
    STRING          reduce using rule 49 (callable_variable -> scoped_call_expression .)
    RIGHT_CBRAC     reduce using rule 49 (callable_variable -> scoped_call_expression .)
    VARIABLE        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DOUBLE_POINT    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DOUBLE_ARROW    reduce using rule 49 (callable_variable -> scoped_call_expression .)
    ELLIPSIS        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    ARRAY           reduce using rule 49 (callable_variable -> scoped_call_expression .)
    CALLABLE        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    ITERABLE        reduce using rule 49 (callable_variable -> scoped_call_expression .)
    BOOL            reduce using rule 49 (callable_variable -> scoped_call_expression .)
    FLOAT           reduce using rule 49 (callable_variable -> scoped_call_expression .)
    INT             reduce using rule 49 (callable_variable -> scoped_call_expression .)
    INSTANCEOF      reduce using rule 49 (callable_variable -> scoped_call_expression .)
    LEFT_PARENTHESIS reduce using rule 49 (callable_variable -> scoped_call_expression .)
    DOLLAR          reduce using rule 49 (callable_variable -> scoped_call_expression .)
    SELF            reduce using rule 49 (callable_variable -> scoped_call_expression .)
    PARENT          reduce using rule 49 (callable_variable -> scoped_call_expression .)
    STATIC          reduce using rule 49 (callable_variable -> scoped_call_expression .)


state 164

    (50) callable_variable -> function_call_expression .

    EQUAL           reduce using rule 50 (callable_variable -> function_call_expression .)
    DOUBLEPLUS      reduce using rule 50 (callable_variable -> function_call_expression .)
    DOUBLELESS      reduce using rule 50 (callable_variable -> function_call_expression .)
    POW_EQUAL       reduce using rule 50 (callable_variable -> function_call_expression .)
    MUL_EQUAL       reduce using rule 50 (callable_variable -> function_call_expression .)
    DIV_EQUAL       reduce using rule 50 (callable_variable -> function_call_expression .)
    MOD_EQUAL       reduce using rule 50 (callable_variable -> function_call_expression .)
    PLUS_EQUAL      reduce using rule 50 (callable_variable -> function_call_expression .)
    MINUS_EQUAL     reduce using rule 50 (callable_variable -> function_call_expression .)
    CONCAT_EQUAL    reduce using rule 50 (callable_variable -> function_call_expression .)
    SL_EQUAL        reduce using rule 50 (callable_variable -> function_call_expression .)
    SR_EQUAL        reduce using rule 50 (callable_variable -> function_call_expression .)
    AND_EQUAL       reduce using rule 50 (callable_variable -> function_call_expression .)
    XOR_EQUAL       reduce using rule 50 (callable_variable -> function_call_expression .)
    OR_EQUAL        reduce using rule 50 (callable_variable -> function_call_expression .)
    ARROW           reduce using rule 50 (callable_variable -> function_call_expression .)
    LEFT_CBRAC      reduce using rule 50 (callable_variable -> function_call_expression .)
    DOUBLE_COLON    reduce using rule 50 (callable_variable -> function_call_expression .)
    DOUBLEASTERISK  reduce using rule 50 (callable_variable -> function_call_expression .)
    ASTERISK        reduce using rule 50 (callable_variable -> function_call_expression .)
    DIVIDE          reduce using rule 50 (callable_variable -> function_call_expression .)
    MODULO          reduce using rule 50 (callable_variable -> function_call_expression .)
    PLUS            reduce using rule 50 (callable_variable -> function_call_expression .)
    LESS            reduce using rule 50 (callable_variable -> function_call_expression .)
    CONCAT          reduce using rule 50 (callable_variable -> function_call_expression .)
    SL              reduce using rule 50 (callable_variable -> function_call_expression .)
    SR              reduce using rule 50 (callable_variable -> function_call_expression .)
    LESS_THAN       reduce using rule 50 (callable_variable -> function_call_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 50 (callable_variable -> function_call_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 50 (callable_variable -> function_call_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 50 (callable_variable -> function_call_expression .)
    SPACESHIP       reduce using rule 50 (callable_variable -> function_call_expression .)
    IS_NOT_EQUAL    reduce using rule 50 (callable_variable -> function_call_expression .)
    IS_IDENTICAL    reduce using rule 50 (callable_variable -> function_call_expression .)
    IS_NOT_IDENTICAL reduce using rule 50 (callable_variable -> function_call_expression .)
    AMPERSAND       reduce using rule 50 (callable_variable -> function_call_expression .)
    BITWISE_XOR     reduce using rule 50 (callable_variable -> function_call_expression .)
    BITWISE_OR      reduce using rule 50 (callable_variable -> function_call_expression .)
    COALESCE        reduce using rule 50 (callable_variable -> function_call_expression .)
    TERNARY_OPERATION reduce using rule 50 (callable_variable -> function_call_expression .)
    AND             reduce using rule 50 (callable_variable -> function_call_expression .)
    XOR             reduce using rule 50 (callable_variable -> function_call_expression .)
    OR              reduce using rule 50 (callable_variable -> function_call_expression .)
    SEMICOLON       reduce using rule 50 (callable_variable -> function_call_expression .)
    INCLUDE         reduce using rule 50 (callable_variable -> function_call_expression .)
    INCLUDE_ONCE    reduce using rule 50 (callable_variable -> function_call_expression .)
    REQUIRE         reduce using rule 50 (callable_variable -> function_call_expression .)
    REQUIRE_ONCE    reduce using rule 50 (callable_variable -> function_call_expression .)
    PRINT           reduce using rule 50 (callable_variable -> function_call_expression .)
    YIELD           reduce using rule 50 (callable_variable -> function_call_expression .)
    YIELD_FROM      reduce using rule 50 (callable_variable -> function_call_expression .)
    RIGHT_PARENTHESIS reduce using rule 50 (callable_variable -> function_call_expression .)
    COLON           reduce using rule 50 (callable_variable -> function_call_expression .)
    AS              reduce using rule 50 (callable_variable -> function_call_expression .)
    STRING          reduce using rule 50 (callable_variable -> function_call_expression .)
    RIGHT_CBRAC     reduce using rule 50 (callable_variable -> function_call_expression .)
    VARIABLE        reduce using rule 50 (callable_variable -> function_call_expression .)
    DOUBLE_POINT    reduce using rule 50 (callable_variable -> function_call_expression .)
    DOUBLE_ARROW    reduce using rule 50 (callable_variable -> function_call_expression .)
    ELLIPSIS        reduce using rule 50 (callable_variable -> function_call_expression .)
    ARRAY           reduce using rule 50 (callable_variable -> function_call_expression .)
    CALLABLE        reduce using rule 50 (callable_variable -> function_call_expression .)
    ITERABLE        reduce using rule 50 (callable_variable -> function_call_expression .)
    BOOL            reduce using rule 50 (callable_variable -> function_call_expression .)
    FLOAT           reduce using rule 50 (callable_variable -> function_call_expression .)
    INT             reduce using rule 50 (callable_variable -> function_call_expression .)
    INSTANCEOF      reduce using rule 50 (callable_variable -> function_call_expression .)
    LEFT_PARENTHESIS reduce using rule 50 (callable_variable -> function_call_expression .)
    DOLLAR          reduce using rule 50 (callable_variable -> function_call_expression .)
    SELF            reduce using rule 50 (callable_variable -> function_call_expression .)
    PARENT          reduce using rule 50 (callable_variable -> function_call_expression .)
    STATIC          reduce using rule 50 (callable_variable -> function_call_expression .)


state 165

    (149) scoped_property_access_expression -> scope_resolution_qualifier . DOUBLE_COLON simple_variable
    (150) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (152) class_constant_access_expression -> scope_resolution_qualifier . DOUBLE_COLON NAME

    DOUBLE_COLON    shift and go to state 324


state 166

    (136) member_access_expression -> dereferencable_expression . ARROW member_name
    (125) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (155) scope_resolution_qualifier -> dereferencable_expression .

    ARROW           shift and go to state 325
    LEFT_CBRAC      shift and go to state 326
    DOUBLE_COLON    reduce using rule 155 (scope_resolution_qualifier -> dereferencable_expression .)


state 167

    (206) logical_AND_expression_1 -> bitwise_inc_OR_expression .
    (205) bitwise_inc_OR_expression -> bitwise_inc_OR_expression . BITWISE_OR bitwise_exc_OR_expression

  ! shift/reduce conflict for BITWISE_OR resolved as shift
    AMPERSAND       reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    COALESCE        reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    TERNARY_OPERATION reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    AND             reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    XOR             reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    OR              reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    SEMICOLON       reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    INCLUDE         reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    REQUIRE         reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    PRINT           reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    YIELD           reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    YIELD_FROM      reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    COLON           reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    AS              reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ARROW           reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    STRING          reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    VARIABLE        reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    DOUBLE_POINT    reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ELLIPSIS        reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ARRAY           reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    CALLABLE        reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ITERABLE        reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    BOOL            reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    FLOAT           reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    INT             reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    BITWISE_OR      shift and go to state 327

  ! BITWISE_OR      [ reduce using rule 206 (logical_AND_expression_1 -> bitwise_inc_OR_expression .) ]


state 168

    (114) array_creation_expression -> LEFT_CBRAC . array_initializer_opt RIGHT_CBRAC
    (115) array_initializer_opt -> . array_initializer
    (116) array_initializer_opt -> .
    (117) array_initializer -> . array_initializer_list
    (118) array_initializer -> . array_initializer_list COLON
    (119) array_initializer_list -> . array_element_initializer
    (120) array_initializer_list -> . array_element_initializer COLON array_element_initializer
    (121) array_element_initializer -> . AMPERSAND_opt element_value
    (122) array_element_initializer -> . element_key ARROW AMPERSAND_opt element_value
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .
    (123) element_key -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    RIGHT_CBRAC     reduce using rule 116 (array_initializer_opt -> .)
    AMPERSAND       shift and go to state 334
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! INCLUDE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 79 (AMPERSAND_opt -> .) ]

    array_initializer_opt          shift and go to state 328
    array_initializer              shift and go to state 329
    array_initializer_list         shift and go to state 330
    array_element_initializer      shift and go to state 331
    AMPERSAND_opt                  shift and go to state 332
    element_key                    shift and go to state 333
    expression                     shift and go to state 335
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 169

    (127) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (154) scope_resolution_qualifier -> qualified_name .
    (54) constant_access_expression -> qualified_name .

    LEFT_PARENTHESIS shift and go to state 336
    DOUBLE_COLON    reduce using rule 154 (scope_resolution_qualifier -> qualified_name .)
    DOUBLEASTERISK  reduce using rule 54 (constant_access_expression -> qualified_name .)
    ASTERISK        reduce using rule 54 (constant_access_expression -> qualified_name .)
    DIVIDE          reduce using rule 54 (constant_access_expression -> qualified_name .)
    MODULO          reduce using rule 54 (constant_access_expression -> qualified_name .)
    PLUS            reduce using rule 54 (constant_access_expression -> qualified_name .)
    LESS            reduce using rule 54 (constant_access_expression -> qualified_name .)
    CONCAT          reduce using rule 54 (constant_access_expression -> qualified_name .)
    SL              reduce using rule 54 (constant_access_expression -> qualified_name .)
    SR              reduce using rule 54 (constant_access_expression -> qualified_name .)
    LESS_THAN       reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_GREATER_OR_EQUAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    SPACESHIP       reduce using rule 54 (constant_access_expression -> qualified_name .)
    EQUAL           reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_NOT_EQUAL    reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_IDENTICAL    reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_NOT_IDENTICAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    AMPERSAND       reduce using rule 54 (constant_access_expression -> qualified_name .)
    BITWISE_XOR     reduce using rule 54 (constant_access_expression -> qualified_name .)
    BITWISE_OR      reduce using rule 54 (constant_access_expression -> qualified_name .)
    COALESCE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    TERNARY_OPERATION reduce using rule 54 (constant_access_expression -> qualified_name .)
    AND             reduce using rule 54 (constant_access_expression -> qualified_name .)
    XOR             reduce using rule 54 (constant_access_expression -> qualified_name .)
    OR              reduce using rule 54 (constant_access_expression -> qualified_name .)
    SEMICOLON       reduce using rule 54 (constant_access_expression -> qualified_name .)
    INCLUDE         reduce using rule 54 (constant_access_expression -> qualified_name .)
    INCLUDE_ONCE    reduce using rule 54 (constant_access_expression -> qualified_name .)
    REQUIRE         reduce using rule 54 (constant_access_expression -> qualified_name .)
    REQUIRE_ONCE    reduce using rule 54 (constant_access_expression -> qualified_name .)
    PRINT           reduce using rule 54 (constant_access_expression -> qualified_name .)
    YIELD           reduce using rule 54 (constant_access_expression -> qualified_name .)
    YIELD_FROM      reduce using rule 54 (constant_access_expression -> qualified_name .)
    RIGHT_PARENTHESIS reduce using rule 54 (constant_access_expression -> qualified_name .)
    COLON           reduce using rule 54 (constant_access_expression -> qualified_name .)
    AS              reduce using rule 54 (constant_access_expression -> qualified_name .)
    ARROW           reduce using rule 54 (constant_access_expression -> qualified_name .)
    STRING          reduce using rule 54 (constant_access_expression -> qualified_name .)
    RIGHT_CBRAC     reduce using rule 54 (constant_access_expression -> qualified_name .)
    VARIABLE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    DOUBLE_POINT    reduce using rule 54 (constant_access_expression -> qualified_name .)
    DOUBLE_ARROW    reduce using rule 54 (constant_access_expression -> qualified_name .)
    ELLIPSIS        reduce using rule 54 (constant_access_expression -> qualified_name .)
    ARRAY           reduce using rule 54 (constant_access_expression -> qualified_name .)
    CALLABLE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    ITERABLE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    BOOL            reduce using rule 54 (constant_access_expression -> qualified_name .)
    FLOAT           reduce using rule 54 (constant_access_expression -> qualified_name .)
    INT             reduce using rule 54 (constant_access_expression -> qualified_name .)
    INSTANCEOF      reduce using rule 54 (constant_access_expression -> qualified_name .)


state 170

    (129) function_call_expression -> callable_expression . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> callable_expression . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 337


state 171

    (153) scope_resolution_qualifier -> relative_scope .

    DOUBLE_COLON    reduce using rule 153 (scope_resolution_qualifier -> relative_scope .)


state 172

    (40) dereferencable_expression -> array_creation_expression .
    (44) callable_expression -> array_creation_expression .
    (24) primary_expression -> array_creation_expression .

  ! reduce/reduce conflict for ARROW resolved using rule 24 (primary_expression -> array_creation_expression .)
    LEFT_CBRAC      reduce using rule 40 (dereferencable_expression -> array_creation_expression .)
    DOUBLE_COLON    reduce using rule 40 (dereferencable_expression -> array_creation_expression .)
    LEFT_PARENTHESIS reduce using rule 44 (callable_expression -> array_creation_expression .)
    DOUBLEASTERISK  reduce using rule 24 (primary_expression -> array_creation_expression .)
    ASTERISK        reduce using rule 24 (primary_expression -> array_creation_expression .)
    DIVIDE          reduce using rule 24 (primary_expression -> array_creation_expression .)
    MODULO          reduce using rule 24 (primary_expression -> array_creation_expression .)
    PLUS            reduce using rule 24 (primary_expression -> array_creation_expression .)
    LESS            reduce using rule 24 (primary_expression -> array_creation_expression .)
    CONCAT          reduce using rule 24 (primary_expression -> array_creation_expression .)
    SL              reduce using rule 24 (primary_expression -> array_creation_expression .)
    SR              reduce using rule 24 (primary_expression -> array_creation_expression .)
    LESS_THAN       reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    SPACESHIP       reduce using rule 24 (primary_expression -> array_creation_expression .)
    EQUAL           reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_IDENTICAL    reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    AMPERSAND       reduce using rule 24 (primary_expression -> array_creation_expression .)
    BITWISE_XOR     reduce using rule 24 (primary_expression -> array_creation_expression .)
    BITWISE_OR      reduce using rule 24 (primary_expression -> array_creation_expression .)
    COALESCE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    TERNARY_OPERATION reduce using rule 24 (primary_expression -> array_creation_expression .)
    AND             reduce using rule 24 (primary_expression -> array_creation_expression .)
    XOR             reduce using rule 24 (primary_expression -> array_creation_expression .)
    OR              reduce using rule 24 (primary_expression -> array_creation_expression .)
    SEMICOLON       reduce using rule 24 (primary_expression -> array_creation_expression .)
    INCLUDE         reduce using rule 24 (primary_expression -> array_creation_expression .)
    INCLUDE_ONCE    reduce using rule 24 (primary_expression -> array_creation_expression .)
    REQUIRE         reduce using rule 24 (primary_expression -> array_creation_expression .)
    REQUIRE_ONCE    reduce using rule 24 (primary_expression -> array_creation_expression .)
    PRINT           reduce using rule 24 (primary_expression -> array_creation_expression .)
    YIELD           reduce using rule 24 (primary_expression -> array_creation_expression .)
    YIELD_FROM      reduce using rule 24 (primary_expression -> array_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 24 (primary_expression -> array_creation_expression .)
    COLON           reduce using rule 24 (primary_expression -> array_creation_expression .)
    AS              reduce using rule 24 (primary_expression -> array_creation_expression .)
    ARROW           reduce using rule 24 (primary_expression -> array_creation_expression .)
    STRING          reduce using rule 24 (primary_expression -> array_creation_expression .)
    RIGHT_CBRAC     reduce using rule 24 (primary_expression -> array_creation_expression .)
    VARIABLE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    DOUBLE_POINT    reduce using rule 24 (primary_expression -> array_creation_expression .)
    DOUBLE_ARROW    reduce using rule 24 (primary_expression -> array_creation_expression .)
    ELLIPSIS        reduce using rule 24 (primary_expression -> array_creation_expression .)
    ARRAY           reduce using rule 24 (primary_expression -> array_creation_expression .)
    CALLABLE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    ITERABLE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    BOOL            reduce using rule 24 (primary_expression -> array_creation_expression .)
    FLOAT           reduce using rule 24 (primary_expression -> array_creation_expression .)
    INT             reduce using rule 24 (primary_expression -> array_creation_expression .)
    INSTANCEOF      reduce using rule 24 (primary_expression -> array_creation_expression .)

  ! ARROW           [ reduce using rule 40 (dereferencable_expression -> array_creation_expression .) ]


state 173

    (41) dereferencable_expression -> string_literal .
    (45) callable_expression -> string_literal .
    (57) literal -> string_literal .

  ! reduce/reduce conflict for ARROW resolved using rule 41 (dereferencable_expression -> string_literal .)
    ARROW           reduce using rule 41 (dereferencable_expression -> string_literal .)
    LEFT_CBRAC      reduce using rule 41 (dereferencable_expression -> string_literal .)
    DOUBLE_COLON    reduce using rule 41 (dereferencable_expression -> string_literal .)
    LEFT_PARENTHESIS reduce using rule 45 (callable_expression -> string_literal .)
    DOUBLEASTERISK  reduce using rule 57 (literal -> string_literal .)
    ASTERISK        reduce using rule 57 (literal -> string_literal .)
    DIVIDE          reduce using rule 57 (literal -> string_literal .)
    MODULO          reduce using rule 57 (literal -> string_literal .)
    PLUS            reduce using rule 57 (literal -> string_literal .)
    LESS            reduce using rule 57 (literal -> string_literal .)
    CONCAT          reduce using rule 57 (literal -> string_literal .)
    SL              reduce using rule 57 (literal -> string_literal .)
    SR              reduce using rule 57 (literal -> string_literal .)
    LESS_THAN       reduce using rule 57 (literal -> string_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 57 (literal -> string_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 57 (literal -> string_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 57 (literal -> string_literal .)
    SPACESHIP       reduce using rule 57 (literal -> string_literal .)
    EQUAL           reduce using rule 57 (literal -> string_literal .)
    IS_NOT_EQUAL    reduce using rule 57 (literal -> string_literal .)
    IS_IDENTICAL    reduce using rule 57 (literal -> string_literal .)
    IS_NOT_IDENTICAL reduce using rule 57 (literal -> string_literal .)
    AMPERSAND       reduce using rule 57 (literal -> string_literal .)
    BITWISE_XOR     reduce using rule 57 (literal -> string_literal .)
    BITWISE_OR      reduce using rule 57 (literal -> string_literal .)
    COALESCE        reduce using rule 57 (literal -> string_literal .)
    TERNARY_OPERATION reduce using rule 57 (literal -> string_literal .)
    AND             reduce using rule 57 (literal -> string_literal .)
    XOR             reduce using rule 57 (literal -> string_literal .)
    OR              reduce using rule 57 (literal -> string_literal .)
    SEMICOLON       reduce using rule 57 (literal -> string_literal .)
    INCLUDE         reduce using rule 57 (literal -> string_literal .)
    INCLUDE_ONCE    reduce using rule 57 (literal -> string_literal .)
    REQUIRE         reduce using rule 57 (literal -> string_literal .)
    REQUIRE_ONCE    reduce using rule 57 (literal -> string_literal .)
    PRINT           reduce using rule 57 (literal -> string_literal .)
    YIELD           reduce using rule 57 (literal -> string_literal .)
    YIELD_FROM      reduce using rule 57 (literal -> string_literal .)
    RIGHT_PARENTHESIS reduce using rule 57 (literal -> string_literal .)
    COLON           reduce using rule 57 (literal -> string_literal .)
    AS              reduce using rule 57 (literal -> string_literal .)
    STRING          reduce using rule 57 (literal -> string_literal .)
    RIGHT_CBRAC     reduce using rule 57 (literal -> string_literal .)
    VARIABLE        reduce using rule 57 (literal -> string_literal .)
    DOUBLE_POINT    reduce using rule 57 (literal -> string_literal .)
    DOUBLE_ARROW    reduce using rule 57 (literal -> string_literal .)
    ELLIPSIS        reduce using rule 57 (literal -> string_literal .)
    ARRAY           reduce using rule 57 (literal -> string_literal .)
    CALLABLE        reduce using rule 57 (literal -> string_literal .)
    ITERABLE        reduce using rule 57 (literal -> string_literal .)
    BOOL            reduce using rule 57 (literal -> string_literal .)
    FLOAT           reduce using rule 57 (literal -> string_literal .)
    INT             reduce using rule 57 (literal -> string_literal .)
    INSTANCEOF      reduce using rule 57 (literal -> string_literal .)

  ! ARROW           [ reduce using rule 57 (literal -> string_literal .) ]


state 174

    (204) bitwise_inc_OR_expression -> bitwise_exc_OR_expression .
    (203) bitwise_exc_OR_expression -> bitwise_exc_OR_expression . BITWISE_XOR bitwise_AND_expression

    BITWISE_OR      reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    AMPERSAND       reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    COALESCE        reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    AND             reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    XOR             reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    OR              reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    SEMICOLON       reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    INCLUDE         reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    REQUIRE         reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    PRINT           reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    YIELD           reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    YIELD_FROM      reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    COLON           reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    AS              reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ARROW           reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    STRING          reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    VARIABLE        reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ELLIPSIS        reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ARRAY           reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    CALLABLE        reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ITERABLE        reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    BOOL            reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    FLOAT           reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    INT             reduce using rule 204 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    BITWISE_XOR     shift and go to state 338


state 175

    (545) qualified_name -> name .

    LEFT_PARENTHESIS reduce using rule 545 (qualified_name -> name .)
    DOUBLE_COLON    reduce using rule 545 (qualified_name -> name .)
    DOUBLEASTERISK  reduce using rule 545 (qualified_name -> name .)
    ASTERISK        reduce using rule 545 (qualified_name -> name .)
    DIVIDE          reduce using rule 545 (qualified_name -> name .)
    MODULO          reduce using rule 545 (qualified_name -> name .)
    PLUS            reduce using rule 545 (qualified_name -> name .)
    LESS            reduce using rule 545 (qualified_name -> name .)
    CONCAT          reduce using rule 545 (qualified_name -> name .)
    SL              reduce using rule 545 (qualified_name -> name .)
    SR              reduce using rule 545 (qualified_name -> name .)
    LESS_THAN       reduce using rule 545 (qualified_name -> name .)
    IS_SMALLER_OR_EQUAL reduce using rule 545 (qualified_name -> name .)
    IS_GREATER_OR_EQUAL reduce using rule 545 (qualified_name -> name .)
    GREATER_THAN_OR_EQUAL reduce using rule 545 (qualified_name -> name .)
    SPACESHIP       reduce using rule 545 (qualified_name -> name .)
    EQUAL           reduce using rule 545 (qualified_name -> name .)
    IS_NOT_EQUAL    reduce using rule 545 (qualified_name -> name .)
    IS_IDENTICAL    reduce using rule 545 (qualified_name -> name .)
    IS_NOT_IDENTICAL reduce using rule 545 (qualified_name -> name .)
    AMPERSAND       reduce using rule 545 (qualified_name -> name .)
    BITWISE_XOR     reduce using rule 545 (qualified_name -> name .)
    BITWISE_OR      reduce using rule 545 (qualified_name -> name .)
    COALESCE        reduce using rule 545 (qualified_name -> name .)
    TERNARY_OPERATION reduce using rule 545 (qualified_name -> name .)
    AND             reduce using rule 545 (qualified_name -> name .)
    XOR             reduce using rule 545 (qualified_name -> name .)
    OR              reduce using rule 545 (qualified_name -> name .)
    SEMICOLON       reduce using rule 545 (qualified_name -> name .)
    INCLUDE         reduce using rule 545 (qualified_name -> name .)
    INCLUDE_ONCE    reduce using rule 545 (qualified_name -> name .)
    REQUIRE         reduce using rule 545 (qualified_name -> name .)
    REQUIRE_ONCE    reduce using rule 545 (qualified_name -> name .)
    PRINT           reduce using rule 545 (qualified_name -> name .)
    YIELD           reduce using rule 545 (qualified_name -> name .)
    YIELD_FROM      reduce using rule 545 (qualified_name -> name .)
    RIGHT_PARENTHESIS reduce using rule 545 (qualified_name -> name .)
    COLON           reduce using rule 545 (qualified_name -> name .)
    AS              reduce using rule 545 (qualified_name -> name .)
    ARROW           reduce using rule 545 (qualified_name -> name .)
    STRING          reduce using rule 545 (qualified_name -> name .)
    RIGHT_CBRAC     reduce using rule 545 (qualified_name -> name .)
    VARIABLE        reduce using rule 545 (qualified_name -> name .)
    DOUBLE_POINT    reduce using rule 545 (qualified_name -> name .)
    DOUBLE_ARROW    reduce using rule 545 (qualified_name -> name .)
    ELLIPSIS        reduce using rule 545 (qualified_name -> name .)
    ARRAY           reduce using rule 545 (qualified_name -> name .)
    CALLABLE        reduce using rule 545 (qualified_name -> name .)
    ITERABLE        reduce using rule 545 (qualified_name -> name .)
    BOOL            reduce using rule 545 (qualified_name -> name .)
    FLOAT           reduce using rule 545 (qualified_name -> name .)
    INT             reduce using rule 545 (qualified_name -> name .)
    INSTANCEOF      reduce using rule 545 (qualified_name -> name .)
    LEFT_CBRAC      reduce using rule 545 (qualified_name -> name .)
    IMPLEMENTS      reduce using rule 545 (qualified_name -> name .)


state 176

    (156) relative_scope -> SELF .

    DOUBLE_COLON    reduce using rule 156 (relative_scope -> SELF .)


state 177

    (157) relative_scope -> PARENT .

    DOUBLE_COLON    reduce using rule 157 (relative_scope -> PARENT .)


state 178

    (158) relative_scope -> STATIC .
    (76) static_opt -> STATIC .

    DOUBLE_COLON    reduce using rule 158 (relative_scope -> STATIC .)
    FUNCTION        reduce using rule 76 (static_opt -> STATIC .)


state 179

    (113) array_creation_expression -> ARRAY . LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 339


state 180

    (60) string_literal -> STRING .
    (555) name -> STRING .

  ! reduce/reduce conflict for LEFT_PARENTHESIS resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLE_COLON resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLEASTERISK resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for MODULO resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for PLUS resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for LESS resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for CONCAT resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for SL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for SR resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_SMALLER_OR_EQUAL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_GREATER_OR_EQUAL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for SPACESHIP resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for EQUAL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_NOT_EQUAL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_IDENTICAL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_NOT_IDENTICAL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for BITWISE_XOR resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for BITWISE_OR resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for COALESCE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for TERNARY_OPERATION resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for XOR resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for INCLUDE_ONCE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for REQUIRE_ONCE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for PRINT resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for YIELD resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for YIELD_FROM resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for RIGHT_PARENTHESIS resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for COLON resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for AS resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for ARROW resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for RIGHT_CBRAC resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLE_POINT resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLE_ARROW resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for ELLIPSIS resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for ARRAY resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for CALLABLE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for ITERABLE resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for BOOL resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for FLOAT resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for INT resolved using rule 60 (string_literal -> STRING .)
  ! reduce/reduce conflict for INSTANCEOF resolved using rule 60 (string_literal -> STRING .)
    ARROW           reduce using rule 60 (string_literal -> STRING .)
    LEFT_CBRAC      reduce using rule 60 (string_literal -> STRING .)
    DOUBLE_COLON    reduce using rule 60 (string_literal -> STRING .)
    LEFT_PARENTHESIS reduce using rule 60 (string_literal -> STRING .)
    DOUBLEASTERISK  reduce using rule 60 (string_literal -> STRING .)
    ASTERISK        reduce using rule 60 (string_literal -> STRING .)
    DIVIDE          reduce using rule 60 (string_literal -> STRING .)
    MODULO          reduce using rule 60 (string_literal -> STRING .)
    PLUS            reduce using rule 60 (string_literal -> STRING .)
    LESS            reduce using rule 60 (string_literal -> STRING .)
    CONCAT          reduce using rule 60 (string_literal -> STRING .)
    SL              reduce using rule 60 (string_literal -> STRING .)
    SR              reduce using rule 60 (string_literal -> STRING .)
    LESS_THAN       reduce using rule 60 (string_literal -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 60 (string_literal -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 60 (string_literal -> STRING .)
    GREATER_THAN_OR_EQUAL reduce using rule 60 (string_literal -> STRING .)
    SPACESHIP       reduce using rule 60 (string_literal -> STRING .)
    EQUAL           reduce using rule 60 (string_literal -> STRING .)
    IS_NOT_EQUAL    reduce using rule 60 (string_literal -> STRING .)
    IS_IDENTICAL    reduce using rule 60 (string_literal -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 60 (string_literal -> STRING .)
    AMPERSAND       reduce using rule 60 (string_literal -> STRING .)
    BITWISE_XOR     reduce using rule 60 (string_literal -> STRING .)
    BITWISE_OR      reduce using rule 60 (string_literal -> STRING .)
    COALESCE        reduce using rule 60 (string_literal -> STRING .)
    TERNARY_OPERATION reduce using rule 60 (string_literal -> STRING .)
    AND             reduce using rule 60 (string_literal -> STRING .)
    XOR             reduce using rule 60 (string_literal -> STRING .)
    OR              reduce using rule 60 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 60 (string_literal -> STRING .)
    INCLUDE         reduce using rule 60 (string_literal -> STRING .)
    INCLUDE_ONCE    reduce using rule 60 (string_literal -> STRING .)
    REQUIRE         reduce using rule 60 (string_literal -> STRING .)
    REQUIRE_ONCE    reduce using rule 60 (string_literal -> STRING .)
    PRINT           reduce using rule 60 (string_literal -> STRING .)
    YIELD           reduce using rule 60 (string_literal -> STRING .)
    YIELD_FROM      reduce using rule 60 (string_literal -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 60 (string_literal -> STRING .)
    COLON           reduce using rule 60 (string_literal -> STRING .)
    AS              reduce using rule 60 (string_literal -> STRING .)
    STRING          reduce using rule 60 (string_literal -> STRING .)
    RIGHT_CBRAC     reduce using rule 60 (string_literal -> STRING .)
    VARIABLE        reduce using rule 60 (string_literal -> STRING .)
    DOUBLE_POINT    reduce using rule 60 (string_literal -> STRING .)
    DOUBLE_ARROW    reduce using rule 60 (string_literal -> STRING .)
    ELLIPSIS        reduce using rule 60 (string_literal -> STRING .)
    ARRAY           reduce using rule 60 (string_literal -> STRING .)
    CALLABLE        reduce using rule 60 (string_literal -> STRING .)
    ITERABLE        reduce using rule 60 (string_literal -> STRING .)
    BOOL            reduce using rule 60 (string_literal -> STRING .)
    FLOAT           reduce using rule 60 (string_literal -> STRING .)
    INT             reduce using rule 60 (string_literal -> STRING .)
    INSTANCEOF      reduce using rule 60 (string_literal -> STRING .)

  ! LEFT_PARENTHESIS [ reduce using rule 555 (name -> STRING .) ]
  ! DOUBLE_COLON    [ reduce using rule 555 (name -> STRING .) ]
  ! DOUBLEASTERISK  [ reduce using rule 555 (name -> STRING .) ]
  ! ASTERISK        [ reduce using rule 555 (name -> STRING .) ]
  ! DIVIDE          [ reduce using rule 555 (name -> STRING .) ]
  ! MODULO          [ reduce using rule 555 (name -> STRING .) ]
  ! PLUS            [ reduce using rule 555 (name -> STRING .) ]
  ! LESS            [ reduce using rule 555 (name -> STRING .) ]
  ! CONCAT          [ reduce using rule 555 (name -> STRING .) ]
  ! SL              [ reduce using rule 555 (name -> STRING .) ]
  ! SR              [ reduce using rule 555 (name -> STRING .) ]
  ! LESS_THAN       [ reduce using rule 555 (name -> STRING .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 555 (name -> STRING .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 555 (name -> STRING .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 555 (name -> STRING .) ]
  ! SPACESHIP       [ reduce using rule 555 (name -> STRING .) ]
  ! EQUAL           [ reduce using rule 555 (name -> STRING .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 555 (name -> STRING .) ]
  ! IS_IDENTICAL    [ reduce using rule 555 (name -> STRING .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 555 (name -> STRING .) ]
  ! AMPERSAND       [ reduce using rule 555 (name -> STRING .) ]
  ! BITWISE_XOR     [ reduce using rule 555 (name -> STRING .) ]
  ! BITWISE_OR      [ reduce using rule 555 (name -> STRING .) ]
  ! COALESCE        [ reduce using rule 555 (name -> STRING .) ]
  ! TERNARY_OPERATION [ reduce using rule 555 (name -> STRING .) ]
  ! AND             [ reduce using rule 555 (name -> STRING .) ]
  ! XOR             [ reduce using rule 555 (name -> STRING .) ]
  ! OR              [ reduce using rule 555 (name -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 555 (name -> STRING .) ]
  ! INCLUDE         [ reduce using rule 555 (name -> STRING .) ]
  ! INCLUDE_ONCE    [ reduce using rule 555 (name -> STRING .) ]
  ! REQUIRE         [ reduce using rule 555 (name -> STRING .) ]
  ! REQUIRE_ONCE    [ reduce using rule 555 (name -> STRING .) ]
  ! PRINT           [ reduce using rule 555 (name -> STRING .) ]
  ! YIELD           [ reduce using rule 555 (name -> STRING .) ]
  ! YIELD_FROM      [ reduce using rule 555 (name -> STRING .) ]
  ! RIGHT_PARENTHESIS [ reduce using rule 555 (name -> STRING .) ]
  ! COLON           [ reduce using rule 555 (name -> STRING .) ]
  ! AS              [ reduce using rule 555 (name -> STRING .) ]
  ! ARROW           [ reduce using rule 555 (name -> STRING .) ]
  ! STRING          [ reduce using rule 555 (name -> STRING .) ]
  ! RIGHT_CBRAC     [ reduce using rule 555 (name -> STRING .) ]
  ! VARIABLE        [ reduce using rule 555 (name -> STRING .) ]
  ! DOUBLE_POINT    [ reduce using rule 555 (name -> STRING .) ]
  ! DOUBLE_ARROW    [ reduce using rule 555 (name -> STRING .) ]
  ! ELLIPSIS        [ reduce using rule 555 (name -> STRING .) ]
  ! ARRAY           [ reduce using rule 555 (name -> STRING .) ]
  ! CALLABLE        [ reduce using rule 555 (name -> STRING .) ]
  ! ITERABLE        [ reduce using rule 555 (name -> STRING .) ]
  ! BOOL            [ reduce using rule 555 (name -> STRING .) ]
  ! FLOAT           [ reduce using rule 555 (name -> STRING .) ]
  ! INT             [ reduce using rule 555 (name -> STRING .) ]
  ! INSTANCEOF      [ reduce using rule 555 (name -> STRING .) ]


state 181

    (202) bitwise_exc_OR_expression -> bitwise_AND_expression .
    (201) bitwise_AND_expression -> bitwise_AND_expression . AMPERSAND equality_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    BITWISE_XOR     reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    BITWISE_OR      reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    COALESCE        reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    TERNARY_OPERATION reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    AND             reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    XOR             reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    OR              reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    SEMICOLON       reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    INCLUDE         reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    INCLUDE_ONCE    reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    REQUIRE         reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    REQUIRE_ONCE    reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    PRINT           reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    YIELD           reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    YIELD_FROM      reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    RIGHT_PARENTHESIS reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    COLON           reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    AS              reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ARROW           reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    STRING          reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    RIGHT_CBRAC     reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    VARIABLE        reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    DOUBLE_POINT    reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    DOUBLE_ARROW    reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ELLIPSIS        reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ARRAY           reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    CALLABLE        reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ITERABLE        reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    BOOL            reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    FLOAT           reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    INT             reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    AMPERSAND       shift and go to state 340

  ! AMPERSAND       [ reduce using rule 202 (bitwise_exc_OR_expression -> bitwise_AND_expression .) ]


state 182

    (200) bitwise_AND_expression -> equality_expression .
    (196) equality_expression -> equality_expression . EQUAL relational_expression
    (197) equality_expression -> equality_expression . IS_NOT_EQUAL relational_expression
    (198) equality_expression -> equality_expression . IS_IDENTICAL relational_expression
    (199) equality_expression -> equality_expression . IS_NOT_IDENTICAL relational_expression

    AMPERSAND       reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    BITWISE_XOR     reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    BITWISE_OR      reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    COALESCE        reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    TERNARY_OPERATION reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    AND             reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    XOR             reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    OR              reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    INCLUDE         reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    INCLUDE_ONCE    reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    REQUIRE         reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    REQUIRE_ONCE    reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    PRINT           reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    YIELD           reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    YIELD_FROM      reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    COLON           reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    AS              reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    ARROW           reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    STRING          reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    RIGHT_CBRAC     reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    VARIABLE        reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    DOUBLE_POINT    reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    DOUBLE_ARROW    reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    ELLIPSIS        reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    ARRAY           reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    CALLABLE        reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    ITERABLE        reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    BOOL            reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    FLOAT           reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    INT             reduce using rule 200 (bitwise_AND_expression -> equality_expression .)
    EQUAL           shift and go to state 341
    IS_NOT_EQUAL    shift and go to state 342
    IS_IDENTICAL    shift and go to state 343
    IS_NOT_IDENTICAL shift and go to state 344


state 183

    (195) equality_expression -> relational_expression .
    (190) relational_expression -> relational_expression . LESS_THAN shift_expression
    (191) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 195 (equality_expression -> relational_expression .)
    IS_NOT_EQUAL    reduce using rule 195 (equality_expression -> relational_expression .)
    IS_IDENTICAL    reduce using rule 195 (equality_expression -> relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 195 (equality_expression -> relational_expression .)
    AMPERSAND       reduce using rule 195 (equality_expression -> relational_expression .)
    BITWISE_XOR     reduce using rule 195 (equality_expression -> relational_expression .)
    BITWISE_OR      reduce using rule 195 (equality_expression -> relational_expression .)
    COALESCE        reduce using rule 195 (equality_expression -> relational_expression .)
    TERNARY_OPERATION reduce using rule 195 (equality_expression -> relational_expression .)
    AND             reduce using rule 195 (equality_expression -> relational_expression .)
    XOR             reduce using rule 195 (equality_expression -> relational_expression .)
    OR              reduce using rule 195 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 195 (equality_expression -> relational_expression .)
    INCLUDE         reduce using rule 195 (equality_expression -> relational_expression .)
    INCLUDE_ONCE    reduce using rule 195 (equality_expression -> relational_expression .)
    REQUIRE         reduce using rule 195 (equality_expression -> relational_expression .)
    REQUIRE_ONCE    reduce using rule 195 (equality_expression -> relational_expression .)
    PRINT           reduce using rule 195 (equality_expression -> relational_expression .)
    YIELD           reduce using rule 195 (equality_expression -> relational_expression .)
    YIELD_FROM      reduce using rule 195 (equality_expression -> relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 195 (equality_expression -> relational_expression .)
    COLON           reduce using rule 195 (equality_expression -> relational_expression .)
    AS              reduce using rule 195 (equality_expression -> relational_expression .)
    ARROW           reduce using rule 195 (equality_expression -> relational_expression .)
    STRING          reduce using rule 195 (equality_expression -> relational_expression .)
    RIGHT_CBRAC     reduce using rule 195 (equality_expression -> relational_expression .)
    VARIABLE        reduce using rule 195 (equality_expression -> relational_expression .)
    DOUBLE_POINT    reduce using rule 195 (equality_expression -> relational_expression .)
    DOUBLE_ARROW    reduce using rule 195 (equality_expression -> relational_expression .)
    ELLIPSIS        reduce using rule 195 (equality_expression -> relational_expression .)
    ARRAY           reduce using rule 195 (equality_expression -> relational_expression .)
    CALLABLE        reduce using rule 195 (equality_expression -> relational_expression .)
    ITERABLE        reduce using rule 195 (equality_expression -> relational_expression .)
    BOOL            reduce using rule 195 (equality_expression -> relational_expression .)
    FLOAT           reduce using rule 195 (equality_expression -> relational_expression .)
    INT             reduce using rule 195 (equality_expression -> relational_expression .)
    LESS_THAN       shift and go to state 345
    IS_SMALLER_OR_EQUAL shift and go to state 346
    IS_GREATER_OR_EQUAL shift and go to state 347
    GREATER_THAN_OR_EQUAL shift and go to state 348
    SPACESHIP       shift and go to state 349


state 184

    (189) relational_expression -> shift_expression .
    (187) shift_expression -> shift_expression . SL additive_expression
    (188) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 189 (relational_expression -> shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 189 (relational_expression -> shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 189 (relational_expression -> shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 189 (relational_expression -> shift_expression .)
    SPACESHIP       reduce using rule 189 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 189 (relational_expression -> shift_expression .)
    IS_NOT_EQUAL    reduce using rule 189 (relational_expression -> shift_expression .)
    IS_IDENTICAL    reduce using rule 189 (relational_expression -> shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 189 (relational_expression -> shift_expression .)
    AMPERSAND       reduce using rule 189 (relational_expression -> shift_expression .)
    BITWISE_XOR     reduce using rule 189 (relational_expression -> shift_expression .)
    BITWISE_OR      reduce using rule 189 (relational_expression -> shift_expression .)
    COALESCE        reduce using rule 189 (relational_expression -> shift_expression .)
    TERNARY_OPERATION reduce using rule 189 (relational_expression -> shift_expression .)
    AND             reduce using rule 189 (relational_expression -> shift_expression .)
    XOR             reduce using rule 189 (relational_expression -> shift_expression .)
    OR              reduce using rule 189 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 189 (relational_expression -> shift_expression .)
    INCLUDE         reduce using rule 189 (relational_expression -> shift_expression .)
    INCLUDE_ONCE    reduce using rule 189 (relational_expression -> shift_expression .)
    REQUIRE         reduce using rule 189 (relational_expression -> shift_expression .)
    REQUIRE_ONCE    reduce using rule 189 (relational_expression -> shift_expression .)
    PRINT           reduce using rule 189 (relational_expression -> shift_expression .)
    YIELD           reduce using rule 189 (relational_expression -> shift_expression .)
    YIELD_FROM      reduce using rule 189 (relational_expression -> shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 189 (relational_expression -> shift_expression .)
    COLON           reduce using rule 189 (relational_expression -> shift_expression .)
    AS              reduce using rule 189 (relational_expression -> shift_expression .)
    ARROW           reduce using rule 189 (relational_expression -> shift_expression .)
    STRING          reduce using rule 189 (relational_expression -> shift_expression .)
    RIGHT_CBRAC     reduce using rule 189 (relational_expression -> shift_expression .)
    VARIABLE        reduce using rule 189 (relational_expression -> shift_expression .)
    DOUBLE_POINT    reduce using rule 189 (relational_expression -> shift_expression .)
    DOUBLE_ARROW    reduce using rule 189 (relational_expression -> shift_expression .)
    ELLIPSIS        reduce using rule 189 (relational_expression -> shift_expression .)
    ARRAY           reduce using rule 189 (relational_expression -> shift_expression .)
    CALLABLE        reduce using rule 189 (relational_expression -> shift_expression .)
    ITERABLE        reduce using rule 189 (relational_expression -> shift_expression .)
    BOOL            reduce using rule 189 (relational_expression -> shift_expression .)
    FLOAT           reduce using rule 189 (relational_expression -> shift_expression .)
    INT             reduce using rule 189 (relational_expression -> shift_expression .)
    SL              shift and go to state 350
    SR              shift and go to state 351


state 185

    (186) shift_expression -> additive_expression .
    (183) additive_expression -> additive_expression . PLUS multiplicative_expression
    (184) additive_expression -> additive_expression . LESS multiplicative_expression
    (185) additive_expression -> additive_expression . CONCAT multiplicative_expression

    SL              reduce using rule 186 (shift_expression -> additive_expression .)
    SR              reduce using rule 186 (shift_expression -> additive_expression .)
    LESS_THAN       reduce using rule 186 (shift_expression -> additive_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 186 (shift_expression -> additive_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 186 (shift_expression -> additive_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 186 (shift_expression -> additive_expression .)
    SPACESHIP       reduce using rule 186 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 186 (shift_expression -> additive_expression .)
    IS_NOT_EQUAL    reduce using rule 186 (shift_expression -> additive_expression .)
    IS_IDENTICAL    reduce using rule 186 (shift_expression -> additive_expression .)
    IS_NOT_IDENTICAL reduce using rule 186 (shift_expression -> additive_expression .)
    AMPERSAND       reduce using rule 186 (shift_expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 186 (shift_expression -> additive_expression .)
    BITWISE_OR      reduce using rule 186 (shift_expression -> additive_expression .)
    COALESCE        reduce using rule 186 (shift_expression -> additive_expression .)
    TERNARY_OPERATION reduce using rule 186 (shift_expression -> additive_expression .)
    AND             reduce using rule 186 (shift_expression -> additive_expression .)
    XOR             reduce using rule 186 (shift_expression -> additive_expression .)
    OR              reduce using rule 186 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 186 (shift_expression -> additive_expression .)
    INCLUDE         reduce using rule 186 (shift_expression -> additive_expression .)
    INCLUDE_ONCE    reduce using rule 186 (shift_expression -> additive_expression .)
    REQUIRE         reduce using rule 186 (shift_expression -> additive_expression .)
    REQUIRE_ONCE    reduce using rule 186 (shift_expression -> additive_expression .)
    PRINT           reduce using rule 186 (shift_expression -> additive_expression .)
    YIELD           reduce using rule 186 (shift_expression -> additive_expression .)
    YIELD_FROM      reduce using rule 186 (shift_expression -> additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 186 (shift_expression -> additive_expression .)
    COLON           reduce using rule 186 (shift_expression -> additive_expression .)
    AS              reduce using rule 186 (shift_expression -> additive_expression .)
    ARROW           reduce using rule 186 (shift_expression -> additive_expression .)
    STRING          reduce using rule 186 (shift_expression -> additive_expression .)
    RIGHT_CBRAC     reduce using rule 186 (shift_expression -> additive_expression .)
    VARIABLE        reduce using rule 186 (shift_expression -> additive_expression .)
    DOUBLE_POINT    reduce using rule 186 (shift_expression -> additive_expression .)
    DOUBLE_ARROW    reduce using rule 186 (shift_expression -> additive_expression .)
    ELLIPSIS        reduce using rule 186 (shift_expression -> additive_expression .)
    ARRAY           reduce using rule 186 (shift_expression -> additive_expression .)
    CALLABLE        reduce using rule 186 (shift_expression -> additive_expression .)
    ITERABLE        reduce using rule 186 (shift_expression -> additive_expression .)
    BOOL            reduce using rule 186 (shift_expression -> additive_expression .)
    FLOAT           reduce using rule 186 (shift_expression -> additive_expression .)
    INT             reduce using rule 186 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 352
    LESS            shift and go to state 353
    CONCAT          shift and go to state 354


state 186

    (182) additive_expression -> multiplicative_expression .
    (179) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (180) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (181) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 182 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 182 (additive_expression -> multiplicative_expression .)
    CONCAT          reduce using rule 182 (additive_expression -> multiplicative_expression .)
    SL              reduce using rule 182 (additive_expression -> multiplicative_expression .)
    SR              reduce using rule 182 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 182 (additive_expression -> multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 182 (additive_expression -> multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 182 (additive_expression -> multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 182 (additive_expression -> multiplicative_expression .)
    SPACESHIP       reduce using rule 182 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 182 (additive_expression -> multiplicative_expression .)
    AMPERSAND       reduce using rule 182 (additive_expression -> multiplicative_expression .)
    BITWISE_XOR     reduce using rule 182 (additive_expression -> multiplicative_expression .)
    BITWISE_OR      reduce using rule 182 (additive_expression -> multiplicative_expression .)
    COALESCE        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 182 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 182 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 182 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 182 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 182 (additive_expression -> multiplicative_expression .)
    INCLUDE         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    REQUIRE         reduce using rule 182 (additive_expression -> multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    PRINT           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    YIELD           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    YIELD_FROM      reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 182 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    AS              reduce using rule 182 (additive_expression -> multiplicative_expression .)
    ARROW           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 182 (additive_expression -> multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 182 (additive_expression -> multiplicative_expression .)
    VARIABLE        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 182 (additive_expression -> multiplicative_expression .)
    ELLIPSIS        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    ARRAY           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    CALLABLE        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    ITERABLE        reduce using rule 182 (additive_expression -> multiplicative_expression .)
    BOOL            reduce using rule 182 (additive_expression -> multiplicative_expression .)
    FLOAT           reduce using rule 182 (additive_expression -> multiplicative_expression .)
    INT             reduce using rule 182 (additive_expression -> multiplicative_expression .)
    ASTERISK        shift and go to state 355
    DIVIDE          shift and go to state 356
    MODULO          shift and go to state 357


state 187

    (168) unary_operator -> PLUS .

    AT              reduce using rule 168 (unary_operator -> PLUS .)
    LEFT_PARENTHESIS reduce using rule 168 (unary_operator -> PLUS .)
    CLONE           reduce using rule 168 (unary_operator -> PLUS .)
    PLUS            reduce using rule 168 (unary_operator -> PLUS .)
    LESS            reduce using rule 168 (unary_operator -> PLUS .)
    BITWISE_NOT     reduce using rule 168 (unary_operator -> PLUS .)
    ARRAY           reduce using rule 168 (unary_operator -> PLUS .)
    LEFT_CBRAC      reduce using rule 168 (unary_operator -> PLUS .)
    NEW             reduce using rule 168 (unary_operator -> PLUS .)
    DOUBLEPLUS      reduce using rule 168 (unary_operator -> PLUS .)
    DOUBLELESS      reduce using rule 168 (unary_operator -> PLUS .)
    BACKTICK        reduce using rule 168 (unary_operator -> PLUS .)
    LNUMBER         reduce using rule 168 (unary_operator -> PLUS .)
    DNUMBER         reduce using rule 168 (unary_operator -> PLUS .)
    STRING          reduce using rule 168 (unary_operator -> PLUS .)
    EMPTY           reduce using rule 168 (unary_operator -> PLUS .)
    EVAL            reduce using rule 168 (unary_operator -> PLUS .)
    EXIT            reduce using rule 168 (unary_operator -> PLUS .)
    DIE             reduce using rule 168 (unary_operator -> PLUS .)
    ISSET           reduce using rule 168 (unary_operator -> PLUS .)
    STATIC          reduce using rule 168 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 168 (unary_operator -> PLUS .)
    DOLLAR          reduce using rule 168 (unary_operator -> PLUS .)
    SELF            reduce using rule 168 (unary_operator -> PLUS .)
    PARENT          reduce using rule 168 (unary_operator -> PLUS .)
    FUNCTION        reduce using rule 168 (unary_operator -> PLUS .)


state 188

    (169) unary_operator -> LESS .

    AT              reduce using rule 169 (unary_operator -> LESS .)
    LEFT_PARENTHESIS reduce using rule 169 (unary_operator -> LESS .)
    CLONE           reduce using rule 169 (unary_operator -> LESS .)
    PLUS            reduce using rule 169 (unary_operator -> LESS .)
    LESS            reduce using rule 169 (unary_operator -> LESS .)
    BITWISE_NOT     reduce using rule 169 (unary_operator -> LESS .)
    ARRAY           reduce using rule 169 (unary_operator -> LESS .)
    LEFT_CBRAC      reduce using rule 169 (unary_operator -> LESS .)
    NEW             reduce using rule 169 (unary_operator -> LESS .)
    DOUBLEPLUS      reduce using rule 169 (unary_operator -> LESS .)
    DOUBLELESS      reduce using rule 169 (unary_operator -> LESS .)
    BACKTICK        reduce using rule 169 (unary_operator -> LESS .)
    LNUMBER         reduce using rule 169 (unary_operator -> LESS .)
    DNUMBER         reduce using rule 169 (unary_operator -> LESS .)
    STRING          reduce using rule 169 (unary_operator -> LESS .)
    EMPTY           reduce using rule 169 (unary_operator -> LESS .)
    EVAL            reduce using rule 169 (unary_operator -> LESS .)
    EXIT            reduce using rule 169 (unary_operator -> LESS .)
    DIE             reduce using rule 169 (unary_operator -> LESS .)
    ISSET           reduce using rule 169 (unary_operator -> LESS .)
    STATIC          reduce using rule 169 (unary_operator -> LESS .)
    VARIABLE        reduce using rule 169 (unary_operator -> LESS .)
    DOLLAR          reduce using rule 169 (unary_operator -> LESS .)
    SELF            reduce using rule 169 (unary_operator -> LESS .)
    PARENT          reduce using rule 169 (unary_operator -> LESS .)
    FUNCTION        reduce using rule 169 (unary_operator -> LESS .)


state 189

    (178) multiplicative_expression -> logical_not_expression .

    ASTERISK        reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    DIVIDE          reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    MODULO          reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    PLUS            reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    LESS            reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    CONCAT          reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    SL              reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    SR              reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    LESS_THAN       reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    SPACESHIP       reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    EQUAL           reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    IS_IDENTICAL    reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    AMPERSAND       reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    BITWISE_XOR     reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    BITWISE_OR      reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    COALESCE        reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    TERNARY_OPERATION reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    AND             reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    XOR             reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    OR              reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    SEMICOLON       reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    INCLUDE         reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    REQUIRE         reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    PRINT           reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    YIELD           reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    YIELD_FROM      reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    COLON           reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    AS              reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    ARROW           reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    STRING          reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    VARIABLE        reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    DOUBLE_POINT    reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    ELLIPSIS        reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    ARRAY           reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    CALLABLE        reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    ITERABLE        reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    BOOL            reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    FLOAT           reduce using rule 178 (multiplicative_expression -> logical_not_expression .)
    INT             reduce using rule 178 (multiplicative_expression -> logical_not_expression .)


state 190

    (176) logical_not_expression -> instanceof_expression .
    (175) instanceof_subj -> instanceof_expression .

    ASTERISK        reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    DIVIDE          reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    MODULO          reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    PLUS            reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    LESS            reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    CONCAT          reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    SL              reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    SR              reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    LESS_THAN       reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    SPACESHIP       reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    EQUAL           reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    IS_NOT_EQUAL    reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    IS_IDENTICAL    reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    IS_NOT_IDENTICAL reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    AMPERSAND       reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    BITWISE_XOR     reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    BITWISE_OR      reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    COALESCE        reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    TERNARY_OPERATION reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    AND             reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    XOR             reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    OR              reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    SEMICOLON       reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    INCLUDE         reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    INCLUDE_ONCE    reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    REQUIRE         reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    REQUIRE_ONCE    reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    PRINT           reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    YIELD           reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    YIELD_FROM      reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    RIGHT_PARENTHESIS reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    COLON           reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    AS              reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    ARROW           reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    STRING          reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    RIGHT_CBRAC     reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    VARIABLE        reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    DOUBLE_POINT    reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    DOUBLE_ARROW    reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    ELLIPSIS        reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    ARRAY           reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    CALLABLE        reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    ITERABLE        reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    BOOL            reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    FLOAT           reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    INT             reduce using rule 176 (logical_not_expression -> instanceof_expression .)
    INSTANCEOF      reduce using rule 175 (instanceof_subj -> instanceof_expression .)


state 191

    (177) logical_not_expression -> NEGATION . instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    instanceof_expression          shift and go to state 358
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 192

    (173) instanceof_expression -> unary_expression .

    ASTERISK        reduce using rule 173 (instanceof_expression -> unary_expression .)
    DIVIDE          reduce using rule 173 (instanceof_expression -> unary_expression .)
    MODULO          reduce using rule 173 (instanceof_expression -> unary_expression .)
    PLUS            reduce using rule 173 (instanceof_expression -> unary_expression .)
    LESS            reduce using rule 173 (instanceof_expression -> unary_expression .)
    CONCAT          reduce using rule 173 (instanceof_expression -> unary_expression .)
    SL              reduce using rule 173 (instanceof_expression -> unary_expression .)
    SR              reduce using rule 173 (instanceof_expression -> unary_expression .)
    LESS_THAN       reduce using rule 173 (instanceof_expression -> unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 173 (instanceof_expression -> unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 173 (instanceof_expression -> unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 173 (instanceof_expression -> unary_expression .)
    SPACESHIP       reduce using rule 173 (instanceof_expression -> unary_expression .)
    EQUAL           reduce using rule 173 (instanceof_expression -> unary_expression .)
    IS_NOT_EQUAL    reduce using rule 173 (instanceof_expression -> unary_expression .)
    IS_IDENTICAL    reduce using rule 173 (instanceof_expression -> unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 173 (instanceof_expression -> unary_expression .)
    AMPERSAND       reduce using rule 173 (instanceof_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 173 (instanceof_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 173 (instanceof_expression -> unary_expression .)
    COALESCE        reduce using rule 173 (instanceof_expression -> unary_expression .)
    TERNARY_OPERATION reduce using rule 173 (instanceof_expression -> unary_expression .)
    AND             reduce using rule 173 (instanceof_expression -> unary_expression .)
    XOR             reduce using rule 173 (instanceof_expression -> unary_expression .)
    OR              reduce using rule 173 (instanceof_expression -> unary_expression .)
    SEMICOLON       reduce using rule 173 (instanceof_expression -> unary_expression .)
    INCLUDE         reduce using rule 173 (instanceof_expression -> unary_expression .)
    INCLUDE_ONCE    reduce using rule 173 (instanceof_expression -> unary_expression .)
    REQUIRE         reduce using rule 173 (instanceof_expression -> unary_expression .)
    REQUIRE_ONCE    reduce using rule 173 (instanceof_expression -> unary_expression .)
    PRINT           reduce using rule 173 (instanceof_expression -> unary_expression .)
    YIELD           reduce using rule 173 (instanceof_expression -> unary_expression .)
    YIELD_FROM      reduce using rule 173 (instanceof_expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 173 (instanceof_expression -> unary_expression .)
    COLON           reduce using rule 173 (instanceof_expression -> unary_expression .)
    AS              reduce using rule 173 (instanceof_expression -> unary_expression .)
    ARROW           reduce using rule 173 (instanceof_expression -> unary_expression .)
    STRING          reduce using rule 173 (instanceof_expression -> unary_expression .)
    RIGHT_CBRAC     reduce using rule 173 (instanceof_expression -> unary_expression .)
    VARIABLE        reduce using rule 173 (instanceof_expression -> unary_expression .)
    DOUBLE_POINT    reduce using rule 173 (instanceof_expression -> unary_expression .)
    DOUBLE_ARROW    reduce using rule 173 (instanceof_expression -> unary_expression .)
    ELLIPSIS        reduce using rule 173 (instanceof_expression -> unary_expression .)
    ARRAY           reduce using rule 173 (instanceof_expression -> unary_expression .)
    CALLABLE        reduce using rule 173 (instanceof_expression -> unary_expression .)
    ITERABLE        reduce using rule 173 (instanceof_expression -> unary_expression .)
    BOOL            reduce using rule 173 (instanceof_expression -> unary_expression .)
    FLOAT           reduce using rule 173 (instanceof_expression -> unary_expression .)
    INT             reduce using rule 173 (instanceof_expression -> unary_expression .)
    INSTANCEOF      reduce using rule 173 (instanceof_expression -> unary_expression .)


state 193

    (174) instanceof_expression -> instanceof_subj . INSTANCEOF class_type_designator

    INSTANCEOF      shift and go to state 367


state 194

    (163) unary_expression -> exponentiation_expression .

    ASTERISK        reduce using rule 163 (unary_expression -> exponentiation_expression .)
    DIVIDE          reduce using rule 163 (unary_expression -> exponentiation_expression .)
    MODULO          reduce using rule 163 (unary_expression -> exponentiation_expression .)
    PLUS            reduce using rule 163 (unary_expression -> exponentiation_expression .)
    LESS            reduce using rule 163 (unary_expression -> exponentiation_expression .)
    CONCAT          reduce using rule 163 (unary_expression -> exponentiation_expression .)
    SL              reduce using rule 163 (unary_expression -> exponentiation_expression .)
    SR              reduce using rule 163 (unary_expression -> exponentiation_expression .)
    LESS_THAN       reduce using rule 163 (unary_expression -> exponentiation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 163 (unary_expression -> exponentiation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 163 (unary_expression -> exponentiation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 163 (unary_expression -> exponentiation_expression .)
    SPACESHIP       reduce using rule 163 (unary_expression -> exponentiation_expression .)
    EQUAL           reduce using rule 163 (unary_expression -> exponentiation_expression .)
    IS_NOT_EQUAL    reduce using rule 163 (unary_expression -> exponentiation_expression .)
    IS_IDENTICAL    reduce using rule 163 (unary_expression -> exponentiation_expression .)
    IS_NOT_IDENTICAL reduce using rule 163 (unary_expression -> exponentiation_expression .)
    AMPERSAND       reduce using rule 163 (unary_expression -> exponentiation_expression .)
    BITWISE_XOR     reduce using rule 163 (unary_expression -> exponentiation_expression .)
    BITWISE_OR      reduce using rule 163 (unary_expression -> exponentiation_expression .)
    COALESCE        reduce using rule 163 (unary_expression -> exponentiation_expression .)
    TERNARY_OPERATION reduce using rule 163 (unary_expression -> exponentiation_expression .)
    AND             reduce using rule 163 (unary_expression -> exponentiation_expression .)
    XOR             reduce using rule 163 (unary_expression -> exponentiation_expression .)
    OR              reduce using rule 163 (unary_expression -> exponentiation_expression .)
    SEMICOLON       reduce using rule 163 (unary_expression -> exponentiation_expression .)
    INCLUDE         reduce using rule 163 (unary_expression -> exponentiation_expression .)
    INCLUDE_ONCE    reduce using rule 163 (unary_expression -> exponentiation_expression .)
    REQUIRE         reduce using rule 163 (unary_expression -> exponentiation_expression .)
    REQUIRE_ONCE    reduce using rule 163 (unary_expression -> exponentiation_expression .)
    PRINT           reduce using rule 163 (unary_expression -> exponentiation_expression .)
    YIELD           reduce using rule 163 (unary_expression -> exponentiation_expression .)
    YIELD_FROM      reduce using rule 163 (unary_expression -> exponentiation_expression .)
    RIGHT_PARENTHESIS reduce using rule 163 (unary_expression -> exponentiation_expression .)
    COLON           reduce using rule 163 (unary_expression -> exponentiation_expression .)
    AS              reduce using rule 163 (unary_expression -> exponentiation_expression .)
    ARROW           reduce using rule 163 (unary_expression -> exponentiation_expression .)
    STRING          reduce using rule 163 (unary_expression -> exponentiation_expression .)
    RIGHT_CBRAC     reduce using rule 163 (unary_expression -> exponentiation_expression .)
    VARIABLE        reduce using rule 163 (unary_expression -> exponentiation_expression .)
    DOUBLE_POINT    reduce using rule 163 (unary_expression -> exponentiation_expression .)
    DOUBLE_ARROW    reduce using rule 163 (unary_expression -> exponentiation_expression .)
    ELLIPSIS        reduce using rule 163 (unary_expression -> exponentiation_expression .)
    ARRAY           reduce using rule 163 (unary_expression -> exponentiation_expression .)
    CALLABLE        reduce using rule 163 (unary_expression -> exponentiation_expression .)
    ITERABLE        reduce using rule 163 (unary_expression -> exponentiation_expression .)
    BOOL            reduce using rule 163 (unary_expression -> exponentiation_expression .)
    FLOAT           reduce using rule 163 (unary_expression -> exponentiation_expression .)
    INT             reduce using rule 163 (unary_expression -> exponentiation_expression .)
    INSTANCEOF      reduce using rule 163 (unary_expression -> exponentiation_expression .)


state 195

    (164) unary_expression -> unary_op_expression .

    ASTERISK        reduce using rule 164 (unary_expression -> unary_op_expression .)
    DIVIDE          reduce using rule 164 (unary_expression -> unary_op_expression .)
    MODULO          reduce using rule 164 (unary_expression -> unary_op_expression .)
    PLUS            reduce using rule 164 (unary_expression -> unary_op_expression .)
    LESS            reduce using rule 164 (unary_expression -> unary_op_expression .)
    CONCAT          reduce using rule 164 (unary_expression -> unary_op_expression .)
    SL              reduce using rule 164 (unary_expression -> unary_op_expression .)
    SR              reduce using rule 164 (unary_expression -> unary_op_expression .)
    LESS_THAN       reduce using rule 164 (unary_expression -> unary_op_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 164 (unary_expression -> unary_op_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 164 (unary_expression -> unary_op_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 164 (unary_expression -> unary_op_expression .)
    SPACESHIP       reduce using rule 164 (unary_expression -> unary_op_expression .)
    EQUAL           reduce using rule 164 (unary_expression -> unary_op_expression .)
    IS_NOT_EQUAL    reduce using rule 164 (unary_expression -> unary_op_expression .)
    IS_IDENTICAL    reduce using rule 164 (unary_expression -> unary_op_expression .)
    IS_NOT_IDENTICAL reduce using rule 164 (unary_expression -> unary_op_expression .)
    AMPERSAND       reduce using rule 164 (unary_expression -> unary_op_expression .)
    BITWISE_XOR     reduce using rule 164 (unary_expression -> unary_op_expression .)
    BITWISE_OR      reduce using rule 164 (unary_expression -> unary_op_expression .)
    COALESCE        reduce using rule 164 (unary_expression -> unary_op_expression .)
    TERNARY_OPERATION reduce using rule 164 (unary_expression -> unary_op_expression .)
    AND             reduce using rule 164 (unary_expression -> unary_op_expression .)
    XOR             reduce using rule 164 (unary_expression -> unary_op_expression .)
    OR              reduce using rule 164 (unary_expression -> unary_op_expression .)
    SEMICOLON       reduce using rule 164 (unary_expression -> unary_op_expression .)
    INCLUDE         reduce using rule 164 (unary_expression -> unary_op_expression .)
    INCLUDE_ONCE    reduce using rule 164 (unary_expression -> unary_op_expression .)
    REQUIRE         reduce using rule 164 (unary_expression -> unary_op_expression .)
    REQUIRE_ONCE    reduce using rule 164 (unary_expression -> unary_op_expression .)
    PRINT           reduce using rule 164 (unary_expression -> unary_op_expression .)
    YIELD           reduce using rule 164 (unary_expression -> unary_op_expression .)
    YIELD_FROM      reduce using rule 164 (unary_expression -> unary_op_expression .)
    RIGHT_PARENTHESIS reduce using rule 164 (unary_expression -> unary_op_expression .)
    COLON           reduce using rule 164 (unary_expression -> unary_op_expression .)
    AS              reduce using rule 164 (unary_expression -> unary_op_expression .)
    ARROW           reduce using rule 164 (unary_expression -> unary_op_expression .)
    STRING          reduce using rule 164 (unary_expression -> unary_op_expression .)
    RIGHT_CBRAC     reduce using rule 164 (unary_expression -> unary_op_expression .)
    VARIABLE        reduce using rule 164 (unary_expression -> unary_op_expression .)
    DOUBLE_POINT    reduce using rule 164 (unary_expression -> unary_op_expression .)
    DOUBLE_ARROW    reduce using rule 164 (unary_expression -> unary_op_expression .)
    ELLIPSIS        reduce using rule 164 (unary_expression -> unary_op_expression .)
    ARRAY           reduce using rule 164 (unary_expression -> unary_op_expression .)
    CALLABLE        reduce using rule 164 (unary_expression -> unary_op_expression .)
    ITERABLE        reduce using rule 164 (unary_expression -> unary_op_expression .)
    BOOL            reduce using rule 164 (unary_expression -> unary_op_expression .)
    FLOAT           reduce using rule 164 (unary_expression -> unary_op_expression .)
    INT             reduce using rule 164 (unary_expression -> unary_op_expression .)
    INSTANCEOF      reduce using rule 164 (unary_expression -> unary_op_expression .)


state 196

    (165) unary_expression -> error_control_expression .

    ASTERISK        reduce using rule 165 (unary_expression -> error_control_expression .)
    DIVIDE          reduce using rule 165 (unary_expression -> error_control_expression .)
    MODULO          reduce using rule 165 (unary_expression -> error_control_expression .)
    PLUS            reduce using rule 165 (unary_expression -> error_control_expression .)
    LESS            reduce using rule 165 (unary_expression -> error_control_expression .)
    CONCAT          reduce using rule 165 (unary_expression -> error_control_expression .)
    SL              reduce using rule 165 (unary_expression -> error_control_expression .)
    SR              reduce using rule 165 (unary_expression -> error_control_expression .)
    LESS_THAN       reduce using rule 165 (unary_expression -> error_control_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 165 (unary_expression -> error_control_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 165 (unary_expression -> error_control_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 165 (unary_expression -> error_control_expression .)
    SPACESHIP       reduce using rule 165 (unary_expression -> error_control_expression .)
    EQUAL           reduce using rule 165 (unary_expression -> error_control_expression .)
    IS_NOT_EQUAL    reduce using rule 165 (unary_expression -> error_control_expression .)
    IS_IDENTICAL    reduce using rule 165 (unary_expression -> error_control_expression .)
    IS_NOT_IDENTICAL reduce using rule 165 (unary_expression -> error_control_expression .)
    AMPERSAND       reduce using rule 165 (unary_expression -> error_control_expression .)
    BITWISE_XOR     reduce using rule 165 (unary_expression -> error_control_expression .)
    BITWISE_OR      reduce using rule 165 (unary_expression -> error_control_expression .)
    COALESCE        reduce using rule 165 (unary_expression -> error_control_expression .)
    TERNARY_OPERATION reduce using rule 165 (unary_expression -> error_control_expression .)
    AND             reduce using rule 165 (unary_expression -> error_control_expression .)
    XOR             reduce using rule 165 (unary_expression -> error_control_expression .)
    OR              reduce using rule 165 (unary_expression -> error_control_expression .)
    SEMICOLON       reduce using rule 165 (unary_expression -> error_control_expression .)
    INCLUDE         reduce using rule 165 (unary_expression -> error_control_expression .)
    INCLUDE_ONCE    reduce using rule 165 (unary_expression -> error_control_expression .)
    REQUIRE         reduce using rule 165 (unary_expression -> error_control_expression .)
    REQUIRE_ONCE    reduce using rule 165 (unary_expression -> error_control_expression .)
    PRINT           reduce using rule 165 (unary_expression -> error_control_expression .)
    YIELD           reduce using rule 165 (unary_expression -> error_control_expression .)
    YIELD_FROM      reduce using rule 165 (unary_expression -> error_control_expression .)
    RIGHT_PARENTHESIS reduce using rule 165 (unary_expression -> error_control_expression .)
    COLON           reduce using rule 165 (unary_expression -> error_control_expression .)
    AS              reduce using rule 165 (unary_expression -> error_control_expression .)
    ARROW           reduce using rule 165 (unary_expression -> error_control_expression .)
    STRING          reduce using rule 165 (unary_expression -> error_control_expression .)
    RIGHT_CBRAC     reduce using rule 165 (unary_expression -> error_control_expression .)
    VARIABLE        reduce using rule 165 (unary_expression -> error_control_expression .)
    DOUBLE_POINT    reduce using rule 165 (unary_expression -> error_control_expression .)
    DOUBLE_ARROW    reduce using rule 165 (unary_expression -> error_control_expression .)
    ELLIPSIS        reduce using rule 165 (unary_expression -> error_control_expression .)
    ARRAY           reduce using rule 165 (unary_expression -> error_control_expression .)
    CALLABLE        reduce using rule 165 (unary_expression -> error_control_expression .)
    ITERABLE        reduce using rule 165 (unary_expression -> error_control_expression .)
    BOOL            reduce using rule 165 (unary_expression -> error_control_expression .)
    FLOAT           reduce using rule 165 (unary_expression -> error_control_expression .)
    INT             reduce using rule 165 (unary_expression -> error_control_expression .)
    INSTANCEOF      reduce using rule 165 (unary_expression -> error_control_expression .)


state 197

    (166) unary_expression -> cast_expression .

    ASTERISK        reduce using rule 166 (unary_expression -> cast_expression .)
    DIVIDE          reduce using rule 166 (unary_expression -> cast_expression .)
    MODULO          reduce using rule 166 (unary_expression -> cast_expression .)
    PLUS            reduce using rule 166 (unary_expression -> cast_expression .)
    LESS            reduce using rule 166 (unary_expression -> cast_expression .)
    CONCAT          reduce using rule 166 (unary_expression -> cast_expression .)
    SL              reduce using rule 166 (unary_expression -> cast_expression .)
    SR              reduce using rule 166 (unary_expression -> cast_expression .)
    LESS_THAN       reduce using rule 166 (unary_expression -> cast_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 166 (unary_expression -> cast_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 166 (unary_expression -> cast_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 166 (unary_expression -> cast_expression .)
    SPACESHIP       reduce using rule 166 (unary_expression -> cast_expression .)
    EQUAL           reduce using rule 166 (unary_expression -> cast_expression .)
    IS_NOT_EQUAL    reduce using rule 166 (unary_expression -> cast_expression .)
    IS_IDENTICAL    reduce using rule 166 (unary_expression -> cast_expression .)
    IS_NOT_IDENTICAL reduce using rule 166 (unary_expression -> cast_expression .)
    AMPERSAND       reduce using rule 166 (unary_expression -> cast_expression .)
    BITWISE_XOR     reduce using rule 166 (unary_expression -> cast_expression .)
    BITWISE_OR      reduce using rule 166 (unary_expression -> cast_expression .)
    COALESCE        reduce using rule 166 (unary_expression -> cast_expression .)
    TERNARY_OPERATION reduce using rule 166 (unary_expression -> cast_expression .)
    AND             reduce using rule 166 (unary_expression -> cast_expression .)
    XOR             reduce using rule 166 (unary_expression -> cast_expression .)
    OR              reduce using rule 166 (unary_expression -> cast_expression .)
    SEMICOLON       reduce using rule 166 (unary_expression -> cast_expression .)
    INCLUDE         reduce using rule 166 (unary_expression -> cast_expression .)
    INCLUDE_ONCE    reduce using rule 166 (unary_expression -> cast_expression .)
    REQUIRE         reduce using rule 166 (unary_expression -> cast_expression .)
    REQUIRE_ONCE    reduce using rule 166 (unary_expression -> cast_expression .)
    PRINT           reduce using rule 166 (unary_expression -> cast_expression .)
    YIELD           reduce using rule 166 (unary_expression -> cast_expression .)
    YIELD_FROM      reduce using rule 166 (unary_expression -> cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 166 (unary_expression -> cast_expression .)
    COLON           reduce using rule 166 (unary_expression -> cast_expression .)
    AS              reduce using rule 166 (unary_expression -> cast_expression .)
    ARROW           reduce using rule 166 (unary_expression -> cast_expression .)
    STRING          reduce using rule 166 (unary_expression -> cast_expression .)
    RIGHT_CBRAC     reduce using rule 166 (unary_expression -> cast_expression .)
    VARIABLE        reduce using rule 166 (unary_expression -> cast_expression .)
    DOUBLE_POINT    reduce using rule 166 (unary_expression -> cast_expression .)
    DOUBLE_ARROW    reduce using rule 166 (unary_expression -> cast_expression .)
    ELLIPSIS        reduce using rule 166 (unary_expression -> cast_expression .)
    ARRAY           reduce using rule 166 (unary_expression -> cast_expression .)
    CALLABLE        reduce using rule 166 (unary_expression -> cast_expression .)
    ITERABLE        reduce using rule 166 (unary_expression -> cast_expression .)
    BOOL            reduce using rule 166 (unary_expression -> cast_expression .)
    FLOAT           reduce using rule 166 (unary_expression -> cast_expression .)
    INT             reduce using rule 166 (unary_expression -> cast_expression .)
    INSTANCEOF      reduce using rule 166 (unary_expression -> cast_expression .)


state 198

    (161) exponentiation_expression -> clone_expression .
    (162) exponentiation_expression -> clone_expression . DOUBLEASTERISK exponentiation_expression

    ASTERISK        reduce using rule 161 (exponentiation_expression -> clone_expression .)
    DIVIDE          reduce using rule 161 (exponentiation_expression -> clone_expression .)
    MODULO          reduce using rule 161 (exponentiation_expression -> clone_expression .)
    PLUS            reduce using rule 161 (exponentiation_expression -> clone_expression .)
    LESS            reduce using rule 161 (exponentiation_expression -> clone_expression .)
    CONCAT          reduce using rule 161 (exponentiation_expression -> clone_expression .)
    SL              reduce using rule 161 (exponentiation_expression -> clone_expression .)
    SR              reduce using rule 161 (exponentiation_expression -> clone_expression .)
    LESS_THAN       reduce using rule 161 (exponentiation_expression -> clone_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 161 (exponentiation_expression -> clone_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 161 (exponentiation_expression -> clone_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 161 (exponentiation_expression -> clone_expression .)
    SPACESHIP       reduce using rule 161 (exponentiation_expression -> clone_expression .)
    EQUAL           reduce using rule 161 (exponentiation_expression -> clone_expression .)
    IS_NOT_EQUAL    reduce using rule 161 (exponentiation_expression -> clone_expression .)
    IS_IDENTICAL    reduce using rule 161 (exponentiation_expression -> clone_expression .)
    IS_NOT_IDENTICAL reduce using rule 161 (exponentiation_expression -> clone_expression .)
    AMPERSAND       reduce using rule 161 (exponentiation_expression -> clone_expression .)
    BITWISE_XOR     reduce using rule 161 (exponentiation_expression -> clone_expression .)
    BITWISE_OR      reduce using rule 161 (exponentiation_expression -> clone_expression .)
    COALESCE        reduce using rule 161 (exponentiation_expression -> clone_expression .)
    TERNARY_OPERATION reduce using rule 161 (exponentiation_expression -> clone_expression .)
    AND             reduce using rule 161 (exponentiation_expression -> clone_expression .)
    XOR             reduce using rule 161 (exponentiation_expression -> clone_expression .)
    OR              reduce using rule 161 (exponentiation_expression -> clone_expression .)
    SEMICOLON       reduce using rule 161 (exponentiation_expression -> clone_expression .)
    INCLUDE         reduce using rule 161 (exponentiation_expression -> clone_expression .)
    INCLUDE_ONCE    reduce using rule 161 (exponentiation_expression -> clone_expression .)
    REQUIRE         reduce using rule 161 (exponentiation_expression -> clone_expression .)
    REQUIRE_ONCE    reduce using rule 161 (exponentiation_expression -> clone_expression .)
    PRINT           reduce using rule 161 (exponentiation_expression -> clone_expression .)
    YIELD           reduce using rule 161 (exponentiation_expression -> clone_expression .)
    YIELD_FROM      reduce using rule 161 (exponentiation_expression -> clone_expression .)
    RIGHT_PARENTHESIS reduce using rule 161 (exponentiation_expression -> clone_expression .)
    COLON           reduce using rule 161 (exponentiation_expression -> clone_expression .)
    AS              reduce using rule 161 (exponentiation_expression -> clone_expression .)
    ARROW           reduce using rule 161 (exponentiation_expression -> clone_expression .)
    STRING          reduce using rule 161 (exponentiation_expression -> clone_expression .)
    RIGHT_CBRAC     reduce using rule 161 (exponentiation_expression -> clone_expression .)
    VARIABLE        reduce using rule 161 (exponentiation_expression -> clone_expression .)
    DOUBLE_POINT    reduce using rule 161 (exponentiation_expression -> clone_expression .)
    DOUBLE_ARROW    reduce using rule 161 (exponentiation_expression -> clone_expression .)
    ELLIPSIS        reduce using rule 161 (exponentiation_expression -> clone_expression .)
    ARRAY           reduce using rule 161 (exponentiation_expression -> clone_expression .)
    CALLABLE        reduce using rule 161 (exponentiation_expression -> clone_expression .)
    ITERABLE        reduce using rule 161 (exponentiation_expression -> clone_expression .)
    BOOL            reduce using rule 161 (exponentiation_expression -> clone_expression .)
    FLOAT           reduce using rule 161 (exponentiation_expression -> clone_expression .)
    INT             reduce using rule 161 (exponentiation_expression -> clone_expression .)
    INSTANCEOF      reduce using rule 161 (exponentiation_expression -> clone_expression .)
    DOUBLEASTERISK  shift and go to state 368


state 199

    (167) unary_op_expression -> unary_operator . unary_expression
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    unary_operator                 shift and go to state 199
    unary_expression               shift and go to state 369
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 200

    (171) error_control_expression -> AT . unary_expression
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    unary_expression               shift and go to state 370
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 201

    (159) clone_expression -> primary_expression .

    DOUBLEASTERISK  reduce using rule 159 (clone_expression -> primary_expression .)
    ASTERISK        reduce using rule 159 (clone_expression -> primary_expression .)
    DIVIDE          reduce using rule 159 (clone_expression -> primary_expression .)
    MODULO          reduce using rule 159 (clone_expression -> primary_expression .)
    PLUS            reduce using rule 159 (clone_expression -> primary_expression .)
    LESS            reduce using rule 159 (clone_expression -> primary_expression .)
    CONCAT          reduce using rule 159 (clone_expression -> primary_expression .)
    SL              reduce using rule 159 (clone_expression -> primary_expression .)
    SR              reduce using rule 159 (clone_expression -> primary_expression .)
    LESS_THAN       reduce using rule 159 (clone_expression -> primary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 159 (clone_expression -> primary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 159 (clone_expression -> primary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 159 (clone_expression -> primary_expression .)
    SPACESHIP       reduce using rule 159 (clone_expression -> primary_expression .)
    EQUAL           reduce using rule 159 (clone_expression -> primary_expression .)
    IS_NOT_EQUAL    reduce using rule 159 (clone_expression -> primary_expression .)
    IS_IDENTICAL    reduce using rule 159 (clone_expression -> primary_expression .)
    IS_NOT_IDENTICAL reduce using rule 159 (clone_expression -> primary_expression .)
    AMPERSAND       reduce using rule 159 (clone_expression -> primary_expression .)
    BITWISE_XOR     reduce using rule 159 (clone_expression -> primary_expression .)
    BITWISE_OR      reduce using rule 159 (clone_expression -> primary_expression .)
    COALESCE        reduce using rule 159 (clone_expression -> primary_expression .)
    TERNARY_OPERATION reduce using rule 159 (clone_expression -> primary_expression .)
    AND             reduce using rule 159 (clone_expression -> primary_expression .)
    XOR             reduce using rule 159 (clone_expression -> primary_expression .)
    OR              reduce using rule 159 (clone_expression -> primary_expression .)
    SEMICOLON       reduce using rule 159 (clone_expression -> primary_expression .)
    INCLUDE         reduce using rule 159 (clone_expression -> primary_expression .)
    INCLUDE_ONCE    reduce using rule 159 (clone_expression -> primary_expression .)
    REQUIRE         reduce using rule 159 (clone_expression -> primary_expression .)
    REQUIRE_ONCE    reduce using rule 159 (clone_expression -> primary_expression .)
    PRINT           reduce using rule 159 (clone_expression -> primary_expression .)
    YIELD           reduce using rule 159 (clone_expression -> primary_expression .)
    YIELD_FROM      reduce using rule 159 (clone_expression -> primary_expression .)
    RIGHT_PARENTHESIS reduce using rule 159 (clone_expression -> primary_expression .)
    COLON           reduce using rule 159 (clone_expression -> primary_expression .)
    AS              reduce using rule 159 (clone_expression -> primary_expression .)
    ARROW           reduce using rule 159 (clone_expression -> primary_expression .)
    STRING          reduce using rule 159 (clone_expression -> primary_expression .)
    RIGHT_CBRAC     reduce using rule 159 (clone_expression -> primary_expression .)
    VARIABLE        reduce using rule 159 (clone_expression -> primary_expression .)
    DOUBLE_POINT    reduce using rule 159 (clone_expression -> primary_expression .)
    DOUBLE_ARROW    reduce using rule 159 (clone_expression -> primary_expression .)
    ELLIPSIS        reduce using rule 159 (clone_expression -> primary_expression .)
    ARRAY           reduce using rule 159 (clone_expression -> primary_expression .)
    CALLABLE        reduce using rule 159 (clone_expression -> primary_expression .)
    ITERABLE        reduce using rule 159 (clone_expression -> primary_expression .)
    BOOL            reduce using rule 159 (clone_expression -> primary_expression .)
    FLOAT           reduce using rule 159 (clone_expression -> primary_expression .)
    INT             reduce using rule 159 (clone_expression -> primary_expression .)
    INSTANCEOF      reduce using rule 159 (clone_expression -> primary_expression .)


state 202

    (160) clone_expression -> CLONE . primary_expression
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    LEFT_PARENTHESIS shift and go to state 372
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    primary_expression             shift and go to state 371
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 203

    (170) unary_operator -> BITWISE_NOT .

    AT              reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    LEFT_PARENTHESIS reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    CLONE           reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    PLUS            reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    LESS            reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    BITWISE_NOT     reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    ARRAY           reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    LEFT_CBRAC      reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    NEW             reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    DOUBLEPLUS      reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    DOUBLELESS      reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    BACKTICK        reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    LNUMBER         reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    DNUMBER         reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    STRING          reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    EMPTY           reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    EVAL            reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    EXIT            reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    DIE             reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    ISSET           reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    STATIC          reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    VARIABLE        reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    DOLLAR          reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    SELF            reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    PARENT          reduce using rule 170 (unary_operator -> BITWISE_NOT .)
    FUNCTION        reduce using rule 170 (unary_operator -> BITWISE_NOT .)


state 204

    (21) primary_expression -> class_constant_access_expression .

    DOUBLEASTERISK  reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    ASTERISK        reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    DIVIDE          reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    MODULO          reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    PLUS            reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    LESS            reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    CONCAT          reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    SL              reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    SR              reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    LESS_THAN       reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    SPACESHIP       reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    EQUAL           reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    IS_NOT_EQUAL    reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    IS_IDENTICAL    reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    AMPERSAND       reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    BITWISE_XOR     reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    BITWISE_OR      reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    COALESCE        reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    TERNARY_OPERATION reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    AND             reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    XOR             reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    OR              reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    SEMICOLON       reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    INCLUDE         reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    INCLUDE_ONCE    reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    REQUIRE         reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    REQUIRE_ONCE    reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    PRINT           reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    YIELD           reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    YIELD_FROM      reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    COLON           reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    AS              reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    ARROW           reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    STRING          reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    RIGHT_CBRAC     reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    VARIABLE        reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    DOUBLE_POINT    reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    DOUBLE_ARROW    reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    ELLIPSIS        reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    ARRAY           reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    CALLABLE        reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    ITERABLE        reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    BOOL            reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    FLOAT           reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    INT             reduce using rule 21 (primary_expression -> class_constant_access_expression .)
    INSTANCEOF      reduce using rule 21 (primary_expression -> class_constant_access_expression .)


state 205

    (22) primary_expression -> constant_access_expression .

    DOUBLEASTERISK  reduce using rule 22 (primary_expression -> constant_access_expression .)
    ASTERISK        reduce using rule 22 (primary_expression -> constant_access_expression .)
    DIVIDE          reduce using rule 22 (primary_expression -> constant_access_expression .)
    MODULO          reduce using rule 22 (primary_expression -> constant_access_expression .)
    PLUS            reduce using rule 22 (primary_expression -> constant_access_expression .)
    LESS            reduce using rule 22 (primary_expression -> constant_access_expression .)
    CONCAT          reduce using rule 22 (primary_expression -> constant_access_expression .)
    SL              reduce using rule 22 (primary_expression -> constant_access_expression .)
    SR              reduce using rule 22 (primary_expression -> constant_access_expression .)
    LESS_THAN       reduce using rule 22 (primary_expression -> constant_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 22 (primary_expression -> constant_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 22 (primary_expression -> constant_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 22 (primary_expression -> constant_access_expression .)
    SPACESHIP       reduce using rule 22 (primary_expression -> constant_access_expression .)
    EQUAL           reduce using rule 22 (primary_expression -> constant_access_expression .)
    IS_NOT_EQUAL    reduce using rule 22 (primary_expression -> constant_access_expression .)
    IS_IDENTICAL    reduce using rule 22 (primary_expression -> constant_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 22 (primary_expression -> constant_access_expression .)
    AMPERSAND       reduce using rule 22 (primary_expression -> constant_access_expression .)
    BITWISE_XOR     reduce using rule 22 (primary_expression -> constant_access_expression .)
    BITWISE_OR      reduce using rule 22 (primary_expression -> constant_access_expression .)
    COALESCE        reduce using rule 22 (primary_expression -> constant_access_expression .)
    TERNARY_OPERATION reduce using rule 22 (primary_expression -> constant_access_expression .)
    AND             reduce using rule 22 (primary_expression -> constant_access_expression .)
    XOR             reduce using rule 22 (primary_expression -> constant_access_expression .)
    OR              reduce using rule 22 (primary_expression -> constant_access_expression .)
    SEMICOLON       reduce using rule 22 (primary_expression -> constant_access_expression .)
    INCLUDE         reduce using rule 22 (primary_expression -> constant_access_expression .)
    INCLUDE_ONCE    reduce using rule 22 (primary_expression -> constant_access_expression .)
    REQUIRE         reduce using rule 22 (primary_expression -> constant_access_expression .)
    REQUIRE_ONCE    reduce using rule 22 (primary_expression -> constant_access_expression .)
    PRINT           reduce using rule 22 (primary_expression -> constant_access_expression .)
    YIELD           reduce using rule 22 (primary_expression -> constant_access_expression .)
    YIELD_FROM      reduce using rule 22 (primary_expression -> constant_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 22 (primary_expression -> constant_access_expression .)
    COLON           reduce using rule 22 (primary_expression -> constant_access_expression .)
    AS              reduce using rule 22 (primary_expression -> constant_access_expression .)
    ARROW           reduce using rule 22 (primary_expression -> constant_access_expression .)
    STRING          reduce using rule 22 (primary_expression -> constant_access_expression .)
    RIGHT_CBRAC     reduce using rule 22 (primary_expression -> constant_access_expression .)
    VARIABLE        reduce using rule 22 (primary_expression -> constant_access_expression .)
    DOUBLE_POINT    reduce using rule 22 (primary_expression -> constant_access_expression .)
    DOUBLE_ARROW    reduce using rule 22 (primary_expression -> constant_access_expression .)
    ELLIPSIS        reduce using rule 22 (primary_expression -> constant_access_expression .)
    ARRAY           reduce using rule 22 (primary_expression -> constant_access_expression .)
    CALLABLE        reduce using rule 22 (primary_expression -> constant_access_expression .)
    ITERABLE        reduce using rule 22 (primary_expression -> constant_access_expression .)
    BOOL            reduce using rule 22 (primary_expression -> constant_access_expression .)
    FLOAT           reduce using rule 22 (primary_expression -> constant_access_expression .)
    INT             reduce using rule 22 (primary_expression -> constant_access_expression .)
    INSTANCEOF      reduce using rule 22 (primary_expression -> constant_access_expression .)


state 206

    (23) primary_expression -> literal .

    DOUBLEASTERISK  reduce using rule 23 (primary_expression -> literal .)
    ASTERISK        reduce using rule 23 (primary_expression -> literal .)
    DIVIDE          reduce using rule 23 (primary_expression -> literal .)
    MODULO          reduce using rule 23 (primary_expression -> literal .)
    PLUS            reduce using rule 23 (primary_expression -> literal .)
    LESS            reduce using rule 23 (primary_expression -> literal .)
    CONCAT          reduce using rule 23 (primary_expression -> literal .)
    SL              reduce using rule 23 (primary_expression -> literal .)
    SR              reduce using rule 23 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 23 (primary_expression -> literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 23 (primary_expression -> literal .)
    IS_GREATER_OR_EQUAL reduce using rule 23 (primary_expression -> literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 23 (primary_expression -> literal .)
    SPACESHIP       reduce using rule 23 (primary_expression -> literal .)
    EQUAL           reduce using rule 23 (primary_expression -> literal .)
    IS_NOT_EQUAL    reduce using rule 23 (primary_expression -> literal .)
    IS_IDENTICAL    reduce using rule 23 (primary_expression -> literal .)
    IS_NOT_IDENTICAL reduce using rule 23 (primary_expression -> literal .)
    AMPERSAND       reduce using rule 23 (primary_expression -> literal .)
    BITWISE_XOR     reduce using rule 23 (primary_expression -> literal .)
    BITWISE_OR      reduce using rule 23 (primary_expression -> literal .)
    COALESCE        reduce using rule 23 (primary_expression -> literal .)
    TERNARY_OPERATION reduce using rule 23 (primary_expression -> literal .)
    AND             reduce using rule 23 (primary_expression -> literal .)
    XOR             reduce using rule 23 (primary_expression -> literal .)
    OR              reduce using rule 23 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 23 (primary_expression -> literal .)
    INCLUDE         reduce using rule 23 (primary_expression -> literal .)
    INCLUDE_ONCE    reduce using rule 23 (primary_expression -> literal .)
    REQUIRE         reduce using rule 23 (primary_expression -> literal .)
    REQUIRE_ONCE    reduce using rule 23 (primary_expression -> literal .)
    PRINT           reduce using rule 23 (primary_expression -> literal .)
    YIELD           reduce using rule 23 (primary_expression -> literal .)
    YIELD_FROM      reduce using rule 23 (primary_expression -> literal .)
    RIGHT_PARENTHESIS reduce using rule 23 (primary_expression -> literal .)
    COLON           reduce using rule 23 (primary_expression -> literal .)
    AS              reduce using rule 23 (primary_expression -> literal .)
    ARROW           reduce using rule 23 (primary_expression -> literal .)
    STRING          reduce using rule 23 (primary_expression -> literal .)
    RIGHT_CBRAC     reduce using rule 23 (primary_expression -> literal .)
    VARIABLE        reduce using rule 23 (primary_expression -> literal .)
    DOUBLE_POINT    reduce using rule 23 (primary_expression -> literal .)
    DOUBLE_ARROW    reduce using rule 23 (primary_expression -> literal .)
    ELLIPSIS        reduce using rule 23 (primary_expression -> literal .)
    ARRAY           reduce using rule 23 (primary_expression -> literal .)
    CALLABLE        reduce using rule 23 (primary_expression -> literal .)
    ITERABLE        reduce using rule 23 (primary_expression -> literal .)
    BOOL            reduce using rule 23 (primary_expression -> literal .)
    FLOAT           reduce using rule 23 (primary_expression -> literal .)
    INT             reduce using rule 23 (primary_expression -> literal .)
    INSTANCEOF      reduce using rule 23 (primary_expression -> literal .)


state 207

    (25) primary_expression -> intrinsic .

    DOUBLEASTERISK  reduce using rule 25 (primary_expression -> intrinsic .)
    ASTERISK        reduce using rule 25 (primary_expression -> intrinsic .)
    DIVIDE          reduce using rule 25 (primary_expression -> intrinsic .)
    MODULO          reduce using rule 25 (primary_expression -> intrinsic .)
    PLUS            reduce using rule 25 (primary_expression -> intrinsic .)
    LESS            reduce using rule 25 (primary_expression -> intrinsic .)
    CONCAT          reduce using rule 25 (primary_expression -> intrinsic .)
    SL              reduce using rule 25 (primary_expression -> intrinsic .)
    SR              reduce using rule 25 (primary_expression -> intrinsic .)
    LESS_THAN       reduce using rule 25 (primary_expression -> intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 25 (primary_expression -> intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 25 (primary_expression -> intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 25 (primary_expression -> intrinsic .)
    SPACESHIP       reduce using rule 25 (primary_expression -> intrinsic .)
    EQUAL           reduce using rule 25 (primary_expression -> intrinsic .)
    IS_NOT_EQUAL    reduce using rule 25 (primary_expression -> intrinsic .)
    IS_IDENTICAL    reduce using rule 25 (primary_expression -> intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 25 (primary_expression -> intrinsic .)
    AMPERSAND       reduce using rule 25 (primary_expression -> intrinsic .)
    BITWISE_XOR     reduce using rule 25 (primary_expression -> intrinsic .)
    BITWISE_OR      reduce using rule 25 (primary_expression -> intrinsic .)
    COALESCE        reduce using rule 25 (primary_expression -> intrinsic .)
    TERNARY_OPERATION reduce using rule 25 (primary_expression -> intrinsic .)
    AND             reduce using rule 25 (primary_expression -> intrinsic .)
    XOR             reduce using rule 25 (primary_expression -> intrinsic .)
    OR              reduce using rule 25 (primary_expression -> intrinsic .)
    SEMICOLON       reduce using rule 25 (primary_expression -> intrinsic .)
    INCLUDE         reduce using rule 25 (primary_expression -> intrinsic .)
    INCLUDE_ONCE    reduce using rule 25 (primary_expression -> intrinsic .)
    REQUIRE         reduce using rule 25 (primary_expression -> intrinsic .)
    REQUIRE_ONCE    reduce using rule 25 (primary_expression -> intrinsic .)
    PRINT           reduce using rule 25 (primary_expression -> intrinsic .)
    YIELD           reduce using rule 25 (primary_expression -> intrinsic .)
    YIELD_FROM      reduce using rule 25 (primary_expression -> intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 25 (primary_expression -> intrinsic .)
    COLON           reduce using rule 25 (primary_expression -> intrinsic .)
    AS              reduce using rule 25 (primary_expression -> intrinsic .)
    ARROW           reduce using rule 25 (primary_expression -> intrinsic .)
    STRING          reduce using rule 25 (primary_expression -> intrinsic .)
    RIGHT_CBRAC     reduce using rule 25 (primary_expression -> intrinsic .)
    VARIABLE        reduce using rule 25 (primary_expression -> intrinsic .)
    DOUBLE_POINT    reduce using rule 25 (primary_expression -> intrinsic .)
    DOUBLE_ARROW    reduce using rule 25 (primary_expression -> intrinsic .)
    ELLIPSIS        reduce using rule 25 (primary_expression -> intrinsic .)
    ARRAY           reduce using rule 25 (primary_expression -> intrinsic .)
    CALLABLE        reduce using rule 25 (primary_expression -> intrinsic .)
    ITERABLE        reduce using rule 25 (primary_expression -> intrinsic .)
    BOOL            reduce using rule 25 (primary_expression -> intrinsic .)
    FLOAT           reduce using rule 25 (primary_expression -> intrinsic .)
    INT             reduce using rule 25 (primary_expression -> intrinsic .)
    INSTANCEOF      reduce using rule 25 (primary_expression -> intrinsic .)


state 208

    (26) primary_expression -> anonymous_function_creation_expression .

    DOUBLEASTERISK  reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    ASTERISK        reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    DIVIDE          reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    MODULO          reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    PLUS            reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    LESS            reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    CONCAT          reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    SL              reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    SR              reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    LESS_THAN       reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    SPACESHIP       reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    EQUAL           reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    IS_IDENTICAL    reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    AMPERSAND       reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    BITWISE_XOR     reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    BITWISE_OR      reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    COALESCE        reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    TERNARY_OPERATION reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    AND             reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    XOR             reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    OR              reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    SEMICOLON       reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    INCLUDE         reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    INCLUDE_ONCE    reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    REQUIRE         reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    REQUIRE_ONCE    reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    PRINT           reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    YIELD           reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    YIELD_FROM      reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    COLON           reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    AS              reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    ARROW           reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    STRING          reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    RIGHT_CBRAC     reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    VARIABLE        reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    DOUBLE_POINT    reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    DOUBLE_ARROW    reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    ELLIPSIS        reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    ARRAY           reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    CALLABLE        reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    ITERABLE        reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    BOOL            reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    FLOAT           reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    INT             reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)
    INSTANCEOF      reduce using rule 26 (primary_expression -> anonymous_function_creation_expression .)


state 209

    (27) primary_expression -> object_creation_expression .

    DOUBLEASTERISK  reduce using rule 27 (primary_expression -> object_creation_expression .)
    ASTERISK        reduce using rule 27 (primary_expression -> object_creation_expression .)
    DIVIDE          reduce using rule 27 (primary_expression -> object_creation_expression .)
    MODULO          reduce using rule 27 (primary_expression -> object_creation_expression .)
    PLUS            reduce using rule 27 (primary_expression -> object_creation_expression .)
    LESS            reduce using rule 27 (primary_expression -> object_creation_expression .)
    CONCAT          reduce using rule 27 (primary_expression -> object_creation_expression .)
    SL              reduce using rule 27 (primary_expression -> object_creation_expression .)
    SR              reduce using rule 27 (primary_expression -> object_creation_expression .)
    LESS_THAN       reduce using rule 27 (primary_expression -> object_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 27 (primary_expression -> object_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 27 (primary_expression -> object_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 27 (primary_expression -> object_creation_expression .)
    SPACESHIP       reduce using rule 27 (primary_expression -> object_creation_expression .)
    EQUAL           reduce using rule 27 (primary_expression -> object_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 27 (primary_expression -> object_creation_expression .)
    IS_IDENTICAL    reduce using rule 27 (primary_expression -> object_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 27 (primary_expression -> object_creation_expression .)
    AMPERSAND       reduce using rule 27 (primary_expression -> object_creation_expression .)
    BITWISE_XOR     reduce using rule 27 (primary_expression -> object_creation_expression .)
    BITWISE_OR      reduce using rule 27 (primary_expression -> object_creation_expression .)
    COALESCE        reduce using rule 27 (primary_expression -> object_creation_expression .)
    TERNARY_OPERATION reduce using rule 27 (primary_expression -> object_creation_expression .)
    AND             reduce using rule 27 (primary_expression -> object_creation_expression .)
    XOR             reduce using rule 27 (primary_expression -> object_creation_expression .)
    OR              reduce using rule 27 (primary_expression -> object_creation_expression .)
    SEMICOLON       reduce using rule 27 (primary_expression -> object_creation_expression .)
    INCLUDE         reduce using rule 27 (primary_expression -> object_creation_expression .)
    INCLUDE_ONCE    reduce using rule 27 (primary_expression -> object_creation_expression .)
    REQUIRE         reduce using rule 27 (primary_expression -> object_creation_expression .)
    REQUIRE_ONCE    reduce using rule 27 (primary_expression -> object_creation_expression .)
    PRINT           reduce using rule 27 (primary_expression -> object_creation_expression .)
    YIELD           reduce using rule 27 (primary_expression -> object_creation_expression .)
    YIELD_FROM      reduce using rule 27 (primary_expression -> object_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 27 (primary_expression -> object_creation_expression .)
    COLON           reduce using rule 27 (primary_expression -> object_creation_expression .)
    AS              reduce using rule 27 (primary_expression -> object_creation_expression .)
    ARROW           reduce using rule 27 (primary_expression -> object_creation_expression .)
    STRING          reduce using rule 27 (primary_expression -> object_creation_expression .)
    RIGHT_CBRAC     reduce using rule 27 (primary_expression -> object_creation_expression .)
    VARIABLE        reduce using rule 27 (primary_expression -> object_creation_expression .)
    DOUBLE_POINT    reduce using rule 27 (primary_expression -> object_creation_expression .)
    DOUBLE_ARROW    reduce using rule 27 (primary_expression -> object_creation_expression .)
    ELLIPSIS        reduce using rule 27 (primary_expression -> object_creation_expression .)
    ARRAY           reduce using rule 27 (primary_expression -> object_creation_expression .)
    CALLABLE        reduce using rule 27 (primary_expression -> object_creation_expression .)
    ITERABLE        reduce using rule 27 (primary_expression -> object_creation_expression .)
    BOOL            reduce using rule 27 (primary_expression -> object_creation_expression .)
    FLOAT           reduce using rule 27 (primary_expression -> object_creation_expression .)
    INT             reduce using rule 27 (primary_expression -> object_creation_expression .)
    INSTANCEOF      reduce using rule 27 (primary_expression -> object_creation_expression .)


state 210

    (28) primary_expression -> postfix_increment_expression .

    DOUBLEASTERISK  reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    ASTERISK        reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    DIVIDE          reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    MODULO          reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    PLUS            reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    LESS            reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    CONCAT          reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    SL              reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    SR              reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    LESS_THAN       reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    SPACESHIP       reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    EQUAL           reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    IS_NOT_EQUAL    reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    IS_IDENTICAL    reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    IS_NOT_IDENTICAL reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    AMPERSAND       reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    BITWISE_XOR     reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    BITWISE_OR      reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    COALESCE        reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    TERNARY_OPERATION reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    AND             reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    XOR             reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    OR              reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    SEMICOLON       reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    INCLUDE         reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    INCLUDE_ONCE    reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    REQUIRE         reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    REQUIRE_ONCE    reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    PRINT           reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    YIELD           reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    YIELD_FROM      reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    RIGHT_PARENTHESIS reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    COLON           reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    AS              reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    ARROW           reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    STRING          reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    RIGHT_CBRAC     reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    VARIABLE        reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    DOUBLE_POINT    reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    DOUBLE_ARROW    reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    ELLIPSIS        reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    ARRAY           reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    CALLABLE        reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    ITERABLE        reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    BOOL            reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    FLOAT           reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    INT             reduce using rule 28 (primary_expression -> postfix_increment_expression .)
    INSTANCEOF      reduce using rule 28 (primary_expression -> postfix_increment_expression .)


state 211

    (29) primary_expression -> postfix_decrement_expression .

    DOUBLEASTERISK  reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    ASTERISK        reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    DIVIDE          reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    MODULO          reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    PLUS            reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    LESS            reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    CONCAT          reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    SL              reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    SR              reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    LESS_THAN       reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    SPACESHIP       reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    EQUAL           reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    IS_NOT_EQUAL    reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    IS_IDENTICAL    reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    IS_NOT_IDENTICAL reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    AMPERSAND       reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    BITWISE_XOR     reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    BITWISE_OR      reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    COALESCE        reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    TERNARY_OPERATION reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    AND             reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    XOR             reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    OR              reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    SEMICOLON       reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    INCLUDE         reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    INCLUDE_ONCE    reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    REQUIRE         reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    REQUIRE_ONCE    reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    PRINT           reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    YIELD           reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    YIELD_FROM      reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    RIGHT_PARENTHESIS reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    COLON           reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    AS              reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    ARROW           reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    STRING          reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    RIGHT_CBRAC     reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    VARIABLE        reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    DOUBLE_POINT    reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    DOUBLE_ARROW    reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    ELLIPSIS        reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    ARRAY           reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    CALLABLE        reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    ITERABLE        reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    BOOL            reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    FLOAT           reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    INT             reduce using rule 29 (primary_expression -> postfix_decrement_expression .)
    INSTANCEOF      reduce using rule 29 (primary_expression -> postfix_decrement_expression .)


state 212

    (30) primary_expression -> prefix_increment_expression .

    DOUBLEASTERISK  reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    ASTERISK        reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    DIVIDE          reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    MODULO          reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    PLUS            reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    LESS            reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    CONCAT          reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    SL              reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    SR              reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    LESS_THAN       reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    SPACESHIP       reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    EQUAL           reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    IS_NOT_EQUAL    reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    IS_IDENTICAL    reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    IS_NOT_IDENTICAL reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    AMPERSAND       reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    BITWISE_XOR     reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    BITWISE_OR      reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    COALESCE        reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    TERNARY_OPERATION reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    AND             reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    XOR             reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    OR              reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    SEMICOLON       reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    INCLUDE         reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    INCLUDE_ONCE    reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    REQUIRE         reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    REQUIRE_ONCE    reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    PRINT           reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    YIELD           reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    YIELD_FROM      reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    RIGHT_PARENTHESIS reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    COLON           reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    AS              reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    ARROW           reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    STRING          reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    RIGHT_CBRAC     reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    VARIABLE        reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    DOUBLE_POINT    reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    DOUBLE_ARROW    reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    ELLIPSIS        reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    ARRAY           reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    CALLABLE        reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    ITERABLE        reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    BOOL            reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    FLOAT           reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    INT             reduce using rule 30 (primary_expression -> prefix_increment_expression .)
    INSTANCEOF      reduce using rule 30 (primary_expression -> prefix_increment_expression .)


state 213

    (31) primary_expression -> prefix_decrement_expression .

    DOUBLEASTERISK  reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    ASTERISK        reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    DIVIDE          reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    MODULO          reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    PLUS            reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    LESS            reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    CONCAT          reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    SL              reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    SR              reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    LESS_THAN       reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    SPACESHIP       reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    EQUAL           reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    IS_NOT_EQUAL    reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    IS_IDENTICAL    reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    IS_NOT_IDENTICAL reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    AMPERSAND       reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    BITWISE_XOR     reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    BITWISE_OR      reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    COALESCE        reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    TERNARY_OPERATION reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    AND             reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    XOR             reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    OR              reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    SEMICOLON       reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    INCLUDE         reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    INCLUDE_ONCE    reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    REQUIRE         reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    REQUIRE_ONCE    reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    PRINT           reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    YIELD           reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    YIELD_FROM      reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    RIGHT_PARENTHESIS reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    COLON           reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    AS              reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    ARROW           reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    STRING          reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    RIGHT_CBRAC     reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    VARIABLE        reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    DOUBLE_POINT    reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    DOUBLE_ARROW    reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    ELLIPSIS        reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    ARRAY           reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    CALLABLE        reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    ITERABLE        reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    BOOL            reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    FLOAT           reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    INT             reduce using rule 31 (primary_expression -> prefix_decrement_expression .)
    INSTANCEOF      reduce using rule 31 (primary_expression -> prefix_decrement_expression .)


state 214

    (32) primary_expression -> byref_assignment_expression .

    DOUBLEASTERISK  reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    ASTERISK        reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    DIVIDE          reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    MODULO          reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    PLUS            reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    LESS            reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    CONCAT          reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    SL              reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    SR              reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    LESS_THAN       reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    SPACESHIP       reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    EQUAL           reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    IS_NOT_EQUAL    reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    IS_IDENTICAL    reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    IS_NOT_IDENTICAL reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    AMPERSAND       reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    BITWISE_XOR     reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    BITWISE_OR      reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    COALESCE        reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    TERNARY_OPERATION reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    AND             reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    XOR             reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    OR              reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    SEMICOLON       reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    INCLUDE         reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    INCLUDE_ONCE    reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    REQUIRE         reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    REQUIRE_ONCE    reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    PRINT           reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    YIELD           reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    YIELD_FROM      reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    COLON           reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    AS              reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    ARROW           reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    STRING          reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    RIGHT_CBRAC     reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    VARIABLE        reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    DOUBLE_POINT    reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    DOUBLE_ARROW    reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    ELLIPSIS        reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    ARRAY           reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    CALLABLE        reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    ITERABLE        reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    BOOL            reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    FLOAT           reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    INT             reduce using rule 32 (primary_expression -> byref_assignment_expression .)
    INSTANCEOF      reduce using rule 32 (primary_expression -> byref_assignment_expression .)


state 215

    (33) primary_expression -> shell_command_expression .

    DOUBLEASTERISK  reduce using rule 33 (primary_expression -> shell_command_expression .)
    ASTERISK        reduce using rule 33 (primary_expression -> shell_command_expression .)
    DIVIDE          reduce using rule 33 (primary_expression -> shell_command_expression .)
    MODULO          reduce using rule 33 (primary_expression -> shell_command_expression .)
    PLUS            reduce using rule 33 (primary_expression -> shell_command_expression .)
    LESS            reduce using rule 33 (primary_expression -> shell_command_expression .)
    CONCAT          reduce using rule 33 (primary_expression -> shell_command_expression .)
    SL              reduce using rule 33 (primary_expression -> shell_command_expression .)
    SR              reduce using rule 33 (primary_expression -> shell_command_expression .)
    LESS_THAN       reduce using rule 33 (primary_expression -> shell_command_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 33 (primary_expression -> shell_command_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 33 (primary_expression -> shell_command_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 33 (primary_expression -> shell_command_expression .)
    SPACESHIP       reduce using rule 33 (primary_expression -> shell_command_expression .)
    EQUAL           reduce using rule 33 (primary_expression -> shell_command_expression .)
    IS_NOT_EQUAL    reduce using rule 33 (primary_expression -> shell_command_expression .)
    IS_IDENTICAL    reduce using rule 33 (primary_expression -> shell_command_expression .)
    IS_NOT_IDENTICAL reduce using rule 33 (primary_expression -> shell_command_expression .)
    AMPERSAND       reduce using rule 33 (primary_expression -> shell_command_expression .)
    BITWISE_XOR     reduce using rule 33 (primary_expression -> shell_command_expression .)
    BITWISE_OR      reduce using rule 33 (primary_expression -> shell_command_expression .)
    COALESCE        reduce using rule 33 (primary_expression -> shell_command_expression .)
    TERNARY_OPERATION reduce using rule 33 (primary_expression -> shell_command_expression .)
    AND             reduce using rule 33 (primary_expression -> shell_command_expression .)
    XOR             reduce using rule 33 (primary_expression -> shell_command_expression .)
    OR              reduce using rule 33 (primary_expression -> shell_command_expression .)
    SEMICOLON       reduce using rule 33 (primary_expression -> shell_command_expression .)
    INCLUDE         reduce using rule 33 (primary_expression -> shell_command_expression .)
    INCLUDE_ONCE    reduce using rule 33 (primary_expression -> shell_command_expression .)
    REQUIRE         reduce using rule 33 (primary_expression -> shell_command_expression .)
    REQUIRE_ONCE    reduce using rule 33 (primary_expression -> shell_command_expression .)
    PRINT           reduce using rule 33 (primary_expression -> shell_command_expression .)
    YIELD           reduce using rule 33 (primary_expression -> shell_command_expression .)
    YIELD_FROM      reduce using rule 33 (primary_expression -> shell_command_expression .)
    RIGHT_PARENTHESIS reduce using rule 33 (primary_expression -> shell_command_expression .)
    COLON           reduce using rule 33 (primary_expression -> shell_command_expression .)
    AS              reduce using rule 33 (primary_expression -> shell_command_expression .)
    ARROW           reduce using rule 33 (primary_expression -> shell_command_expression .)
    STRING          reduce using rule 33 (primary_expression -> shell_command_expression .)
    RIGHT_CBRAC     reduce using rule 33 (primary_expression -> shell_command_expression .)
    VARIABLE        reduce using rule 33 (primary_expression -> shell_command_expression .)
    DOUBLE_POINT    reduce using rule 33 (primary_expression -> shell_command_expression .)
    DOUBLE_ARROW    reduce using rule 33 (primary_expression -> shell_command_expression .)
    ELLIPSIS        reduce using rule 33 (primary_expression -> shell_command_expression .)
    ARRAY           reduce using rule 33 (primary_expression -> shell_command_expression .)
    CALLABLE        reduce using rule 33 (primary_expression -> shell_command_expression .)
    ITERABLE        reduce using rule 33 (primary_expression -> shell_command_expression .)
    BOOL            reduce using rule 33 (primary_expression -> shell_command_expression .)
    FLOAT           reduce using rule 33 (primary_expression -> shell_command_expression .)
    INT             reduce using rule 33 (primary_expression -> shell_command_expression .)
    INSTANCEOF      reduce using rule 33 (primary_expression -> shell_command_expression .)


state 216

    (55) literal -> integer_literal .

    DOUBLEASTERISK  reduce using rule 55 (literal -> integer_literal .)
    ASTERISK        reduce using rule 55 (literal -> integer_literal .)
    DIVIDE          reduce using rule 55 (literal -> integer_literal .)
    MODULO          reduce using rule 55 (literal -> integer_literal .)
    PLUS            reduce using rule 55 (literal -> integer_literal .)
    LESS            reduce using rule 55 (literal -> integer_literal .)
    CONCAT          reduce using rule 55 (literal -> integer_literal .)
    SL              reduce using rule 55 (literal -> integer_literal .)
    SR              reduce using rule 55 (literal -> integer_literal .)
    LESS_THAN       reduce using rule 55 (literal -> integer_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 55 (literal -> integer_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 55 (literal -> integer_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 55 (literal -> integer_literal .)
    SPACESHIP       reduce using rule 55 (literal -> integer_literal .)
    EQUAL           reduce using rule 55 (literal -> integer_literal .)
    IS_NOT_EQUAL    reduce using rule 55 (literal -> integer_literal .)
    IS_IDENTICAL    reduce using rule 55 (literal -> integer_literal .)
    IS_NOT_IDENTICAL reduce using rule 55 (literal -> integer_literal .)
    AMPERSAND       reduce using rule 55 (literal -> integer_literal .)
    BITWISE_XOR     reduce using rule 55 (literal -> integer_literal .)
    BITWISE_OR      reduce using rule 55 (literal -> integer_literal .)
    COALESCE        reduce using rule 55 (literal -> integer_literal .)
    TERNARY_OPERATION reduce using rule 55 (literal -> integer_literal .)
    AND             reduce using rule 55 (literal -> integer_literal .)
    XOR             reduce using rule 55 (literal -> integer_literal .)
    OR              reduce using rule 55 (literal -> integer_literal .)
    SEMICOLON       reduce using rule 55 (literal -> integer_literal .)
    INCLUDE         reduce using rule 55 (literal -> integer_literal .)
    INCLUDE_ONCE    reduce using rule 55 (literal -> integer_literal .)
    REQUIRE         reduce using rule 55 (literal -> integer_literal .)
    REQUIRE_ONCE    reduce using rule 55 (literal -> integer_literal .)
    PRINT           reduce using rule 55 (literal -> integer_literal .)
    YIELD           reduce using rule 55 (literal -> integer_literal .)
    YIELD_FROM      reduce using rule 55 (literal -> integer_literal .)
    RIGHT_PARENTHESIS reduce using rule 55 (literal -> integer_literal .)
    COLON           reduce using rule 55 (literal -> integer_literal .)
    AS              reduce using rule 55 (literal -> integer_literal .)
    ARROW           reduce using rule 55 (literal -> integer_literal .)
    STRING          reduce using rule 55 (literal -> integer_literal .)
    RIGHT_CBRAC     reduce using rule 55 (literal -> integer_literal .)
    VARIABLE        reduce using rule 55 (literal -> integer_literal .)
    DOUBLE_POINT    reduce using rule 55 (literal -> integer_literal .)
    DOUBLE_ARROW    reduce using rule 55 (literal -> integer_literal .)
    ELLIPSIS        reduce using rule 55 (literal -> integer_literal .)
    ARRAY           reduce using rule 55 (literal -> integer_literal .)
    CALLABLE        reduce using rule 55 (literal -> integer_literal .)
    ITERABLE        reduce using rule 55 (literal -> integer_literal .)
    BOOL            reduce using rule 55 (literal -> integer_literal .)
    FLOAT           reduce using rule 55 (literal -> integer_literal .)
    INT             reduce using rule 55 (literal -> integer_literal .)
    INSTANCEOF      reduce using rule 55 (literal -> integer_literal .)


state 217

    (56) literal -> floating_literal .

    DOUBLEASTERISK  reduce using rule 56 (literal -> floating_literal .)
    ASTERISK        reduce using rule 56 (literal -> floating_literal .)
    DIVIDE          reduce using rule 56 (literal -> floating_literal .)
    MODULO          reduce using rule 56 (literal -> floating_literal .)
    PLUS            reduce using rule 56 (literal -> floating_literal .)
    LESS            reduce using rule 56 (literal -> floating_literal .)
    CONCAT          reduce using rule 56 (literal -> floating_literal .)
    SL              reduce using rule 56 (literal -> floating_literal .)
    SR              reduce using rule 56 (literal -> floating_literal .)
    LESS_THAN       reduce using rule 56 (literal -> floating_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 56 (literal -> floating_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 56 (literal -> floating_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 56 (literal -> floating_literal .)
    SPACESHIP       reduce using rule 56 (literal -> floating_literal .)
    EQUAL           reduce using rule 56 (literal -> floating_literal .)
    IS_NOT_EQUAL    reduce using rule 56 (literal -> floating_literal .)
    IS_IDENTICAL    reduce using rule 56 (literal -> floating_literal .)
    IS_NOT_IDENTICAL reduce using rule 56 (literal -> floating_literal .)
    AMPERSAND       reduce using rule 56 (literal -> floating_literal .)
    BITWISE_XOR     reduce using rule 56 (literal -> floating_literal .)
    BITWISE_OR      reduce using rule 56 (literal -> floating_literal .)
    COALESCE        reduce using rule 56 (literal -> floating_literal .)
    TERNARY_OPERATION reduce using rule 56 (literal -> floating_literal .)
    AND             reduce using rule 56 (literal -> floating_literal .)
    XOR             reduce using rule 56 (literal -> floating_literal .)
    OR              reduce using rule 56 (literal -> floating_literal .)
    SEMICOLON       reduce using rule 56 (literal -> floating_literal .)
    INCLUDE         reduce using rule 56 (literal -> floating_literal .)
    INCLUDE_ONCE    reduce using rule 56 (literal -> floating_literal .)
    REQUIRE         reduce using rule 56 (literal -> floating_literal .)
    REQUIRE_ONCE    reduce using rule 56 (literal -> floating_literal .)
    PRINT           reduce using rule 56 (literal -> floating_literal .)
    YIELD           reduce using rule 56 (literal -> floating_literal .)
    YIELD_FROM      reduce using rule 56 (literal -> floating_literal .)
    RIGHT_PARENTHESIS reduce using rule 56 (literal -> floating_literal .)
    COLON           reduce using rule 56 (literal -> floating_literal .)
    AS              reduce using rule 56 (literal -> floating_literal .)
    ARROW           reduce using rule 56 (literal -> floating_literal .)
    STRING          reduce using rule 56 (literal -> floating_literal .)
    RIGHT_CBRAC     reduce using rule 56 (literal -> floating_literal .)
    VARIABLE        reduce using rule 56 (literal -> floating_literal .)
    DOUBLE_POINT    reduce using rule 56 (literal -> floating_literal .)
    DOUBLE_ARROW    reduce using rule 56 (literal -> floating_literal .)
    ELLIPSIS        reduce using rule 56 (literal -> floating_literal .)
    ARRAY           reduce using rule 56 (literal -> floating_literal .)
    CALLABLE        reduce using rule 56 (literal -> floating_literal .)
    ITERABLE        reduce using rule 56 (literal -> floating_literal .)
    BOOL            reduce using rule 56 (literal -> floating_literal .)
    FLOAT           reduce using rule 56 (literal -> floating_literal .)
    INT             reduce using rule 56 (literal -> floating_literal .)
    INSTANCEOF      reduce using rule 56 (literal -> floating_literal .)


state 218

    (61) intrinsic -> empty_intrinsic .

    DOUBLEASTERISK  reduce using rule 61 (intrinsic -> empty_intrinsic .)
    ASTERISK        reduce using rule 61 (intrinsic -> empty_intrinsic .)
    DIVIDE          reduce using rule 61 (intrinsic -> empty_intrinsic .)
    MODULO          reduce using rule 61 (intrinsic -> empty_intrinsic .)
    PLUS            reduce using rule 61 (intrinsic -> empty_intrinsic .)
    LESS            reduce using rule 61 (intrinsic -> empty_intrinsic .)
    CONCAT          reduce using rule 61 (intrinsic -> empty_intrinsic .)
    SL              reduce using rule 61 (intrinsic -> empty_intrinsic .)
    SR              reduce using rule 61 (intrinsic -> empty_intrinsic .)
    LESS_THAN       reduce using rule 61 (intrinsic -> empty_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 61 (intrinsic -> empty_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 61 (intrinsic -> empty_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 61 (intrinsic -> empty_intrinsic .)
    SPACESHIP       reduce using rule 61 (intrinsic -> empty_intrinsic .)
    EQUAL           reduce using rule 61 (intrinsic -> empty_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 61 (intrinsic -> empty_intrinsic .)
    IS_IDENTICAL    reduce using rule 61 (intrinsic -> empty_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 61 (intrinsic -> empty_intrinsic .)
    AMPERSAND       reduce using rule 61 (intrinsic -> empty_intrinsic .)
    BITWISE_XOR     reduce using rule 61 (intrinsic -> empty_intrinsic .)
    BITWISE_OR      reduce using rule 61 (intrinsic -> empty_intrinsic .)
    COALESCE        reduce using rule 61 (intrinsic -> empty_intrinsic .)
    TERNARY_OPERATION reduce using rule 61 (intrinsic -> empty_intrinsic .)
    AND             reduce using rule 61 (intrinsic -> empty_intrinsic .)
    XOR             reduce using rule 61 (intrinsic -> empty_intrinsic .)
    OR              reduce using rule 61 (intrinsic -> empty_intrinsic .)
    SEMICOLON       reduce using rule 61 (intrinsic -> empty_intrinsic .)
    INCLUDE         reduce using rule 61 (intrinsic -> empty_intrinsic .)
    INCLUDE_ONCE    reduce using rule 61 (intrinsic -> empty_intrinsic .)
    REQUIRE         reduce using rule 61 (intrinsic -> empty_intrinsic .)
    REQUIRE_ONCE    reduce using rule 61 (intrinsic -> empty_intrinsic .)
    PRINT           reduce using rule 61 (intrinsic -> empty_intrinsic .)
    YIELD           reduce using rule 61 (intrinsic -> empty_intrinsic .)
    YIELD_FROM      reduce using rule 61 (intrinsic -> empty_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 61 (intrinsic -> empty_intrinsic .)
    COLON           reduce using rule 61 (intrinsic -> empty_intrinsic .)
    AS              reduce using rule 61 (intrinsic -> empty_intrinsic .)
    ARROW           reduce using rule 61 (intrinsic -> empty_intrinsic .)
    STRING          reduce using rule 61 (intrinsic -> empty_intrinsic .)
    RIGHT_CBRAC     reduce using rule 61 (intrinsic -> empty_intrinsic .)
    VARIABLE        reduce using rule 61 (intrinsic -> empty_intrinsic .)
    DOUBLE_POINT    reduce using rule 61 (intrinsic -> empty_intrinsic .)
    DOUBLE_ARROW    reduce using rule 61 (intrinsic -> empty_intrinsic .)
    ELLIPSIS        reduce using rule 61 (intrinsic -> empty_intrinsic .)
    ARRAY           reduce using rule 61 (intrinsic -> empty_intrinsic .)
    CALLABLE        reduce using rule 61 (intrinsic -> empty_intrinsic .)
    ITERABLE        reduce using rule 61 (intrinsic -> empty_intrinsic .)
    BOOL            reduce using rule 61 (intrinsic -> empty_intrinsic .)
    FLOAT           reduce using rule 61 (intrinsic -> empty_intrinsic .)
    INT             reduce using rule 61 (intrinsic -> empty_intrinsic .)
    INSTANCEOF      reduce using rule 61 (intrinsic -> empty_intrinsic .)


state 219

    (62) intrinsic -> eval_intrinsic .

    DOUBLEASTERISK  reduce using rule 62 (intrinsic -> eval_intrinsic .)
    ASTERISK        reduce using rule 62 (intrinsic -> eval_intrinsic .)
    DIVIDE          reduce using rule 62 (intrinsic -> eval_intrinsic .)
    MODULO          reduce using rule 62 (intrinsic -> eval_intrinsic .)
    PLUS            reduce using rule 62 (intrinsic -> eval_intrinsic .)
    LESS            reduce using rule 62 (intrinsic -> eval_intrinsic .)
    CONCAT          reduce using rule 62 (intrinsic -> eval_intrinsic .)
    SL              reduce using rule 62 (intrinsic -> eval_intrinsic .)
    SR              reduce using rule 62 (intrinsic -> eval_intrinsic .)
    LESS_THAN       reduce using rule 62 (intrinsic -> eval_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 62 (intrinsic -> eval_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 62 (intrinsic -> eval_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (intrinsic -> eval_intrinsic .)
    SPACESHIP       reduce using rule 62 (intrinsic -> eval_intrinsic .)
    EQUAL           reduce using rule 62 (intrinsic -> eval_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 62 (intrinsic -> eval_intrinsic .)
    IS_IDENTICAL    reduce using rule 62 (intrinsic -> eval_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 62 (intrinsic -> eval_intrinsic .)
    AMPERSAND       reduce using rule 62 (intrinsic -> eval_intrinsic .)
    BITWISE_XOR     reduce using rule 62 (intrinsic -> eval_intrinsic .)
    BITWISE_OR      reduce using rule 62 (intrinsic -> eval_intrinsic .)
    COALESCE        reduce using rule 62 (intrinsic -> eval_intrinsic .)
    TERNARY_OPERATION reduce using rule 62 (intrinsic -> eval_intrinsic .)
    AND             reduce using rule 62 (intrinsic -> eval_intrinsic .)
    XOR             reduce using rule 62 (intrinsic -> eval_intrinsic .)
    OR              reduce using rule 62 (intrinsic -> eval_intrinsic .)
    SEMICOLON       reduce using rule 62 (intrinsic -> eval_intrinsic .)
    INCLUDE         reduce using rule 62 (intrinsic -> eval_intrinsic .)
    INCLUDE_ONCE    reduce using rule 62 (intrinsic -> eval_intrinsic .)
    REQUIRE         reduce using rule 62 (intrinsic -> eval_intrinsic .)
    REQUIRE_ONCE    reduce using rule 62 (intrinsic -> eval_intrinsic .)
    PRINT           reduce using rule 62 (intrinsic -> eval_intrinsic .)
    YIELD           reduce using rule 62 (intrinsic -> eval_intrinsic .)
    YIELD_FROM      reduce using rule 62 (intrinsic -> eval_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 62 (intrinsic -> eval_intrinsic .)
    COLON           reduce using rule 62 (intrinsic -> eval_intrinsic .)
    AS              reduce using rule 62 (intrinsic -> eval_intrinsic .)
    ARROW           reduce using rule 62 (intrinsic -> eval_intrinsic .)
    STRING          reduce using rule 62 (intrinsic -> eval_intrinsic .)
    RIGHT_CBRAC     reduce using rule 62 (intrinsic -> eval_intrinsic .)
    VARIABLE        reduce using rule 62 (intrinsic -> eval_intrinsic .)
    DOUBLE_POINT    reduce using rule 62 (intrinsic -> eval_intrinsic .)
    DOUBLE_ARROW    reduce using rule 62 (intrinsic -> eval_intrinsic .)
    ELLIPSIS        reduce using rule 62 (intrinsic -> eval_intrinsic .)
    ARRAY           reduce using rule 62 (intrinsic -> eval_intrinsic .)
    CALLABLE        reduce using rule 62 (intrinsic -> eval_intrinsic .)
    ITERABLE        reduce using rule 62 (intrinsic -> eval_intrinsic .)
    BOOL            reduce using rule 62 (intrinsic -> eval_intrinsic .)
    FLOAT           reduce using rule 62 (intrinsic -> eval_intrinsic .)
    INT             reduce using rule 62 (intrinsic -> eval_intrinsic .)
    INSTANCEOF      reduce using rule 62 (intrinsic -> eval_intrinsic .)


state 220

    (63) intrinsic -> exit_intrinsic .

    DOUBLEASTERISK  reduce using rule 63 (intrinsic -> exit_intrinsic .)
    ASTERISK        reduce using rule 63 (intrinsic -> exit_intrinsic .)
    DIVIDE          reduce using rule 63 (intrinsic -> exit_intrinsic .)
    MODULO          reduce using rule 63 (intrinsic -> exit_intrinsic .)
    PLUS            reduce using rule 63 (intrinsic -> exit_intrinsic .)
    LESS            reduce using rule 63 (intrinsic -> exit_intrinsic .)
    CONCAT          reduce using rule 63 (intrinsic -> exit_intrinsic .)
    SL              reduce using rule 63 (intrinsic -> exit_intrinsic .)
    SR              reduce using rule 63 (intrinsic -> exit_intrinsic .)
    LESS_THAN       reduce using rule 63 (intrinsic -> exit_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 63 (intrinsic -> exit_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 63 (intrinsic -> exit_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 63 (intrinsic -> exit_intrinsic .)
    SPACESHIP       reduce using rule 63 (intrinsic -> exit_intrinsic .)
    EQUAL           reduce using rule 63 (intrinsic -> exit_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 63 (intrinsic -> exit_intrinsic .)
    IS_IDENTICAL    reduce using rule 63 (intrinsic -> exit_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 63 (intrinsic -> exit_intrinsic .)
    AMPERSAND       reduce using rule 63 (intrinsic -> exit_intrinsic .)
    BITWISE_XOR     reduce using rule 63 (intrinsic -> exit_intrinsic .)
    BITWISE_OR      reduce using rule 63 (intrinsic -> exit_intrinsic .)
    COALESCE        reduce using rule 63 (intrinsic -> exit_intrinsic .)
    TERNARY_OPERATION reduce using rule 63 (intrinsic -> exit_intrinsic .)
    AND             reduce using rule 63 (intrinsic -> exit_intrinsic .)
    XOR             reduce using rule 63 (intrinsic -> exit_intrinsic .)
    OR              reduce using rule 63 (intrinsic -> exit_intrinsic .)
    SEMICOLON       reduce using rule 63 (intrinsic -> exit_intrinsic .)
    INCLUDE         reduce using rule 63 (intrinsic -> exit_intrinsic .)
    INCLUDE_ONCE    reduce using rule 63 (intrinsic -> exit_intrinsic .)
    REQUIRE         reduce using rule 63 (intrinsic -> exit_intrinsic .)
    REQUIRE_ONCE    reduce using rule 63 (intrinsic -> exit_intrinsic .)
    PRINT           reduce using rule 63 (intrinsic -> exit_intrinsic .)
    YIELD           reduce using rule 63 (intrinsic -> exit_intrinsic .)
    YIELD_FROM      reduce using rule 63 (intrinsic -> exit_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 63 (intrinsic -> exit_intrinsic .)
    COLON           reduce using rule 63 (intrinsic -> exit_intrinsic .)
    AS              reduce using rule 63 (intrinsic -> exit_intrinsic .)
    ARROW           reduce using rule 63 (intrinsic -> exit_intrinsic .)
    STRING          reduce using rule 63 (intrinsic -> exit_intrinsic .)
    RIGHT_CBRAC     reduce using rule 63 (intrinsic -> exit_intrinsic .)
    VARIABLE        reduce using rule 63 (intrinsic -> exit_intrinsic .)
    DOUBLE_POINT    reduce using rule 63 (intrinsic -> exit_intrinsic .)
    DOUBLE_ARROW    reduce using rule 63 (intrinsic -> exit_intrinsic .)
    ELLIPSIS        reduce using rule 63 (intrinsic -> exit_intrinsic .)
    ARRAY           reduce using rule 63 (intrinsic -> exit_intrinsic .)
    CALLABLE        reduce using rule 63 (intrinsic -> exit_intrinsic .)
    ITERABLE        reduce using rule 63 (intrinsic -> exit_intrinsic .)
    BOOL            reduce using rule 63 (intrinsic -> exit_intrinsic .)
    FLOAT           reduce using rule 63 (intrinsic -> exit_intrinsic .)
    INT             reduce using rule 63 (intrinsic -> exit_intrinsic .)
    INSTANCEOF      reduce using rule 63 (intrinsic -> exit_intrinsic .)


state 221

    (64) intrinsic -> isset_intrinsic .

    DOUBLEASTERISK  reduce using rule 64 (intrinsic -> isset_intrinsic .)
    ASTERISK        reduce using rule 64 (intrinsic -> isset_intrinsic .)
    DIVIDE          reduce using rule 64 (intrinsic -> isset_intrinsic .)
    MODULO          reduce using rule 64 (intrinsic -> isset_intrinsic .)
    PLUS            reduce using rule 64 (intrinsic -> isset_intrinsic .)
    LESS            reduce using rule 64 (intrinsic -> isset_intrinsic .)
    CONCAT          reduce using rule 64 (intrinsic -> isset_intrinsic .)
    SL              reduce using rule 64 (intrinsic -> isset_intrinsic .)
    SR              reduce using rule 64 (intrinsic -> isset_intrinsic .)
    LESS_THAN       reduce using rule 64 (intrinsic -> isset_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 64 (intrinsic -> isset_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 64 (intrinsic -> isset_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 64 (intrinsic -> isset_intrinsic .)
    SPACESHIP       reduce using rule 64 (intrinsic -> isset_intrinsic .)
    EQUAL           reduce using rule 64 (intrinsic -> isset_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 64 (intrinsic -> isset_intrinsic .)
    IS_IDENTICAL    reduce using rule 64 (intrinsic -> isset_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 64 (intrinsic -> isset_intrinsic .)
    AMPERSAND       reduce using rule 64 (intrinsic -> isset_intrinsic .)
    BITWISE_XOR     reduce using rule 64 (intrinsic -> isset_intrinsic .)
    BITWISE_OR      reduce using rule 64 (intrinsic -> isset_intrinsic .)
    COALESCE        reduce using rule 64 (intrinsic -> isset_intrinsic .)
    TERNARY_OPERATION reduce using rule 64 (intrinsic -> isset_intrinsic .)
    AND             reduce using rule 64 (intrinsic -> isset_intrinsic .)
    XOR             reduce using rule 64 (intrinsic -> isset_intrinsic .)
    OR              reduce using rule 64 (intrinsic -> isset_intrinsic .)
    SEMICOLON       reduce using rule 64 (intrinsic -> isset_intrinsic .)
    INCLUDE         reduce using rule 64 (intrinsic -> isset_intrinsic .)
    INCLUDE_ONCE    reduce using rule 64 (intrinsic -> isset_intrinsic .)
    REQUIRE         reduce using rule 64 (intrinsic -> isset_intrinsic .)
    REQUIRE_ONCE    reduce using rule 64 (intrinsic -> isset_intrinsic .)
    PRINT           reduce using rule 64 (intrinsic -> isset_intrinsic .)
    YIELD           reduce using rule 64 (intrinsic -> isset_intrinsic .)
    YIELD_FROM      reduce using rule 64 (intrinsic -> isset_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 64 (intrinsic -> isset_intrinsic .)
    COLON           reduce using rule 64 (intrinsic -> isset_intrinsic .)
    AS              reduce using rule 64 (intrinsic -> isset_intrinsic .)
    ARROW           reduce using rule 64 (intrinsic -> isset_intrinsic .)
    STRING          reduce using rule 64 (intrinsic -> isset_intrinsic .)
    RIGHT_CBRAC     reduce using rule 64 (intrinsic -> isset_intrinsic .)
    VARIABLE        reduce using rule 64 (intrinsic -> isset_intrinsic .)
    DOUBLE_POINT    reduce using rule 64 (intrinsic -> isset_intrinsic .)
    DOUBLE_ARROW    reduce using rule 64 (intrinsic -> isset_intrinsic .)
    ELLIPSIS        reduce using rule 64 (intrinsic -> isset_intrinsic .)
    ARRAY           reduce using rule 64 (intrinsic -> isset_intrinsic .)
    CALLABLE        reduce using rule 64 (intrinsic -> isset_intrinsic .)
    ITERABLE        reduce using rule 64 (intrinsic -> isset_intrinsic .)
    BOOL            reduce using rule 64 (intrinsic -> isset_intrinsic .)
    FLOAT           reduce using rule 64 (intrinsic -> isset_intrinsic .)
    INT             reduce using rule 64 (intrinsic -> isset_intrinsic .)
    INSTANCEOF      reduce using rule 64 (intrinsic -> isset_intrinsic .)


state 222

    (75) anonymous_function_creation_expression -> static_opt . FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement

    FUNCTION        shift and go to state 373


state 223

    (89) object_creation_expression -> NEW . class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> NEW . class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> NEW . class_type_designator
    (92) object_creation_expression -> NEW . CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> NEW . CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (102) class_type_designator -> . qualified_name
    (103) class_type_designator -> . new_variable
    (545) qualified_name -> . name
    (104) new_variable -> . simple_variable
    (105) new_variable -> . new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
    (106) new_variable -> . new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS
    (107) new_variable -> . new_variable ARROW member_name
    (108) new_variable -> . qualified_name DOUBLE_COLON simple_variable
    (109) new_variable -> . relative_scope DOUBLE_COLON simple_variable
    (110) new_variable -> . new_variable DOUBLE_COLON simple_variable
    (555) name -> . STRING
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC

    CLASS           shift and go to state 375
    STRING          shift and go to state 51
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253

    class_type_designator          shift and go to state 374
    qualified_name                 shift and go to state 376
    new_variable                   shift and go to state 377
    name                           shift and go to state 175
    simple_variable                shift and go to state 378
    relative_scope                 shift and go to state 379

state 224

    (144) prefix_increment_expression -> DOUBLEPLUS . variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable                       shift and go to state 380
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 225

    (145) prefix_decrement_expression -> DOUBLELESS . variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable                       shift and go to state 381
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 226

    (146) shell_command_expression -> BACKTICK . dq_char_sequence_opt BACKTICK
    (147) dq_char_sequence_opt -> . DQ_CHAR_SEQUENCE
    (148) dq_char_sequence_opt -> .

    DQ_CHAR_SEQUENCE shift and go to state 383
    BACKTICK        reduce using rule 148 (dq_char_sequence_opt -> .)

    dq_char_sequence_opt           shift and go to state 382

state 227

    (58) integer_literal -> LNUMBER .

    DOUBLEASTERISK  reduce using rule 58 (integer_literal -> LNUMBER .)
    ASTERISK        reduce using rule 58 (integer_literal -> LNUMBER .)
    DIVIDE          reduce using rule 58 (integer_literal -> LNUMBER .)
    MODULO          reduce using rule 58 (integer_literal -> LNUMBER .)
    PLUS            reduce using rule 58 (integer_literal -> LNUMBER .)
    LESS            reduce using rule 58 (integer_literal -> LNUMBER .)
    CONCAT          reduce using rule 58 (integer_literal -> LNUMBER .)
    SL              reduce using rule 58 (integer_literal -> LNUMBER .)
    SR              reduce using rule 58 (integer_literal -> LNUMBER .)
    LESS_THAN       reduce using rule 58 (integer_literal -> LNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 58 (integer_literal -> LNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 58 (integer_literal -> LNUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 58 (integer_literal -> LNUMBER .)
    SPACESHIP       reduce using rule 58 (integer_literal -> LNUMBER .)
    EQUAL           reduce using rule 58 (integer_literal -> LNUMBER .)
    IS_NOT_EQUAL    reduce using rule 58 (integer_literal -> LNUMBER .)
    IS_IDENTICAL    reduce using rule 58 (integer_literal -> LNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 58 (integer_literal -> LNUMBER .)
    AMPERSAND       reduce using rule 58 (integer_literal -> LNUMBER .)
    BITWISE_XOR     reduce using rule 58 (integer_literal -> LNUMBER .)
    BITWISE_OR      reduce using rule 58 (integer_literal -> LNUMBER .)
    COALESCE        reduce using rule 58 (integer_literal -> LNUMBER .)
    TERNARY_OPERATION reduce using rule 58 (integer_literal -> LNUMBER .)
    AND             reduce using rule 58 (integer_literal -> LNUMBER .)
    XOR             reduce using rule 58 (integer_literal -> LNUMBER .)
    OR              reduce using rule 58 (integer_literal -> LNUMBER .)
    SEMICOLON       reduce using rule 58 (integer_literal -> LNUMBER .)
    INCLUDE         reduce using rule 58 (integer_literal -> LNUMBER .)
    INCLUDE_ONCE    reduce using rule 58 (integer_literal -> LNUMBER .)
    REQUIRE         reduce using rule 58 (integer_literal -> LNUMBER .)
    REQUIRE_ONCE    reduce using rule 58 (integer_literal -> LNUMBER .)
    PRINT           reduce using rule 58 (integer_literal -> LNUMBER .)
    YIELD           reduce using rule 58 (integer_literal -> LNUMBER .)
    YIELD_FROM      reduce using rule 58 (integer_literal -> LNUMBER .)
    RIGHT_PARENTHESIS reduce using rule 58 (integer_literal -> LNUMBER .)
    COLON           reduce using rule 58 (integer_literal -> LNUMBER .)
    AS              reduce using rule 58 (integer_literal -> LNUMBER .)
    ARROW           reduce using rule 58 (integer_literal -> LNUMBER .)
    STRING          reduce using rule 58 (integer_literal -> LNUMBER .)
    RIGHT_CBRAC     reduce using rule 58 (integer_literal -> LNUMBER .)
    VARIABLE        reduce using rule 58 (integer_literal -> LNUMBER .)
    DOUBLE_POINT    reduce using rule 58 (integer_literal -> LNUMBER .)
    DOUBLE_ARROW    reduce using rule 58 (integer_literal -> LNUMBER .)
    ELLIPSIS        reduce using rule 58 (integer_literal -> LNUMBER .)
    ARRAY           reduce using rule 58 (integer_literal -> LNUMBER .)
    CALLABLE        reduce using rule 58 (integer_literal -> LNUMBER .)
    ITERABLE        reduce using rule 58 (integer_literal -> LNUMBER .)
    BOOL            reduce using rule 58 (integer_literal -> LNUMBER .)
    FLOAT           reduce using rule 58 (integer_literal -> LNUMBER .)
    INT             reduce using rule 58 (integer_literal -> LNUMBER .)
    INSTANCEOF      reduce using rule 58 (integer_literal -> LNUMBER .)


state 228

    (59) floating_literal -> DNUMBER .

    DOUBLEASTERISK  reduce using rule 59 (floating_literal -> DNUMBER .)
    ASTERISK        reduce using rule 59 (floating_literal -> DNUMBER .)
    DIVIDE          reduce using rule 59 (floating_literal -> DNUMBER .)
    MODULO          reduce using rule 59 (floating_literal -> DNUMBER .)
    PLUS            reduce using rule 59 (floating_literal -> DNUMBER .)
    LESS            reduce using rule 59 (floating_literal -> DNUMBER .)
    CONCAT          reduce using rule 59 (floating_literal -> DNUMBER .)
    SL              reduce using rule 59 (floating_literal -> DNUMBER .)
    SR              reduce using rule 59 (floating_literal -> DNUMBER .)
    LESS_THAN       reduce using rule 59 (floating_literal -> DNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 59 (floating_literal -> DNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 59 (floating_literal -> DNUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 59 (floating_literal -> DNUMBER .)
    SPACESHIP       reduce using rule 59 (floating_literal -> DNUMBER .)
    EQUAL           reduce using rule 59 (floating_literal -> DNUMBER .)
    IS_NOT_EQUAL    reduce using rule 59 (floating_literal -> DNUMBER .)
    IS_IDENTICAL    reduce using rule 59 (floating_literal -> DNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 59 (floating_literal -> DNUMBER .)
    AMPERSAND       reduce using rule 59 (floating_literal -> DNUMBER .)
    BITWISE_XOR     reduce using rule 59 (floating_literal -> DNUMBER .)
    BITWISE_OR      reduce using rule 59 (floating_literal -> DNUMBER .)
    COALESCE        reduce using rule 59 (floating_literal -> DNUMBER .)
    TERNARY_OPERATION reduce using rule 59 (floating_literal -> DNUMBER .)
    AND             reduce using rule 59 (floating_literal -> DNUMBER .)
    XOR             reduce using rule 59 (floating_literal -> DNUMBER .)
    OR              reduce using rule 59 (floating_literal -> DNUMBER .)
    SEMICOLON       reduce using rule 59 (floating_literal -> DNUMBER .)
    INCLUDE         reduce using rule 59 (floating_literal -> DNUMBER .)
    INCLUDE_ONCE    reduce using rule 59 (floating_literal -> DNUMBER .)
    REQUIRE         reduce using rule 59 (floating_literal -> DNUMBER .)
    REQUIRE_ONCE    reduce using rule 59 (floating_literal -> DNUMBER .)
    PRINT           reduce using rule 59 (floating_literal -> DNUMBER .)
    YIELD           reduce using rule 59 (floating_literal -> DNUMBER .)
    YIELD_FROM      reduce using rule 59 (floating_literal -> DNUMBER .)
    RIGHT_PARENTHESIS reduce using rule 59 (floating_literal -> DNUMBER .)
    COLON           reduce using rule 59 (floating_literal -> DNUMBER .)
    AS              reduce using rule 59 (floating_literal -> DNUMBER .)
    ARROW           reduce using rule 59 (floating_literal -> DNUMBER .)
    STRING          reduce using rule 59 (floating_literal -> DNUMBER .)
    RIGHT_CBRAC     reduce using rule 59 (floating_literal -> DNUMBER .)
    VARIABLE        reduce using rule 59 (floating_literal -> DNUMBER .)
    DOUBLE_POINT    reduce using rule 59 (floating_literal -> DNUMBER .)
    DOUBLE_ARROW    reduce using rule 59 (floating_literal -> DNUMBER .)
    ELLIPSIS        reduce using rule 59 (floating_literal -> DNUMBER .)
    ARRAY           reduce using rule 59 (floating_literal -> DNUMBER .)
    CALLABLE        reduce using rule 59 (floating_literal -> DNUMBER .)
    ITERABLE        reduce using rule 59 (floating_literal -> DNUMBER .)
    BOOL            reduce using rule 59 (floating_literal -> DNUMBER .)
    FLOAT           reduce using rule 59 (floating_literal -> DNUMBER .)
    INT             reduce using rule 59 (floating_literal -> DNUMBER .)
    INSTANCEOF      reduce using rule 59 (floating_literal -> DNUMBER .)


state 229

    (65) empty_intrinsic -> EMPTY . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 384


state 230

    (66) eval_intrinsic -> EVAL . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 385


state 231

    (67) exit_intrinsic -> EXIT .
    (68) exit_intrinsic -> EXIT . LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS

    DOUBLEASTERISK  reduce using rule 67 (exit_intrinsic -> EXIT .)
    ASTERISK        reduce using rule 67 (exit_intrinsic -> EXIT .)
    DIVIDE          reduce using rule 67 (exit_intrinsic -> EXIT .)
    MODULO          reduce using rule 67 (exit_intrinsic -> EXIT .)
    PLUS            reduce using rule 67 (exit_intrinsic -> EXIT .)
    LESS            reduce using rule 67 (exit_intrinsic -> EXIT .)
    CONCAT          reduce using rule 67 (exit_intrinsic -> EXIT .)
    SL              reduce using rule 67 (exit_intrinsic -> EXIT .)
    SR              reduce using rule 67 (exit_intrinsic -> EXIT .)
    LESS_THAN       reduce using rule 67 (exit_intrinsic -> EXIT .)
    IS_SMALLER_OR_EQUAL reduce using rule 67 (exit_intrinsic -> EXIT .)
    IS_GREATER_OR_EQUAL reduce using rule 67 (exit_intrinsic -> EXIT .)
    GREATER_THAN_OR_EQUAL reduce using rule 67 (exit_intrinsic -> EXIT .)
    SPACESHIP       reduce using rule 67 (exit_intrinsic -> EXIT .)
    EQUAL           reduce using rule 67 (exit_intrinsic -> EXIT .)
    IS_NOT_EQUAL    reduce using rule 67 (exit_intrinsic -> EXIT .)
    IS_IDENTICAL    reduce using rule 67 (exit_intrinsic -> EXIT .)
    IS_NOT_IDENTICAL reduce using rule 67 (exit_intrinsic -> EXIT .)
    AMPERSAND       reduce using rule 67 (exit_intrinsic -> EXIT .)
    BITWISE_XOR     reduce using rule 67 (exit_intrinsic -> EXIT .)
    BITWISE_OR      reduce using rule 67 (exit_intrinsic -> EXIT .)
    COALESCE        reduce using rule 67 (exit_intrinsic -> EXIT .)
    TERNARY_OPERATION reduce using rule 67 (exit_intrinsic -> EXIT .)
    AND             reduce using rule 67 (exit_intrinsic -> EXIT .)
    XOR             reduce using rule 67 (exit_intrinsic -> EXIT .)
    OR              reduce using rule 67 (exit_intrinsic -> EXIT .)
    SEMICOLON       reduce using rule 67 (exit_intrinsic -> EXIT .)
    INCLUDE         reduce using rule 67 (exit_intrinsic -> EXIT .)
    INCLUDE_ONCE    reduce using rule 67 (exit_intrinsic -> EXIT .)
    REQUIRE         reduce using rule 67 (exit_intrinsic -> EXIT .)
    REQUIRE_ONCE    reduce using rule 67 (exit_intrinsic -> EXIT .)
    PRINT           reduce using rule 67 (exit_intrinsic -> EXIT .)
    YIELD           reduce using rule 67 (exit_intrinsic -> EXIT .)
    YIELD_FROM      reduce using rule 67 (exit_intrinsic -> EXIT .)
    RIGHT_PARENTHESIS reduce using rule 67 (exit_intrinsic -> EXIT .)
    COLON           reduce using rule 67 (exit_intrinsic -> EXIT .)
    AS              reduce using rule 67 (exit_intrinsic -> EXIT .)
    ARROW           reduce using rule 67 (exit_intrinsic -> EXIT .)
    STRING          reduce using rule 67 (exit_intrinsic -> EXIT .)
    RIGHT_CBRAC     reduce using rule 67 (exit_intrinsic -> EXIT .)
    VARIABLE        reduce using rule 67 (exit_intrinsic -> EXIT .)
    DOUBLE_POINT    reduce using rule 67 (exit_intrinsic -> EXIT .)
    DOUBLE_ARROW    reduce using rule 67 (exit_intrinsic -> EXIT .)
    ELLIPSIS        reduce using rule 67 (exit_intrinsic -> EXIT .)
    ARRAY           reduce using rule 67 (exit_intrinsic -> EXIT .)
    CALLABLE        reduce using rule 67 (exit_intrinsic -> EXIT .)
    ITERABLE        reduce using rule 67 (exit_intrinsic -> EXIT .)
    BOOL            reduce using rule 67 (exit_intrinsic -> EXIT .)
    FLOAT           reduce using rule 67 (exit_intrinsic -> EXIT .)
    INT             reduce using rule 67 (exit_intrinsic -> EXIT .)
    INSTANCEOF      reduce using rule 67 (exit_intrinsic -> EXIT .)
    LEFT_PARENTHESIS shift and go to state 386


state 232

    (69) exit_intrinsic -> DIE .
    (70) exit_intrinsic -> DIE . LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS

    DOUBLEASTERISK  reduce using rule 69 (exit_intrinsic -> DIE .)
    ASTERISK        reduce using rule 69 (exit_intrinsic -> DIE .)
    DIVIDE          reduce using rule 69 (exit_intrinsic -> DIE .)
    MODULO          reduce using rule 69 (exit_intrinsic -> DIE .)
    PLUS            reduce using rule 69 (exit_intrinsic -> DIE .)
    LESS            reduce using rule 69 (exit_intrinsic -> DIE .)
    CONCAT          reduce using rule 69 (exit_intrinsic -> DIE .)
    SL              reduce using rule 69 (exit_intrinsic -> DIE .)
    SR              reduce using rule 69 (exit_intrinsic -> DIE .)
    LESS_THAN       reduce using rule 69 (exit_intrinsic -> DIE .)
    IS_SMALLER_OR_EQUAL reduce using rule 69 (exit_intrinsic -> DIE .)
    IS_GREATER_OR_EQUAL reduce using rule 69 (exit_intrinsic -> DIE .)
    GREATER_THAN_OR_EQUAL reduce using rule 69 (exit_intrinsic -> DIE .)
    SPACESHIP       reduce using rule 69 (exit_intrinsic -> DIE .)
    EQUAL           reduce using rule 69 (exit_intrinsic -> DIE .)
    IS_NOT_EQUAL    reduce using rule 69 (exit_intrinsic -> DIE .)
    IS_IDENTICAL    reduce using rule 69 (exit_intrinsic -> DIE .)
    IS_NOT_IDENTICAL reduce using rule 69 (exit_intrinsic -> DIE .)
    AMPERSAND       reduce using rule 69 (exit_intrinsic -> DIE .)
    BITWISE_XOR     reduce using rule 69 (exit_intrinsic -> DIE .)
    BITWISE_OR      reduce using rule 69 (exit_intrinsic -> DIE .)
    COALESCE        reduce using rule 69 (exit_intrinsic -> DIE .)
    TERNARY_OPERATION reduce using rule 69 (exit_intrinsic -> DIE .)
    AND             reduce using rule 69 (exit_intrinsic -> DIE .)
    XOR             reduce using rule 69 (exit_intrinsic -> DIE .)
    OR              reduce using rule 69 (exit_intrinsic -> DIE .)
    SEMICOLON       reduce using rule 69 (exit_intrinsic -> DIE .)
    INCLUDE         reduce using rule 69 (exit_intrinsic -> DIE .)
    INCLUDE_ONCE    reduce using rule 69 (exit_intrinsic -> DIE .)
    REQUIRE         reduce using rule 69 (exit_intrinsic -> DIE .)
    REQUIRE_ONCE    reduce using rule 69 (exit_intrinsic -> DIE .)
    PRINT           reduce using rule 69 (exit_intrinsic -> DIE .)
    YIELD           reduce using rule 69 (exit_intrinsic -> DIE .)
    YIELD_FROM      reduce using rule 69 (exit_intrinsic -> DIE .)
    RIGHT_PARENTHESIS reduce using rule 69 (exit_intrinsic -> DIE .)
    COLON           reduce using rule 69 (exit_intrinsic -> DIE .)
    AS              reduce using rule 69 (exit_intrinsic -> DIE .)
    ARROW           reduce using rule 69 (exit_intrinsic -> DIE .)
    STRING          reduce using rule 69 (exit_intrinsic -> DIE .)
    RIGHT_CBRAC     reduce using rule 69 (exit_intrinsic -> DIE .)
    VARIABLE        reduce using rule 69 (exit_intrinsic -> DIE .)
    DOUBLE_POINT    reduce using rule 69 (exit_intrinsic -> DIE .)
    DOUBLE_ARROW    reduce using rule 69 (exit_intrinsic -> DIE .)
    ELLIPSIS        reduce using rule 69 (exit_intrinsic -> DIE .)
    ARRAY           reduce using rule 69 (exit_intrinsic -> DIE .)
    CALLABLE        reduce using rule 69 (exit_intrinsic -> DIE .)
    ITERABLE        reduce using rule 69 (exit_intrinsic -> DIE .)
    BOOL            reduce using rule 69 (exit_intrinsic -> DIE .)
    FLOAT           reduce using rule 69 (exit_intrinsic -> DIE .)
    INT             reduce using rule 69 (exit_intrinsic -> DIE .)
    INSTANCEOF      reduce using rule 69 (exit_intrinsic -> DIE .)
    LEFT_PARENTHESIS shift and go to state 387


state 233

    (71) isset_intrinsic -> ISSET . LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 388


state 234

    (289) compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    TRY             reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DECLARE         reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ECHO            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    UNSET           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CONST           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INTERFACE       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    TRAIT           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    USE             reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    GLOBAL          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    STATIC          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    STRING          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IF              reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SWITCH          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    WHILE           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DO              reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FOR             reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FOREACH         reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    GOTO            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CONTINUE        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BREAK           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    RETURN          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    THROW           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FUNCTION        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INCLUDE         reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    REQUIRE         reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FINAL           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PRINT           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    YIELD           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CLASS           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    $end            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FINALLY         reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CATCH           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ELSE            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ELSEIF          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDFOR          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CASE            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DEFAULT         reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDIF           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    VAR             reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PUBLIC          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PROTECTED       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PRIVATE         reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ASTERISK        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DIVIDE          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    MODULO          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PLUS            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    LESS            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CONCAT          reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SL              reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SR              reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    EQUAL           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    COALESCE        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    AND             reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    XOR             reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    OR              reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    COLON           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    AS              reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ARROW           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    VARIABLE        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ARRAY           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CALLABLE        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ITERABLE        reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BOOL            reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FLOAT           reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INT             reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 289 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)


state 235

    (382) try_statement -> TRY compound_statement catch_clauses .
    (384) try_statement -> TRY compound_statement catch_clauses . finally_clause
    (386) catch_clauses -> catch_clauses . catch_clause
    (390) finally_clause -> . FINALLY compound_statement
    (387) catch_clause -> . CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement

    LEFT_CBRAC      reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    SEMICOLON       reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    TRY             reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    DECLARE         reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ECHO            reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    UNSET           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    CONST           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    INTERFACE       reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    TRAIT           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    NAMESPACE       reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    USE             reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    GLOBAL          reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    STATIC          reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    STRING          reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    IF              reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    SWITCH          reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    WHILE           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    DO              reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    FOR             reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    FOREACH         reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    GOTO            reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    CONTINUE        reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    BREAK           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    RETURN          reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    THROW           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    FUNCTION        reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    INCLUDE         reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    INCLUDE_ONCE    reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    REQUIRE         reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    REQUIRE_ONCE    reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ABSTRACT        reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    FINAL           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    PRINT           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    YIELD           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    YIELD_FROM      reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    CLASS           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    $end            reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    RIGHT_CBRAC     reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ELSE            reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ELSEIF          reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ENDDECLARE      reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ENDWHILE        reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ENDFOR          reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    CASE            reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    DEFAULT         reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ENDSWITCH       reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ENDFOREACH      reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    ENDIF           reduce using rule 382 (try_statement -> TRY compound_statement catch_clauses .)
    FINALLY         shift and go to state 238
    CATCH           shift and go to state 239

    finally_clause                 shift and go to state 389
    catch_clause                   shift and go to state 390

state 236

    (383) try_statement -> TRY compound_statement finally_clause .

    LEFT_CBRAC      reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    SEMICOLON       reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    TRY             reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    DECLARE         reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ECHO            reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    UNSET           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    CONST           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    INTERFACE       reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    TRAIT           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    NAMESPACE       reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    USE             reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    GLOBAL          reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    STATIC          reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    STRING          reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    IF              reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    SWITCH          reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    WHILE           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    DO              reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    FOR             reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    FOREACH         reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    GOTO            reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    CONTINUE        reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    BREAK           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    RETURN          reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    THROW           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    FUNCTION        reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    INCLUDE         reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    INCLUDE_ONCE    reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    REQUIRE         reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    REQUIRE_ONCE    reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ABSTRACT        reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    FINAL           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    PRINT           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    YIELD           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    YIELD_FROM      reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    CLASS           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    $end            reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    RIGHT_CBRAC     reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ELSE            reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ELSEIF          reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ENDDECLARE      reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ENDWHILE        reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ENDFOR          reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    CASE            reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    DEFAULT         reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ENDSWITCH       reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ENDFOREACH      reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)
    ENDIF           reduce using rule 383 (try_statement -> TRY compound_statement finally_clause .)


state 237

    (385) catch_clauses -> catch_clause .

    FINALLY         reduce using rule 385 (catch_clauses -> catch_clause .)
    CATCH           reduce using rule 385 (catch_clauses -> catch_clause .)
    LEFT_CBRAC      reduce using rule 385 (catch_clauses -> catch_clause .)
    SEMICOLON       reduce using rule 385 (catch_clauses -> catch_clause .)
    TRY             reduce using rule 385 (catch_clauses -> catch_clause .)
    DECLARE         reduce using rule 385 (catch_clauses -> catch_clause .)
    ECHO            reduce using rule 385 (catch_clauses -> catch_clause .)
    UNSET           reduce using rule 385 (catch_clauses -> catch_clause .)
    CONST           reduce using rule 385 (catch_clauses -> catch_clause .)
    INTERFACE       reduce using rule 385 (catch_clauses -> catch_clause .)
    TRAIT           reduce using rule 385 (catch_clauses -> catch_clause .)
    NAMESPACE       reduce using rule 385 (catch_clauses -> catch_clause .)
    USE             reduce using rule 385 (catch_clauses -> catch_clause .)
    GLOBAL          reduce using rule 385 (catch_clauses -> catch_clause .)
    STATIC          reduce using rule 385 (catch_clauses -> catch_clause .)
    STRING          reduce using rule 385 (catch_clauses -> catch_clause .)
    IF              reduce using rule 385 (catch_clauses -> catch_clause .)
    SWITCH          reduce using rule 385 (catch_clauses -> catch_clause .)
    WHILE           reduce using rule 385 (catch_clauses -> catch_clause .)
    DO              reduce using rule 385 (catch_clauses -> catch_clause .)
    FOR             reduce using rule 385 (catch_clauses -> catch_clause .)
    FOREACH         reduce using rule 385 (catch_clauses -> catch_clause .)
    GOTO            reduce using rule 385 (catch_clauses -> catch_clause .)
    CONTINUE        reduce using rule 385 (catch_clauses -> catch_clause .)
    BREAK           reduce using rule 385 (catch_clauses -> catch_clause .)
    RETURN          reduce using rule 385 (catch_clauses -> catch_clause .)
    THROW           reduce using rule 385 (catch_clauses -> catch_clause .)
    FUNCTION        reduce using rule 385 (catch_clauses -> catch_clause .)
    INCLUDE         reduce using rule 385 (catch_clauses -> catch_clause .)
    INCLUDE_ONCE    reduce using rule 385 (catch_clauses -> catch_clause .)
    REQUIRE         reduce using rule 385 (catch_clauses -> catch_clause .)
    REQUIRE_ONCE    reduce using rule 385 (catch_clauses -> catch_clause .)
    ABSTRACT        reduce using rule 385 (catch_clauses -> catch_clause .)
    FINAL           reduce using rule 385 (catch_clauses -> catch_clause .)
    PRINT           reduce using rule 385 (catch_clauses -> catch_clause .)
    YIELD           reduce using rule 385 (catch_clauses -> catch_clause .)
    YIELD_FROM      reduce using rule 385 (catch_clauses -> catch_clause .)
    CLASS           reduce using rule 385 (catch_clauses -> catch_clause .)
    $end            reduce using rule 385 (catch_clauses -> catch_clause .)
    RIGHT_CBRAC     reduce using rule 385 (catch_clauses -> catch_clause .)
    ELSE            reduce using rule 385 (catch_clauses -> catch_clause .)
    ELSEIF          reduce using rule 385 (catch_clauses -> catch_clause .)
    ENDDECLARE      reduce using rule 385 (catch_clauses -> catch_clause .)
    ENDWHILE        reduce using rule 385 (catch_clauses -> catch_clause .)
    ENDFOR          reduce using rule 385 (catch_clauses -> catch_clause .)
    CASE            reduce using rule 385 (catch_clauses -> catch_clause .)
    DEFAULT         reduce using rule 385 (catch_clauses -> catch_clause .)
    ENDSWITCH       reduce using rule 385 (catch_clauses -> catch_clause .)
    ENDFOREACH      reduce using rule 385 (catch_clauses -> catch_clause .)
    ENDIF           reduce using rule 385 (catch_clauses -> catch_clause .)


state 238

    (390) finally_clause -> FINALLY . compound_statement
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 391

state 239

    (387) catch_clause -> CATCH . LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 392


state 240

    (391) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive . RIGHT_PARENTHESIS statement
    (392) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 393


state 241

    (394) declare_directive -> TICKS . EQUALS literal

    EQUALS          shift and go to state 394


state 242

    (395) declare_directive -> ENCODING . EQUALS literal

    EQUALS          shift and go to state 395


state 243

    (396) declare_directive -> STRICT_TYPES . EQUALS literal

    EQUALS          shift and go to state 396


state 244

    (397) echo_statement -> ECHO expression_list SEMICOLON .

    LEFT_CBRAC      reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    SEMICOLON       reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    TRY             reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    DECLARE         reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ECHO            reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    UNSET           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    CONST           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    INTERFACE       reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    TRAIT           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    NAMESPACE       reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    USE             reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    GLOBAL          reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    STATIC          reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    STRING          reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    IF              reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    SWITCH          reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    WHILE           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    DO              reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    FOR             reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    FOREACH         reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    GOTO            reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    CONTINUE        reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    BREAK           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    RETURN          reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    THROW           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    FUNCTION        reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    INCLUDE         reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    REQUIRE         reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ABSTRACT        reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    FINAL           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    PRINT           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    YIELD           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    YIELD_FROM      reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    CLASS           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    $end            reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ELSE            reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ELSEIF          reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDDECLARE      reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDWHILE        reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDFOR          reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    CASE            reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    DEFAULT         reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDSWITCH       reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDFOREACH      reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDIF           reduce using rule 397 (echo_statement -> ECHO expression_list SEMICOLON .)


state 245

    (399) expression_list -> expression_list expression .

    SEMICOLON       reduce using rule 399 (expression_list -> expression_list expression .)
    INCLUDE         reduce using rule 399 (expression_list -> expression_list expression .)
    INCLUDE_ONCE    reduce using rule 399 (expression_list -> expression_list expression .)
    REQUIRE         reduce using rule 399 (expression_list -> expression_list expression .)
    REQUIRE_ONCE    reduce using rule 399 (expression_list -> expression_list expression .)
    PRINT           reduce using rule 399 (expression_list -> expression_list expression .)
    YIELD           reduce using rule 399 (expression_list -> expression_list expression .)
    YIELD_FROM      reduce using rule 399 (expression_list -> expression_list expression .)


state 246

    (39) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (43) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 397
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 247

    (400) unset_statement -> UNSET LEFT_PARENTHESIS variable_list . COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> UNSET LEFT_PARENTHESIS variable_list . RIGHT_PARENTHESIS SEMICOLON
    (74) variable_list -> variable_list . variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    COLON           shift and go to state 398
    RIGHT_PARENTHESIS shift and go to state 399
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable                       shift and go to state 400
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 248

    (73) variable_list -> variable .
    (38) dereferencable_expression -> variable .

  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 38 (dereferencable_expression -> variable .)
    COLON           reduce using rule 73 (variable_list -> variable .)
    RIGHT_PARENTHESIS reduce using rule 73 (variable_list -> variable .)
    VARIABLE        reduce using rule 73 (variable_list -> variable .)
    DOLLAR          reduce using rule 73 (variable_list -> variable .)
    LEFT_PARENTHESIS reduce using rule 73 (variable_list -> variable .)
    SELF            reduce using rule 73 (variable_list -> variable .)
    PARENT          reduce using rule 73 (variable_list -> variable .)
    STATIC          reduce using rule 73 (variable_list -> variable .)
    ARRAY           reduce using rule 73 (variable_list -> variable .)
    STRING          reduce using rule 73 (variable_list -> variable .)
    ARROW           reduce using rule 38 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)

  ! LEFT_CBRAC      [ reduce using rule 73 (variable_list -> variable .) ]


state 249

    (149) scoped_property_access_expression -> scope_resolution_qualifier . DOUBLE_COLON simple_variable
    (150) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    DOUBLE_COLON    shift and go to state 401


state 250

    (127) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (154) scope_resolution_qualifier -> qualified_name .

    LEFT_PARENTHESIS shift and go to state 336
    DOUBLE_COLON    reduce using rule 154 (scope_resolution_qualifier -> qualified_name .)


state 251

    (40) dereferencable_expression -> array_creation_expression .
    (44) callable_expression -> array_creation_expression .

    ARROW           reduce using rule 40 (dereferencable_expression -> array_creation_expression .)
    LEFT_CBRAC      reduce using rule 40 (dereferencable_expression -> array_creation_expression .)
    DOUBLE_COLON    reduce using rule 40 (dereferencable_expression -> array_creation_expression .)
    LEFT_PARENTHESIS reduce using rule 44 (callable_expression -> array_creation_expression .)


state 252

    (41) dereferencable_expression -> string_literal .
    (45) callable_expression -> string_literal .

    ARROW           reduce using rule 41 (dereferencable_expression -> string_literal .)
    LEFT_CBRAC      reduce using rule 41 (dereferencable_expression -> string_literal .)
    DOUBLE_COLON    reduce using rule 41 (dereferencable_expression -> string_literal .)
    LEFT_PARENTHESIS reduce using rule 45 (callable_expression -> string_literal .)


state 253

    (158) relative_scope -> STATIC .

    DOUBLE_COLON    reduce using rule 158 (relative_scope -> STATIC .)


state 254

    (455) const_declaration -> CONST const_elements SEMICOLON .

    LEFT_CBRAC      reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    SEMICOLON       reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    TRY             reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    DECLARE         reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ECHO            reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    UNSET           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    CONST           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    INTERFACE       reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    TRAIT           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    NAMESPACE       reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    USE             reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    GLOBAL          reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    STATIC          reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    STRING          reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    IF              reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    SWITCH          reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    WHILE           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    DO              reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    FOR             reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    FOREACH         reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    GOTO            reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    CONTINUE        reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    BREAK           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    RETURN          reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    THROW           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    FUNCTION        reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    INCLUDE         reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    REQUIRE         reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ABSTRACT        reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    FINAL           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    PRINT           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    YIELD           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    YIELD_FROM      reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    CLASS           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    $end            reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ELSE            reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ELSEIF          reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDDECLARE      reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDWHILE        reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDFOR          reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    CASE            reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    DEFAULT         reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDSWITCH       reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDFOREACH      reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDIF           reduce using rule 455 (const_declaration -> CONST const_elements SEMICOLON .)


state 255

    (458) const_elements -> const_elements const_element .

    SEMICOLON       reduce using rule 458 (const_elements -> const_elements const_element .)
    STRING          reduce using rule 458 (const_elements -> const_elements const_element .)


state 256

    (459) const_element -> name EQUAL . constant_expression
    (269) constant_expression -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    constant_expression            shift and go to state 402
    expression                     shift and go to state 403
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 257

    (433) class_declaration -> class_modifieropt CLASS name . class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (436) class_base_clauseopt -> . class_base_clause
    (437) class_base_clauseopt -> .
    (444) class_base_clause -> . EXTENDS qualified_name

    IMPLEMENTS      reduce using rule 437 (class_base_clauseopt -> .)
    LEFT_CBRAC      reduce using rule 437 (class_base_clauseopt -> .)
    EXTENDS         shift and go to state 406

    class_base_clauseopt           shift and go to state 404
    class_base_clause              shift and go to state 405

state 258

    (489) interface_declaration -> INTERFACE name interface_base_clauseopt . LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 407


state 259

    (490) interface_base_clauseopt -> interface_base_clause .
    (495) interface_base_clause -> interface_base_clause . qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    LEFT_CBRAC      reduce using rule 490 (interface_base_clauseopt -> interface_base_clause .)
    STRING          shift and go to state 51

    qualified_name                 shift and go to state 408
    name                           shift and go to state 175

state 260

    (494) interface_base_clause -> EXTENDS . qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    qualified_name                 shift and go to state 409
    name                           shift and go to state 175

state 261

    (500) trait_declaration -> TRAIT name LEFT_CBRAC . trait_member_declarationsopt RIGHT_CBRAC
    (501) trait_member_declarationsopt -> . trait_member_declarations
    (502) trait_member_declarationsopt -> .
    (503) trait_member_declarations -> . trait_member_declaration
    (504) trait_member_declarations -> . trait_member_declarations trait_member_declaration
    (505) trait_member_declaration -> . property_declaration
    (506) trait_member_declaration -> . method_declaration
    (507) trait_member_declaration -> . constructor_declaration
    (508) trait_member_declaration -> . destructor_declaration
    (509) trait_member_declaration -> . trait_use_clauses
    (460) property_declaration -> . property_modifier property_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (485) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (510) trait_use_clauses -> . trait_use_clause
    (511) trait_use_clauses -> . trait_use_clauses trait_use_clause
    (461) property_modifier -> . VAR
    (462) property_modifier -> . visibility_modifier static_modifieropt
    (463) property_modifier -> . static_modifier visibility_modifier_opt
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 502 (trait_member_declarationsopt -> .)
    VAR             shift and go to state 422
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    USE             shift and go to state 426
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    trait_member_declarationsopt   shift and go to state 410
    trait_member_declarations      shift and go to state 411
    trait_member_declaration       shift and go to state 412
    property_declaration           shift and go to state 413
    method_declaration             shift and go to state 414
    constructor_declaration        shift and go to state 415
    destructor_declaration         shift and go to state 416
    trait_use_clauses              shift and go to state 417
    property_modifier              shift and go to state 418
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 420
    trait_use_clause               shift and go to state 421
    visibility_modifier            shift and go to state 423
    static_modifier                shift and go to state 424
    method_modifier                shift and go to state 425
    class_modifier                 shift and go to state 431

state 262

    (530) namespace_definition -> NAMESPACE namespace_name SEMICOLON .

    LEFT_CBRAC      reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    SEMICOLON       reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    TRY             reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    DECLARE         reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ECHO            reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    UNSET           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CONST           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    INTERFACE       reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    TRAIT           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    NAMESPACE       reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    USE             reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    GLOBAL          reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    STATIC          reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    STRING          reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    IF              reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    SWITCH          reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    WHILE           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    DO              reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FOR             reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FOREACH         reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    GOTO            reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CONTINUE        reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    BREAK           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    RETURN          reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    THROW           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FUNCTION        reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    INCLUDE         reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    REQUIRE         reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ABSTRACT        reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FINAL           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    PRINT           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    YIELD           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    YIELD_FROM      reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CLASS           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    $end            reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ELSE            reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ELSEIF          reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDDECLARE      reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDWHILE        reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDFOR          reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CASE            reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    DEFAULT         reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDSWITCH       reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDFOREACH      reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDIF           reduce using rule 530 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)


state 263

    (8) namespace_name -> namespace_name NS_SEPARATOR . NAME

    NAME            shift and go to state 432


state 264

    (531) namespace_definition -> NAMESPACE namespace_nameopt compound_statement .

    LEFT_CBRAC      reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    SEMICOLON       reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    TRY             reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    DECLARE         reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ECHO            reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    UNSET           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CONST           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    INTERFACE       reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    TRAIT           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    NAMESPACE       reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    USE             reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    GLOBAL          reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    STATIC          reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    STRING          reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    IF              reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    SWITCH          reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    WHILE           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    DO              reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FOR             reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FOREACH         reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    GOTO            reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CONTINUE        reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    BREAK           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    RETURN          reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    THROW           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FUNCTION        reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    INCLUDE         reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    INCLUDE_ONCE    reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    REQUIRE         reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    REQUIRE_ONCE    reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ABSTRACT        reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FINAL           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    PRINT           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    YIELD           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    YIELD_FROM      reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CLASS           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    $end            reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    RIGHT_CBRAC     reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ELSE            reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ELSEIF          reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDDECLARE      reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDWHILE        reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDFOR          reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CASE            reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    DEFAULT         reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDSWITCH       reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDFOREACH      reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDIF           reduce using rule 531 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)


state 265

    (534) namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses . SEMICOLON
    (542) namespace_use_clauses -> namespace_use_clauses . namespace_use_clause
    (543) namespace_use_clause -> . qualified_name namespace_aliasing_clause_opt
    (545) qualified_name -> . name
    (555) name -> . STRING

    SEMICOLON       shift and go to state 433
    STRING          shift and go to state 51

    namespace_use_clause           shift and go to state 434
    qualified_name                 shift and go to state 267
    name                           shift and go to state 175

state 266

    (541) namespace_use_clauses -> namespace_use_clause .

    SEMICOLON       reduce using rule 541 (namespace_use_clauses -> namespace_use_clause .)
    STRING          reduce using rule 541 (namespace_use_clauses -> namespace_use_clause .)


state 267

    (543) namespace_use_clause -> qualified_name . namespace_aliasing_clause_opt
    (544) namespace_aliasing_clause_opt -> . namespace_aliasing_clause
    (546) namespace_aliasing_clause -> . AS name

    AS              shift and go to state 437

    namespace_aliasing_clause_opt  shift and go to state 435
    namespace_aliasing_clause      shift and go to state 436

state 268

    (535) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt . namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (7) namespace_name -> . NAME
    (8) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 103

    namespace_name                 shift and go to state 438

state 269

    (536) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name . NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (8) namespace_name -> namespace_name . NS_SEPARATOR NAME

    NS_SEPARATOR    shift and go to state 439


state 270

    (17) global_declaration -> GLOBAL variable_name_list SEMICOLON .

    LEFT_CBRAC      reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    SEMICOLON       reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    TRY             reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    DECLARE         reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ECHO            reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    UNSET           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CONST           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    INTERFACE       reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    TRAIT           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    NAMESPACE       reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    USE             reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    GLOBAL          reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    STATIC          reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    STRING          reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    IF              reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    SWITCH          reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    WHILE           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    DO              reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FOR             reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FOREACH         reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    GOTO            reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CONTINUE        reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    BREAK           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    RETURN          reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    THROW           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FUNCTION        reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    INCLUDE         reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    REQUIRE         reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ABSTRACT        reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FINAL           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    PRINT           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    YIELD           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    YIELD_FROM      reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CLASS           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    $end            reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ELSE            reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ELSEIF          reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDDECLARE      reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDWHILE        reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDFOR          reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CASE            reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    DEFAULT         reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDSWITCH       reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDFOREACH      reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDIF           reduce using rule 17 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)


state 271

    (19) variable_name_list -> variable_name_list simple_variable .

    SEMICOLON       reduce using rule 19 (variable_name_list -> variable_name_list simple_variable .)
    VARIABLE        reduce using rule 19 (variable_name_list -> variable_name_list simple_variable .)
    DOLLAR          reduce using rule 19 (variable_name_list -> variable_name_list simple_variable .)


state 272

    (36) simple_variable -> DOLLAR simple_variable .

    SEMICOLON       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    VARIABLE        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DOLLAR          reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    EQUAL           reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DOUBLEPLUS      reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DOUBLELESS      reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    POW_EQUAL       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    MUL_EQUAL       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DIV_EQUAL       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    MOD_EQUAL       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    PLUS_EQUAL      reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    MINUS_EQUAL     reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    CONCAT_EQUAL    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    SL_EQUAL        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    SR_EQUAL        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    AND_EQUAL       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    XOR_EQUAL       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    OR_EQUAL        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    ARROW           reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    LEFT_CBRAC      reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DOUBLE_COLON    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DOUBLEASTERISK  reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    ASTERISK        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DIVIDE          reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    MODULO          reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    PLUS            reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    LESS            reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    CONCAT          reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    SL              reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    SR              reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    LESS_THAN       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    SPACESHIP       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    IS_NOT_EQUAL    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    IS_IDENTICAL    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    AMPERSAND       reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    BITWISE_XOR     reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    BITWISE_OR      reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    COALESCE        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    TERNARY_OPERATION reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    AND             reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    XOR             reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    OR              reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    INCLUDE         reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    INCLUDE_ONCE    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    REQUIRE         reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    REQUIRE_ONCE    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    PRINT           reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    YIELD           reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    YIELD_FROM      reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    COLON           reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    AS              reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    STRING          reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    RIGHT_CBRAC     reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DOUBLE_POINT    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    DOUBLE_ARROW    reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    ELLIPSIS        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    ARRAY           reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    CALLABLE        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    ITERABLE        reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    BOOL            reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    FLOAT           reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    INT             reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    INSTANCEOF      reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    LEFT_PARENTHESIS reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    SELF            reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    PARENT          reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)
    STATIC          reduce using rule 36 (simple_variable -> DOLLAR simple_variable .)


state 273

    (37) simple_variable -> DOLLAR LEFT_CBRAC . expression RIGHT_CBRAC
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 440
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 274

    (9) function_static_declaration -> STATIC static_variable_name_list SEMICOLON .

    LEFT_CBRAC      reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    SEMICOLON       reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    TRY             reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    DECLARE         reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ECHO            reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    UNSET           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CONST           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    INTERFACE       reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    TRAIT           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    NAMESPACE       reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    USE             reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    GLOBAL          reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    STATIC          reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    STRING          reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    IF              reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    SWITCH          reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    WHILE           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    DO              reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FOR             reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FOREACH         reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    GOTO            reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CONTINUE        reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    BREAK           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    RETURN          reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    THROW           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FUNCTION        reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    INCLUDE         reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    REQUIRE         reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ABSTRACT        reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FINAL           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    PRINT           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    YIELD           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    YIELD_FROM      reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CLASS           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    $end            reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ELSE            reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ELSEIF          reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDDECLARE      reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDWHILE        reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDFOR          reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CASE            reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    DEFAULT         reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDSWITCH       reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDFOREACH      reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDIF           reduce using rule 9 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)


state 275

    (11) static_variable_name_list -> static_variable_name_list static_variable_declaration .

    SEMICOLON       reduce using rule 11 (static_variable_name_list -> static_variable_name_list static_variable_declaration .)
    VARIABLE        reduce using rule 11 (static_variable_name_list -> static_variable_name_list static_variable_declaration .)


state 276

    (12) static_variable_declaration -> VARIABLE function_static_initializer_opt .

    SEMICOLON       reduce using rule 12 (static_variable_declaration -> VARIABLE function_static_initializer_opt .)
    VARIABLE        reduce using rule 12 (static_variable_declaration -> VARIABLE function_static_initializer_opt .)


state 277

    (14) function_static_initializer_opt -> function_static_initializer .

    SEMICOLON       reduce using rule 14 (function_static_initializer_opt -> function_static_initializer .)
    VARIABLE        reduce using rule 14 (function_static_initializer_opt -> function_static_initializer .)


state 278

    (16) function_static_initializer_opt -> EQUAL . constant_expression
    (13) function_static_initializer -> EQUAL . constant_expression
    (269) constant_expression -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    constant_expression            shift and go to state 441
    expression                     shift and go to state 403
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 279

    (259) logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .
    (257) logical_exc_OR_expression -> logical_exc_OR_expression . XOR logical_AND_expression_2

    OR              reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    SEMICOLON       reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    INCLUDE         reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    REQUIRE         reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    PRINT           reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    YIELD           reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    YIELD_FROM      reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    COLON           reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    AS              reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ARROW           reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    STRING          reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    VARIABLE        reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ELLIPSIS        reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    AMPERSAND       reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ARRAY           reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    CALLABLE        reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ITERABLE        reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    BOOL            reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    FLOAT           reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    INT             reduce using rule 259 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    XOR             shift and go to state 137


state 280

    (298) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (302) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 442


state 281

    (313) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 443


state 282

    (331) while_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (332) while_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 444


state 283

    (333) do_statement -> DO statement WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 445


state 284

    (334) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    SEMICOLON       shift and go to state 446


state 285

    (338) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (351) for_control -> . for_expression_group
    (353) for_expression_group -> . expression
    (354) for_expression_group -> . for_expression_group COLON expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 447
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    for_control                    shift and go to state 448
    for_expression_group           shift and go to state 449
    expression                     shift and go to state 287
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 286

    (350) for_initializer -> for_expression_group .
    (354) for_expression_group -> for_expression_group . COLON expression

    SEMICOLON       reduce using rule 350 (for_initializer -> for_expression_group .)
    COLON           shift and go to state 450


state 287

    (353) for_expression_group -> expression .

    COLON           reduce using rule 353 (for_expression_group -> expression .)
    SEMICOLON       reduce using rule 353 (for_expression_group -> expression .)
    RIGHT_PARENTHESIS reduce using rule 353 (for_expression_group -> expression .)


state 288

    (355) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    AS              shift and go to state 451


state 289

    (359) foreach_collection_name -> expression .

    AS              reduce using rule 359 (foreach_collection_name -> expression .)


state 290

    (369) goto_statement -> GOTO name SEMICOLON .

    LEFT_CBRAC      reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    SEMICOLON       reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    TRY             reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    DECLARE         reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ECHO            reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    UNSET           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    CONST           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    INTERFACE       reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    TRAIT           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    NAMESPACE       reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    USE             reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    GLOBAL          reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    STATIC          reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    STRING          reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    IF              reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    SWITCH          reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    WHILE           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    DO              reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    FOR             reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    FOREACH         reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    GOTO            reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    CONTINUE        reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    BREAK           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    RETURN          reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    THROW           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    FUNCTION        reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    INCLUDE         reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    REQUIRE         reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ABSTRACT        reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    FINAL           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    PRINT           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    YIELD           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    YIELD_FROM      reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    CLASS           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    $end            reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ELSE            reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ELSEIF          reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ENDDECLARE      reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ENDWHILE        reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ENDFOR          reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    CASE            reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    DEFAULT         reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ENDSWITCH       reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ENDFOREACH      reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)
    ENDIF           reduce using rule 369 (goto_statement -> GOTO name SEMICOLON .)


state 291

    (370) continue_statement -> CONTINUE breakout_level SEMICOLON .

    LEFT_CBRAC      reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    SEMICOLON       reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    TRY             reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    DECLARE         reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ECHO            reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    UNSET           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CONST           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    INTERFACE       reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    TRAIT           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    NAMESPACE       reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    USE             reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    GLOBAL          reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    STATIC          reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    STRING          reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    IF              reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    SWITCH          reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    WHILE           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    DO              reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FOR             reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FOREACH         reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    GOTO            reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CONTINUE        reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    BREAK           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    RETURN          reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    THROW           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FUNCTION        reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    INCLUDE         reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    REQUIRE         reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ABSTRACT        reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FINAL           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    PRINT           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    YIELD           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    YIELD_FROM      reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CLASS           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    $end            reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ELSE            reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ELSEIF          reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDDECLARE      reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDWHILE        reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDFOR          reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CASE            reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    DEFAULT         reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDSWITCH       reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDFOREACH      reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDIF           reduce using rule 370 (continue_statement -> CONTINUE breakout_level SEMICOLON .)


state 292

    (373) breakout_level -> LEFT_PARENTHESIS breakout_level . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 452


state 293

    (374) break_statement -> BREAK breakout_levelopt SEMICOLON .

    LEFT_CBRAC      reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    SEMICOLON       reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    TRY             reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    DECLARE         reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ECHO            reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    UNSET           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CONST           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    INTERFACE       reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    TRAIT           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    NAMESPACE       reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    USE             reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    GLOBAL          reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    STATIC          reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    STRING          reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    IF              reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    SWITCH          reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    WHILE           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    DO              reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FOR             reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FOREACH         reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    GOTO            reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CONTINUE        reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    BREAK           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    RETURN          reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    THROW           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FUNCTION        reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    INCLUDE         reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    REQUIRE         reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ABSTRACT        reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FINAL           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    PRINT           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    YIELD           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    YIELD_FROM      reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CLASS           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    $end            reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ELSE            reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ELSEIF          reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDDECLARE      reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDWHILE        reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDFOR          reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CASE            reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    DEFAULT         reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDSWITCH       reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDFOREACH      reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDIF           reduce using rule 374 (break_statement -> BREAK breakout_levelopt SEMICOLON .)


state 294

    (378) return_statement -> RETURN expressionopt SEMICOLON .

    LEFT_CBRAC      reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    SEMICOLON       reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    TRY             reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    DECLARE         reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ECHO            reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    UNSET           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    CONST           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    INTERFACE       reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    TRAIT           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    NAMESPACE       reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    USE             reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    GLOBAL          reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    STATIC          reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    STRING          reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    IF              reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    SWITCH          reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    WHILE           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    DO              reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    FOR             reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    FOREACH         reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    GOTO            reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    CONTINUE        reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    BREAK           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    RETURN          reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    THROW           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    FUNCTION        reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    INCLUDE         reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    REQUIRE         reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ABSTRACT        reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    FINAL           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    PRINT           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    YIELD           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    YIELD_FROM      reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    CLASS           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    $end            reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ELSE            reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ELSEIF          reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDDECLARE      reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDWHILE        reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDFOR          reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    CASE            reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    DEFAULT         reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDSWITCH       reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDFOREACH      reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDIF           reduce using rule 378 (return_statement -> RETURN expressionopt SEMICOLON .)


state 295

    (381) throw_statement -> THROW expression SEMICOLON .

    LEFT_CBRAC      reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    SEMICOLON       reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    TRY             reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    DECLARE         reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ECHO            reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    UNSET           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    CONST           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    INTERFACE       reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    TRAIT           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    NAMESPACE       reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    USE             reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    GLOBAL          reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    STATIC          reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    STRING          reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    IF              reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    SWITCH          reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    WHILE           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    DO              reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    FOR             reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    FOREACH         reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    GOTO            reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    CONTINUE        reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    BREAK           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    RETURN          reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    THROW           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    FUNCTION        reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    INCLUDE         reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    REQUIRE         reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ABSTRACT        reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    FINAL           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    PRINT           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    YIELD           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    YIELD_FROM      reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    CLASS           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    $end            reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ELSE            reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ELSEIF          reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ENDDECLARE      reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ENDWHILE        reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ENDFOR          reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    CASE            reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    DEFAULT         reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ENDSWITCH       reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ENDFOREACH      reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)
    ENDIF           reduce using rule 381 (throw_statement -> THROW expression SEMICOLON .)


state 296

    (403) function_definition_header -> FUNCTION ampersandopt name . LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt

    LEFT_PARENTHESIS shift and go to state 453


state 297

    (257) logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .
    (255) logical_AND_expression_2 -> logical_AND_expression_2 . AND yield_expression

    XOR             reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    OR              reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    SEMICOLON       reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    INCLUDE         reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    INCLUDE_ONCE    reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    REQUIRE         reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    REQUIRE_ONCE    reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    PRINT           reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    YIELD           reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    YIELD_FROM      reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    RIGHT_PARENTHESIS reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    COLON           reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    AS              reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ARROW           reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    STRING          reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    RIGHT_CBRAC     reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    VARIABLE        reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    DOUBLE_POINT    reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    DOUBLE_ARROW    reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ELLIPSIS        reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    TERNARY_OPERATION reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    AMPERSAND       reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ARRAY           reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    CALLABLE        reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ITERABLE        reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    BOOL            reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    FLOAT           reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    INT             reduce using rule 257 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    AND             shift and go to state 142


state 298

    (255) logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .

    AND             reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    XOR             reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    OR              reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    SEMICOLON       reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    INCLUDE         reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    INCLUDE_ONCE    reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    REQUIRE         reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    REQUIRE_ONCE    reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    PRINT           reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    YIELD           reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    YIELD_FROM      reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    COLON           reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    AS              reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ARROW           reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    STRING          reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    RIGHT_CBRAC     reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    VARIABLE        reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    DOUBLE_POINT    reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    DOUBLE_ARROW    reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ELLIPSIS        reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    TERNARY_OPERATION reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    AMPERSAND       reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ARRAY           reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    CALLABLE        reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ITERABLE        reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    BOOL            reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    FLOAT           reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    INT             reduce using rule 255 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)


state 299

    (251) yield_expression -> YIELD yield_from_expression DOUBLE_ARROW . yield_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    yield_from_expression          shift and go to state 81
    yield_expression               shift and go to state 454

state 300

    (213) conditional_expression -> conditional_expression TERNARY_OPERATION . expression DOUBLE_POINT coalesce_expression
    (214) conditional_expression -> conditional_expression TERNARY_OPERATION . DOUBLE_POINT coalesce_expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 456
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 455
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 301

    (218) simple_assignment_expression -> variable EQUAL . assignment_expression
    (233) byref_assignment_expression -> variable EQUAL . AMPERSAND variable
    (215) assignment_expression -> . conditional_expression
    (216) assignment_expression -> . simple_assignment_expression
    (217) assignment_expression -> . compound_assignment_expression
    (212) conditional_expression -> . coalesce_expression
    (213) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (214) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (218) simple_assignment_expression -> . variable EQUAL assignment_expression
    (219) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (234) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (210) coalesce_expression -> . logical_inc_OR_expression_1
    (211) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (208) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (209) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (555) name -> . STRING
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .

    AMPERSAND       shift and go to state 458
    LIST            shift and go to state 157
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 158
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 178
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180
    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    FUNCTION        reduce using rule 77 (static_opt -> .)

    variable                       shift and go to state 151
    assignment_expression          shift and go to state 457
    conditional_expression         shift and go to state 147
    simple_assignment_expression   shift and go to state 148
    compound_assignment_expression shift and go to state 149
    coalesce_expression            shift and go to state 150
    list_intrinsic                 shift and go to state 152
    logical_inc_OR_expression_1    shift and go to state 153
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    logical_AND_expression_1       shift and go to state 159
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 165
    dereferencable_expression      shift and go to state 166
    bitwise_inc_OR_expression      shift and go to state 167
    qualified_name                 shift and go to state 169
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 172
    string_literal                 shift and go to state 173
    bitwise_exc_OR_expression      shift and go to state 174
    name                           shift and go to state 175
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222

state 302

    (234) compound_assignment_expression -> variable compound_assignment_operator . assignment_expression
    (215) assignment_expression -> . conditional_expression
    (216) assignment_expression -> . simple_assignment_expression
    (217) assignment_expression -> . compound_assignment_expression
    (212) conditional_expression -> . coalesce_expression
    (213) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (214) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (218) simple_assignment_expression -> . variable EQUAL assignment_expression
    (219) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (234) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (210) coalesce_expression -> . logical_inc_OR_expression_1
    (211) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (208) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (209) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (555) name -> . STRING
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .

    LIST            shift and go to state 157
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 158
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 178
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180
    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    FUNCTION        reduce using rule 77 (static_opt -> .)

    variable                       shift and go to state 151
    assignment_expression          shift and go to state 459
    conditional_expression         shift and go to state 147
    simple_assignment_expression   shift and go to state 148
    compound_assignment_expression shift and go to state 149
    coalesce_expression            shift and go to state 150
    list_intrinsic                 shift and go to state 152
    logical_inc_OR_expression_1    shift and go to state 153
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    logical_AND_expression_1       shift and go to state 159
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 165
    dereferencable_expression      shift and go to state 166
    bitwise_inc_OR_expression      shift and go to state 167
    qualified_name                 shift and go to state 169
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 172
    string_literal                 shift and go to state 173
    bitwise_exc_OR_expression      shift and go to state 174
    name                           shift and go to state 175
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222

state 303

    (142) postfix_increment_expression -> variable DOUBLEPLUS .

    DOUBLEASTERISK  reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ASTERISK        reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    DIVIDE          reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    MODULO          reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    PLUS            reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    LESS            reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    CONCAT          reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SL              reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SR              reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    LESS_THAN       reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_SMALLER_OR_EQUAL reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_GREATER_OR_EQUAL reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    GREATER_THAN_OR_EQUAL reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SPACESHIP       reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    EQUAL           reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_NOT_EQUAL    reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_IDENTICAL    reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_NOT_IDENTICAL reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    AMPERSAND       reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    BITWISE_XOR     reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    BITWISE_OR      reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    COALESCE        reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    TERNARY_OPERATION reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    AND             reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    XOR             reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    OR              reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SEMICOLON       reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INCLUDE         reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INCLUDE_ONCE    reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    REQUIRE         reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    REQUIRE_ONCE    reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    PRINT           reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    YIELD           reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    YIELD_FROM      reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    RIGHT_PARENTHESIS reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    COLON           reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    AS              reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ARROW           reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    STRING          reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    RIGHT_CBRAC     reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    VARIABLE        reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    DOUBLE_POINT    reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    DOUBLE_ARROW    reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ELLIPSIS        reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ARRAY           reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    CALLABLE        reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ITERABLE        reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    BOOL            reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    FLOAT           reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INT             reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INSTANCEOF      reduce using rule 142 (postfix_increment_expression -> variable DOUBLEPLUS .)


state 304

    (143) postfix_decrement_expression -> variable DOUBLELESS .

    DOUBLEASTERISK  reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    ASTERISK        reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    DIVIDE          reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    MODULO          reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    PLUS            reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    LESS            reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    CONCAT          reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    SL              reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    SR              reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    LESS_THAN       reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_SMALLER_OR_EQUAL reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_GREATER_OR_EQUAL reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    GREATER_THAN_OR_EQUAL reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    SPACESHIP       reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    EQUAL           reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_NOT_EQUAL    reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_IDENTICAL    reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_NOT_IDENTICAL reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    AMPERSAND       reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    BITWISE_XOR     reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    BITWISE_OR      reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    COALESCE        reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    TERNARY_OPERATION reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    AND             reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    XOR             reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    OR              reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    SEMICOLON       reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    INCLUDE         reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    INCLUDE_ONCE    reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    REQUIRE         reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    REQUIRE_ONCE    reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    PRINT           reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    YIELD           reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    YIELD_FROM      reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    RIGHT_PARENTHESIS reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    COLON           reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    AS              reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    ARROW           reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    STRING          reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    RIGHT_CBRAC     reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    VARIABLE        reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    DOUBLE_POINT    reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    DOUBLE_ARROW    reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    ELLIPSIS        reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    ARRAY           reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    CALLABLE        reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    ITERABLE        reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    BOOL            reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    FLOAT           reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    INT             reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)
    INSTANCEOF      reduce using rule 143 (postfix_decrement_expression -> variable DOUBLELESS .)


state 305

    (235) compound_assignment_operator -> POW_EQUAL .

    LIST            reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    VARIABLE        reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    DOLLAR          reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    SELF            reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    PARENT          reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    STATIC          reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    ARRAY           reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    LEFT_CBRAC      reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    STRING          reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    NEGATION        reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    AT              reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    CLONE           reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    PLUS            reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    LESS            reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    BITWISE_NOT     reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    NEW             reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    DOUBLEPLUS      reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    DOUBLELESS      reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    BACKTICK        reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    LNUMBER         reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    DNUMBER         reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    EMPTY           reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    EVAL            reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    EXIT            reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    DIE             reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    ISSET           reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)
    FUNCTION        reduce using rule 235 (compound_assignment_operator -> POW_EQUAL .)


state 306

    (236) compound_assignment_operator -> MUL_EQUAL .

    LIST            reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    VARIABLE        reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    DOLLAR          reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    SELF            reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    PARENT          reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    STATIC          reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    ARRAY           reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    LEFT_CBRAC      reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    STRING          reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    NEGATION        reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    AT              reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    CLONE           reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    PLUS            reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    LESS            reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    BITWISE_NOT     reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    NEW             reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    DOUBLEPLUS      reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    DOUBLELESS      reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    BACKTICK        reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    LNUMBER         reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    DNUMBER         reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    EMPTY           reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    EVAL            reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    EXIT            reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    DIE             reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    ISSET           reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)
    FUNCTION        reduce using rule 236 (compound_assignment_operator -> MUL_EQUAL .)


state 307

    (237) compound_assignment_operator -> DIV_EQUAL .

    LIST            reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    VARIABLE        reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    DOLLAR          reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    SELF            reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    PARENT          reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    STATIC          reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    ARRAY           reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    LEFT_CBRAC      reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    STRING          reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    NEGATION        reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    AT              reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    CLONE           reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    PLUS            reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    LESS            reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    BITWISE_NOT     reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    NEW             reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    DOUBLEPLUS      reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    DOUBLELESS      reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    BACKTICK        reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    LNUMBER         reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    DNUMBER         reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    EMPTY           reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    EVAL            reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    EXIT            reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    DIE             reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    ISSET           reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)
    FUNCTION        reduce using rule 237 (compound_assignment_operator -> DIV_EQUAL .)


state 308

    (238) compound_assignment_operator -> MOD_EQUAL .

    LIST            reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    VARIABLE        reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    DOLLAR          reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    SELF            reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    PARENT          reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    STATIC          reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    ARRAY           reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    LEFT_CBRAC      reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    STRING          reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    NEGATION        reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    AT              reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    CLONE           reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    PLUS            reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    LESS            reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    BITWISE_NOT     reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    NEW             reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    DOUBLEPLUS      reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    DOUBLELESS      reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    BACKTICK        reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    LNUMBER         reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    DNUMBER         reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    EMPTY           reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    EVAL            reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    EXIT            reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    DIE             reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    ISSET           reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)
    FUNCTION        reduce using rule 238 (compound_assignment_operator -> MOD_EQUAL .)


state 309

    (239) compound_assignment_operator -> PLUS_EQUAL .

    LIST            reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    VARIABLE        reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    DOLLAR          reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    SELF            reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    PARENT          reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    STATIC          reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    ARRAY           reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    LEFT_CBRAC      reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    STRING          reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    NEGATION        reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    AT              reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    CLONE           reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    PLUS            reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    LESS            reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    BITWISE_NOT     reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    NEW             reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    DOUBLEPLUS      reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    DOUBLELESS      reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    BACKTICK        reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    LNUMBER         reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    DNUMBER         reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    EMPTY           reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    EVAL            reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    EXIT            reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    DIE             reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    ISSET           reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)
    FUNCTION        reduce using rule 239 (compound_assignment_operator -> PLUS_EQUAL .)


state 310

    (240) compound_assignment_operator -> MINUS_EQUAL .

    LIST            reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    VARIABLE        reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    DOLLAR          reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    SELF            reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    PARENT          reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    STATIC          reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    ARRAY           reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    LEFT_CBRAC      reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    STRING          reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    NEGATION        reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    AT              reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    CLONE           reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    PLUS            reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    LESS            reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    BITWISE_NOT     reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    NEW             reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    DOUBLEPLUS      reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    DOUBLELESS      reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    BACKTICK        reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    LNUMBER         reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    DNUMBER         reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    EMPTY           reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    EVAL            reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    EXIT            reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    DIE             reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    ISSET           reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)
    FUNCTION        reduce using rule 240 (compound_assignment_operator -> MINUS_EQUAL .)


state 311

    (241) compound_assignment_operator -> CONCAT_EQUAL .

    LIST            reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    VARIABLE        reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    DOLLAR          reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    SELF            reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    PARENT          reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    STATIC          reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    ARRAY           reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    LEFT_CBRAC      reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    STRING          reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    NEGATION        reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    AT              reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    CLONE           reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    PLUS            reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    LESS            reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    BITWISE_NOT     reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    NEW             reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    DOUBLEPLUS      reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    DOUBLELESS      reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    BACKTICK        reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    LNUMBER         reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    DNUMBER         reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    EMPTY           reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    EVAL            reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    EXIT            reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    DIE             reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    ISSET           reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)
    FUNCTION        reduce using rule 241 (compound_assignment_operator -> CONCAT_EQUAL .)


state 312

    (242) compound_assignment_operator -> SL_EQUAL .

    LIST            reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    VARIABLE        reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    DOLLAR          reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    SELF            reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    PARENT          reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    STATIC          reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    ARRAY           reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    LEFT_CBRAC      reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    STRING          reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    NEGATION        reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    AT              reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    CLONE           reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    PLUS            reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    LESS            reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    BITWISE_NOT     reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    NEW             reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    DOUBLEPLUS      reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    DOUBLELESS      reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    BACKTICK        reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    LNUMBER         reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    DNUMBER         reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    EMPTY           reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    EVAL            reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    EXIT            reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    DIE             reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    ISSET           reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)
    FUNCTION        reduce using rule 242 (compound_assignment_operator -> SL_EQUAL .)


state 313

    (243) compound_assignment_operator -> SR_EQUAL .

    LIST            reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    VARIABLE        reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    DOLLAR          reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    SELF            reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    PARENT          reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    STATIC          reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    ARRAY           reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    LEFT_CBRAC      reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    STRING          reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    NEGATION        reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    AT              reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    CLONE           reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    PLUS            reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    LESS            reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    BITWISE_NOT     reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    NEW             reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    DOUBLEPLUS      reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    DOUBLELESS      reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    BACKTICK        reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    LNUMBER         reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    DNUMBER         reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    EMPTY           reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    EVAL            reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    EXIT            reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    DIE             reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    ISSET           reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)
    FUNCTION        reduce using rule 243 (compound_assignment_operator -> SR_EQUAL .)


state 314

    (244) compound_assignment_operator -> AND_EQUAL .

    LIST            reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    VARIABLE        reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    DOLLAR          reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    SELF            reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    PARENT          reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    STATIC          reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    ARRAY           reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    LEFT_CBRAC      reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    STRING          reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    NEGATION        reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    AT              reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    CLONE           reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    PLUS            reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    LESS            reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    BITWISE_NOT     reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    NEW             reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    DOUBLEPLUS      reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    DOUBLELESS      reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    BACKTICK        reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    LNUMBER         reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    DNUMBER         reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    EMPTY           reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    EVAL            reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    EXIT            reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    DIE             reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    ISSET           reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)
    FUNCTION        reduce using rule 244 (compound_assignment_operator -> AND_EQUAL .)


state 315

    (245) compound_assignment_operator -> XOR_EQUAL .

    LIST            reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    VARIABLE        reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    DOLLAR          reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    SELF            reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    PARENT          reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    STATIC          reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    ARRAY           reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    LEFT_CBRAC      reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    STRING          reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    NEGATION        reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    AT              reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    CLONE           reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    PLUS            reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    LESS            reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    BITWISE_NOT     reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    NEW             reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    DOUBLEPLUS      reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    DOUBLELESS      reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    BACKTICK        reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    LNUMBER         reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    DNUMBER         reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    EMPTY           reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    EVAL            reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    EXIT            reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    DIE             reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    ISSET           reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)
    FUNCTION        reduce using rule 245 (compound_assignment_operator -> XOR_EQUAL .)


state 316

    (246) compound_assignment_operator -> OR_EQUAL .

    LIST            reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    VARIABLE        reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    DOLLAR          reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    SELF            reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    PARENT          reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    STATIC          reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    ARRAY           reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    LEFT_CBRAC      reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    STRING          reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    NEGATION        reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    AT              reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    CLONE           reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    PLUS            reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    LESS            reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    BITWISE_NOT     reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    NEW             reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    DOUBLEPLUS      reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    DOUBLELESS      reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    BACKTICK        reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    LNUMBER         reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    DNUMBER         reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    EMPTY           reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    EVAL            reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    EXIT            reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    DIE             reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    ISSET           reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)
    FUNCTION        reduce using rule 246 (compound_assignment_operator -> OR_EQUAL .)


state 317

    (219) simple_assignment_expression -> list_intrinsic EQUAL . assignment_expression
    (215) assignment_expression -> . conditional_expression
    (216) assignment_expression -> . simple_assignment_expression
    (217) assignment_expression -> . compound_assignment_expression
    (212) conditional_expression -> . coalesce_expression
    (213) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (214) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (218) simple_assignment_expression -> . variable EQUAL assignment_expression
    (219) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (234) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (210) coalesce_expression -> . logical_inc_OR_expression_1
    (211) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (208) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (209) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (555) name -> . STRING
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .

    LIST            shift and go to state 157
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 158
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 178
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180
    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    FUNCTION        reduce using rule 77 (static_opt -> .)

    list_intrinsic                 shift and go to state 152
    assignment_expression          shift and go to state 460
    conditional_expression         shift and go to state 147
    simple_assignment_expression   shift and go to state 148
    compound_assignment_expression shift and go to state 149
    coalesce_expression            shift and go to state 150
    variable                       shift and go to state 151
    logical_inc_OR_expression_1    shift and go to state 153
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    logical_AND_expression_1       shift and go to state 159
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 165
    dereferencable_expression      shift and go to state 166
    bitwise_inc_OR_expression      shift and go to state 167
    qualified_name                 shift and go to state 169
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 172
    string_literal                 shift and go to state 173
    bitwise_exc_OR_expression      shift and go to state 174
    name                           shift and go to state 175
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222

state 318

    (211) coalesce_expression -> logical_inc_OR_expression_1 COALESCE . coalesce_expression
    (210) coalesce_expression -> . logical_inc_OR_expression_1
    (211) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (208) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (209) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    logical_inc_OR_expression_1    shift and go to state 153
    coalesce_expression            shift and go to state 461
    logical_AND_expression_1       shift and go to state 159
    bitwise_inc_OR_expression      shift and go to state 167
    bitwise_exc_OR_expression      shift and go to state 174
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 319

    (209) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR . BITWISE_OR logical_AND_expression_1

    BITWISE_OR      shift and go to state 462


state 320

    (220) list_intrinsic -> LIST LEFT_PARENTHESIS . list_expression_list RIGHT_PARENTHESIS
    (221) list_expression_list -> . unkeyed_list_expression_list
    (222) list_expression_list -> . keyed_list_expression_list COLON
    (223) list_expression_list -> . keyed_list_expression_list
    (224) unkeyed_list_expression_list -> . list_or_variable
    (225) unkeyed_list_expression_list -> . COLON
    (226) unkeyed_list_expression_list -> . unkeyed_list_expression_list COLON list_or_variable COLON
    (227) unkeyed_list_expression_list -> . unkeyed_list_expression_list COLON list_or_variable
    (228) keyed_list_expression_list -> . expression DOUBLE_ARROW list_or_variable
    (229) keyed_list_expression_list -> . keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
    (230) list_or_variable -> . list_intrinsic
    (231) list_or_variable -> . AMPERSAND variable
    (232) list_or_variable -> . variable
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (555) name -> . STRING
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    COLON           shift and go to state 466
    AMPERSAND       shift and go to state 470
    LIST            shift and go to state 157
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    list_expression_list           shift and go to state 463
    unkeyed_list_expression_list   shift and go to state 464
    keyed_list_expression_list     shift and go to state 465
    list_or_variable               shift and go to state 467
    expression                     shift and go to state 468
    list_intrinsic                 shift and go to state 469
    variable                       shift and go to state 471
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    logical_exc_OR_expression      shift and go to state 70
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    logical_AND_expression_2       shift and go to state 77
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    name                           shift and go to state 175
    yield_from_expression          shift and go to state 81

state 321

    (39) dereferencable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (43) callable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (34) primary_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 472


state 322

    (172) cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS . unary_expression
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    unary_expression               shift and go to state 473
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 323

    (207) logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND . AMPERSAND bitwise_inc_OR_expression

    AMPERSAND       shift and go to state 474


state 324

    (149) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON . simple_variable
    (150) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (152) class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON . NAME
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (137) member_name -> . NAME
    (138) member_name -> . simple_variable
    (139) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS

    NAME            shift and go to state 477
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_CBRAC      shift and go to state 478

    simple_variable                shift and go to state 475
    member_name                    shift and go to state 476

state 325

    (136) member_access_expression -> dereferencable_expression ARROW . member_name
    (140) member_call_expression -> dereferencable_expression ARROW . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> dereferencable_expression ARROW . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) member_name -> . NAME
    (138) member_name -> . simple_variable
    (139) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    NAME            shift and go to state 480
    LEFT_CBRAC      shift and go to state 478
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    member_name                    shift and go to state 479
    simple_variable                shift and go to state 481

state 326

    (125) subscript_expression -> dereferencable_expression LEFT_CBRAC . expression_opt RIGHT_CBRAC
    (126) subscript_expression -> dereferencable_expression LEFT_CBRAC . expression RIGHT_PARENTHESIS
    (111) expression_opt -> . expression
    (112) expression_opt -> .
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     reduce using rule 112 (expression_opt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression_opt                 shift and go to state 482
    expression                     shift and go to state 483
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 327

    (205) bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR . bitwise_exc_OR_expression
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    bitwise_exc_OR_expression      shift and go to state 484
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 328

    (114) array_creation_expression -> LEFT_CBRAC array_initializer_opt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 485


state 329

    (115) array_initializer_opt -> array_initializer .

    RIGHT_CBRAC     reduce using rule 115 (array_initializer_opt -> array_initializer .)
    RIGHT_PARENTHESIS reduce using rule 115 (array_initializer_opt -> array_initializer .)


state 330

    (117) array_initializer -> array_initializer_list .
    (118) array_initializer -> array_initializer_list . COLON

    RIGHT_CBRAC     reduce using rule 117 (array_initializer -> array_initializer_list .)
    RIGHT_PARENTHESIS reduce using rule 117 (array_initializer -> array_initializer_list .)
    COLON           shift and go to state 486


state 331

    (119) array_initializer_list -> array_element_initializer .
    (120) array_initializer_list -> array_element_initializer . COLON array_element_initializer

  ! shift/reduce conflict for COLON resolved as shift
    RIGHT_CBRAC     reduce using rule 119 (array_initializer_list -> array_element_initializer .)
    RIGHT_PARENTHESIS reduce using rule 119 (array_initializer_list -> array_element_initializer .)
    COLON           shift and go to state 487

  ! COLON           [ reduce using rule 119 (array_initializer_list -> array_element_initializer .) ]


state 332

    (121) array_element_initializer -> AMPERSAND_opt . element_value
    (124) element_value -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    element_value                  shift and go to state 488
    expression                     shift and go to state 489
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 333

    (122) array_element_initializer -> element_key . ARROW AMPERSAND_opt element_value

    ARROW           shift and go to state 490


state 334

    (78) AMPERSAND_opt -> AMPERSAND .

    INCLUDE         reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    INCLUDE_ONCE    reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    REQUIRE         reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    REQUIRE_ONCE    reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    PRINT           reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    YIELD           reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    YIELD_FROM      reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    LEFT_PARENTHESIS reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    CONSTRUCT       reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    DESTRUCT        reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)
    VARIABLE        reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .)


state 335

    (123) element_key -> expression .

    ARROW           reduce using rule 123 (element_key -> expression .)


state 336

    (127) function_call_expression -> qualified_name LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> qualified_name LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> . argument_expression_list
    (95) argument_expression_list_opt -> .
    (131) argument_expression_list -> . argument_expression
    (132) argument_expression_list -> . argument_expression_list argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 95 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression_list_opt   shift and go to state 491
    argument_expression_list       shift and go to state 492
    argument_expression            shift and go to state 493
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 337

    (129) function_call_expression -> callable_expression LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> callable_expression LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> . argument_expression_list
    (95) argument_expression_list_opt -> .
    (131) argument_expression_list -> . argument_expression
    (132) argument_expression_list -> . argument_expression_list argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 95 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression_list_opt   shift and go to state 497
    argument_expression_list       shift and go to state 498
    argument_expression            shift and go to state 493
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 338

    (203) bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR . bitwise_AND_expression
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    bitwise_AND_expression         shift and go to state 499
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 339

    (113) array_creation_expression -> ARRAY LEFT_PARENTHESIS . array_initializer_opt RIGHT_PARENTHESIS
    (115) array_initializer_opt -> . array_initializer
    (116) array_initializer_opt -> .
    (117) array_initializer -> . array_initializer_list
    (118) array_initializer -> . array_initializer_list COLON
    (119) array_initializer_list -> . array_element_initializer
    (120) array_initializer_list -> . array_element_initializer COLON array_element_initializer
    (121) array_element_initializer -> . AMPERSAND_opt element_value
    (122) array_element_initializer -> . element_key ARROW AMPERSAND_opt element_value
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .
    (123) element_key -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    RIGHT_PARENTHESIS reduce using rule 116 (array_initializer_opt -> .)
    AMPERSAND       shift and go to state 334
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! INCLUDE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 79 (AMPERSAND_opt -> .) ]

    array_initializer_opt          shift and go to state 500
    array_initializer              shift and go to state 329
    array_initializer_list         shift and go to state 330
    array_element_initializer      shift and go to state 331
    AMPERSAND_opt                  shift and go to state 332
    element_key                    shift and go to state 333
    expression                     shift and go to state 335
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 340

    (201) bitwise_AND_expression -> bitwise_AND_expression AMPERSAND . equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    equality_expression            shift and go to state 501
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 341

    (196) equality_expression -> equality_expression EQUAL . relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    relational_expression          shift and go to state 502
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 342

    (197) equality_expression -> equality_expression IS_NOT_EQUAL . relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    relational_expression          shift and go to state 503
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 343

    (198) equality_expression -> equality_expression IS_IDENTICAL . relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    relational_expression          shift and go to state 504
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 344

    (199) equality_expression -> equality_expression IS_NOT_IDENTICAL . relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    relational_expression          shift and go to state 505
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 345

    (190) relational_expression -> relational_expression LESS_THAN . shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    shift_expression               shift and go to state 506
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 346

    (191) relational_expression -> relational_expression IS_SMALLER_OR_EQUAL . shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    shift_expression               shift and go to state 507
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 347

    (192) relational_expression -> relational_expression IS_GREATER_OR_EQUAL . shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    shift_expression               shift and go to state 508
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 348

    (193) relational_expression -> relational_expression GREATER_THAN_OR_EQUAL . shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    shift_expression               shift and go to state 509
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 349

    (194) relational_expression -> relational_expression SPACESHIP . shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    shift_expression               shift and go to state 510
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 350

    (187) shift_expression -> shift_expression SL . additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    additive_expression            shift and go to state 511
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 351

    (188) shift_expression -> shift_expression SR . additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    additive_expression            shift and go to state 512
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 352

    (183) additive_expression -> additive_expression PLUS . multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    multiplicative_expression      shift and go to state 513
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 353

    (184) additive_expression -> additive_expression LESS . multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    multiplicative_expression      shift and go to state 514
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 354

    (185) additive_expression -> additive_expression CONCAT . multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    multiplicative_expression      shift and go to state 515
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 355

    (179) multiplicative_expression -> multiplicative_expression ASTERISK . logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    logical_not_expression         shift and go to state 516
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 356

    (180) multiplicative_expression -> multiplicative_expression DIVIDE . logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    logical_not_expression         shift and go to state 517
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 357

    (181) multiplicative_expression -> multiplicative_expression MODULO . logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    logical_not_expression         shift and go to state 518
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 358

    (177) logical_not_expression -> NEGATION instanceof_expression .
    (175) instanceof_subj -> instanceof_expression .

    ASTERISK        reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    DIVIDE          reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    MODULO          reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    PLUS            reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    LESS            reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    CONCAT          reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    SL              reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    SR              reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    LESS_THAN       reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    SPACESHIP       reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    EQUAL           reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_NOT_EQUAL    reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_IDENTICAL    reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_NOT_IDENTICAL reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    AMPERSAND       reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    BITWISE_XOR     reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    BITWISE_OR      reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    COALESCE        reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    TERNARY_OPERATION reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    AND             reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    XOR             reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    OR              reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    SEMICOLON       reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    INCLUDE         reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    INCLUDE_ONCE    reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    REQUIRE         reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    REQUIRE_ONCE    reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    PRINT           reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    YIELD           reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    YIELD_FROM      reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    RIGHT_PARENTHESIS reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    COLON           reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    AS              reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    ARROW           reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    STRING          reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    RIGHT_CBRAC     reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    VARIABLE        reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    DOUBLE_POINT    reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    DOUBLE_ARROW    reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    ELLIPSIS        reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    ARRAY           reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    CALLABLE        reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    ITERABLE        reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    BOOL            reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    FLOAT           reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    INT             reduce using rule 177 (logical_not_expression -> NEGATION instanceof_expression .)
    INSTANCEOF      reduce using rule 175 (instanceof_subj -> instanceof_expression .)


state 359

    (172) cast_expression -> LEFT_PARENTHESIS . RIGHT_PARENTHESIS unary_expression
    (34) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (39) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (43) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 322
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 519
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 360

    (20) primary_expression -> variable .
    (142) postfix_increment_expression -> variable . DOUBLEPLUS
    (143) postfix_decrement_expression -> variable . DOUBLELESS
    (233) byref_assignment_expression -> variable . EQUAL AMPERSAND variable
    (38) dereferencable_expression -> variable .

  ! shift/reduce conflict for EQUAL resolved as shift
  ! reduce/reduce conflict for ARROW resolved using rule 20 (primary_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 20 (primary_expression -> variable .)
    ASTERISK        reduce using rule 20 (primary_expression -> variable .)
    DIVIDE          reduce using rule 20 (primary_expression -> variable .)
    MODULO          reduce using rule 20 (primary_expression -> variable .)
    PLUS            reduce using rule 20 (primary_expression -> variable .)
    LESS            reduce using rule 20 (primary_expression -> variable .)
    CONCAT          reduce using rule 20 (primary_expression -> variable .)
    SL              reduce using rule 20 (primary_expression -> variable .)
    SR              reduce using rule 20 (primary_expression -> variable .)
    LESS_THAN       reduce using rule 20 (primary_expression -> variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 20 (primary_expression -> variable .)
    IS_GREATER_OR_EQUAL reduce using rule 20 (primary_expression -> variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 20 (primary_expression -> variable .)
    SPACESHIP       reduce using rule 20 (primary_expression -> variable .)
    IS_NOT_EQUAL    reduce using rule 20 (primary_expression -> variable .)
    IS_IDENTICAL    reduce using rule 20 (primary_expression -> variable .)
    IS_NOT_IDENTICAL reduce using rule 20 (primary_expression -> variable .)
    AMPERSAND       reduce using rule 20 (primary_expression -> variable .)
    BITWISE_XOR     reduce using rule 20 (primary_expression -> variable .)
    BITWISE_OR      reduce using rule 20 (primary_expression -> variable .)
    COALESCE        reduce using rule 20 (primary_expression -> variable .)
    TERNARY_OPERATION reduce using rule 20 (primary_expression -> variable .)
    AND             reduce using rule 20 (primary_expression -> variable .)
    XOR             reduce using rule 20 (primary_expression -> variable .)
    OR              reduce using rule 20 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 20 (primary_expression -> variable .)
    INCLUDE         reduce using rule 20 (primary_expression -> variable .)
    INCLUDE_ONCE    reduce using rule 20 (primary_expression -> variable .)
    REQUIRE         reduce using rule 20 (primary_expression -> variable .)
    REQUIRE_ONCE    reduce using rule 20 (primary_expression -> variable .)
    PRINT           reduce using rule 20 (primary_expression -> variable .)
    YIELD           reduce using rule 20 (primary_expression -> variable .)
    YIELD_FROM      reduce using rule 20 (primary_expression -> variable .)
    RIGHT_PARENTHESIS reduce using rule 20 (primary_expression -> variable .)
    COLON           reduce using rule 20 (primary_expression -> variable .)
    AS              reduce using rule 20 (primary_expression -> variable .)
    ARROW           reduce using rule 20 (primary_expression -> variable .)
    STRING          reduce using rule 20 (primary_expression -> variable .)
    RIGHT_CBRAC     reduce using rule 20 (primary_expression -> variable .)
    VARIABLE        reduce using rule 20 (primary_expression -> variable .)
    DOUBLE_POINT    reduce using rule 20 (primary_expression -> variable .)
    DOUBLE_ARROW    reduce using rule 20 (primary_expression -> variable .)
    ELLIPSIS        reduce using rule 20 (primary_expression -> variable .)
    ARRAY           reduce using rule 20 (primary_expression -> variable .)
    CALLABLE        reduce using rule 20 (primary_expression -> variable .)
    ITERABLE        reduce using rule 20 (primary_expression -> variable .)
    BOOL            reduce using rule 20 (primary_expression -> variable .)
    FLOAT           reduce using rule 20 (primary_expression -> variable .)
    INT             reduce using rule 20 (primary_expression -> variable .)
    INSTANCEOF      reduce using rule 20 (primary_expression -> variable .)
    DOUBLEPLUS      shift and go to state 303
    DOUBLELESS      shift and go to state 304
    EQUAL           shift and go to state 520
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)

  ! EQUAL           [ reduce using rule 20 (primary_expression -> variable .) ]
  ! ARROW           [ reduce using rule 38 (dereferencable_expression -> variable .) ]


state 361

    (24) primary_expression -> array_creation_expression .
    (40) dereferencable_expression -> array_creation_expression .
    (44) callable_expression -> array_creation_expression .

  ! reduce/reduce conflict for ARROW resolved using rule 24 (primary_expression -> array_creation_expression .)
    DOUBLEASTERISK  reduce using rule 24 (primary_expression -> array_creation_expression .)
    ASTERISK        reduce using rule 24 (primary_expression -> array_creation_expression .)
    DIVIDE          reduce using rule 24 (primary_expression -> array_creation_expression .)
    MODULO          reduce using rule 24 (primary_expression -> array_creation_expression .)
    PLUS            reduce using rule 24 (primary_expression -> array_creation_expression .)
    LESS            reduce using rule 24 (primary_expression -> array_creation_expression .)
    CONCAT          reduce using rule 24 (primary_expression -> array_creation_expression .)
    SL              reduce using rule 24 (primary_expression -> array_creation_expression .)
    SR              reduce using rule 24 (primary_expression -> array_creation_expression .)
    LESS_THAN       reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    SPACESHIP       reduce using rule 24 (primary_expression -> array_creation_expression .)
    EQUAL           reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_IDENTICAL    reduce using rule 24 (primary_expression -> array_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 24 (primary_expression -> array_creation_expression .)
    AMPERSAND       reduce using rule 24 (primary_expression -> array_creation_expression .)
    BITWISE_XOR     reduce using rule 24 (primary_expression -> array_creation_expression .)
    BITWISE_OR      reduce using rule 24 (primary_expression -> array_creation_expression .)
    COALESCE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    TERNARY_OPERATION reduce using rule 24 (primary_expression -> array_creation_expression .)
    AND             reduce using rule 24 (primary_expression -> array_creation_expression .)
    XOR             reduce using rule 24 (primary_expression -> array_creation_expression .)
    OR              reduce using rule 24 (primary_expression -> array_creation_expression .)
    SEMICOLON       reduce using rule 24 (primary_expression -> array_creation_expression .)
    INCLUDE         reduce using rule 24 (primary_expression -> array_creation_expression .)
    INCLUDE_ONCE    reduce using rule 24 (primary_expression -> array_creation_expression .)
    REQUIRE         reduce using rule 24 (primary_expression -> array_creation_expression .)
    REQUIRE_ONCE    reduce using rule 24 (primary_expression -> array_creation_expression .)
    PRINT           reduce using rule 24 (primary_expression -> array_creation_expression .)
    YIELD           reduce using rule 24 (primary_expression -> array_creation_expression .)
    YIELD_FROM      reduce using rule 24 (primary_expression -> array_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 24 (primary_expression -> array_creation_expression .)
    COLON           reduce using rule 24 (primary_expression -> array_creation_expression .)
    AS              reduce using rule 24 (primary_expression -> array_creation_expression .)
    ARROW           reduce using rule 24 (primary_expression -> array_creation_expression .)
    STRING          reduce using rule 24 (primary_expression -> array_creation_expression .)
    RIGHT_CBRAC     reduce using rule 24 (primary_expression -> array_creation_expression .)
    VARIABLE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    DOUBLE_POINT    reduce using rule 24 (primary_expression -> array_creation_expression .)
    DOUBLE_ARROW    reduce using rule 24 (primary_expression -> array_creation_expression .)
    ELLIPSIS        reduce using rule 24 (primary_expression -> array_creation_expression .)
    ARRAY           reduce using rule 24 (primary_expression -> array_creation_expression .)
    CALLABLE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    ITERABLE        reduce using rule 24 (primary_expression -> array_creation_expression .)
    BOOL            reduce using rule 24 (primary_expression -> array_creation_expression .)
    FLOAT           reduce using rule 24 (primary_expression -> array_creation_expression .)
    INT             reduce using rule 24 (primary_expression -> array_creation_expression .)
    INSTANCEOF      reduce using rule 24 (primary_expression -> array_creation_expression .)
    LEFT_CBRAC      reduce using rule 40 (dereferencable_expression -> array_creation_expression .)
    DOUBLE_COLON    reduce using rule 40 (dereferencable_expression -> array_creation_expression .)
    LEFT_PARENTHESIS reduce using rule 44 (callable_expression -> array_creation_expression .)

  ! ARROW           [ reduce using rule 40 (dereferencable_expression -> array_creation_expression .) ]


state 362

    (152) class_constant_access_expression -> scope_resolution_qualifier . DOUBLE_COLON NAME
    (149) scoped_property_access_expression -> scope_resolution_qualifier . DOUBLE_COLON simple_variable
    (150) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    DOUBLE_COLON    shift and go to state 521


state 363

    (54) constant_access_expression -> qualified_name .
    (154) scope_resolution_qualifier -> qualified_name .
    (127) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    DOUBLEASTERISK  reduce using rule 54 (constant_access_expression -> qualified_name .)
    ASTERISK        reduce using rule 54 (constant_access_expression -> qualified_name .)
    DIVIDE          reduce using rule 54 (constant_access_expression -> qualified_name .)
    MODULO          reduce using rule 54 (constant_access_expression -> qualified_name .)
    PLUS            reduce using rule 54 (constant_access_expression -> qualified_name .)
    LESS            reduce using rule 54 (constant_access_expression -> qualified_name .)
    CONCAT          reduce using rule 54 (constant_access_expression -> qualified_name .)
    SL              reduce using rule 54 (constant_access_expression -> qualified_name .)
    SR              reduce using rule 54 (constant_access_expression -> qualified_name .)
    LESS_THAN       reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_GREATER_OR_EQUAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    SPACESHIP       reduce using rule 54 (constant_access_expression -> qualified_name .)
    EQUAL           reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_NOT_EQUAL    reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_IDENTICAL    reduce using rule 54 (constant_access_expression -> qualified_name .)
    IS_NOT_IDENTICAL reduce using rule 54 (constant_access_expression -> qualified_name .)
    AMPERSAND       reduce using rule 54 (constant_access_expression -> qualified_name .)
    BITWISE_XOR     reduce using rule 54 (constant_access_expression -> qualified_name .)
    BITWISE_OR      reduce using rule 54 (constant_access_expression -> qualified_name .)
    COALESCE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    TERNARY_OPERATION reduce using rule 54 (constant_access_expression -> qualified_name .)
    AND             reduce using rule 54 (constant_access_expression -> qualified_name .)
    XOR             reduce using rule 54 (constant_access_expression -> qualified_name .)
    OR              reduce using rule 54 (constant_access_expression -> qualified_name .)
    SEMICOLON       reduce using rule 54 (constant_access_expression -> qualified_name .)
    INCLUDE         reduce using rule 54 (constant_access_expression -> qualified_name .)
    INCLUDE_ONCE    reduce using rule 54 (constant_access_expression -> qualified_name .)
    REQUIRE         reduce using rule 54 (constant_access_expression -> qualified_name .)
    REQUIRE_ONCE    reduce using rule 54 (constant_access_expression -> qualified_name .)
    PRINT           reduce using rule 54 (constant_access_expression -> qualified_name .)
    YIELD           reduce using rule 54 (constant_access_expression -> qualified_name .)
    YIELD_FROM      reduce using rule 54 (constant_access_expression -> qualified_name .)
    RIGHT_PARENTHESIS reduce using rule 54 (constant_access_expression -> qualified_name .)
    COLON           reduce using rule 54 (constant_access_expression -> qualified_name .)
    AS              reduce using rule 54 (constant_access_expression -> qualified_name .)
    ARROW           reduce using rule 54 (constant_access_expression -> qualified_name .)
    STRING          reduce using rule 54 (constant_access_expression -> qualified_name .)
    RIGHT_CBRAC     reduce using rule 54 (constant_access_expression -> qualified_name .)
    VARIABLE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    DOUBLE_POINT    reduce using rule 54 (constant_access_expression -> qualified_name .)
    DOUBLE_ARROW    reduce using rule 54 (constant_access_expression -> qualified_name .)
    ELLIPSIS        reduce using rule 54 (constant_access_expression -> qualified_name .)
    ARRAY           reduce using rule 54 (constant_access_expression -> qualified_name .)
    CALLABLE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    ITERABLE        reduce using rule 54 (constant_access_expression -> qualified_name .)
    BOOL            reduce using rule 54 (constant_access_expression -> qualified_name .)
    FLOAT           reduce using rule 54 (constant_access_expression -> qualified_name .)
    INT             reduce using rule 54 (constant_access_expression -> qualified_name .)
    INSTANCEOF      reduce using rule 54 (constant_access_expression -> qualified_name .)
    DOUBLE_COLON    reduce using rule 154 (scope_resolution_qualifier -> qualified_name .)
    LEFT_PARENTHESIS shift and go to state 336


state 364

    (57) literal -> string_literal .
    (41) dereferencable_expression -> string_literal .
    (45) callable_expression -> string_literal .

  ! reduce/reduce conflict for ARROW resolved using rule 41 (dereferencable_expression -> string_literal .)
    DOUBLEASTERISK  reduce using rule 57 (literal -> string_literal .)
    ASTERISK        reduce using rule 57 (literal -> string_literal .)
    DIVIDE          reduce using rule 57 (literal -> string_literal .)
    MODULO          reduce using rule 57 (literal -> string_literal .)
    PLUS            reduce using rule 57 (literal -> string_literal .)
    LESS            reduce using rule 57 (literal -> string_literal .)
    CONCAT          reduce using rule 57 (literal -> string_literal .)
    SL              reduce using rule 57 (literal -> string_literal .)
    SR              reduce using rule 57 (literal -> string_literal .)
    LESS_THAN       reduce using rule 57 (literal -> string_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 57 (literal -> string_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 57 (literal -> string_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 57 (literal -> string_literal .)
    SPACESHIP       reduce using rule 57 (literal -> string_literal .)
    EQUAL           reduce using rule 57 (literal -> string_literal .)
    IS_NOT_EQUAL    reduce using rule 57 (literal -> string_literal .)
    IS_IDENTICAL    reduce using rule 57 (literal -> string_literal .)
    IS_NOT_IDENTICAL reduce using rule 57 (literal -> string_literal .)
    AMPERSAND       reduce using rule 57 (literal -> string_literal .)
    BITWISE_XOR     reduce using rule 57 (literal -> string_literal .)
    BITWISE_OR      reduce using rule 57 (literal -> string_literal .)
    COALESCE        reduce using rule 57 (literal -> string_literal .)
    TERNARY_OPERATION reduce using rule 57 (literal -> string_literal .)
    AND             reduce using rule 57 (literal -> string_literal .)
    XOR             reduce using rule 57 (literal -> string_literal .)
    OR              reduce using rule 57 (literal -> string_literal .)
    SEMICOLON       reduce using rule 57 (literal -> string_literal .)
    INCLUDE         reduce using rule 57 (literal -> string_literal .)
    INCLUDE_ONCE    reduce using rule 57 (literal -> string_literal .)
    REQUIRE         reduce using rule 57 (literal -> string_literal .)
    REQUIRE_ONCE    reduce using rule 57 (literal -> string_literal .)
    PRINT           reduce using rule 57 (literal -> string_literal .)
    YIELD           reduce using rule 57 (literal -> string_literal .)
    YIELD_FROM      reduce using rule 57 (literal -> string_literal .)
    RIGHT_PARENTHESIS reduce using rule 57 (literal -> string_literal .)
    COLON           reduce using rule 57 (literal -> string_literal .)
    AS              reduce using rule 57 (literal -> string_literal .)
    STRING          reduce using rule 57 (literal -> string_literal .)
    RIGHT_CBRAC     reduce using rule 57 (literal -> string_literal .)
    VARIABLE        reduce using rule 57 (literal -> string_literal .)
    DOUBLE_POINT    reduce using rule 57 (literal -> string_literal .)
    DOUBLE_ARROW    reduce using rule 57 (literal -> string_literal .)
    ELLIPSIS        reduce using rule 57 (literal -> string_literal .)
    ARRAY           reduce using rule 57 (literal -> string_literal .)
    CALLABLE        reduce using rule 57 (literal -> string_literal .)
    ITERABLE        reduce using rule 57 (literal -> string_literal .)
    BOOL            reduce using rule 57 (literal -> string_literal .)
    FLOAT           reduce using rule 57 (literal -> string_literal .)
    INT             reduce using rule 57 (literal -> string_literal .)
    INSTANCEOF      reduce using rule 57 (literal -> string_literal .)
    ARROW           reduce using rule 41 (dereferencable_expression -> string_literal .)
    LEFT_CBRAC      reduce using rule 41 (dereferencable_expression -> string_literal .)
    DOUBLE_COLON    reduce using rule 41 (dereferencable_expression -> string_literal .)
    LEFT_PARENTHESIS reduce using rule 45 (callable_expression -> string_literal .)

  ! ARROW           [ reduce using rule 57 (literal -> string_literal .) ]


state 365

    (136) member_access_expression -> dereferencable_expression . ARROW member_name
    (155) scope_resolution_qualifier -> dereferencable_expression .
    (125) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    ARROW           shift and go to state 325
    DOUBLE_COLON    reduce using rule 155 (scope_resolution_qualifier -> dereferencable_expression .)
    LEFT_CBRAC      shift and go to state 326


state 366

    (76) static_opt -> STATIC .
    (158) relative_scope -> STATIC .

    FUNCTION        reduce using rule 76 (static_opt -> STATIC .)
    DOUBLE_COLON    reduce using rule 158 (relative_scope -> STATIC .)


state 367

    (174) instanceof_expression -> instanceof_subj INSTANCEOF . class_type_designator
    (102) class_type_designator -> . qualified_name
    (103) class_type_designator -> . new_variable
    (545) qualified_name -> . name
    (104) new_variable -> . simple_variable
    (105) new_variable -> . new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
    (106) new_variable -> . new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS
    (107) new_variable -> . new_variable ARROW member_name
    (108) new_variable -> . qualified_name DOUBLE_COLON simple_variable
    (109) new_variable -> . relative_scope DOUBLE_COLON simple_variable
    (110) new_variable -> . new_variable DOUBLE_COLON simple_variable
    (555) name -> . STRING
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC

    STRING          shift and go to state 51
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253

    class_type_designator          shift and go to state 522
    qualified_name                 shift and go to state 376
    new_variable                   shift and go to state 377
    name                           shift and go to state 175
    simple_variable                shift and go to state 378
    relative_scope                 shift and go to state 379

state 368

    (162) exponentiation_expression -> clone_expression DOUBLEASTERISK . exponentiation_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    CLONE           shift and go to state 202
    LEFT_PARENTHESIS shift and go to state 372
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    clone_expression               shift and go to state 198
    exponentiation_expression      shift and go to state 523
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 369

    (167) unary_op_expression -> unary_operator unary_expression .

    ASTERISK        reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    DIVIDE          reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    MODULO          reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    PLUS            reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    LESS            reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    CONCAT          reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    SL              reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    SR              reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    LESS_THAN       reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    SPACESHIP       reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    EQUAL           reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    IS_NOT_EQUAL    reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    IS_IDENTICAL    reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    AMPERSAND       reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    BITWISE_XOR     reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    BITWISE_OR      reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    COALESCE        reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    TERNARY_OPERATION reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    AND             reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    XOR             reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    OR              reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    SEMICOLON       reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    INCLUDE         reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    INCLUDE_ONCE    reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    REQUIRE         reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    REQUIRE_ONCE    reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    PRINT           reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    YIELD           reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    YIELD_FROM      reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    COLON           reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    AS              reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    ARROW           reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    STRING          reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    RIGHT_CBRAC     reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    VARIABLE        reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    DOUBLE_POINT    reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    DOUBLE_ARROW    reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    ELLIPSIS        reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    ARRAY           reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    CALLABLE        reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    ITERABLE        reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    BOOL            reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    FLOAT           reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    INT             reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)
    INSTANCEOF      reduce using rule 167 (unary_op_expression -> unary_operator unary_expression .)


state 370

    (171) error_control_expression -> AT unary_expression .

    ASTERISK        reduce using rule 171 (error_control_expression -> AT unary_expression .)
    DIVIDE          reduce using rule 171 (error_control_expression -> AT unary_expression .)
    MODULO          reduce using rule 171 (error_control_expression -> AT unary_expression .)
    PLUS            reduce using rule 171 (error_control_expression -> AT unary_expression .)
    LESS            reduce using rule 171 (error_control_expression -> AT unary_expression .)
    CONCAT          reduce using rule 171 (error_control_expression -> AT unary_expression .)
    SL              reduce using rule 171 (error_control_expression -> AT unary_expression .)
    SR              reduce using rule 171 (error_control_expression -> AT unary_expression .)
    LESS_THAN       reduce using rule 171 (error_control_expression -> AT unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 171 (error_control_expression -> AT unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 171 (error_control_expression -> AT unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 171 (error_control_expression -> AT unary_expression .)
    SPACESHIP       reduce using rule 171 (error_control_expression -> AT unary_expression .)
    EQUAL           reduce using rule 171 (error_control_expression -> AT unary_expression .)
    IS_NOT_EQUAL    reduce using rule 171 (error_control_expression -> AT unary_expression .)
    IS_IDENTICAL    reduce using rule 171 (error_control_expression -> AT unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 171 (error_control_expression -> AT unary_expression .)
    AMPERSAND       reduce using rule 171 (error_control_expression -> AT unary_expression .)
    BITWISE_XOR     reduce using rule 171 (error_control_expression -> AT unary_expression .)
    BITWISE_OR      reduce using rule 171 (error_control_expression -> AT unary_expression .)
    COALESCE        reduce using rule 171 (error_control_expression -> AT unary_expression .)
    TERNARY_OPERATION reduce using rule 171 (error_control_expression -> AT unary_expression .)
    AND             reduce using rule 171 (error_control_expression -> AT unary_expression .)
    XOR             reduce using rule 171 (error_control_expression -> AT unary_expression .)
    OR              reduce using rule 171 (error_control_expression -> AT unary_expression .)
    SEMICOLON       reduce using rule 171 (error_control_expression -> AT unary_expression .)
    INCLUDE         reduce using rule 171 (error_control_expression -> AT unary_expression .)
    INCLUDE_ONCE    reduce using rule 171 (error_control_expression -> AT unary_expression .)
    REQUIRE         reduce using rule 171 (error_control_expression -> AT unary_expression .)
    REQUIRE_ONCE    reduce using rule 171 (error_control_expression -> AT unary_expression .)
    PRINT           reduce using rule 171 (error_control_expression -> AT unary_expression .)
    YIELD           reduce using rule 171 (error_control_expression -> AT unary_expression .)
    YIELD_FROM      reduce using rule 171 (error_control_expression -> AT unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 171 (error_control_expression -> AT unary_expression .)
    COLON           reduce using rule 171 (error_control_expression -> AT unary_expression .)
    AS              reduce using rule 171 (error_control_expression -> AT unary_expression .)
    ARROW           reduce using rule 171 (error_control_expression -> AT unary_expression .)
    STRING          reduce using rule 171 (error_control_expression -> AT unary_expression .)
    RIGHT_CBRAC     reduce using rule 171 (error_control_expression -> AT unary_expression .)
    VARIABLE        reduce using rule 171 (error_control_expression -> AT unary_expression .)
    DOUBLE_POINT    reduce using rule 171 (error_control_expression -> AT unary_expression .)
    DOUBLE_ARROW    reduce using rule 171 (error_control_expression -> AT unary_expression .)
    ELLIPSIS        reduce using rule 171 (error_control_expression -> AT unary_expression .)
    ARRAY           reduce using rule 171 (error_control_expression -> AT unary_expression .)
    CALLABLE        reduce using rule 171 (error_control_expression -> AT unary_expression .)
    ITERABLE        reduce using rule 171 (error_control_expression -> AT unary_expression .)
    BOOL            reduce using rule 171 (error_control_expression -> AT unary_expression .)
    FLOAT           reduce using rule 171 (error_control_expression -> AT unary_expression .)
    INT             reduce using rule 171 (error_control_expression -> AT unary_expression .)
    INSTANCEOF      reduce using rule 171 (error_control_expression -> AT unary_expression .)


state 371

    (160) clone_expression -> CLONE primary_expression .

    DOUBLEASTERISK  reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    ASTERISK        reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    DIVIDE          reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    MODULO          reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    PLUS            reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    LESS            reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    CONCAT          reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    SL              reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    SR              reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    LESS_THAN       reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    SPACESHIP       reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    EQUAL           reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    IS_NOT_EQUAL    reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    IS_IDENTICAL    reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    IS_NOT_IDENTICAL reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    AMPERSAND       reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    BITWISE_XOR     reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    BITWISE_OR      reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    COALESCE        reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    TERNARY_OPERATION reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    AND             reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    XOR             reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    OR              reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    SEMICOLON       reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    INCLUDE         reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    INCLUDE_ONCE    reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    REQUIRE         reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    REQUIRE_ONCE    reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    PRINT           reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    YIELD           reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    YIELD_FROM      reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    RIGHT_PARENTHESIS reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    COLON           reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    AS              reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    ARROW           reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    STRING          reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    RIGHT_CBRAC     reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    VARIABLE        reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    DOUBLE_POINT    reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    DOUBLE_ARROW    reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    ELLIPSIS        reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    ARRAY           reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    CALLABLE        reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    ITERABLE        reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    BOOL            reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    FLOAT           reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    INT             reduce using rule 160 (clone_expression -> CLONE primary_expression .)
    INSTANCEOF      reduce using rule 160 (clone_expression -> CLONE primary_expression .)


state 372

    (34) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (39) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (43) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 519
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 373

    (75) anonymous_function_creation_expression -> static_opt FUNCTION . AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 334
    LEFT_PARENTHESIS reduce using rule 79 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 524

state 374

    (89) object_creation_expression -> NEW class_type_designator . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> NEW class_type_designator . LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> NEW class_type_designator .

    LEFT_PARENTHESIS shift and go to state 525
    DOUBLEASTERISK  reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    ASTERISK        reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    DIVIDE          reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    MODULO          reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    PLUS            reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    LESS            reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    CONCAT          reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    SL              reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    SR              reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    LESS_THAN       reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    IS_SMALLER_OR_EQUAL reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    IS_GREATER_OR_EQUAL reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    GREATER_THAN_OR_EQUAL reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    SPACESHIP       reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    EQUAL           reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    IS_NOT_EQUAL    reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    IS_IDENTICAL    reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    IS_NOT_IDENTICAL reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    AMPERSAND       reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    BITWISE_XOR     reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    BITWISE_OR      reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    COALESCE        reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    TERNARY_OPERATION reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    AND             reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    XOR             reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    OR              reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    SEMICOLON       reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    INCLUDE         reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    INCLUDE_ONCE    reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    REQUIRE         reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    REQUIRE_ONCE    reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    PRINT           reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    YIELD           reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    YIELD_FROM      reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    RIGHT_PARENTHESIS reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    COLON           reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    AS              reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    ARROW           reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    STRING          reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    RIGHT_CBRAC     reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    VARIABLE        reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    DOUBLE_POINT    reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    DOUBLE_ARROW    reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    ELLIPSIS        reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    ARRAY           reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    CALLABLE        reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    ITERABLE        reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    BOOL            reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    FLOAT           reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    INT             reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)
    INSTANCEOF      reduce using rule 91 (object_creation_expression -> NEW class_type_designator .)


state 375

    (92) object_creation_expression -> NEW CLASS . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> NEW CLASS . class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (96) class_base_clause_opt -> . class_base_clause
    (97) class_base_clause_opt -> .
    (444) class_base_clause -> . EXTENDS qualified_name

    LEFT_PARENTHESIS shift and go to state 526
    IMPLEMENTS      reduce using rule 97 (class_base_clause_opt -> .)
    LEFT_CBRAC      reduce using rule 97 (class_base_clause_opt -> .)
    EXTENDS         shift and go to state 406

    class_base_clause_opt          shift and go to state 527
    class_base_clause              shift and go to state 528

state 376

    (102) class_type_designator -> qualified_name .
    (108) new_variable -> qualified_name . DOUBLE_COLON simple_variable

    LEFT_PARENTHESIS reduce using rule 102 (class_type_designator -> qualified_name .)
    DOUBLEASTERISK  reduce using rule 102 (class_type_designator -> qualified_name .)
    ASTERISK        reduce using rule 102 (class_type_designator -> qualified_name .)
    DIVIDE          reduce using rule 102 (class_type_designator -> qualified_name .)
    MODULO          reduce using rule 102 (class_type_designator -> qualified_name .)
    PLUS            reduce using rule 102 (class_type_designator -> qualified_name .)
    LESS            reduce using rule 102 (class_type_designator -> qualified_name .)
    CONCAT          reduce using rule 102 (class_type_designator -> qualified_name .)
    SL              reduce using rule 102 (class_type_designator -> qualified_name .)
    SR              reduce using rule 102 (class_type_designator -> qualified_name .)
    LESS_THAN       reduce using rule 102 (class_type_designator -> qualified_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 102 (class_type_designator -> qualified_name .)
    IS_GREATER_OR_EQUAL reduce using rule 102 (class_type_designator -> qualified_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 102 (class_type_designator -> qualified_name .)
    SPACESHIP       reduce using rule 102 (class_type_designator -> qualified_name .)
    EQUAL           reduce using rule 102 (class_type_designator -> qualified_name .)
    IS_NOT_EQUAL    reduce using rule 102 (class_type_designator -> qualified_name .)
    IS_IDENTICAL    reduce using rule 102 (class_type_designator -> qualified_name .)
    IS_NOT_IDENTICAL reduce using rule 102 (class_type_designator -> qualified_name .)
    AMPERSAND       reduce using rule 102 (class_type_designator -> qualified_name .)
    BITWISE_XOR     reduce using rule 102 (class_type_designator -> qualified_name .)
    BITWISE_OR      reduce using rule 102 (class_type_designator -> qualified_name .)
    COALESCE        reduce using rule 102 (class_type_designator -> qualified_name .)
    TERNARY_OPERATION reduce using rule 102 (class_type_designator -> qualified_name .)
    AND             reduce using rule 102 (class_type_designator -> qualified_name .)
    XOR             reduce using rule 102 (class_type_designator -> qualified_name .)
    OR              reduce using rule 102 (class_type_designator -> qualified_name .)
    SEMICOLON       reduce using rule 102 (class_type_designator -> qualified_name .)
    INCLUDE         reduce using rule 102 (class_type_designator -> qualified_name .)
    INCLUDE_ONCE    reduce using rule 102 (class_type_designator -> qualified_name .)
    REQUIRE         reduce using rule 102 (class_type_designator -> qualified_name .)
    REQUIRE_ONCE    reduce using rule 102 (class_type_designator -> qualified_name .)
    PRINT           reduce using rule 102 (class_type_designator -> qualified_name .)
    YIELD           reduce using rule 102 (class_type_designator -> qualified_name .)
    YIELD_FROM      reduce using rule 102 (class_type_designator -> qualified_name .)
    RIGHT_PARENTHESIS reduce using rule 102 (class_type_designator -> qualified_name .)
    COLON           reduce using rule 102 (class_type_designator -> qualified_name .)
    AS              reduce using rule 102 (class_type_designator -> qualified_name .)
    ARROW           reduce using rule 102 (class_type_designator -> qualified_name .)
    STRING          reduce using rule 102 (class_type_designator -> qualified_name .)
    RIGHT_CBRAC     reduce using rule 102 (class_type_designator -> qualified_name .)
    VARIABLE        reduce using rule 102 (class_type_designator -> qualified_name .)
    DOUBLE_POINT    reduce using rule 102 (class_type_designator -> qualified_name .)
    DOUBLE_ARROW    reduce using rule 102 (class_type_designator -> qualified_name .)
    ELLIPSIS        reduce using rule 102 (class_type_designator -> qualified_name .)
    ARRAY           reduce using rule 102 (class_type_designator -> qualified_name .)
    CALLABLE        reduce using rule 102 (class_type_designator -> qualified_name .)
    ITERABLE        reduce using rule 102 (class_type_designator -> qualified_name .)
    BOOL            reduce using rule 102 (class_type_designator -> qualified_name .)
    FLOAT           reduce using rule 102 (class_type_designator -> qualified_name .)
    INT             reduce using rule 102 (class_type_designator -> qualified_name .)
    INSTANCEOF      reduce using rule 102 (class_type_designator -> qualified_name .)
    DOUBLE_COLON    shift and go to state 529


state 377

    (103) class_type_designator -> new_variable .
    (105) new_variable -> new_variable . LEFT_CBRAC expression_opt RIGHT_CBRAC
    (106) new_variable -> new_variable . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (107) new_variable -> new_variable . ARROW member_name
    (110) new_variable -> new_variable . DOUBLE_COLON simple_variable

  ! shift/reduce conflict for ARROW resolved as shift
    LEFT_PARENTHESIS reduce using rule 103 (class_type_designator -> new_variable .)
    DOUBLEASTERISK  reduce using rule 103 (class_type_designator -> new_variable .)
    ASTERISK        reduce using rule 103 (class_type_designator -> new_variable .)
    DIVIDE          reduce using rule 103 (class_type_designator -> new_variable .)
    MODULO          reduce using rule 103 (class_type_designator -> new_variable .)
    PLUS            reduce using rule 103 (class_type_designator -> new_variable .)
    LESS            reduce using rule 103 (class_type_designator -> new_variable .)
    CONCAT          reduce using rule 103 (class_type_designator -> new_variable .)
    SL              reduce using rule 103 (class_type_designator -> new_variable .)
    SR              reduce using rule 103 (class_type_designator -> new_variable .)
    LESS_THAN       reduce using rule 103 (class_type_designator -> new_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 103 (class_type_designator -> new_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 103 (class_type_designator -> new_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 103 (class_type_designator -> new_variable .)
    SPACESHIP       reduce using rule 103 (class_type_designator -> new_variable .)
    EQUAL           reduce using rule 103 (class_type_designator -> new_variable .)
    IS_NOT_EQUAL    reduce using rule 103 (class_type_designator -> new_variable .)
    IS_IDENTICAL    reduce using rule 103 (class_type_designator -> new_variable .)
    IS_NOT_IDENTICAL reduce using rule 103 (class_type_designator -> new_variable .)
    AMPERSAND       reduce using rule 103 (class_type_designator -> new_variable .)
    BITWISE_XOR     reduce using rule 103 (class_type_designator -> new_variable .)
    BITWISE_OR      reduce using rule 103 (class_type_designator -> new_variable .)
    COALESCE        reduce using rule 103 (class_type_designator -> new_variable .)
    TERNARY_OPERATION reduce using rule 103 (class_type_designator -> new_variable .)
    AND             reduce using rule 103 (class_type_designator -> new_variable .)
    XOR             reduce using rule 103 (class_type_designator -> new_variable .)
    OR              reduce using rule 103 (class_type_designator -> new_variable .)
    SEMICOLON       reduce using rule 103 (class_type_designator -> new_variable .)
    INCLUDE         reduce using rule 103 (class_type_designator -> new_variable .)
    INCLUDE_ONCE    reduce using rule 103 (class_type_designator -> new_variable .)
    REQUIRE         reduce using rule 103 (class_type_designator -> new_variable .)
    REQUIRE_ONCE    reduce using rule 103 (class_type_designator -> new_variable .)
    PRINT           reduce using rule 103 (class_type_designator -> new_variable .)
    YIELD           reduce using rule 103 (class_type_designator -> new_variable .)
    YIELD_FROM      reduce using rule 103 (class_type_designator -> new_variable .)
    RIGHT_PARENTHESIS reduce using rule 103 (class_type_designator -> new_variable .)
    COLON           reduce using rule 103 (class_type_designator -> new_variable .)
    AS              reduce using rule 103 (class_type_designator -> new_variable .)
    STRING          reduce using rule 103 (class_type_designator -> new_variable .)
    RIGHT_CBRAC     reduce using rule 103 (class_type_designator -> new_variable .)
    VARIABLE        reduce using rule 103 (class_type_designator -> new_variable .)
    DOUBLE_POINT    reduce using rule 103 (class_type_designator -> new_variable .)
    DOUBLE_ARROW    reduce using rule 103 (class_type_designator -> new_variable .)
    ELLIPSIS        reduce using rule 103 (class_type_designator -> new_variable .)
    ARRAY           reduce using rule 103 (class_type_designator -> new_variable .)
    CALLABLE        reduce using rule 103 (class_type_designator -> new_variable .)
    ITERABLE        reduce using rule 103 (class_type_designator -> new_variable .)
    BOOL            reduce using rule 103 (class_type_designator -> new_variable .)
    FLOAT           reduce using rule 103 (class_type_designator -> new_variable .)
    INT             reduce using rule 103 (class_type_designator -> new_variable .)
    INSTANCEOF      reduce using rule 103 (class_type_designator -> new_variable .)
    LEFT_CBRAC      shift and go to state 530
    ARROW           shift and go to state 531
    DOUBLE_COLON    shift and go to state 532

  ! ARROW           [ reduce using rule 103 (class_type_designator -> new_variable .) ]


state 378

    (104) new_variable -> simple_variable .

    LEFT_CBRAC      reduce using rule 104 (new_variable -> simple_variable .)
    ARROW           reduce using rule 104 (new_variable -> simple_variable .)
    DOUBLE_COLON    reduce using rule 104 (new_variable -> simple_variable .)
    LEFT_PARENTHESIS reduce using rule 104 (new_variable -> simple_variable .)
    DOUBLEASTERISK  reduce using rule 104 (new_variable -> simple_variable .)
    ASTERISK        reduce using rule 104 (new_variable -> simple_variable .)
    DIVIDE          reduce using rule 104 (new_variable -> simple_variable .)
    MODULO          reduce using rule 104 (new_variable -> simple_variable .)
    PLUS            reduce using rule 104 (new_variable -> simple_variable .)
    LESS            reduce using rule 104 (new_variable -> simple_variable .)
    CONCAT          reduce using rule 104 (new_variable -> simple_variable .)
    SL              reduce using rule 104 (new_variable -> simple_variable .)
    SR              reduce using rule 104 (new_variable -> simple_variable .)
    LESS_THAN       reduce using rule 104 (new_variable -> simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 104 (new_variable -> simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 104 (new_variable -> simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 104 (new_variable -> simple_variable .)
    SPACESHIP       reduce using rule 104 (new_variable -> simple_variable .)
    EQUAL           reduce using rule 104 (new_variable -> simple_variable .)
    IS_NOT_EQUAL    reduce using rule 104 (new_variable -> simple_variable .)
    IS_IDENTICAL    reduce using rule 104 (new_variable -> simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 104 (new_variable -> simple_variable .)
    AMPERSAND       reduce using rule 104 (new_variable -> simple_variable .)
    BITWISE_XOR     reduce using rule 104 (new_variable -> simple_variable .)
    BITWISE_OR      reduce using rule 104 (new_variable -> simple_variable .)
    COALESCE        reduce using rule 104 (new_variable -> simple_variable .)
    TERNARY_OPERATION reduce using rule 104 (new_variable -> simple_variable .)
    AND             reduce using rule 104 (new_variable -> simple_variable .)
    XOR             reduce using rule 104 (new_variable -> simple_variable .)
    OR              reduce using rule 104 (new_variable -> simple_variable .)
    SEMICOLON       reduce using rule 104 (new_variable -> simple_variable .)
    INCLUDE         reduce using rule 104 (new_variable -> simple_variable .)
    INCLUDE_ONCE    reduce using rule 104 (new_variable -> simple_variable .)
    REQUIRE         reduce using rule 104 (new_variable -> simple_variable .)
    REQUIRE_ONCE    reduce using rule 104 (new_variable -> simple_variable .)
    PRINT           reduce using rule 104 (new_variable -> simple_variable .)
    YIELD           reduce using rule 104 (new_variable -> simple_variable .)
    YIELD_FROM      reduce using rule 104 (new_variable -> simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 104 (new_variable -> simple_variable .)
    COLON           reduce using rule 104 (new_variable -> simple_variable .)
    AS              reduce using rule 104 (new_variable -> simple_variable .)
    STRING          reduce using rule 104 (new_variable -> simple_variable .)
    RIGHT_CBRAC     reduce using rule 104 (new_variable -> simple_variable .)
    VARIABLE        reduce using rule 104 (new_variable -> simple_variable .)
    DOUBLE_POINT    reduce using rule 104 (new_variable -> simple_variable .)
    DOUBLE_ARROW    reduce using rule 104 (new_variable -> simple_variable .)
    ELLIPSIS        reduce using rule 104 (new_variable -> simple_variable .)
    ARRAY           reduce using rule 104 (new_variable -> simple_variable .)
    CALLABLE        reduce using rule 104 (new_variable -> simple_variable .)
    ITERABLE        reduce using rule 104 (new_variable -> simple_variable .)
    BOOL            reduce using rule 104 (new_variable -> simple_variable .)
    FLOAT           reduce using rule 104 (new_variable -> simple_variable .)
    INT             reduce using rule 104 (new_variable -> simple_variable .)
    INSTANCEOF      reduce using rule 104 (new_variable -> simple_variable .)


state 379

    (109) new_variable -> relative_scope . DOUBLE_COLON simple_variable

    DOUBLE_COLON    shift and go to state 533


state 380

    (144) prefix_increment_expression -> DOUBLEPLUS variable .
    (38) dereferencable_expression -> variable .

  ! reduce/reduce conflict for ARROW resolved using rule 38 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ASTERISK        reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    DIVIDE          reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    MODULO          reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    PLUS            reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    LESS            reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    CONCAT          reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SL              reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SR              reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    LESS_THAN       reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_GREATER_OR_EQUAL reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SPACESHIP       reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    EQUAL           reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_NOT_EQUAL    reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_IDENTICAL    reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_NOT_IDENTICAL reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    AMPERSAND       reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    BITWISE_XOR     reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    BITWISE_OR      reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    COALESCE        reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    TERNARY_OPERATION reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    AND             reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    XOR             reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    OR              reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SEMICOLON       reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INCLUDE         reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INCLUDE_ONCE    reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    REQUIRE         reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    REQUIRE_ONCE    reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    PRINT           reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    YIELD           reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    YIELD_FROM      reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    RIGHT_PARENTHESIS reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    COLON           reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    AS              reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    STRING          reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    RIGHT_CBRAC     reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    VARIABLE        reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    DOUBLE_POINT    reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    DOUBLE_ARROW    reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ELLIPSIS        reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ARRAY           reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    CALLABLE        reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ITERABLE        reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    BOOL            reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    FLOAT           reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INT             reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INSTANCEOF      reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ARROW           reduce using rule 38 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)

  ! ARROW           [ reduce using rule 144 (prefix_increment_expression -> DOUBLEPLUS variable .) ]


state 381

    (145) prefix_decrement_expression -> DOUBLELESS variable .
    (38) dereferencable_expression -> variable .

  ! reduce/reduce conflict for ARROW resolved using rule 38 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    ASTERISK        reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    DIVIDE          reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    MODULO          reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    PLUS            reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    LESS            reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    CONCAT          reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    SL              reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    SR              reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    LESS_THAN       reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_GREATER_OR_EQUAL reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    SPACESHIP       reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    EQUAL           reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_NOT_EQUAL    reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_IDENTICAL    reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_NOT_IDENTICAL reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    AMPERSAND       reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    BITWISE_XOR     reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    BITWISE_OR      reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    COALESCE        reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    TERNARY_OPERATION reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    AND             reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    XOR             reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    OR              reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    SEMICOLON       reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    INCLUDE         reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    INCLUDE_ONCE    reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    REQUIRE         reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    REQUIRE_ONCE    reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    PRINT           reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    YIELD           reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    YIELD_FROM      reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    RIGHT_PARENTHESIS reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    COLON           reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    AS              reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    STRING          reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    RIGHT_CBRAC     reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    VARIABLE        reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    DOUBLE_POINT    reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    DOUBLE_ARROW    reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    ELLIPSIS        reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    ARRAY           reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    CALLABLE        reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    ITERABLE        reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    BOOL            reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    FLOAT           reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    INT             reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    INSTANCEOF      reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .)
    ARROW           reduce using rule 38 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)

  ! ARROW           [ reduce using rule 145 (prefix_decrement_expression -> DOUBLELESS variable .) ]


state 382

    (146) shell_command_expression -> BACKTICK dq_char_sequence_opt . BACKTICK

    BACKTICK        shift and go to state 534


state 383

    (147) dq_char_sequence_opt -> DQ_CHAR_SEQUENCE .

    BACKTICK        reduce using rule 147 (dq_char_sequence_opt -> DQ_CHAR_SEQUENCE .)


state 384

    (65) empty_intrinsic -> EMPTY LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 535
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 385

    (66) eval_intrinsic -> EVAL LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 536
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 386

    (68) exit_intrinsic -> EXIT LEFT_PARENTHESIS . expression_opt RIGHT_PARENTHESIS
    (111) expression_opt -> . expression
    (112) expression_opt -> .
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 112 (expression_opt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression_opt                 shift and go to state 537
    expression                     shift and go to state 538
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 387

    (70) exit_intrinsic -> DIE LEFT_PARENTHESIS . expression_opt RIGHT_PARENTHESIS
    (111) expression_opt -> . expression
    (112) expression_opt -> .
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 112 (expression_opt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression_opt                 shift and go to state 539
    expression                     shift and go to state 538
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 388

    (71) isset_intrinsic -> ISSET LEFT_PARENTHESIS . variable_list_opt RIGHT_PARENTHESIS
    (72) variable_list_opt -> . variable_list
    (73) variable_list -> . variable
    (74) variable_list -> . variable_list variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable_list_opt              shift and go to state 540
    variable_list                  shift and go to state 541
    variable                       shift and go to state 248
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 389

    (384) try_statement -> TRY compound_statement catch_clauses finally_clause .

    LEFT_CBRAC      reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    SEMICOLON       reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    TRY             reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    DECLARE         reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ECHO            reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    UNSET           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CONST           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    INTERFACE       reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    TRAIT           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    NAMESPACE       reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    USE             reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    GLOBAL          reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    STATIC          reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    STRING          reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    IF              reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    SWITCH          reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    WHILE           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    DO              reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FOR             reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FOREACH         reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    GOTO            reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CONTINUE        reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    BREAK           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    RETURN          reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    THROW           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FUNCTION        reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    INCLUDE         reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    INCLUDE_ONCE    reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    REQUIRE         reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    REQUIRE_ONCE    reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ABSTRACT        reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FINAL           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    PRINT           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    YIELD           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    YIELD_FROM      reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CLASS           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    $end            reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    RIGHT_CBRAC     reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ELSE            reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ELSEIF          reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDDECLARE      reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDWHILE        reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDFOR          reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CASE            reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    DEFAULT         reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDSWITCH       reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDFOREACH      reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDIF           reduce using rule 384 (try_statement -> TRY compound_statement catch_clauses finally_clause .)


state 390

    (386) catch_clauses -> catch_clauses catch_clause .

    FINALLY         reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    CATCH           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    LEFT_CBRAC      reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    SEMICOLON       reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    TRY             reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    DECLARE         reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ECHO            reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    UNSET           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    CONST           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    INTERFACE       reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    TRAIT           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    NAMESPACE       reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    USE             reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    GLOBAL          reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    STATIC          reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    STRING          reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    IF              reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    SWITCH          reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    WHILE           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    DO              reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    FOR             reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    FOREACH         reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    GOTO            reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    CONTINUE        reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    BREAK           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    RETURN          reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    THROW           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    FUNCTION        reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    INCLUDE         reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    INCLUDE_ONCE    reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    REQUIRE         reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    REQUIRE_ONCE    reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ABSTRACT        reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    FINAL           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    PRINT           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    YIELD           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    YIELD_FROM      reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    CLASS           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    $end            reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    RIGHT_CBRAC     reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ELSE            reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ELSEIF          reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ENDDECLARE      reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ENDWHILE        reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ENDFOR          reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    CASE            reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    DEFAULT         reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ENDSWITCH       reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ENDFOREACH      reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)
    ENDIF           reduce using rule 386 (catch_clauses -> catch_clauses catch_clause .)


state 391

    (390) finally_clause -> FINALLY compound_statement .

    LEFT_CBRAC      reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    SEMICOLON       reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    TRY             reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    DECLARE         reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ECHO            reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    UNSET           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    CONST           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    INTERFACE       reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    TRAIT           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    NAMESPACE       reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    USE             reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    GLOBAL          reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    STATIC          reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    STRING          reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    IF              reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    SWITCH          reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    WHILE           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    DO              reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    FOR             reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    FOREACH         reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    GOTO            reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    CONTINUE        reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    BREAK           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    RETURN          reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    THROW           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    FUNCTION        reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    INCLUDE         reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    INCLUDE_ONCE    reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    REQUIRE         reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    REQUIRE_ONCE    reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ABSTRACT        reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    FINAL           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    PRINT           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    YIELD           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    YIELD_FROM      reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    CLASS           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    $end            reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    RIGHT_CBRAC     reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ELSE            reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ELSEIF          reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ENDDECLARE      reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ENDWHILE        reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ENDFOR          reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    CASE            reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    DEFAULT         reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ENDSWITCH       reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ENDFOREACH      reduce using rule 390 (finally_clause -> FINALLY compound_statement .)
    ENDIF           reduce using rule 390 (finally_clause -> FINALLY compound_statement .)


state 392

    (387) catch_clause -> CATCH LEFT_PARENTHESIS . catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
    (388) catch_name_list -> . qualified_name
    (389) catch_name_list -> . catch_name_list
    (545) qualified_name -> . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    catch_name_list                shift and go to state 542
    qualified_name                 shift and go to state 543
    name                           shift and go to state 175

state 393

    (391) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS . statement
    (392) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS . SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 545
    SEMICOLON       shift and go to state 546
    LEFT_CBRAC      shift and go to state 23
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 544
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 394

    (394) declare_directive -> TICKS EQUALS . literal
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING

    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 549

    literal                        shift and go to state 547
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 548

state 395

    (395) declare_directive -> ENCODING EQUALS . literal
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING

    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 549

    literal                        shift and go to state 550
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 548

state 396

    (396) declare_directive -> STRICT_TYPES EQUALS . literal
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING

    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 549

    literal                        shift and go to state 551
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 548

state 397

    (39) dereferencable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (43) callable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 552


state 398

    (400) unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 553


state 399

    (401) unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 554


state 400

    (74) variable_list -> variable_list variable .
    (38) dereferencable_expression -> variable .

  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 38 (dereferencable_expression -> variable .)
    COLON           reduce using rule 74 (variable_list -> variable_list variable .)
    RIGHT_PARENTHESIS reduce using rule 74 (variable_list -> variable_list variable .)
    VARIABLE        reduce using rule 74 (variable_list -> variable_list variable .)
    DOLLAR          reduce using rule 74 (variable_list -> variable_list variable .)
    LEFT_PARENTHESIS reduce using rule 74 (variable_list -> variable_list variable .)
    SELF            reduce using rule 74 (variable_list -> variable_list variable .)
    PARENT          reduce using rule 74 (variable_list -> variable_list variable .)
    STATIC          reduce using rule 74 (variable_list -> variable_list variable .)
    ARRAY           reduce using rule 74 (variable_list -> variable_list variable .)
    STRING          reduce using rule 74 (variable_list -> variable_list variable .)
    ARROW           reduce using rule 38 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)

  ! LEFT_CBRAC      [ reduce using rule 74 (variable_list -> variable_list variable .) ]


state 401

    (149) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON . simple_variable
    (150) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (137) member_name -> . NAME
    (138) member_name -> . simple_variable
    (139) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    NAME            shift and go to state 480
    LEFT_CBRAC      shift and go to state 478

    simple_variable                shift and go to state 475
    member_name                    shift and go to state 476

state 402

    (459) const_element -> name EQUAL constant_expression .

    SEMICOLON       reduce using rule 459 (const_element -> name EQUAL constant_expression .)
    STRING          reduce using rule 459 (const_element -> name EQUAL constant_expression .)


state 403

    (269) constant_expression -> expression .

    SEMICOLON       reduce using rule 269 (constant_expression -> expression .)
    STRING          reduce using rule 269 (constant_expression -> expression .)
    VARIABLE        reduce using rule 269 (constant_expression -> expression .)
    TERNARY_OPERATION reduce using rule 269 (constant_expression -> expression .)
    AMPERSAND       reduce using rule 269 (constant_expression -> expression .)
    ELLIPSIS        reduce using rule 269 (constant_expression -> expression .)
    ARRAY           reduce using rule 269 (constant_expression -> expression .)
    CALLABLE        reduce using rule 269 (constant_expression -> expression .)
    ITERABLE        reduce using rule 269 (constant_expression -> expression .)
    BOOL            reduce using rule 269 (constant_expression -> expression .)
    FLOAT           reduce using rule 269 (constant_expression -> expression .)
    INT             reduce using rule 269 (constant_expression -> expression .)
    RIGHT_PARENTHESIS reduce using rule 269 (constant_expression -> expression .)


state 404

    (433) class_declaration -> class_modifieropt CLASS name class_base_clauseopt . class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (438) class_interface_clauseopt -> . class_interface_clause
    (439) class_interface_clauseopt -> .
    (445) class_interface_clause -> . IMPLEMENTS qualified_name
    (446) class_interface_clause -> . class_interface_clause qualified_name

    LEFT_CBRAC      reduce using rule 439 (class_interface_clauseopt -> .)
    IMPLEMENTS      shift and go to state 557

    class_interface_clauseopt      shift and go to state 555
    class_interface_clause         shift and go to state 556

state 405

    (436) class_base_clauseopt -> class_base_clause .

    IMPLEMENTS      reduce using rule 436 (class_base_clauseopt -> class_base_clause .)
    LEFT_CBRAC      reduce using rule 436 (class_base_clauseopt -> class_base_clause .)


state 406

    (444) class_base_clause -> EXTENDS . qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    qualified_name                 shift and go to state 558
    name                           shift and go to state 175

state 407

    (489) interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC . interface_member_declarationsopt RIGHT_CBRAC
    (492) interface_member_declarationsopt -> . interface_member_declarations
    (493) interface_member_declarationsopt -> .
    (496) interface_member_declarations -> . interface_member_declaration
    (497) interface_member_declarations -> . interface_member_declarations interface_member_declaration
    (498) interface_member_declaration -> . class_const_declaration
    (499) interface_member_declaration -> . method_declaration
    (456) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (469) static_modifier -> . STATIC
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 493 (interface_member_declarationsopt -> .)
    CONST           reduce using rule 527 (visibility_modifier_opt -> .)
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    interface_member_declarationsopt shift and go to state 559
    interface_member_declarations  shift and go to state 560
    interface_member_declaration   shift and go to state 561
    class_const_declaration        shift and go to state 562
    method_declaration             shift and go to state 563
    visibility_modifier_opt        shift and go to state 564
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 565
    visibility_modifier            shift and go to state 566
    method_modifier                shift and go to state 425
    static_modifier                shift and go to state 567
    class_modifier                 shift and go to state 431

state 408

    (495) interface_base_clause -> interface_base_clause qualified_name .

    STRING          reduce using rule 495 (interface_base_clause -> interface_base_clause qualified_name .)
    LEFT_CBRAC      reduce using rule 495 (interface_base_clause -> interface_base_clause qualified_name .)


state 409

    (494) interface_base_clause -> EXTENDS qualified_name .

    STRING          reduce using rule 494 (interface_base_clause -> EXTENDS qualified_name .)
    LEFT_CBRAC      reduce using rule 494 (interface_base_clause -> EXTENDS qualified_name .)


state 410

    (500) trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 568


state 411

    (501) trait_member_declarationsopt -> trait_member_declarations .
    (504) trait_member_declarations -> trait_member_declarations . trait_member_declaration
    (505) trait_member_declaration -> . property_declaration
    (506) trait_member_declaration -> . method_declaration
    (507) trait_member_declaration -> . constructor_declaration
    (508) trait_member_declaration -> . destructor_declaration
    (509) trait_member_declaration -> . trait_use_clauses
    (460) property_declaration -> . property_modifier property_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (485) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (510) trait_use_clauses -> . trait_use_clause
    (511) trait_use_clauses -> . trait_use_clauses trait_use_clause
    (461) property_modifier -> . VAR
    (462) property_modifier -> . visibility_modifier static_modifieropt
    (463) property_modifier -> . static_modifier visibility_modifier_opt
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 501 (trait_member_declarationsopt -> trait_member_declarations .)
    VAR             shift and go to state 422
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    USE             shift and go to state 426
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    trait_member_declaration       shift and go to state 569
    property_declaration           shift and go to state 413
    method_declaration             shift and go to state 414
    constructor_declaration        shift and go to state 415
    destructor_declaration         shift and go to state 416
    trait_use_clauses              shift and go to state 417
    property_modifier              shift and go to state 418
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 420
    trait_use_clause               shift and go to state 421
    visibility_modifier            shift and go to state 423
    static_modifier                shift and go to state 424
    method_modifier                shift and go to state 425
    class_modifier                 shift and go to state 431

state 412

    (503) trait_member_declarations -> trait_member_declaration .

    VAR             reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    USE             reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    PUBLIC          reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    PROTECTED       reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    PRIVATE         reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    STATIC          reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    ABSTRACT        reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    FINAL           reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    FUNCTION        reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)
    RIGHT_CBRAC     reduce using rule 503 (trait_member_declarations -> trait_member_declaration .)


state 413

    (505) trait_member_declaration -> property_declaration .

    VAR             reduce using rule 505 (trait_member_declaration -> property_declaration .)
    USE             reduce using rule 505 (trait_member_declaration -> property_declaration .)
    PUBLIC          reduce using rule 505 (trait_member_declaration -> property_declaration .)
    PROTECTED       reduce using rule 505 (trait_member_declaration -> property_declaration .)
    PRIVATE         reduce using rule 505 (trait_member_declaration -> property_declaration .)
    STATIC          reduce using rule 505 (trait_member_declaration -> property_declaration .)
    ABSTRACT        reduce using rule 505 (trait_member_declaration -> property_declaration .)
    FINAL           reduce using rule 505 (trait_member_declaration -> property_declaration .)
    FUNCTION        reduce using rule 505 (trait_member_declaration -> property_declaration .)
    RIGHT_CBRAC     reduce using rule 505 (trait_member_declaration -> property_declaration .)


state 414

    (506) trait_member_declaration -> method_declaration .

    VAR             reduce using rule 506 (trait_member_declaration -> method_declaration .)
    USE             reduce using rule 506 (trait_member_declaration -> method_declaration .)
    PUBLIC          reduce using rule 506 (trait_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 506 (trait_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 506 (trait_member_declaration -> method_declaration .)
    STATIC          reduce using rule 506 (trait_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 506 (trait_member_declaration -> method_declaration .)
    FINAL           reduce using rule 506 (trait_member_declaration -> method_declaration .)
    FUNCTION        reduce using rule 506 (trait_member_declaration -> method_declaration .)
    RIGHT_CBRAC     reduce using rule 506 (trait_member_declaration -> method_declaration .)


state 415

    (507) trait_member_declaration -> constructor_declaration .

    VAR             reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    USE             reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    PUBLIC          reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    PROTECTED       reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    PRIVATE         reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    STATIC          reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    ABSTRACT        reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    FINAL           reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 507 (trait_member_declaration -> constructor_declaration .)
    RIGHT_CBRAC     reduce using rule 507 (trait_member_declaration -> constructor_declaration .)


state 416

    (508) trait_member_declaration -> destructor_declaration .

    VAR             reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    USE             reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    PUBLIC          reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    PROTECTED       reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    PRIVATE         reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    STATIC          reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    ABSTRACT        reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    FINAL           reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 508 (trait_member_declaration -> destructor_declaration .)
    RIGHT_CBRAC     reduce using rule 508 (trait_member_declaration -> destructor_declaration .)


state 417

    (509) trait_member_declaration -> trait_use_clauses .
    (511) trait_use_clauses -> trait_use_clauses . trait_use_clause
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification

  ! shift/reduce conflict for USE resolved as shift
    VAR             reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    PUBLIC          reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    PROTECTED       reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    PRIVATE         reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    STATIC          reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    ABSTRACT        reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    FINAL           reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    FUNCTION        reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    RIGHT_CBRAC     reduce using rule 509 (trait_member_declaration -> trait_use_clauses .)
    USE             shift and go to state 426

  ! USE             [ reduce using rule 509 (trait_member_declaration -> trait_use_clauses .) ]

    trait_use_clause               shift and go to state 570

state 418

    (460) property_declaration -> property_modifier . property_elements SEMICOLON
    (470) property_elements -> . property_element
    (471) property_elements -> . property_elements property_element
    (472) property_element -> . VARIABLE property_initializeropt SEMICOLON

    VARIABLE        shift and go to state 573

    property_elements              shift and go to state 571
    property_element               shift and go to state 572

state 419

    (476) method_declaration -> method_modifiersopt . function_definition
    (402) function_definition -> . function_definition_header compound_statement
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt

    FUNCTION        shift and go to state 68

    function_definition            shift and go to state 574
    function_definition_header     shift and go to state 43

state 420

    (477) method_declaration -> method_modifiers . function_definition_header SEMICOLON
    (485) constructor_declaration -> method_modifiers . FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> method_modifiers . FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (478) method_modifiersopt -> method_modifiers .
    (481) method_modifiers -> method_modifiers . method_modifier
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 576
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

  ! FUNCTION        [ reduce using rule 478 (method_modifiersopt -> method_modifiers .) ]

    function_definition_header     shift and go to state 575
    method_modifier                shift and go to state 577
    visibility_modifier            shift and go to state 578
    static_modifier                shift and go to state 567
    class_modifier                 shift and go to state 431

state 421

    (510) trait_use_clauses -> trait_use_clause .

    USE             reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    VAR             reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    PUBLIC          reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    PROTECTED       reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    PRIVATE         reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    STATIC          reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    ABSTRACT        reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    FINAL           reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    FUNCTION        reduce using rule 510 (trait_use_clauses -> trait_use_clause .)
    RIGHT_CBRAC     reduce using rule 510 (trait_use_clauses -> trait_use_clause .)


state 422

    (461) property_modifier -> VAR .

    VARIABLE        reduce using rule 461 (property_modifier -> VAR .)


state 423

    (462) property_modifier -> visibility_modifier . static_modifieropt
    (482) method_modifier -> visibility_modifier .
    (464) static_modifieropt -> . static_modifier
    (465) static_modifieropt -> .
    (469) static_modifier -> . STATIC

  ! shift/reduce conflict for STATIC resolved as shift
    FUNCTION        reduce using rule 482 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 482 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 482 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 482 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 482 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 482 (method_modifier -> visibility_modifier .)
    VARIABLE        reduce using rule 465 (static_modifieropt -> .)
    STATIC          shift and go to state 430

  ! STATIC          [ reduce using rule 482 (method_modifier -> visibility_modifier .) ]

    static_modifieropt             shift and go to state 579
    static_modifier                shift and go to state 580

state 424

    (463) property_modifier -> static_modifier . visibility_modifier_opt
    (483) method_modifier -> static_modifier .
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    FUNCTION        reduce using rule 483 (method_modifier -> static_modifier .)
    STATIC          reduce using rule 483 (method_modifier -> static_modifier .)
    ABSTRACT        reduce using rule 483 (method_modifier -> static_modifier .)
    FINAL           reduce using rule 483 (method_modifier -> static_modifier .)
    VARIABLE        reduce using rule 527 (visibility_modifier_opt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429

  ! PUBLIC          [ reduce using rule 483 (method_modifier -> static_modifier .) ]
  ! PROTECTED       [ reduce using rule 483 (method_modifier -> static_modifier .) ]
  ! PRIVATE         [ reduce using rule 483 (method_modifier -> static_modifier .) ]

    visibility_modifier_opt        shift and go to state 581
    visibility_modifier            shift and go to state 582

state 425

    (480) method_modifiers -> method_modifier .

    FUNCTION        reduce using rule 480 (method_modifiers -> method_modifier .)
    PUBLIC          reduce using rule 480 (method_modifiers -> method_modifier .)
    PROTECTED       reduce using rule 480 (method_modifiers -> method_modifier .)
    PRIVATE         reduce using rule 480 (method_modifiers -> method_modifier .)
    STATIC          reduce using rule 480 (method_modifiers -> method_modifier .)
    ABSTRACT        reduce using rule 480 (method_modifiers -> method_modifier .)
    FINAL           reduce using rule 480 (method_modifiers -> method_modifier .)


state 426

    (512) trait_use_clause -> USE . trait_name_list trait_use_specification
    (513) trait_name_list -> . qualified_name
    (514) trait_name_list -> . trait_name_list qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    trait_name_list                shift and go to state 583
    qualified_name                 shift and go to state 584
    name                           shift and go to state 175

state 427

    (466) visibility_modifier -> PUBLIC .

    STATIC          reduce using rule 466 (visibility_modifier -> PUBLIC .)
    VARIABLE        reduce using rule 466 (visibility_modifier -> PUBLIC .)
    FUNCTION        reduce using rule 466 (visibility_modifier -> PUBLIC .)
    PUBLIC          reduce using rule 466 (visibility_modifier -> PUBLIC .)
    PROTECTED       reduce using rule 466 (visibility_modifier -> PUBLIC .)
    PRIVATE         reduce using rule 466 (visibility_modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 466 (visibility_modifier -> PUBLIC .)
    FINAL           reduce using rule 466 (visibility_modifier -> PUBLIC .)
    CONST           reduce using rule 466 (visibility_modifier -> PUBLIC .)
    STRING          reduce using rule 466 (visibility_modifier -> PUBLIC .)
    SEMICOLON       reduce using rule 466 (visibility_modifier -> PUBLIC .)


state 428

    (467) visibility_modifier -> PROTECTED .

    STATIC          reduce using rule 467 (visibility_modifier -> PROTECTED .)
    VARIABLE        reduce using rule 467 (visibility_modifier -> PROTECTED .)
    FUNCTION        reduce using rule 467 (visibility_modifier -> PROTECTED .)
    PUBLIC          reduce using rule 467 (visibility_modifier -> PROTECTED .)
    PROTECTED       reduce using rule 467 (visibility_modifier -> PROTECTED .)
    PRIVATE         reduce using rule 467 (visibility_modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 467 (visibility_modifier -> PROTECTED .)
    FINAL           reduce using rule 467 (visibility_modifier -> PROTECTED .)
    CONST           reduce using rule 467 (visibility_modifier -> PROTECTED .)
    STRING          reduce using rule 467 (visibility_modifier -> PROTECTED .)
    SEMICOLON       reduce using rule 467 (visibility_modifier -> PROTECTED .)


state 429

    (468) visibility_modifier -> PRIVATE .

    STATIC          reduce using rule 468 (visibility_modifier -> PRIVATE .)
    VARIABLE        reduce using rule 468 (visibility_modifier -> PRIVATE .)
    FUNCTION        reduce using rule 468 (visibility_modifier -> PRIVATE .)
    PUBLIC          reduce using rule 468 (visibility_modifier -> PRIVATE .)
    PROTECTED       reduce using rule 468 (visibility_modifier -> PRIVATE .)
    PRIVATE         reduce using rule 468 (visibility_modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 468 (visibility_modifier -> PRIVATE .)
    FINAL           reduce using rule 468 (visibility_modifier -> PRIVATE .)
    CONST           reduce using rule 468 (visibility_modifier -> PRIVATE .)
    STRING          reduce using rule 468 (visibility_modifier -> PRIVATE .)
    SEMICOLON       reduce using rule 468 (visibility_modifier -> PRIVATE .)


state 430

    (469) static_modifier -> STATIC .

    PUBLIC          reduce using rule 469 (static_modifier -> STATIC .)
    PROTECTED       reduce using rule 469 (static_modifier -> STATIC .)
    PRIVATE         reduce using rule 469 (static_modifier -> STATIC .)
    VARIABLE        reduce using rule 469 (static_modifier -> STATIC .)
    FUNCTION        reduce using rule 469 (static_modifier -> STATIC .)
    STATIC          reduce using rule 469 (static_modifier -> STATIC .)
    ABSTRACT        reduce using rule 469 (static_modifier -> STATIC .)
    FINAL           reduce using rule 469 (static_modifier -> STATIC .)


state 431

    (484) method_modifier -> class_modifier .

    FUNCTION        reduce using rule 484 (method_modifier -> class_modifier .)
    PUBLIC          reduce using rule 484 (method_modifier -> class_modifier .)
    PROTECTED       reduce using rule 484 (method_modifier -> class_modifier .)
    PRIVATE         reduce using rule 484 (method_modifier -> class_modifier .)
    STATIC          reduce using rule 484 (method_modifier -> class_modifier .)
    ABSTRACT        reduce using rule 484 (method_modifier -> class_modifier .)
    FINAL           reduce using rule 484 (method_modifier -> class_modifier .)


state 432

    (8) namespace_name -> namespace_name NS_SEPARATOR NAME .

    SEMICOLON       reduce using rule 8 (namespace_name -> namespace_name NS_SEPARATOR NAME .)
    NS_SEPARATOR    reduce using rule 8 (namespace_name -> namespace_name NS_SEPARATOR NAME .)
    LEFT_CBRAC      reduce using rule 8 (namespace_name -> namespace_name NS_SEPARATOR NAME .)
    AS              reduce using rule 8 (namespace_name -> namespace_name NS_SEPARATOR NAME .)


state 433

    (534) namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .

    LEFT_CBRAC      reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    SEMICOLON       reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    TRY             reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    DECLARE         reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ECHO            reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    UNSET           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CONST           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    INTERFACE       reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    TRAIT           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    NAMESPACE       reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    USE             reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    GLOBAL          reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    STATIC          reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    STRING          reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    IF              reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    SWITCH          reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    WHILE           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    DO              reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FOR             reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FOREACH         reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    GOTO            reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CONTINUE        reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    BREAK           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    RETURN          reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    THROW           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FUNCTION        reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    INCLUDE         reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    REQUIRE         reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ABSTRACT        reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FINAL           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    PRINT           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    YIELD           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    YIELD_FROM      reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CLASS           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    $end            reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ELSE            reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ELSEIF          reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDDECLARE      reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDWHILE        reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDFOR          reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CASE            reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    DEFAULT         reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDSWITCH       reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDFOREACH      reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDIF           reduce using rule 534 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)


state 434

    (542) namespace_use_clauses -> namespace_use_clauses namespace_use_clause .

    SEMICOLON       reduce using rule 542 (namespace_use_clauses -> namespace_use_clauses namespace_use_clause .)
    STRING          reduce using rule 542 (namespace_use_clauses -> namespace_use_clauses namespace_use_clause .)


state 435

    (543) namespace_use_clause -> qualified_name namespace_aliasing_clause_opt .

    SEMICOLON       reduce using rule 543 (namespace_use_clause -> qualified_name namespace_aliasing_clause_opt .)
    STRING          reduce using rule 543 (namespace_use_clause -> qualified_name namespace_aliasing_clause_opt .)


state 436

    (544) namespace_aliasing_clause_opt -> namespace_aliasing_clause .

    SEMICOLON       reduce using rule 544 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    STRING          reduce using rule 544 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    RIGHT_CBRAC     reduce using rule 544 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    NAME            reduce using rule 544 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    FUNCTION        reduce using rule 544 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    CONST           reduce using rule 544 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)


state 437

    (546) namespace_aliasing_clause -> AS . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 585

state 438

    (535) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name . NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (8) namespace_name -> namespace_name . NS_SEPARATOR NAME

    NS_SEPARATOR    shift and go to state 586


state 439

    (536) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR . LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (8) namespace_name -> namespace_name NS_SEPARATOR . NAME

    LEFT_CBRAC      shift and go to state 587
    NAME            shift and go to state 432


state 440

    (37) simple_variable -> DOLLAR LEFT_CBRAC expression . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 588


state 441

    (16) function_static_initializer_opt -> EQUAL constant_expression .
    (13) function_static_initializer -> EQUAL constant_expression .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 13 (function_static_initializer -> EQUAL constant_expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 13 (function_static_initializer -> EQUAL constant_expression .)
    SEMICOLON       reduce using rule 13 (function_static_initializer -> EQUAL constant_expression .)
    VARIABLE        reduce using rule 13 (function_static_initializer -> EQUAL constant_expression .)

  ! SEMICOLON       [ reduce using rule 16 (function_static_initializer_opt -> EQUAL constant_expression .) ]
  ! VARIABLE        [ reduce using rule 16 (function_static_initializer_opt -> EQUAL constant_expression .) ]


state 442

    (298) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement elseif_clauses_1 else_clause_1
    (299) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement elseif_clauses_1
    (300) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement else_clause_1
    (301) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (302) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 590
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement                      shift and go to state 589
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 443

    (313) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT ENDSWITCH SEMICOLON

    LEFT_CBRAC      shift and go to state 591
    DOUBLE_POINT    shift and go to state 592


state 444

    (331) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (332) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 594
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement                      shift and go to state 593
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 445

    (333) do_statement -> DO statement WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS SEMICOLON
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 595
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 446

    (334) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (351) for_control -> . for_expression_group
    (353) for_expression_group -> . expression
    (354) for_expression_group -> . for_expression_group COLON expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 596
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    for_control                    shift and go to state 597
    for_expression_group           shift and go to state 449
    expression                     shift and go to state 287
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 447

    (340) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . RIGHT_PARENTHESIS statement
    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_end_of_loop -> . for_expression_group
    (353) for_expression_group -> . expression
    (354) for_expression_group -> . for_expression_group COLON expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 599
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    for_end_of_loop                shift and go to state 598
    for_expression_group           shift and go to state 600
    expression                     shift and go to state 287
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 448

    (338) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    SEMICOLON       shift and go to state 601


state 449

    (351) for_control -> for_expression_group .
    (354) for_expression_group -> for_expression_group . COLON expression

    SEMICOLON       reduce using rule 351 (for_control -> for_expression_group .)
    COLON           shift and go to state 450


state 450

    (354) for_expression_group -> for_expression_group COLON . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 602
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 451

    (355) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (360) foreach_key -> . expression DOUBLE_ARROW
    (361) foreach_value -> . AMPERSAND_opt expression
    (362) foreach_value -> . AMPERSAND expression
    (363) foreach_value -> . list_intrinsic
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    AMPERSAND       shift and go to state 607
    LIST            shift and go to state 157
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! INCLUDE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 79 (AMPERSAND_opt -> .) ]

    foreach_key                    shift and go to state 603
    foreach_value                  shift and go to state 604
    expression                     shift and go to state 605
    AMPERSAND_opt                  shift and go to state 606
    list_intrinsic                 shift and go to state 608
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 452

    (373) breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 373 (breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 373 (breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS .)


state 453

    (403) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS . parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (487) parameter_declaration_listopt -> . parameter_declaration_list
    (488) parameter_declaration_listopt -> .
    (406) parameter_declaration_list -> . simple_parameter_declaration_list
    (407) parameter_declaration_list -> . variadic_declaration_list
    (408) simple_parameter_declaration_list -> . parameter_declaration
    (409) simple_parameter_declaration_list -> . parameter_declaration_list parameter_declaration
    (410) variadic_declaration_list -> . simple_parameter_declaration_list variadic_parameter
    (411) variadic_declaration_list -> . variadic_parameter
    (412) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (413) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (416) type_declarationopt -> . type_declaration
    (417) type_declarationopt -> .
    (418) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (419) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (420) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 488 (parameter_declaration_listopt -> .)
    AMPERSAND       reduce using rule 417 (type_declarationopt -> .)
    VARIABLE        reduce using rule 417 (type_declarationopt -> .)
    ELLIPSIS        reduce using rule 417 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 618
    ARRAY           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 420 (TERNARY_OPERATIONopt -> .)

    parameter_declaration_listopt  shift and go to state 609
    parameter_declaration_list     shift and go to state 610
    simple_parameter_declaration_list shift and go to state 611
    variadic_declaration_list      shift and go to state 612
    parameter_declaration          shift and go to state 613
    variadic_parameter             shift and go to state 614
    type_declarationopt            shift and go to state 615
    type_declaration               shift and go to state 616
    TERNARY_OPERATIONopt           shift and go to state 617

state 454

    (251) yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .

    AND             reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    XOR             reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    OR              reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    SEMICOLON       reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    INCLUDE         reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    INCLUDE_ONCE    reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    REQUIRE         reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    REQUIRE_ONCE    reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    PRINT           reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    YIELD           reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    YIELD_FROM      reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    COLON           reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    AS              reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ARROW           reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    STRING          reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    RIGHT_CBRAC     reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    VARIABLE        reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    DOUBLE_POINT    reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    DOUBLE_ARROW    reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ELLIPSIS        reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    TERNARY_OPERATION reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    AMPERSAND       reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ARRAY           reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    CALLABLE        reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ITERABLE        reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    BOOL            reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    FLOAT           reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    INT             reduce using rule 251 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)


state 455

    (213) conditional_expression -> conditional_expression TERNARY_OPERATION expression . DOUBLE_POINT coalesce_expression

    DOUBLE_POINT    shift and go to state 619


state 456

    (214) conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT . coalesce_expression
    (210) coalesce_expression -> . logical_inc_OR_expression_1
    (211) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (208) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (209) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    coalesce_expression            shift and go to state 620
    logical_inc_OR_expression_1    shift and go to state 153
    logical_AND_expression_1       shift and go to state 159
    bitwise_inc_OR_expression      shift and go to state 167
    bitwise_exc_OR_expression      shift and go to state 174
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 457

    (218) simple_assignment_expression -> variable EQUAL assignment_expression .

    AND             reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    XOR             reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    OR              reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    SEMICOLON       reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    INCLUDE         reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    INCLUDE_ONCE    reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    REQUIRE         reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    REQUIRE_ONCE    reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    PRINT           reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    YIELD           reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    YIELD_FROM      reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    COLON           reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    AS              reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ARROW           reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    STRING          reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    RIGHT_CBRAC     reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    VARIABLE        reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    DOUBLE_POINT    reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    DOUBLE_ARROW    reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ELLIPSIS        reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    TERNARY_OPERATION reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    AMPERSAND       reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ARRAY           reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    CALLABLE        reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ITERABLE        reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    BOOL            reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    FLOAT           reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    INT             reduce using rule 218 (simple_assignment_expression -> variable EQUAL assignment_expression .)


state 458

    (233) byref_assignment_expression -> variable EQUAL AMPERSAND . variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable                       shift and go to state 621
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 459

    (234) compound_assignment_expression -> variable compound_assignment_operator assignment_expression .

    AND             reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    XOR             reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    OR              reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    INCLUDE         reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    INCLUDE_ONCE    reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    REQUIRE         reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    REQUIRE_ONCE    reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    PRINT           reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    YIELD           reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    YIELD_FROM      reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    COLON           reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    AS              reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ARROW           reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    STRING          reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    RIGHT_CBRAC     reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    VARIABLE        reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    DOUBLE_POINT    reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    DOUBLE_ARROW    reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ELLIPSIS        reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    TERNARY_OPERATION reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    AMPERSAND       reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ARRAY           reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    CALLABLE        reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ITERABLE        reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    BOOL            reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    FLOAT           reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    INT             reduce using rule 234 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)


state 460

    (219) simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .

    AND             reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    XOR             reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    OR              reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    SEMICOLON       reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    INCLUDE         reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    INCLUDE_ONCE    reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    REQUIRE         reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    REQUIRE_ONCE    reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    PRINT           reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    YIELD           reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    YIELD_FROM      reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    COLON           reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    AS              reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ARROW           reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    STRING          reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    RIGHT_CBRAC     reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    VARIABLE        reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    DOUBLE_POINT    reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    DOUBLE_ARROW    reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ELLIPSIS        reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    TERNARY_OPERATION reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    AMPERSAND       reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ARRAY           reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    CALLABLE        reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ITERABLE        reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    BOOL            reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    FLOAT           reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    INT             reduce using rule 219 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)


state 461

    (211) coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .

    TERNARY_OPERATION reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    AND             reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    XOR             reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    OR              reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    SEMICOLON       reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    INCLUDE         reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    REQUIRE         reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    PRINT           reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    YIELD           reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    YIELD_FROM      reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    COLON           reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    AS              reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ARROW           reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    STRING          reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    VARIABLE        reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    DOUBLE_POINT    reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ELLIPSIS        reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    AMPERSAND       reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ARRAY           reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    CALLABLE        reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ITERABLE        reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    BOOL            reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    FLOAT           reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    INT             reduce using rule 211 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)


state 462

    (209) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR . logical_AND_expression_1
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    logical_AND_expression_1       shift and go to state 622
    bitwise_inc_OR_expression      shift and go to state 167
    bitwise_exc_OR_expression      shift and go to state 174
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 463

    (220) list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 623


state 464

    (221) list_expression_list -> unkeyed_list_expression_list .
    (226) unkeyed_list_expression_list -> unkeyed_list_expression_list . COLON list_or_variable COLON
    (227) unkeyed_list_expression_list -> unkeyed_list_expression_list . COLON list_or_variable

    RIGHT_PARENTHESIS reduce using rule 221 (list_expression_list -> unkeyed_list_expression_list .)
    COLON           shift and go to state 624


state 465

    (222) list_expression_list -> keyed_list_expression_list . COLON
    (223) list_expression_list -> keyed_list_expression_list .
    (229) keyed_list_expression_list -> keyed_list_expression_list . COLON expression DOUBLE_ARROW list_or_variable

    COLON           shift and go to state 625
    RIGHT_PARENTHESIS reduce using rule 223 (list_expression_list -> keyed_list_expression_list .)


state 466

    (225) unkeyed_list_expression_list -> COLON .

    COLON           reduce using rule 225 (unkeyed_list_expression_list -> COLON .)
    RIGHT_PARENTHESIS reduce using rule 225 (unkeyed_list_expression_list -> COLON .)


state 467

    (224) unkeyed_list_expression_list -> list_or_variable .

    COLON           reduce using rule 224 (unkeyed_list_expression_list -> list_or_variable .)
    RIGHT_PARENTHESIS reduce using rule 224 (unkeyed_list_expression_list -> list_or_variable .)


state 468

    (228) keyed_list_expression_list -> expression . DOUBLE_ARROW list_or_variable

    DOUBLE_ARROW    shift and go to state 626


state 469

    (230) list_or_variable -> list_intrinsic .

    COLON           reduce using rule 230 (list_or_variable -> list_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 230 (list_or_variable -> list_intrinsic .)


state 470

    (231) list_or_variable -> AMPERSAND . variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable                       shift and go to state 627
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 471

    (232) list_or_variable -> variable .
    (38) dereferencable_expression -> variable .

    COLON           reduce using rule 232 (list_or_variable -> variable .)
    RIGHT_PARENTHESIS reduce using rule 232 (list_or_variable -> variable .)
    ARROW           reduce using rule 38 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)


state 472

    (39) dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (43) callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (34) primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

  ! reduce/reduce conflict for ARROW resolved using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 43 (callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)

  ! ARROW           [ reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .) ]


state 473

    (172) cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .

    ASTERISK        reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    DIVIDE          reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    MODULO          reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    PLUS            reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    LESS            reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    CONCAT          reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SL              reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SR              reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    LESS_THAN       reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SPACESHIP       reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    EQUAL           reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_NOT_EQUAL    reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_IDENTICAL    reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    AMPERSAND       reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    BITWISE_XOR     reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    BITWISE_OR      reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    COALESCE        reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    TERNARY_OPERATION reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    AND             reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    XOR             reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    OR              reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SEMICOLON       reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INCLUDE         reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INCLUDE_ONCE    reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    REQUIRE         reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    REQUIRE_ONCE    reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    PRINT           reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    YIELD           reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    YIELD_FROM      reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    COLON           reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    AS              reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ARROW           reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    STRING          reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    RIGHT_CBRAC     reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    VARIABLE        reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    DOUBLE_POINT    reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    DOUBLE_ARROW    reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ELLIPSIS        reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ARRAY           reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    CALLABLE        reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ITERABLE        reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    BOOL            reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    FLOAT           reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INT             reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INSTANCEOF      reduce using rule 172 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)


state 474

    (207) logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND . bitwise_inc_OR_expression
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    bitwise_inc_OR_expression      shift and go to state 628
    bitwise_exc_OR_expression      shift and go to state 174
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 475

    (149) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .
    (138) member_name -> simple_variable .

  ! reduce/reduce conflict for LEFT_PARENTHESIS resolved using rule 138 (member_name -> simple_variable .)
    EQUAL           reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLEPLUS      reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLELESS      reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    POW_EQUAL       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MUL_EQUAL       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DIV_EQUAL       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MOD_EQUAL       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PLUS_EQUAL      reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MINUS_EQUAL     reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    CONCAT_EQUAL    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SL_EQUAL        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SR_EQUAL        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AND_EQUAL       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    XOR_EQUAL       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    OR_EQUAL        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LEFT_CBRAC      reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SL              reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SR              reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AND             reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    OR              reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AS              reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INT             reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOLLAR          reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SELF            reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PARENT          reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    STATIC          reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 138 (member_name -> simple_variable .)

  ! LEFT_PARENTHESIS [ reduce using rule 149 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .) ]


state 476

    (150) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 629


state 477

    (152) class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .
    (137) member_name -> NAME .

    DOUBLEASTERISK  reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ASTERISK        reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    DIVIDE          reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    MODULO          reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    PLUS            reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    LESS            reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    CONCAT          reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SL              reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SR              reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    LESS_THAN       reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_GREATER_OR_EQUAL reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    GREATER_THAN_OR_EQUAL reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SPACESHIP       reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    EQUAL           reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_NOT_EQUAL    reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_IDENTICAL    reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_NOT_IDENTICAL reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    AMPERSAND       reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    BITWISE_XOR     reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    BITWISE_OR      reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    COALESCE        reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    TERNARY_OPERATION reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    AND             reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    XOR             reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    OR              reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SEMICOLON       reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INCLUDE         reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INCLUDE_ONCE    reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    REQUIRE         reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    REQUIRE_ONCE    reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    PRINT           reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    YIELD           reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    YIELD_FROM      reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    RIGHT_PARENTHESIS reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    COLON           reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    AS              reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ARROW           reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    STRING          reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    RIGHT_CBRAC     reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    VARIABLE        reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    DOUBLE_POINT    reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    DOUBLE_ARROW    reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ELLIPSIS        reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ARRAY           reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    CALLABLE        reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ITERABLE        reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    BOOL            reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    FLOAT           reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INT             reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INSTANCEOF      reduce using rule 152 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    LEFT_PARENTHESIS reduce using rule 137 (member_name -> NAME .)


state 478

    (139) member_name -> LEFT_CBRAC . expression RIGHT_PARENTHESIS
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 630
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 479

    (136) member_access_expression -> dereferencable_expression ARROW member_name .
    (140) member_call_expression -> dereferencable_expression ARROW member_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> dereferencable_expression ARROW member_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

  ! shift/reduce conflict for LEFT_PARENTHESIS resolved as shift
    EQUAL           reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLEPLUS      reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLELESS      reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    POW_EQUAL       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MUL_EQUAL       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DIV_EQUAL       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MOD_EQUAL       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PLUS_EQUAL      reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MINUS_EQUAL     reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    CONCAT_EQUAL    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SL_EQUAL        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SR_EQUAL        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AND_EQUAL       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    XOR_EQUAL       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    OR_EQUAL        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ARROW           reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LEFT_CBRAC      reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLE_COLON    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLEASTERISK  reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ASTERISK        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DIVIDE          reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MODULO          reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PLUS            reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LESS            reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    CONCAT          reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SL              reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SR              reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LESS_THAN       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_GREATER_OR_EQUAL reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SPACESHIP       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_NOT_EQUAL    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_IDENTICAL    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_NOT_IDENTICAL reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AMPERSAND       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    BITWISE_XOR     reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    BITWISE_OR      reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    COALESCE        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    TERNARY_OPERATION reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AND             reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    XOR             reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    OR              reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SEMICOLON       reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INCLUDE         reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INCLUDE_ONCE    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    REQUIRE         reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    REQUIRE_ONCE    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PRINT           reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    YIELD           reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    YIELD_FROM      reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    RIGHT_PARENTHESIS reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    COLON           reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AS              reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    STRING          reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    RIGHT_CBRAC     reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    VARIABLE        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLE_POINT    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLE_ARROW    reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ELLIPSIS        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ARRAY           reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    CALLABLE        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ITERABLE        reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    BOOL            reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    FLOAT           reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INT             reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INSTANCEOF      reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOLLAR          reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SELF            reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PARENT          reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    STATIC          reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LEFT_PARENTHESIS shift and go to state 631

  ! LEFT_PARENTHESIS [ reduce using rule 136 (member_access_expression -> dereferencable_expression ARROW member_name .) ]


state 480

    (137) member_name -> NAME .

    LEFT_PARENTHESIS reduce using rule 137 (member_name -> NAME .)
    EQUAL           reduce using rule 137 (member_name -> NAME .)
    DOUBLEPLUS      reduce using rule 137 (member_name -> NAME .)
    DOUBLELESS      reduce using rule 137 (member_name -> NAME .)
    POW_EQUAL       reduce using rule 137 (member_name -> NAME .)
    MUL_EQUAL       reduce using rule 137 (member_name -> NAME .)
    DIV_EQUAL       reduce using rule 137 (member_name -> NAME .)
    MOD_EQUAL       reduce using rule 137 (member_name -> NAME .)
    PLUS_EQUAL      reduce using rule 137 (member_name -> NAME .)
    MINUS_EQUAL     reduce using rule 137 (member_name -> NAME .)
    CONCAT_EQUAL    reduce using rule 137 (member_name -> NAME .)
    SL_EQUAL        reduce using rule 137 (member_name -> NAME .)
    SR_EQUAL        reduce using rule 137 (member_name -> NAME .)
    AND_EQUAL       reduce using rule 137 (member_name -> NAME .)
    XOR_EQUAL       reduce using rule 137 (member_name -> NAME .)
    OR_EQUAL        reduce using rule 137 (member_name -> NAME .)
    ARROW           reduce using rule 137 (member_name -> NAME .)
    LEFT_CBRAC      reduce using rule 137 (member_name -> NAME .)
    DOUBLE_COLON    reduce using rule 137 (member_name -> NAME .)
    DOUBLEASTERISK  reduce using rule 137 (member_name -> NAME .)
    ASTERISK        reduce using rule 137 (member_name -> NAME .)
    DIVIDE          reduce using rule 137 (member_name -> NAME .)
    MODULO          reduce using rule 137 (member_name -> NAME .)
    PLUS            reduce using rule 137 (member_name -> NAME .)
    LESS            reduce using rule 137 (member_name -> NAME .)
    CONCAT          reduce using rule 137 (member_name -> NAME .)
    SL              reduce using rule 137 (member_name -> NAME .)
    SR              reduce using rule 137 (member_name -> NAME .)
    LESS_THAN       reduce using rule 137 (member_name -> NAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 137 (member_name -> NAME .)
    IS_GREATER_OR_EQUAL reduce using rule 137 (member_name -> NAME .)
    GREATER_THAN_OR_EQUAL reduce using rule 137 (member_name -> NAME .)
    SPACESHIP       reduce using rule 137 (member_name -> NAME .)
    IS_NOT_EQUAL    reduce using rule 137 (member_name -> NAME .)
    IS_IDENTICAL    reduce using rule 137 (member_name -> NAME .)
    IS_NOT_IDENTICAL reduce using rule 137 (member_name -> NAME .)
    AMPERSAND       reduce using rule 137 (member_name -> NAME .)
    BITWISE_XOR     reduce using rule 137 (member_name -> NAME .)
    BITWISE_OR      reduce using rule 137 (member_name -> NAME .)
    COALESCE        reduce using rule 137 (member_name -> NAME .)
    TERNARY_OPERATION reduce using rule 137 (member_name -> NAME .)
    AND             reduce using rule 137 (member_name -> NAME .)
    XOR             reduce using rule 137 (member_name -> NAME .)
    OR              reduce using rule 137 (member_name -> NAME .)
    SEMICOLON       reduce using rule 137 (member_name -> NAME .)
    INCLUDE         reduce using rule 137 (member_name -> NAME .)
    INCLUDE_ONCE    reduce using rule 137 (member_name -> NAME .)
    REQUIRE         reduce using rule 137 (member_name -> NAME .)
    REQUIRE_ONCE    reduce using rule 137 (member_name -> NAME .)
    PRINT           reduce using rule 137 (member_name -> NAME .)
    YIELD           reduce using rule 137 (member_name -> NAME .)
    YIELD_FROM      reduce using rule 137 (member_name -> NAME .)
    RIGHT_PARENTHESIS reduce using rule 137 (member_name -> NAME .)
    COLON           reduce using rule 137 (member_name -> NAME .)
    AS              reduce using rule 137 (member_name -> NAME .)
    STRING          reduce using rule 137 (member_name -> NAME .)
    RIGHT_CBRAC     reduce using rule 137 (member_name -> NAME .)
    VARIABLE        reduce using rule 137 (member_name -> NAME .)
    DOUBLE_POINT    reduce using rule 137 (member_name -> NAME .)
    DOUBLE_ARROW    reduce using rule 137 (member_name -> NAME .)
    ELLIPSIS        reduce using rule 137 (member_name -> NAME .)
    ARRAY           reduce using rule 137 (member_name -> NAME .)
    CALLABLE        reduce using rule 137 (member_name -> NAME .)
    ITERABLE        reduce using rule 137 (member_name -> NAME .)
    BOOL            reduce using rule 137 (member_name -> NAME .)
    FLOAT           reduce using rule 137 (member_name -> NAME .)
    INT             reduce using rule 137 (member_name -> NAME .)
    INSTANCEOF      reduce using rule 137 (member_name -> NAME .)
    DOLLAR          reduce using rule 137 (member_name -> NAME .)
    SELF            reduce using rule 137 (member_name -> NAME .)
    PARENT          reduce using rule 137 (member_name -> NAME .)
    STATIC          reduce using rule 137 (member_name -> NAME .)


state 481

    (138) member_name -> simple_variable .

    LEFT_PARENTHESIS reduce using rule 138 (member_name -> simple_variable .)
    EQUAL           reduce using rule 138 (member_name -> simple_variable .)
    DOUBLEPLUS      reduce using rule 138 (member_name -> simple_variable .)
    DOUBLELESS      reduce using rule 138 (member_name -> simple_variable .)
    POW_EQUAL       reduce using rule 138 (member_name -> simple_variable .)
    MUL_EQUAL       reduce using rule 138 (member_name -> simple_variable .)
    DIV_EQUAL       reduce using rule 138 (member_name -> simple_variable .)
    MOD_EQUAL       reduce using rule 138 (member_name -> simple_variable .)
    PLUS_EQUAL      reduce using rule 138 (member_name -> simple_variable .)
    MINUS_EQUAL     reduce using rule 138 (member_name -> simple_variable .)
    CONCAT_EQUAL    reduce using rule 138 (member_name -> simple_variable .)
    SL_EQUAL        reduce using rule 138 (member_name -> simple_variable .)
    SR_EQUAL        reduce using rule 138 (member_name -> simple_variable .)
    AND_EQUAL       reduce using rule 138 (member_name -> simple_variable .)
    XOR_EQUAL       reduce using rule 138 (member_name -> simple_variable .)
    OR_EQUAL        reduce using rule 138 (member_name -> simple_variable .)
    ARROW           reduce using rule 138 (member_name -> simple_variable .)
    LEFT_CBRAC      reduce using rule 138 (member_name -> simple_variable .)
    DOUBLE_COLON    reduce using rule 138 (member_name -> simple_variable .)
    DOUBLEASTERISK  reduce using rule 138 (member_name -> simple_variable .)
    ASTERISK        reduce using rule 138 (member_name -> simple_variable .)
    DIVIDE          reduce using rule 138 (member_name -> simple_variable .)
    MODULO          reduce using rule 138 (member_name -> simple_variable .)
    PLUS            reduce using rule 138 (member_name -> simple_variable .)
    LESS            reduce using rule 138 (member_name -> simple_variable .)
    CONCAT          reduce using rule 138 (member_name -> simple_variable .)
    SL              reduce using rule 138 (member_name -> simple_variable .)
    SR              reduce using rule 138 (member_name -> simple_variable .)
    LESS_THAN       reduce using rule 138 (member_name -> simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 138 (member_name -> simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 138 (member_name -> simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 138 (member_name -> simple_variable .)
    SPACESHIP       reduce using rule 138 (member_name -> simple_variable .)
    IS_NOT_EQUAL    reduce using rule 138 (member_name -> simple_variable .)
    IS_IDENTICAL    reduce using rule 138 (member_name -> simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 138 (member_name -> simple_variable .)
    AMPERSAND       reduce using rule 138 (member_name -> simple_variable .)
    BITWISE_XOR     reduce using rule 138 (member_name -> simple_variable .)
    BITWISE_OR      reduce using rule 138 (member_name -> simple_variable .)
    COALESCE        reduce using rule 138 (member_name -> simple_variable .)
    TERNARY_OPERATION reduce using rule 138 (member_name -> simple_variable .)
    AND             reduce using rule 138 (member_name -> simple_variable .)
    XOR             reduce using rule 138 (member_name -> simple_variable .)
    OR              reduce using rule 138 (member_name -> simple_variable .)
    SEMICOLON       reduce using rule 138 (member_name -> simple_variable .)
    INCLUDE         reduce using rule 138 (member_name -> simple_variable .)
    INCLUDE_ONCE    reduce using rule 138 (member_name -> simple_variable .)
    REQUIRE         reduce using rule 138 (member_name -> simple_variable .)
    REQUIRE_ONCE    reduce using rule 138 (member_name -> simple_variable .)
    PRINT           reduce using rule 138 (member_name -> simple_variable .)
    YIELD           reduce using rule 138 (member_name -> simple_variable .)
    YIELD_FROM      reduce using rule 138 (member_name -> simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 138 (member_name -> simple_variable .)
    COLON           reduce using rule 138 (member_name -> simple_variable .)
    AS              reduce using rule 138 (member_name -> simple_variable .)
    STRING          reduce using rule 138 (member_name -> simple_variable .)
    RIGHT_CBRAC     reduce using rule 138 (member_name -> simple_variable .)
    VARIABLE        reduce using rule 138 (member_name -> simple_variable .)
    DOUBLE_POINT    reduce using rule 138 (member_name -> simple_variable .)
    DOUBLE_ARROW    reduce using rule 138 (member_name -> simple_variable .)
    ELLIPSIS        reduce using rule 138 (member_name -> simple_variable .)
    ARRAY           reduce using rule 138 (member_name -> simple_variable .)
    CALLABLE        reduce using rule 138 (member_name -> simple_variable .)
    ITERABLE        reduce using rule 138 (member_name -> simple_variable .)
    BOOL            reduce using rule 138 (member_name -> simple_variable .)
    FLOAT           reduce using rule 138 (member_name -> simple_variable .)
    INT             reduce using rule 138 (member_name -> simple_variable .)
    INSTANCEOF      reduce using rule 138 (member_name -> simple_variable .)
    DOLLAR          reduce using rule 138 (member_name -> simple_variable .)
    SELF            reduce using rule 138 (member_name -> simple_variable .)
    PARENT          reduce using rule 138 (member_name -> simple_variable .)
    STATIC          reduce using rule 138 (member_name -> simple_variable .)


state 482

    (125) subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 632


state 483

    (126) subscript_expression -> dereferencable_expression LEFT_CBRAC expression . RIGHT_PARENTHESIS
    (111) expression_opt -> expression .

    RIGHT_PARENTHESIS shift and go to state 633
    RIGHT_CBRAC     reduce using rule 111 (expression_opt -> expression .)


state 484

    (205) bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .
    (203) bitwise_exc_OR_expression -> bitwise_exc_OR_expression . BITWISE_XOR bitwise_AND_expression

    BITWISE_OR      reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    AMPERSAND       reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    COALESCE        reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    AND             reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    XOR             reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    OR              reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    SEMICOLON       reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    INCLUDE         reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    REQUIRE         reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    PRINT           reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    YIELD           reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    YIELD_FROM      reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    COLON           reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    AS              reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ARROW           reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    STRING          reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    VARIABLE        reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ELLIPSIS        reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ARRAY           reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    CALLABLE        reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ITERABLE        reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    BOOL            reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    FLOAT           reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    INT             reduce using rule 205 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    BITWISE_XOR     shift and go to state 338


state 485

    (114) array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .

    ARROW           reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LEFT_CBRAC      reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ASTERISK        reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DIVIDE          reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    MODULO          reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    PLUS            reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LESS            reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    CONCAT          reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SL              reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SR              reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    EQUAL           reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    COALESCE        reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    AND             reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    XOR             reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    OR              reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    PRINT           reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    YIELD           reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    COLON           reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    AS              reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    STRING          reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    VARIABLE        reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ARRAY           reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    CALLABLE        reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ITERABLE        reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    BOOL            reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    FLOAT           reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INT             reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 114 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)


state 486

    (118) array_initializer -> array_initializer_list COLON .

    RIGHT_CBRAC     reduce using rule 118 (array_initializer -> array_initializer_list COLON .)
    RIGHT_PARENTHESIS reduce using rule 118 (array_initializer -> array_initializer_list COLON .)


state 487

    (120) array_initializer_list -> array_element_initializer COLON . array_element_initializer
    (121) array_element_initializer -> . AMPERSAND_opt element_value
    (122) array_element_initializer -> . element_key ARROW AMPERSAND_opt element_value
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .
    (123) element_key -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    AMPERSAND       shift and go to state 334
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! INCLUDE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 79 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 79 (AMPERSAND_opt -> .) ]

    array_element_initializer      shift and go to state 634
    AMPERSAND_opt                  shift and go to state 332
    element_key                    shift and go to state 333
    expression                     shift and go to state 335
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 488

    (121) array_element_initializer -> AMPERSAND_opt element_value .

    COLON           reduce using rule 121 (array_element_initializer -> AMPERSAND_opt element_value .)
    RIGHT_CBRAC     reduce using rule 121 (array_element_initializer -> AMPERSAND_opt element_value .)
    RIGHT_PARENTHESIS reduce using rule 121 (array_element_initializer -> AMPERSAND_opt element_value .)


state 489

    (124) element_value -> expression .

    COLON           reduce using rule 124 (element_value -> expression .)
    RIGHT_CBRAC     reduce using rule 124 (element_value -> expression .)
    RIGHT_PARENTHESIS reduce using rule 124 (element_value -> expression .)


state 490

    (122) array_element_initializer -> element_key ARROW . AMPERSAND_opt element_value
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 334
    INCLUDE         reduce using rule 79 (AMPERSAND_opt -> .)
    INCLUDE_ONCE    reduce using rule 79 (AMPERSAND_opt -> .)
    REQUIRE         reduce using rule 79 (AMPERSAND_opt -> .)
    REQUIRE_ONCE    reduce using rule 79 (AMPERSAND_opt -> .)
    PRINT           reduce using rule 79 (AMPERSAND_opt -> .)
    YIELD           reduce using rule 79 (AMPERSAND_opt -> .)
    YIELD_FROM      reduce using rule 79 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 635

state 491

    (127) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 636


state 492

    (128) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> argument_expression_list .
    (132) argument_expression_list -> argument_expression_list . argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 637
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! RIGHT_PARENTHESIS [ reduce using rule 94 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 638
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 493

    (131) argument_expression_list -> argument_expression .

    RIGHT_PARENTHESIS reduce using rule 131 (argument_expression_list -> argument_expression .)
    ELLIPSIS        reduce using rule 131 (argument_expression_list -> argument_expression .)
    INCLUDE         reduce using rule 131 (argument_expression_list -> argument_expression .)
    INCLUDE_ONCE    reduce using rule 131 (argument_expression_list -> argument_expression .)
    REQUIRE         reduce using rule 131 (argument_expression_list -> argument_expression .)
    REQUIRE_ONCE    reduce using rule 131 (argument_expression_list -> argument_expression .)
    PRINT           reduce using rule 131 (argument_expression_list -> argument_expression .)
    YIELD           reduce using rule 131 (argument_expression_list -> argument_expression .)
    YIELD_FROM      reduce using rule 131 (argument_expression_list -> argument_expression .)
    COLON           reduce using rule 131 (argument_expression_list -> argument_expression .)


state 494

    (133) argument_expression -> variadic_unpacking .

    RIGHT_PARENTHESIS reduce using rule 133 (argument_expression -> variadic_unpacking .)
    ELLIPSIS        reduce using rule 133 (argument_expression -> variadic_unpacking .)
    INCLUDE         reduce using rule 133 (argument_expression -> variadic_unpacking .)
    INCLUDE_ONCE    reduce using rule 133 (argument_expression -> variadic_unpacking .)
    REQUIRE         reduce using rule 133 (argument_expression -> variadic_unpacking .)
    REQUIRE_ONCE    reduce using rule 133 (argument_expression -> variadic_unpacking .)
    PRINT           reduce using rule 133 (argument_expression -> variadic_unpacking .)
    YIELD           reduce using rule 133 (argument_expression -> variadic_unpacking .)
    YIELD_FROM      reduce using rule 133 (argument_expression -> variadic_unpacking .)
    COLON           reduce using rule 133 (argument_expression -> variadic_unpacking .)


state 495

    (134) argument_expression -> expression .

    RIGHT_PARENTHESIS reduce using rule 134 (argument_expression -> expression .)
    ELLIPSIS        reduce using rule 134 (argument_expression -> expression .)
    INCLUDE         reduce using rule 134 (argument_expression -> expression .)
    INCLUDE_ONCE    reduce using rule 134 (argument_expression -> expression .)
    REQUIRE         reduce using rule 134 (argument_expression -> expression .)
    REQUIRE_ONCE    reduce using rule 134 (argument_expression -> expression .)
    PRINT           reduce using rule 134 (argument_expression -> expression .)
    YIELD           reduce using rule 134 (argument_expression -> expression .)
    YIELD_FROM      reduce using rule 134 (argument_expression -> expression .)
    COLON           reduce using rule 134 (argument_expression -> expression .)


state 496

    (135) variadic_unpacking -> ELLIPSIS . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 639
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 497

    (129) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 640


state 498

    (130) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> argument_expression_list .
    (132) argument_expression_list -> argument_expression_list . argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 641
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! RIGHT_PARENTHESIS [ reduce using rule 94 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 638
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 499

    (203) bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .
    (201) bitwise_AND_expression -> bitwise_AND_expression . AMPERSAND equality_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    BITWISE_XOR     reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    BITWISE_OR      reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    COALESCE        reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    TERNARY_OPERATION reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    AND             reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    XOR             reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    OR              reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    SEMICOLON       reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    INCLUDE         reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    INCLUDE_ONCE    reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    REQUIRE         reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    REQUIRE_ONCE    reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    PRINT           reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    YIELD           reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    YIELD_FROM      reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    RIGHT_PARENTHESIS reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    COLON           reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    AS              reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ARROW           reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    STRING          reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    RIGHT_CBRAC     reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    VARIABLE        reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    DOUBLE_POINT    reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    DOUBLE_ARROW    reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ELLIPSIS        reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ARRAY           reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    CALLABLE        reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ITERABLE        reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    BOOL            reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    FLOAT           reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    INT             reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    AMPERSAND       shift and go to state 340

  ! AMPERSAND       [ reduce using rule 203 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .) ]


state 500

    (113) array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 642


state 501

    (201) bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .
    (196) equality_expression -> equality_expression . EQUAL relational_expression
    (197) equality_expression -> equality_expression . IS_NOT_EQUAL relational_expression
    (198) equality_expression -> equality_expression . IS_IDENTICAL relational_expression
    (199) equality_expression -> equality_expression . IS_NOT_IDENTICAL relational_expression

    AMPERSAND       reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    BITWISE_XOR     reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    BITWISE_OR      reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    COALESCE        reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    TERNARY_OPERATION reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    AND             reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    XOR             reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    OR              reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    SEMICOLON       reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    INCLUDE         reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    INCLUDE_ONCE    reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    REQUIRE         reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    REQUIRE_ONCE    reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    PRINT           reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    YIELD           reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    YIELD_FROM      reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    COLON           reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    AS              reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ARROW           reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    STRING          reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    RIGHT_CBRAC     reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    VARIABLE        reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    DOUBLE_POINT    reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    DOUBLE_ARROW    reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ELLIPSIS        reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ARRAY           reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    CALLABLE        reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ITERABLE        reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    BOOL            reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    FLOAT           reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    INT             reduce using rule 201 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    EQUAL           shift and go to state 341
    IS_NOT_EQUAL    shift and go to state 342
    IS_IDENTICAL    shift and go to state 343
    IS_NOT_IDENTICAL shift and go to state 344


state 502

    (196) equality_expression -> equality_expression EQUAL relational_expression .
    (190) relational_expression -> relational_expression . LESS_THAN shift_expression
    (191) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    IS_IDENTICAL    reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    AMPERSAND       reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    BITWISE_XOR     reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    BITWISE_OR      reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    COALESCE        reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    TERNARY_OPERATION reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEMICOLON       reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    INCLUDE         reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    REQUIRE         reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    PRINT           reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    YIELD           reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    YIELD_FROM      reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    COLON           reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    AS              reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    ARROW           reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    VARIABLE        reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOUBLE_POINT    reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELLIPSIS        reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    ARRAY           reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    CALLABLE        reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    ITERABLE        reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    BOOL            reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOAT           reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    INT             reduce using rule 196 (equality_expression -> equality_expression EQUAL relational_expression .)
    LESS_THAN       shift and go to state 345
    IS_SMALLER_OR_EQUAL shift and go to state 346
    IS_GREATER_OR_EQUAL shift and go to state 347
    GREATER_THAN_OR_EQUAL shift and go to state 348
    SPACESHIP       shift and go to state 349


state 503

    (197) equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .
    (190) relational_expression -> relational_expression . LESS_THAN shift_expression
    (191) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    IS_IDENTICAL    reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    AMPERSAND       reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    BITWISE_XOR     reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    BITWISE_OR      reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    COALESCE        reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    TERNARY_OPERATION reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    AND             reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    XOR             reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    OR              reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    SEMICOLON       reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    INCLUDE         reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    REQUIRE         reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    PRINT           reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    YIELD           reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    YIELD_FROM      reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    COLON           reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    AS              reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ARROW           reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    STRING          reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    VARIABLE        reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    DOUBLE_POINT    reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ELLIPSIS        reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ARRAY           reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    CALLABLE        reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ITERABLE        reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    BOOL            reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    FLOAT           reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    INT             reduce using rule 197 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    LESS_THAN       shift and go to state 345
    IS_SMALLER_OR_EQUAL shift and go to state 346
    IS_GREATER_OR_EQUAL shift and go to state 347
    GREATER_THAN_OR_EQUAL shift and go to state 348
    SPACESHIP       shift and go to state 349


state 504

    (198) equality_expression -> equality_expression IS_IDENTICAL relational_expression .
    (190) relational_expression -> relational_expression . LESS_THAN shift_expression
    (191) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    IS_IDENTICAL    reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    AMPERSAND       reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    BITWISE_XOR     reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    BITWISE_OR      reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    COALESCE        reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    TERNARY_OPERATION reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    AND             reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    XOR             reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    OR              reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    SEMICOLON       reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    INCLUDE         reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    REQUIRE         reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    PRINT           reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    YIELD           reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    YIELD_FROM      reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    COLON           reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    AS              reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ARROW           reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    STRING          reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    VARIABLE        reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    DOUBLE_POINT    reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ELLIPSIS        reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ARRAY           reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    CALLABLE        reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ITERABLE        reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    BOOL            reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    FLOAT           reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    INT             reduce using rule 198 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    LESS_THAN       shift and go to state 345
    IS_SMALLER_OR_EQUAL shift and go to state 346
    IS_GREATER_OR_EQUAL shift and go to state 347
    GREATER_THAN_OR_EQUAL shift and go to state 348
    SPACESHIP       shift and go to state 349


state 505

    (199) equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .
    (190) relational_expression -> relational_expression . LESS_THAN shift_expression
    (191) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    IS_IDENTICAL    reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    AMPERSAND       reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    BITWISE_XOR     reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    BITWISE_OR      reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    COALESCE        reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    TERNARY_OPERATION reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    AND             reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    XOR             reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    OR              reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    SEMICOLON       reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    INCLUDE         reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    REQUIRE         reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    PRINT           reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    YIELD           reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    YIELD_FROM      reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    COLON           reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    AS              reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ARROW           reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    STRING          reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    VARIABLE        reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    DOUBLE_POINT    reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ELLIPSIS        reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ARRAY           reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    CALLABLE        reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ITERABLE        reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    BOOL            reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    FLOAT           reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    INT             reduce using rule 199 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    LESS_THAN       shift and go to state 345
    IS_SMALLER_OR_EQUAL shift and go to state 346
    IS_GREATER_OR_EQUAL shift and go to state 347
    GREATER_THAN_OR_EQUAL shift and go to state 348
    SPACESHIP       shift and go to state 349


state 506

    (190) relational_expression -> relational_expression LESS_THAN shift_expression .
    (187) shift_expression -> shift_expression . SL additive_expression
    (188) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SPACESHIP       reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    EQUAL           reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_NOT_EQUAL    reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_IDENTICAL    reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AMPERSAND       reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BITWISE_XOR     reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BITWISE_OR      reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COALESCE        reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    TERNARY_OPERATION reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AND             reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    XOR             reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    OR              reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SEMICOLON       reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    INCLUDE         reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    INCLUDE_ONCE    reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    REQUIRE         reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    REQUIRE_ONCE    reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    PRINT           reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    YIELD           reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    YIELD_FROM      reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COLON           reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AS              reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ARROW           reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    STRING          reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_CBRAC     reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    VARIABLE        reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    DOUBLE_POINT    reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    DOUBLE_ARROW    reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ELLIPSIS        reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ARRAY           reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    CALLABLE        reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ITERABLE        reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BOOL            reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    FLOAT           reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    INT             reduce using rule 190 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SL              shift and go to state 350
    SR              shift and go to state 351


state 507

    (191) relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .
    (187) shift_expression -> shift_expression . SL additive_expression
    (188) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    SPACESHIP       reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    EQUAL           reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_NOT_EQUAL    reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_IDENTICAL    reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    AMPERSAND       reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    BITWISE_XOR     reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    BITWISE_OR      reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    COALESCE        reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    TERNARY_OPERATION reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    AND             reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    XOR             reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    OR              reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    SEMICOLON       reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    INCLUDE         reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    INCLUDE_ONCE    reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    REQUIRE         reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    REQUIRE_ONCE    reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    PRINT           reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    YIELD           reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    YIELD_FROM      reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    COLON           reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    AS              reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ARROW           reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    STRING          reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    RIGHT_CBRAC     reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    VARIABLE        reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    DOUBLE_POINT    reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    DOUBLE_ARROW    reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ELLIPSIS        reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ARRAY           reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    CALLABLE        reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ITERABLE        reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    BOOL            reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    FLOAT           reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    INT             reduce using rule 191 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    SL              shift and go to state 350
    SR              shift and go to state 351


state 508

    (192) relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .
    (187) shift_expression -> shift_expression . SL additive_expression
    (188) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    SPACESHIP       reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    EQUAL           reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_NOT_EQUAL    reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_IDENTICAL    reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    AMPERSAND       reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    BITWISE_XOR     reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    BITWISE_OR      reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    COALESCE        reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    TERNARY_OPERATION reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    AND             reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    XOR             reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    OR              reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    SEMICOLON       reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    INCLUDE         reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    INCLUDE_ONCE    reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    REQUIRE         reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    REQUIRE_ONCE    reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    PRINT           reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    YIELD           reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    YIELD_FROM      reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    COLON           reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    AS              reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ARROW           reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    STRING          reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    RIGHT_CBRAC     reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    VARIABLE        reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    DOUBLE_POINT    reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    DOUBLE_ARROW    reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ELLIPSIS        reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ARRAY           reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    CALLABLE        reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ITERABLE        reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    BOOL            reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    FLOAT           reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    INT             reduce using rule 192 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    SL              shift and go to state 350
    SR              shift and go to state 351


state 509

    (193) relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .
    (187) shift_expression -> shift_expression . SL additive_expression
    (188) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    SPACESHIP       reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    EQUAL           reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_NOT_EQUAL    reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_IDENTICAL    reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    AMPERSAND       reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    BITWISE_XOR     reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    BITWISE_OR      reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    COALESCE        reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    TERNARY_OPERATION reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    AND             reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    XOR             reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    OR              reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    SEMICOLON       reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    INCLUDE         reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    INCLUDE_ONCE    reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    REQUIRE         reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    REQUIRE_ONCE    reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    PRINT           reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    YIELD           reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    YIELD_FROM      reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    COLON           reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    AS              reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ARROW           reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    STRING          reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    RIGHT_CBRAC     reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    VARIABLE        reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    DOUBLE_POINT    reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    DOUBLE_ARROW    reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ELLIPSIS        reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ARRAY           reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    CALLABLE        reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ITERABLE        reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    BOOL            reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    FLOAT           reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    INT             reduce using rule 193 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    SL              shift and go to state 350
    SR              shift and go to state 351


state 510

    (194) relational_expression -> relational_expression SPACESHIP shift_expression .
    (187) shift_expression -> shift_expression . SL additive_expression
    (188) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    SPACESHIP       reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    EQUAL           reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_NOT_EQUAL    reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_IDENTICAL    reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    AMPERSAND       reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    BITWISE_XOR     reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    BITWISE_OR      reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    COALESCE        reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    TERNARY_OPERATION reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    AND             reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    XOR             reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    OR              reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    SEMICOLON       reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    INCLUDE         reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    INCLUDE_ONCE    reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    REQUIRE         reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    REQUIRE_ONCE    reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    PRINT           reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    YIELD           reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    YIELD_FROM      reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    COLON           reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    AS              reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ARROW           reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    STRING          reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    RIGHT_CBRAC     reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    VARIABLE        reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    DOUBLE_POINT    reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    DOUBLE_ARROW    reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ELLIPSIS        reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ARRAY           reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    CALLABLE        reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ITERABLE        reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    BOOL            reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    FLOAT           reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    INT             reduce using rule 194 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    SL              shift and go to state 350
    SR              shift and go to state 351


state 511

    (187) shift_expression -> shift_expression SL additive_expression .
    (183) additive_expression -> additive_expression . PLUS multiplicative_expression
    (184) additive_expression -> additive_expression . LESS multiplicative_expression
    (185) additive_expression -> additive_expression . CONCAT multiplicative_expression

    SL              reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    SR              reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    LESS_THAN       reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    SPACESHIP       reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    EQUAL           reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    IS_NOT_EQUAL    reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    IS_IDENTICAL    reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    IS_NOT_IDENTICAL reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    AMPERSAND       reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    BITWISE_XOR     reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    BITWISE_OR      reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    COALESCE        reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    TERNARY_OPERATION reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    AND             reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    XOR             reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    OR              reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    SEMICOLON       reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    INCLUDE         reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    INCLUDE_ONCE    reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    REQUIRE         reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    REQUIRE_ONCE    reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    PRINT           reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    YIELD           reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    YIELD_FROM      reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    COLON           reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    AS              reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    ARROW           reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    STRING          reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    RIGHT_CBRAC     reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    VARIABLE        reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    DOUBLE_POINT    reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    DOUBLE_ARROW    reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    ELLIPSIS        reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    ARRAY           reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    CALLABLE        reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    ITERABLE        reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    BOOL            reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    FLOAT           reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    INT             reduce using rule 187 (shift_expression -> shift_expression SL additive_expression .)
    PLUS            shift and go to state 352
    LESS            shift and go to state 353
    CONCAT          shift and go to state 354


state 512

    (188) shift_expression -> shift_expression SR additive_expression .
    (183) additive_expression -> additive_expression . PLUS multiplicative_expression
    (184) additive_expression -> additive_expression . LESS multiplicative_expression
    (185) additive_expression -> additive_expression . CONCAT multiplicative_expression

    SL              reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    SR              reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    LESS_THAN       reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    SPACESHIP       reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    EQUAL           reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    IS_NOT_EQUAL    reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    IS_IDENTICAL    reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    IS_NOT_IDENTICAL reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    AMPERSAND       reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    BITWISE_XOR     reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    BITWISE_OR      reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    COALESCE        reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    TERNARY_OPERATION reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    AND             reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    XOR             reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    OR              reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    SEMICOLON       reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    INCLUDE         reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    INCLUDE_ONCE    reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    REQUIRE         reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    REQUIRE_ONCE    reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    PRINT           reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    YIELD           reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    YIELD_FROM      reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    COLON           reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    AS              reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    ARROW           reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    STRING          reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    RIGHT_CBRAC     reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    VARIABLE        reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    DOUBLE_POINT    reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    DOUBLE_ARROW    reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    ELLIPSIS        reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    ARRAY           reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    CALLABLE        reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    ITERABLE        reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    BOOL            reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    FLOAT           reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    INT             reduce using rule 188 (shift_expression -> shift_expression SR additive_expression .)
    PLUS            shift and go to state 352
    LESS            shift and go to state 353
    CONCAT          shift and go to state 354


state 513

    (183) additive_expression -> additive_expression PLUS multiplicative_expression .
    (179) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (180) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (181) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONCAT          reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SL              reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SR              reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SPACESHIP       reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMPERSAND       reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COALESCE        reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INCLUDE         reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    REQUIRE         reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PRINT           reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    YIELD           reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    YIELD_FROM      reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AS              reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ARROW           reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    VARIABLE        reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELLIPSIS        reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ARRAY           reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CALLABLE        reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ITERABLE        reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BOOL            reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOAT           reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INT             reduce using rule 183 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        shift and go to state 355
    DIVIDE          shift and go to state 356
    MODULO          shift and go to state 357


state 514

    (184) additive_expression -> additive_expression LESS multiplicative_expression .
    (179) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (180) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (181) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    LESS            reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    CONCAT          reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SL              reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SR              reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    LESS_THAN       reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SPACESHIP       reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    EQUAL           reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    AMPERSAND       reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    BITWISE_OR      reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    COALESCE        reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    AND             reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    XOR             reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    OR              reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SEMICOLON       reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    INCLUDE         reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    REQUIRE         reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    PRINT           reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    YIELD           reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    YIELD_FROM      reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    COLON           reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    AS              reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ARROW           reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    STRING          reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    VARIABLE        reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ELLIPSIS        reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ARRAY           reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    CALLABLE        reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ITERABLE        reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    BOOL            reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    FLOAT           reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    INT             reduce using rule 184 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ASTERISK        shift and go to state 355
    DIVIDE          shift and go to state 356
    MODULO          shift and go to state 357


state 515

    (185) additive_expression -> additive_expression CONCAT multiplicative_expression .
    (179) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (180) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (181) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    LESS            reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    CONCAT          reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SL              reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SR              reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    LESS_THAN       reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SPACESHIP       reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    EQUAL           reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    AMPERSAND       reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    BITWISE_XOR     reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    BITWISE_OR      reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    COALESCE        reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    AND             reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    XOR             reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    OR              reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SEMICOLON       reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    INCLUDE         reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    REQUIRE         reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    PRINT           reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    YIELD           reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    YIELD_FROM      reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    COLON           reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    AS              reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ARROW           reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    STRING          reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    VARIABLE        reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ELLIPSIS        reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ARRAY           reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    CALLABLE        reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ITERABLE        reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    BOOL            reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    FLOAT           reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    INT             reduce using rule 185 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ASTERISK        shift and go to state 355
    DIVIDE          shift and go to state 356
    MODULO          shift and go to state 357


state 516

    (179) multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .

    ASTERISK        reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    DIVIDE          reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    MODULO          reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    PLUS            reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    LESS            reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    CONCAT          reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SL              reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SR              reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    LESS_THAN       reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SPACESHIP       reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    EQUAL           reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_IDENTICAL    reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    AMPERSAND       reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    BITWISE_XOR     reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    BITWISE_OR      reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    COALESCE        reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    TERNARY_OPERATION reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    AND             reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    XOR             reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    OR              reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SEMICOLON       reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    INCLUDE         reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    REQUIRE         reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    PRINT           reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    YIELD           reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    YIELD_FROM      reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    COLON           reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    AS              reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ARROW           reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    STRING          reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    VARIABLE        reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    DOUBLE_POINT    reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ELLIPSIS        reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ARRAY           reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    CALLABLE        reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ITERABLE        reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    BOOL            reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    FLOAT           reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    INT             reduce using rule 179 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)


state 517

    (180) multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .

    ASTERISK        reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    DIVIDE          reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    MODULO          reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    PLUS            reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    LESS            reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    CONCAT          reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SL              reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SR              reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    LESS_THAN       reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SPACESHIP       reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    EQUAL           reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_IDENTICAL    reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    AMPERSAND       reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    BITWISE_XOR     reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    BITWISE_OR      reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    COALESCE        reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    TERNARY_OPERATION reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    AND             reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    XOR             reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    OR              reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SEMICOLON       reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    INCLUDE         reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    REQUIRE         reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    PRINT           reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    YIELD           reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    YIELD_FROM      reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    COLON           reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    AS              reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ARROW           reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    STRING          reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    VARIABLE        reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    DOUBLE_POINT    reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ELLIPSIS        reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ARRAY           reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    CALLABLE        reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ITERABLE        reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    BOOL            reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    FLOAT           reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    INT             reduce using rule 180 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)


state 518

    (181) multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .

    ASTERISK        reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    DIVIDE          reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    MODULO          reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    PLUS            reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    LESS            reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    CONCAT          reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SL              reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SR              reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    LESS_THAN       reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SPACESHIP       reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    EQUAL           reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_IDENTICAL    reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    AMPERSAND       reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    BITWISE_XOR     reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    BITWISE_OR      reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    COALESCE        reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    TERNARY_OPERATION reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    AND             reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    XOR             reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    OR              reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SEMICOLON       reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    INCLUDE         reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    REQUIRE         reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    PRINT           reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    YIELD           reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    YIELD_FROM      reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    COLON           reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    AS              reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ARROW           reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    STRING          reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    VARIABLE        reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    DOUBLE_POINT    reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ELLIPSIS        reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ARRAY           reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    CALLABLE        reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ITERABLE        reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    BOOL            reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    FLOAT           reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    INT             reduce using rule 181 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)


state 519

    (34) primary_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (39) dereferencable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (43) callable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 643


state 520

    (233) byref_assignment_expression -> variable EQUAL . AMPERSAND variable

    AMPERSAND       shift and go to state 458


state 521

    (152) class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON . NAME
    (149) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON . simple_variable
    (150) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (137) member_name -> . NAME
    (138) member_name -> . simple_variable
    (139) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS

    NAME            shift and go to state 477
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_CBRAC      shift and go to state 478

    simple_variable                shift and go to state 475
    member_name                    shift and go to state 476

state 522

    (174) instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .

    ASTERISK        reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    DIVIDE          reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    MODULO          reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    PLUS            reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    LESS            reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    CONCAT          reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SL              reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SR              reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    LESS_THAN       reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_SMALLER_OR_EQUAL reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_GREATER_OR_EQUAL reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    GREATER_THAN_OR_EQUAL reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SPACESHIP       reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    EQUAL           reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_NOT_EQUAL    reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_IDENTICAL    reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_NOT_IDENTICAL reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    AMPERSAND       reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    BITWISE_XOR     reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    BITWISE_OR      reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    COALESCE        reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    TERNARY_OPERATION reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    AND             reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    XOR             reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    OR              reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SEMICOLON       reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INCLUDE         reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INCLUDE_ONCE    reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    REQUIRE         reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    REQUIRE_ONCE    reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    PRINT           reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    YIELD           reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    YIELD_FROM      reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    RIGHT_PARENTHESIS reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    COLON           reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    AS              reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ARROW           reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    STRING          reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    RIGHT_CBRAC     reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    VARIABLE        reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    DOUBLE_POINT    reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    DOUBLE_ARROW    reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ELLIPSIS        reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ARRAY           reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    CALLABLE        reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ITERABLE        reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    BOOL            reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    FLOAT           reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INT             reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INSTANCEOF      reduce using rule 174 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)


state 523

    (162) exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .

    ASTERISK        reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    DIVIDE          reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    MODULO          reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    PLUS            reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    LESS            reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    CONCAT          reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SL              reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SR              reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    LESS_THAN       reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SPACESHIP       reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    EQUAL           reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_NOT_EQUAL    reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_IDENTICAL    reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_NOT_IDENTICAL reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    AMPERSAND       reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    BITWISE_XOR     reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    BITWISE_OR      reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    COALESCE        reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    TERNARY_OPERATION reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    AND             reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    XOR             reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    OR              reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SEMICOLON       reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INCLUDE         reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INCLUDE_ONCE    reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    REQUIRE         reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    REQUIRE_ONCE    reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    PRINT           reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    YIELD           reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    YIELD_FROM      reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    RIGHT_PARENTHESIS reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    COLON           reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    AS              reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ARROW           reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    STRING          reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    RIGHT_CBRAC     reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    VARIABLE        reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    DOUBLE_POINT    reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    DOUBLE_ARROW    reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ELLIPSIS        reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ARRAY           reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    CALLABLE        reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ITERABLE        reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    BOOL            reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    FLOAT           reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INT             reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INSTANCEOF      reduce using rule 162 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)


state 524

    (75) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt . LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement

    LEFT_PARENTHESIS shift and go to state 644


state 525

    (89) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS . argument_expression_list COLON RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> . argument_expression_list
    (95) argument_expression_list_opt -> .
    (131) argument_expression_list -> . argument_expression
    (132) argument_expression_list -> . argument_expression_list argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 95 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression_list_opt   shift and go to state 645
    argument_expression_list       shift and go to state 646
    argument_expression            shift and go to state 493
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 526

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> . argument_expression_list
    (95) argument_expression_list_opt -> .
    (131) argument_expression_list -> . argument_expression
    (132) argument_expression_list -> . argument_expression_list argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 95 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression_list_opt   shift and go to state 647
    argument_expression_list       shift and go to state 648
    argument_expression            shift and go to state 493
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 527

    (93) object_creation_expression -> NEW CLASS class_base_clause_opt . class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (98) class_interface_clause_opt -> . class_interface_clause
    (99) class_interface_clause_opt -> .
    (445) class_interface_clause -> . IMPLEMENTS qualified_name
    (446) class_interface_clause -> . class_interface_clause qualified_name

    LEFT_CBRAC      reduce using rule 99 (class_interface_clause_opt -> .)
    IMPLEMENTS      shift and go to state 557

    class_interface_clause_opt     shift and go to state 649
    class_interface_clause         shift and go to state 650

state 528

    (96) class_base_clause_opt -> class_base_clause .

    IMPLEMENTS      reduce using rule 96 (class_base_clause_opt -> class_base_clause .)
    LEFT_CBRAC      reduce using rule 96 (class_base_clause_opt -> class_base_clause .)


state 529

    (108) new_variable -> qualified_name DOUBLE_COLON . simple_variable
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    simple_variable                shift and go to state 651

state 530

    (105) new_variable -> new_variable LEFT_CBRAC . expression_opt RIGHT_CBRAC
    (106) new_variable -> new_variable LEFT_CBRAC . expression RIGHT_PARENTHESIS
    (111) expression_opt -> . expression
    (112) expression_opt -> .
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     reduce using rule 112 (expression_opt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression_opt                 shift and go to state 652
    expression                     shift and go to state 653
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 531

    (107) new_variable -> new_variable ARROW . member_name
    (137) member_name -> . NAME
    (138) member_name -> . simple_variable
    (139) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    NAME            shift and go to state 480
    LEFT_CBRAC      shift and go to state 478
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    member_name                    shift and go to state 654
    simple_variable                shift and go to state 481

state 532

    (110) new_variable -> new_variable DOUBLE_COLON . simple_variable
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    simple_variable                shift and go to state 655

state 533

    (109) new_variable -> relative_scope DOUBLE_COLON . simple_variable
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113

    simple_variable                shift and go to state 656

state 534

    (146) shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .

    DOUBLEASTERISK  reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ASTERISK        reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    DIVIDE          reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    MODULO          reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    PLUS            reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    LESS            reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    CONCAT          reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SL              reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SR              reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    LESS_THAN       reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_SMALLER_OR_EQUAL reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_GREATER_OR_EQUAL reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    GREATER_THAN_OR_EQUAL reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SPACESHIP       reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    EQUAL           reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_NOT_EQUAL    reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_IDENTICAL    reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_NOT_IDENTICAL reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    AMPERSAND       reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    BITWISE_XOR     reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    BITWISE_OR      reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    COALESCE        reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    TERNARY_OPERATION reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    AND             reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    XOR             reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    OR              reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SEMICOLON       reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INCLUDE         reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INCLUDE_ONCE    reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    REQUIRE         reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    REQUIRE_ONCE    reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    PRINT           reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    YIELD           reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    YIELD_FROM      reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    RIGHT_PARENTHESIS reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    COLON           reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    AS              reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ARROW           reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    STRING          reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    RIGHT_CBRAC     reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    VARIABLE        reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    DOUBLE_POINT    reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    DOUBLE_ARROW    reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ELLIPSIS        reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ARRAY           reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    CALLABLE        reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ITERABLE        reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    BOOL            reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    FLOAT           reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INT             reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INSTANCEOF      reduce using rule 146 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)


state 535

    (65) empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 657


state 536

    (66) eval_intrinsic -> EVAL LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 658


state 537

    (68) exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 659


state 538

    (111) expression_opt -> expression .

    RIGHT_PARENTHESIS reduce using rule 111 (expression_opt -> expression .)


state 539

    (70) exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 660


state 540

    (71) isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 661


state 541

    (72) variable_list_opt -> variable_list .
    (74) variable_list -> variable_list . variable
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    RIGHT_PARENTHESIS reduce using rule 72 (variable_list_opt -> variable_list .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    variable                       shift and go to state 400
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 542

    (387) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list . VARIABLE RIGHT_PARENTHESIS compound_statement
    (389) catch_name_list -> catch_name_list .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 662

  ! VARIABLE        [ reduce using rule 389 (catch_name_list -> catch_name_list .) ]


state 543

    (388) catch_name_list -> qualified_name .

    VARIABLE        reduce using rule 388 (catch_name_list -> qualified_name .)


state 544

    (391) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 391 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)


state 545

    (392) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDDECLARE SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 663
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 546

    (393) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .
    (295) expression_statement -> SEMICOLON .

  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for TRY resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DECLARE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for UNSET resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for TRAIT resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for STATIC resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for GOTO resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for THROW resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INCLUDE_ONCE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for REQUIRE_ONCE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ABSTRACT resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FINAL resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for YIELD resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for YIELD_FROM resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for RIGHT_CBRAC resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ELSE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDDECLARE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDWHILE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDFOR resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CASE resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDSWITCH resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDFOREACH resolved using rule 295 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDIF resolved using rule 295 (expression_statement -> SEMICOLON .)
    LEFT_CBRAC      reduce using rule 295 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 295 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 295 (expression_statement -> SEMICOLON .)
    DECLARE         reduce using rule 295 (expression_statement -> SEMICOLON .)
    ECHO            reduce using rule 295 (expression_statement -> SEMICOLON .)
    UNSET           reduce using rule 295 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 295 (expression_statement -> SEMICOLON .)
    INTERFACE       reduce using rule 295 (expression_statement -> SEMICOLON .)
    TRAIT           reduce using rule 295 (expression_statement -> SEMICOLON .)
    NAMESPACE       reduce using rule 295 (expression_statement -> SEMICOLON .)
    USE             reduce using rule 295 (expression_statement -> SEMICOLON .)
    GLOBAL          reduce using rule 295 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 295 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 295 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 295 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 295 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 295 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 295 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 295 (expression_statement -> SEMICOLON .)
    FOREACH         reduce using rule 295 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 295 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 295 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 295 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 295 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 295 (expression_statement -> SEMICOLON .)
    FUNCTION        reduce using rule 295 (expression_statement -> SEMICOLON .)
    INCLUDE         reduce using rule 295 (expression_statement -> SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 295 (expression_statement -> SEMICOLON .)
    REQUIRE         reduce using rule 295 (expression_statement -> SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 295 (expression_statement -> SEMICOLON .)
    ABSTRACT        reduce using rule 295 (expression_statement -> SEMICOLON .)
    FINAL           reduce using rule 295 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 295 (expression_statement -> SEMICOLON .)
    YIELD           reduce using rule 295 (expression_statement -> SEMICOLON .)
    YIELD_FROM      reduce using rule 295 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 295 (expression_statement -> SEMICOLON .)
    $end            reduce using rule 295 (expression_statement -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 295 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 295 (expression_statement -> SEMICOLON .)
    ELSEIF          reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDDECLARE      reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDWHILE        reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDFOR          reduce using rule 295 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 295 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDSWITCH       reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDFOREACH      reduce using rule 295 (expression_statement -> SEMICOLON .)
    ENDIF           reduce using rule 295 (expression_statement -> SEMICOLON .)

  ! LEFT_CBRAC      [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! TRY             [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! DECLARE         [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ECHO            [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! UNSET           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CONST           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! INTERFACE       [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! TRAIT           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! NAMESPACE       [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! USE             [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! GLOBAL          [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! STATIC          [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! STRING          [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! IF              [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! WHILE           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! DO              [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FOR             [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! GOTO            [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! BREAK           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! RETURN          [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! THROW           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! INCLUDE         [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! INCLUDE_ONCE    [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! REQUIRE         [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! REQUIRE_ONCE    [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ABSTRACT        [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FINAL           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! PRINT           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! YIELD           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! YIELD_FROM      [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CLASS           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! $end            [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! RIGHT_CBRAC     [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ELSE            [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ELSEIF          [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDDECLARE      [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDWHILE        [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDFOR          [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CASE            [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! DEFAULT         [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDSWITCH       [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDFOREACH      [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDIF           [ reduce using rule 393 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]


state 547

    (394) declare_directive -> TICKS EQUALS literal .

    RIGHT_PARENTHESIS reduce using rule 394 (declare_directive -> TICKS EQUALS literal .)


state 548

    (57) literal -> string_literal .

    RIGHT_PARENTHESIS reduce using rule 57 (literal -> string_literal .)


state 549

    (60) string_literal -> STRING .

    RIGHT_PARENTHESIS reduce using rule 60 (string_literal -> STRING .)


state 550

    (395) declare_directive -> ENCODING EQUALS literal .

    RIGHT_PARENTHESIS reduce using rule 395 (declare_directive -> ENCODING EQUALS literal .)


state 551

    (396) declare_directive -> STRICT_TYPES EQUALS literal .

    RIGHT_PARENTHESIS reduce using rule 396 (declare_directive -> STRICT_TYPES EQUALS literal .)


state 552

    (39) dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (43) callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    ARROW           reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 43 (callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 553

    (400) unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 664


state 554

    (401) unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .

    LEFT_CBRAC      reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    TRY             reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    DECLARE         reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    UNSET           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    TRAIT           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    NAMESPACE       reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    USE             reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    GLOBAL          reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    STATIC          reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    GOTO            reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    THROW           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE         reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE         reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ABSTRACT        reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    YIELD           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    YIELD_FROM      reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ELSEIF          reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDDECLARE      reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDWHILE        reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOR          reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CASE            reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDSWITCH       reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOREACH      reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDIF           reduce using rule 401 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)


state 555

    (433) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt . LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 665


state 556

    (438) class_interface_clauseopt -> class_interface_clause .
    (446) class_interface_clause -> class_interface_clause . qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    LEFT_CBRAC      reduce using rule 438 (class_interface_clauseopt -> class_interface_clause .)
    STRING          shift and go to state 51

    qualified_name                 shift and go to state 666
    name                           shift and go to state 175

state 557

    (445) class_interface_clause -> IMPLEMENTS . qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    qualified_name                 shift and go to state 667
    name                           shift and go to state 175

state 558

    (444) class_base_clause -> EXTENDS qualified_name .

    IMPLEMENTS      reduce using rule 444 (class_base_clause -> EXTENDS qualified_name .)
    LEFT_CBRAC      reduce using rule 444 (class_base_clause -> EXTENDS qualified_name .)


state 559

    (489) interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 668


state 560

    (492) interface_member_declarationsopt -> interface_member_declarations .
    (497) interface_member_declarations -> interface_member_declarations . interface_member_declaration
    (498) interface_member_declaration -> . class_const_declaration
    (499) interface_member_declaration -> . method_declaration
    (456) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (469) static_modifier -> . STATIC
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 492 (interface_member_declarationsopt -> interface_member_declarations .)
    CONST           reduce using rule 527 (visibility_modifier_opt -> .)
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    interface_member_declaration   shift and go to state 669
    class_const_declaration        shift and go to state 562
    method_declaration             shift and go to state 563
    visibility_modifier_opt        shift and go to state 564
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 565
    visibility_modifier            shift and go to state 566
    method_modifier                shift and go to state 425
    static_modifier                shift and go to state 567
    class_modifier                 shift and go to state 431

state 561

    (496) interface_member_declarations -> interface_member_declaration .

    PUBLIC          reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    PROTECTED       reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    PRIVATE         reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    STATIC          reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    ABSTRACT        reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    FINAL           reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    CONST           reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    FUNCTION        reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)
    RIGHT_CBRAC     reduce using rule 496 (interface_member_declarations -> interface_member_declaration .)


state 562

    (498) interface_member_declaration -> class_const_declaration .

    PUBLIC          reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    PROTECTED       reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    PRIVATE         reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    STATIC          reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    ABSTRACT        reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    FINAL           reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    CONST           reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    FUNCTION        reduce using rule 498 (interface_member_declaration -> class_const_declaration .)
    RIGHT_CBRAC     reduce using rule 498 (interface_member_declaration -> class_const_declaration .)


state 563

    (499) interface_member_declaration -> method_declaration .

    PUBLIC          reduce using rule 499 (interface_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 499 (interface_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 499 (interface_member_declaration -> method_declaration .)
    STATIC          reduce using rule 499 (interface_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 499 (interface_member_declaration -> method_declaration .)
    FINAL           reduce using rule 499 (interface_member_declaration -> method_declaration .)
    CONST           reduce using rule 499 (interface_member_declaration -> method_declaration .)
    FUNCTION        reduce using rule 499 (interface_member_declaration -> method_declaration .)
    RIGHT_CBRAC     reduce using rule 499 (interface_member_declaration -> method_declaration .)


state 564

    (456) class_const_declaration -> visibility_modifier_opt . CONST const_elements SEMICOLON

    CONST           shift and go to state 670


state 565

    (477) method_declaration -> method_modifiers . function_definition_header SEMICOLON
    (478) method_modifiersopt -> method_modifiers .
    (481) method_modifiers -> method_modifiers . method_modifier
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 68
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

  ! FUNCTION        [ reduce using rule 478 (method_modifiersopt -> method_modifiers .) ]

    function_definition_header     shift and go to state 575
    method_modifier                shift and go to state 577
    visibility_modifier            shift and go to state 578
    static_modifier                shift and go to state 567
    class_modifier                 shift and go to state 431

state 566

    (526) visibility_modifier_opt -> visibility_modifier .
    (482) method_modifier -> visibility_modifier .

    CONST           reduce using rule 526 (visibility_modifier_opt -> visibility_modifier .)
    FUNCTION        reduce using rule 482 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 482 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 482 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 482 (method_modifier -> visibility_modifier .)
    STATIC          reduce using rule 482 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 482 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 482 (method_modifier -> visibility_modifier .)


state 567

    (483) method_modifier -> static_modifier .

    FUNCTION        reduce using rule 483 (method_modifier -> static_modifier .)
    PUBLIC          reduce using rule 483 (method_modifier -> static_modifier .)
    PROTECTED       reduce using rule 483 (method_modifier -> static_modifier .)
    PRIVATE         reduce using rule 483 (method_modifier -> static_modifier .)
    STATIC          reduce using rule 483 (method_modifier -> static_modifier .)
    ABSTRACT        reduce using rule 483 (method_modifier -> static_modifier .)
    FINAL           reduce using rule 483 (method_modifier -> static_modifier .)


state 568

    (500) trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    TRY             reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    DECLARE         reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ECHO            reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    UNSET           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CONST           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    INTERFACE       reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    TRAIT           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    USE             reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    GLOBAL          reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    STATIC          reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    STRING          reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    IF              reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    SWITCH          reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    WHILE           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    DO              reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FOR             reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FOREACH         reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    GOTO            reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CONTINUE        reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    BREAK           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    RETURN          reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    THROW           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FINAL           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    PRINT           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    YIELD           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CLASS           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    $end            reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ELSE            reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ELSEIF          reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDFOR          reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CASE            reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    DEFAULT         reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDIF           reduce using rule 500 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)


state 569

    (504) trait_member_declarations -> trait_member_declarations trait_member_declaration .

    VAR             reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    USE             reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    PUBLIC          reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    PROTECTED       reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    PRIVATE         reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    STATIC          reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    ABSTRACT        reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    FINAL           reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    FUNCTION        reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    RIGHT_CBRAC     reduce using rule 504 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)


state 570

    (511) trait_use_clauses -> trait_use_clauses trait_use_clause .

    USE             reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    VAR             reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    PUBLIC          reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    PROTECTED       reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    PRIVATE         reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    STATIC          reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    ABSTRACT        reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    FINAL           reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    FUNCTION        reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    RIGHT_CBRAC     reduce using rule 511 (trait_use_clauses -> trait_use_clauses trait_use_clause .)


state 571

    (460) property_declaration -> property_modifier property_elements . SEMICOLON
    (471) property_elements -> property_elements . property_element
    (472) property_element -> . VARIABLE property_initializeropt SEMICOLON

    SEMICOLON       shift and go to state 671
    VARIABLE        shift and go to state 573

    property_element               shift and go to state 672

state 572

    (470) property_elements -> property_element .

    SEMICOLON       reduce using rule 470 (property_elements -> property_element .)
    VARIABLE        reduce using rule 470 (property_elements -> property_element .)


state 573

    (472) property_element -> VARIABLE . property_initializeropt SEMICOLON
    (473) property_initializeropt -> . property_initializer
    (474) property_initializeropt -> .
    (475) property_initializer -> . EQUAL constant_expression

    SEMICOLON       reduce using rule 474 (property_initializeropt -> .)
    EQUAL           shift and go to state 675

    property_initializeropt        shift and go to state 673
    property_initializer           shift and go to state 674

state 574

    (476) method_declaration -> method_modifiersopt function_definition .

    VAR             reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    USE             reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    PUBLIC          reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    PROTECTED       reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    PRIVATE         reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    STATIC          reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    ABSTRACT        reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    FINAL           reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    FUNCTION        reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    RIGHT_CBRAC     reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    CONST           reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)
    RIGHT_PARENTHESIS reduce using rule 476 (method_declaration -> method_modifiersopt function_definition .)


state 575

    (477) method_declaration -> method_modifiers function_definition_header . SEMICOLON

    SEMICOLON       shift and go to state 676


state 576

    (485) constructor_declaration -> method_modifiers FUNCTION . name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> method_modifiers FUNCTION . name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (403) function_definition_header -> FUNCTION . ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (555) name -> . STRING
    (404) ampersandopt -> . AMPERSAND
    (405) ampersandopt -> .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 51
    AMPERSAND       shift and go to state 136

  ! STRING          [ reduce using rule 405 (ampersandopt -> .) ]

    name                           shift and go to state 677
    ampersandopt                   shift and go to state 135

state 577

    (481) method_modifiers -> method_modifiers method_modifier .

    FUNCTION        reduce using rule 481 (method_modifiers -> method_modifiers method_modifier .)
    PUBLIC          reduce using rule 481 (method_modifiers -> method_modifiers method_modifier .)
    PROTECTED       reduce using rule 481 (method_modifiers -> method_modifiers method_modifier .)
    PRIVATE         reduce using rule 481 (method_modifiers -> method_modifiers method_modifier .)
    STATIC          reduce using rule 481 (method_modifiers -> method_modifiers method_modifier .)
    ABSTRACT        reduce using rule 481 (method_modifiers -> method_modifiers method_modifier .)
    FINAL           reduce using rule 481 (method_modifiers -> method_modifiers method_modifier .)


state 578

    (482) method_modifier -> visibility_modifier .

    FUNCTION        reduce using rule 482 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 482 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 482 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 482 (method_modifier -> visibility_modifier .)
    STATIC          reduce using rule 482 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 482 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 482 (method_modifier -> visibility_modifier .)


state 579

    (462) property_modifier -> visibility_modifier static_modifieropt .

    VARIABLE        reduce using rule 462 (property_modifier -> visibility_modifier static_modifieropt .)


state 580

    (464) static_modifieropt -> static_modifier .

    VARIABLE        reduce using rule 464 (static_modifieropt -> static_modifier .)


state 581

    (463) property_modifier -> static_modifier visibility_modifier_opt .

    VARIABLE        reduce using rule 463 (property_modifier -> static_modifier visibility_modifier_opt .)


state 582

    (526) visibility_modifier_opt -> visibility_modifier .

    VARIABLE        reduce using rule 526 (visibility_modifier_opt -> visibility_modifier .)


state 583

    (512) trait_use_clause -> USE trait_name_list . trait_use_specification
    (514) trait_name_list -> trait_name_list . qualified_name
    (515) trait_use_specification -> . SEMICOLON
    (516) trait_use_specification -> . LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
    (545) qualified_name -> . name
    (555) name -> . STRING

    SEMICOLON       shift and go to state 680
    LEFT_CBRAC      shift and go to state 681
    STRING          shift and go to state 51

    trait_use_specification        shift and go to state 678
    qualified_name                 shift and go to state 679
    name                           shift and go to state 175

state 584

    (513) trait_name_list -> qualified_name .

    SEMICOLON       reduce using rule 513 (trait_name_list -> qualified_name .)
    LEFT_CBRAC      reduce using rule 513 (trait_name_list -> qualified_name .)
    STRING          reduce using rule 513 (trait_name_list -> qualified_name .)


state 585

    (546) namespace_aliasing_clause -> AS name .

    SEMICOLON       reduce using rule 546 (namespace_aliasing_clause -> AS name .)
    STRING          reduce using rule 546 (namespace_aliasing_clause -> AS name .)
    RIGHT_CBRAC     reduce using rule 546 (namespace_aliasing_clause -> AS name .)
    NAME            reduce using rule 546 (namespace_aliasing_clause -> AS name .)
    FUNCTION        reduce using rule 546 (namespace_aliasing_clause -> AS name .)
    CONST           reduce using rule 546 (namespace_aliasing_clause -> AS name .)


state 586

    (535) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR . LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (8) namespace_name -> namespace_name NS_SEPARATOR . NAME

    LEFT_CBRAC      shift and go to state 682
    NAME            shift and go to state 432


state 587

    (536) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC . namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (552) namespace_use_group_clauses_2 -> . namespace_use_group_clause_2
    (553) namespace_use_group_clauses_2 -> . namespace_use_group_clauses_2 namespace_use_group_clause_2
    (554) namespace_use_group_clause_2 -> . namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt
    (537) namespace_function_or_constopt -> . namespace_function_or_const
    (538) namespace_function_or_constopt -> .
    (547) namespace_function_or_const -> . FUNCTION
    (548) namespace_function_or_const -> . CONST

    NAME            reduce using rule 538 (namespace_function_or_constopt -> .)
    FUNCTION        shift and go to state 108
    CONST           shift and go to state 109

    namespace_use_group_clauses_2  shift and go to state 683
    namespace_use_group_clause_2   shift and go to state 684
    namespace_function_or_constopt shift and go to state 685
    namespace_function_or_const    shift and go to state 686

state 588

    (37) simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .

    SEMICOLON       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    VARIABLE        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOLLAR          reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    EQUAL           reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLEPLUS      reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLELESS      reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    POW_EQUAL       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MUL_EQUAL       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DIV_EQUAL       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MOD_EQUAL       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PLUS_EQUAL      reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MINUS_EQUAL     reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    CONCAT_EQUAL    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SL_EQUAL        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SR_EQUAL        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AND_EQUAL       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    XOR_EQUAL       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    OR_EQUAL        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ARROW           reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LEFT_CBRAC      reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ASTERISK        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DIVIDE          reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MODULO          reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PLUS            reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LESS            reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    CONCAT          reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SL              reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SR              reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    COALESCE        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AND             reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    XOR             reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    OR              reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INCLUDE         reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    REQUIRE         reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PRINT           reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    YIELD           reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    COLON           reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AS              reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    STRING          reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ARRAY           reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    CALLABLE        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ITERABLE        reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    BOOL            reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    FLOAT           reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INT             reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SELF            reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PARENT          reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    STATIC          reduce using rule 37 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)


state 589

    (298) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . elseif_clauses_1 else_clause_1
    (299) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . elseif_clauses_1
    (300) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . else_clause_1
    (301) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .
    (305) elseif_clauses_1 -> . elseif_clause_1
    (306) elseif_clauses_1 -> . elseif_clauses_1 elseif_clause_1
    (308) else_clause_1 -> . ELSE statement
    (307) elseif_clause_1 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    LEFT_CBRAC      reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            shift and go to state 690
    ELSEIF          shift and go to state 691

  ! ELSE            [ reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]
  ! ELSEIF          [ reduce using rule 301 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]

    elseif_clauses_1               shift and go to state 687
    else_clause_1                  shift and go to state 688
    elseif_clause_1                shift and go to state 689

state 590

    (302) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list else_clause_2 ENDIF SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement_list                 shift and go to state 692
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 591

    (313) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC . case_statements RIGHT_CBRAC
    (314) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC . RIGHT_CBRAC
    (317) case_statements -> . case_statement case_statements
    (318) case_statements -> . case_statement
    (319) case_statements -> . default_statement case_statements
    (320) case_statements -> . default_statement
    (321) case_statement -> . CASE expression case_default_label_terminator statement_list
    (322) case_statement -> . CASE expression case_default_label_terminator
    (323) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (324) default_statement -> . DEFAULT case_default_label_terminator

    RIGHT_CBRAC     shift and go to state 694
    CASE            shift and go to state 697
    DEFAULT         shift and go to state 698

    case_statements                shift and go to state 693
    case_statement                 shift and go to state 695
    default_statement              shift and go to state 696

state 592

    (315) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . ENDSWITCH SEMICOLON
    (317) case_statements -> . case_statement case_statements
    (318) case_statements -> . case_statement
    (319) case_statements -> . default_statement case_statements
    (320) case_statements -> . default_statement
    (321) case_statement -> . CASE expression case_default_label_terminator statement_list
    (322) case_statement -> . CASE expression case_default_label_terminator
    (323) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (324) default_statement -> . DEFAULT case_default_label_terminator

    ENDSWITCH       shift and go to state 700
    CASE            shift and go to state 697
    DEFAULT         shift and go to state 698

    case_statements                shift and go to state 699
    case_statement                 shift and go to state 695
    default_statement              shift and go to state 696

state 593

    (331) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 331 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)


state 594

    (332) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDWHILE SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement_list                 shift and go to state 701
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 595

    (333) do_statement -> DO statement WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 702


state 596

    (336) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_end_of_loop -> . for_expression_group
    (353) for_expression_group -> . expression
    (354) for_expression_group -> . for_expression_group COLON expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 704
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    for_end_of_loop                shift and go to state 703
    for_expression_group           shift and go to state 600
    expression                     shift and go to state 287
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 597

    (334) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    SEMICOLON       shift and go to state 705


state 598

    (340) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 706


state 599

    (341) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS . statement
    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 708
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 707
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 600

    (352) for_end_of_loop -> for_expression_group .
    (354) for_expression_group -> for_expression_group . COLON expression

    RIGHT_PARENTHESIS reduce using rule 352 (for_end_of_loop -> for_expression_group .)
    COLON           shift and go to state 450


state 601

    (338) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_end_of_loop -> . for_expression_group
    (353) for_expression_group -> . expression
    (354) for_expression_group -> . for_expression_group COLON expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 710
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    for_end_of_loop                shift and go to state 709
    for_expression_group           shift and go to state 600
    expression                     shift and go to state 287
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 602

    (354) for_expression_group -> for_expression_group COLON expression .

    COLON           reduce using rule 354 (for_expression_group -> for_expression_group COLON expression .)
    SEMICOLON       reduce using rule 354 (for_expression_group -> for_expression_group COLON expression .)
    RIGHT_PARENTHESIS reduce using rule 354 (for_expression_group -> for_expression_group COLON expression .)


state 603

    (355) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key . foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key . foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (361) foreach_value -> . AMPERSAND_opt expression
    (362) foreach_value -> . AMPERSAND expression
    (363) foreach_value -> . list_intrinsic
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS

    AMPERSAND       shift and go to state 607
    INCLUDE         reduce using rule 79 (AMPERSAND_opt -> .)
    INCLUDE_ONCE    reduce using rule 79 (AMPERSAND_opt -> .)
    REQUIRE         reduce using rule 79 (AMPERSAND_opt -> .)
    REQUIRE_ONCE    reduce using rule 79 (AMPERSAND_opt -> .)
    PRINT           reduce using rule 79 (AMPERSAND_opt -> .)
    YIELD           reduce using rule 79 (AMPERSAND_opt -> .)
    YIELD_FROM      reduce using rule 79 (AMPERSAND_opt -> .)
    LIST            shift and go to state 157

    foreach_value                  shift and go to state 711
    AMPERSAND_opt                  shift and go to state 606
    list_intrinsic                 shift and go to state 608

state 604

    (356) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value . RIGHT_PARENTHESIS statement
    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 712


state 605

    (360) foreach_key -> expression . DOUBLE_ARROW

    DOUBLE_ARROW    shift and go to state 713


state 606

    (361) foreach_value -> AMPERSAND_opt . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 714
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 607

    (362) foreach_value -> AMPERSAND . expression
    (78) AMPERSAND_opt -> AMPERSAND .
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! INCLUDE         [ reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .) ]
  ! INCLUDE_ONCE    [ reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .) ]
  ! REQUIRE         [ reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .) ]
  ! REQUIRE_ONCE    [ reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .) ]
  ! PRINT           [ reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .) ]
  ! YIELD           [ reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .) ]
  ! YIELD_FROM      [ reduce using rule 78 (AMPERSAND_opt -> AMPERSAND .) ]

    expression                     shift and go to state 715
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 608

    (363) foreach_value -> list_intrinsic .

    RIGHT_PARENTHESIS reduce using rule 363 (foreach_value -> list_intrinsic .)


state 609

    (403) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt . RIGHT_PARENTHESIS return_type_opt

    RIGHT_PARENTHESIS shift and go to state 716


state 610

    (487) parameter_declaration_listopt -> parameter_declaration_list .
    (409) simple_parameter_declaration_list -> parameter_declaration_list . parameter_declaration
    (412) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (416) type_declarationopt -> . type_declaration
    (417) type_declarationopt -> .
    (418) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (419) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (420) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 487 (parameter_declaration_listopt -> parameter_declaration_list .)
    AMPERSAND       reduce using rule 417 (type_declarationopt -> .)
    VARIABLE        reduce using rule 417 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 618
    ARRAY           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 420 (TERNARY_OPERATIONopt -> .)

    parameter_declaration          shift and go to state 717
    type_declarationopt            shift and go to state 718
    type_declaration               shift and go to state 616
    TERNARY_OPERATIONopt           shift and go to state 617

state 611

    (406) parameter_declaration_list -> simple_parameter_declaration_list .
    (410) variadic_declaration_list -> simple_parameter_declaration_list . variadic_parameter
    (413) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (416) type_declarationopt -> . type_declaration
    (417) type_declarationopt -> .
    (418) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (419) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (420) TERNARY_OPERATIONopt -> .

  ! reduce/reduce conflict for AMPERSAND resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! shift/reduce conflict for TERNARY_OPERATION resolved as shift
  ! reduce/reduce conflict for ARRAY resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for CALLABLE resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for ITERABLE resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for BOOL resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for FLOAT resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for INT resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for STRING resolved using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    AMPERSAND       reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    VARIABLE        reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    ARRAY           reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    CALLABLE        reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    ITERABLE        reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    BOOL            reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    FLOAT           reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    INT             reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    STRING          reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    RIGHT_PARENTHESIS reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .)
    ELLIPSIS        reduce using rule 417 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 618

  ! TERNARY_OPERATION [ reduce using rule 406 (parameter_declaration_list -> simple_parameter_declaration_list .) ]
  ! AMPERSAND       [ reduce using rule 417 (type_declarationopt -> .) ]
  ! ARRAY           [ reduce using rule 420 (TERNARY_OPERATIONopt -> .) ]
  ! CALLABLE        [ reduce using rule 420 (TERNARY_OPERATIONopt -> .) ]
  ! ITERABLE        [ reduce using rule 420 (TERNARY_OPERATIONopt -> .) ]
  ! BOOL            [ reduce using rule 420 (TERNARY_OPERATIONopt -> .) ]
  ! FLOAT           [ reduce using rule 420 (TERNARY_OPERATIONopt -> .) ]
  ! INT             [ reduce using rule 420 (TERNARY_OPERATIONopt -> .) ]
  ! STRING          [ reduce using rule 420 (TERNARY_OPERATIONopt -> .) ]

    variadic_parameter             shift and go to state 719
    type_declarationopt            shift and go to state 720
    type_declaration               shift and go to state 616
    TERNARY_OPERATIONopt           shift and go to state 617

state 612

    (407) parameter_declaration_list -> variadic_declaration_list .

    TERNARY_OPERATION reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    AMPERSAND       reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    VARIABLE        reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    ARRAY           reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    CALLABLE        reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    ITERABLE        reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    BOOL            reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    FLOAT           reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    INT             reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    STRING          reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)
    RIGHT_PARENTHESIS reduce using rule 407 (parameter_declaration_list -> variadic_declaration_list .)


state 613

    (408) simple_parameter_declaration_list -> parameter_declaration .

    TERNARY_OPERATION reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    AMPERSAND       reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    ELLIPSIS        reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    ARRAY           reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    CALLABLE        reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    ITERABLE        reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    BOOL            reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    FLOAT           reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    INT             reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    STRING          reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    VARIABLE        reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)
    RIGHT_PARENTHESIS reduce using rule 408 (simple_parameter_declaration_list -> parameter_declaration .)


state 614

    (411) variadic_declaration_list -> variadic_parameter .

    TERNARY_OPERATION reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    AMPERSAND       reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    VARIABLE        reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    ARRAY           reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    CALLABLE        reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    ITERABLE        reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    BOOL            reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    FLOAT           reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    INT             reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    STRING          reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)
    RIGHT_PARENTHESIS reduce using rule 411 (variadic_declaration_list -> variadic_parameter .)


state 615

    (412) parameter_declaration -> type_declarationopt . ampersandopt VARIABLE default_argument_specifieropt
    (413) variadic_parameter -> type_declarationopt . ampersandopt ELLIPSIS VARIABLE
    (404) ampersandopt -> . AMPERSAND
    (405) ampersandopt -> .

    AMPERSAND       shift and go to state 136
    VARIABLE        reduce using rule 405 (ampersandopt -> .)
    ELLIPSIS        reduce using rule 405 (ampersandopt -> .)

    ampersandopt                   shift and go to state 721

state 616

    (416) type_declarationopt -> type_declaration .

    AMPERSAND       reduce using rule 416 (type_declarationopt -> type_declaration .)
    VARIABLE        reduce using rule 416 (type_declarationopt -> type_declaration .)
    ELLIPSIS        reduce using rule 416 (type_declarationopt -> type_declaration .)


state 617

    (418) type_declaration -> TERNARY_OPERATIONopt . base_type_declaration
    (421) base_type_declaration -> . ARRAY
    (422) base_type_declaration -> . CALLABLE
    (423) base_type_declaration -> . ITERABLE
    (424) base_type_declaration -> . scalar_type
    (425) base_type_declaration -> . qualified_name
    (426) scalar_type -> . BOOL
    (427) scalar_type -> . FLOAT
    (428) scalar_type -> . INT
    (429) scalar_type -> . STRING
    (545) qualified_name -> . name
    (555) name -> . STRING

    ARRAY           shift and go to state 723
    CALLABLE        shift and go to state 724
    ITERABLE        shift and go to state 725
    BOOL            shift and go to state 728
    FLOAT           shift and go to state 729
    INT             shift and go to state 730
    STRING          shift and go to state 731

    base_type_declaration          shift and go to state 722
    scalar_type                    shift and go to state 726
    qualified_name                 shift and go to state 727
    name                           shift and go to state 175

state 618

    (419) TERNARY_OPERATIONopt -> TERNARY_OPERATION .

    ARRAY           reduce using rule 419 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    CALLABLE        reduce using rule 419 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    ITERABLE        reduce using rule 419 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    BOOL            reduce using rule 419 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    FLOAT           reduce using rule 419 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    INT             reduce using rule 419 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    STRING          reduce using rule 419 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)


state 619

    (213) conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT . coalesce_expression
    (210) coalesce_expression -> . logical_inc_OR_expression_1
    (211) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (208) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (209) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (206) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (207) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (204) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (205) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (202) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (203) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (200) bitwise_AND_expression -> . equality_expression
    (201) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (195) equality_expression -> . relational_expression
    (196) equality_expression -> . equality_expression EQUAL relational_expression
    (197) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (198) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (199) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (189) relational_expression -> . shift_expression
    (190) relational_expression -> . relational_expression LESS_THAN shift_expression
    (191) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (192) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (193) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (194) relational_expression -> . relational_expression SPACESHIP shift_expression
    (186) shift_expression -> . additive_expression
    (187) shift_expression -> . shift_expression SL additive_expression
    (188) shift_expression -> . shift_expression SR additive_expression
    (182) additive_expression -> . multiplicative_expression
    (183) additive_expression -> . additive_expression PLUS multiplicative_expression
    (184) additive_expression -> . additive_expression LESS multiplicative_expression
    (185) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (178) multiplicative_expression -> . logical_not_expression
    (179) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (180) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (181) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (176) logical_not_expression -> . instanceof_expression
    (177) logical_not_expression -> . NEGATION instanceof_expression
    (173) instanceof_expression -> . unary_expression
    (174) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (163) unary_expression -> . exponentiation_expression
    (164) unary_expression -> . unary_op_expression
    (165) unary_expression -> . error_control_expression
    (166) unary_expression -> . cast_expression
    (175) instanceof_subj -> . instanceof_expression
    (161) exponentiation_expression -> . clone_expression
    (162) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) unary_op_expression -> . unary_operator unary_expression
    (171) error_control_expression -> . AT unary_expression
    (172) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (159) clone_expression -> . primary_expression
    (160) clone_expression -> . CLONE primary_expression
    (168) unary_operator -> . PLUS
    (169) unary_operator -> . LESS
    (170) unary_operator -> . BITWISE_NOT
    (20) primary_expression -> . variable
    (21) primary_expression -> . class_constant_access_expression
    (22) primary_expression -> . constant_access_expression
    (23) primary_expression -> . literal
    (24) primary_expression -> . array_creation_expression
    (25) primary_expression -> . intrinsic
    (26) primary_expression -> . anonymous_function_creation_expression
    (27) primary_expression -> . object_creation_expression
    (28) primary_expression -> . postfix_increment_expression
    (29) primary_expression -> . postfix_decrement_expression
    (30) primary_expression -> . prefix_increment_expression
    (31) primary_expression -> . prefix_decrement_expression
    (32) primary_expression -> . byref_assignment_expression
    (33) primary_expression -> . shell_command_expression
    (34) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (152) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (54) constant_access_expression -> . qualified_name
    (55) literal -> . integer_literal
    (56) literal -> . floating_literal
    (57) literal -> . string_literal
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (61) intrinsic -> . empty_intrinsic
    (62) intrinsic -> . eval_intrinsic
    (63) intrinsic -> . exit_intrinsic
    (64) intrinsic -> . isset_intrinsic
    (75) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (89) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (90) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (91) object_creation_expression -> . NEW class_type_designator
    (92) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (93) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (142) postfix_increment_expression -> . variable DOUBLEPLUS
    (143) postfix_decrement_expression -> . variable DOUBLELESS
    (144) prefix_increment_expression -> . DOUBLEPLUS variable
    (145) prefix_decrement_expression -> . DOUBLELESS variable
    (233) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (146) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (545) qualified_name -> . name
    (58) integer_literal -> . LNUMBER
    (59) floating_literal -> . DNUMBER
    (60) string_literal -> . STRING
    (65) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (66) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (67) exit_intrinsic -> . EXIT
    (68) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (69) exit_intrinsic -> . DIE
    (70) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (71) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (76) static_opt -> . STATIC
    (77) static_opt -> .
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (555) name -> . STRING
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal

    NEGATION        shift and go to state 191
    AT              shift and go to state 200
    LEFT_PARENTHESIS shift and go to state 359
    CLONE           shift and go to state 202
    PLUS            shift and go to state 187
    LESS            shift and go to state 188
    BITWISE_NOT     shift and go to state 203
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    NEW             shift and go to state 223
    DOUBLEPLUS      shift and go to state 224
    DOUBLELESS      shift and go to state 225
    BACKTICK        shift and go to state 226
    LNUMBER         shift and go to state 227
    DNUMBER         shift and go to state 228
    STRING          shift and go to state 180
    EMPTY           shift and go to state 229
    EVAL            shift and go to state 230
    EXIT            shift and go to state 231
    DIE             shift and go to state 232
    ISSET           shift and go to state 233
    STATIC          shift and go to state 366
    FUNCTION        reduce using rule 77 (static_opt -> .)
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    SELF            shift and go to state 176
    PARENT          shift and go to state 177

    coalesce_expression            shift and go to state 732
    logical_inc_OR_expression_1    shift and go to state 153
    logical_AND_expression_1       shift and go to state 159
    bitwise_inc_OR_expression      shift and go to state 167
    bitwise_exc_OR_expression      shift and go to state 174
    bitwise_AND_expression         shift and go to state 181
    equality_expression            shift and go to state 182
    relational_expression          shift and go to state 183
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 186
    logical_not_expression         shift and go to state 189
    instanceof_expression          shift and go to state 190
    unary_expression               shift and go to state 192
    instanceof_subj                shift and go to state 193
    exponentiation_expression      shift and go to state 194
    unary_op_expression            shift and go to state 195
    error_control_expression       shift and go to state 196
    cast_expression                shift and go to state 197
    clone_expression               shift and go to state 198
    unary_operator                 shift and go to state 199
    primary_expression             shift and go to state 201
    variable                       shift and go to state 360
    class_constant_access_expression shift and go to state 204
    constant_access_expression     shift and go to state 205
    literal                        shift and go to state 206
    array_creation_expression      shift and go to state 361
    intrinsic                      shift and go to state 207
    anonymous_function_creation_expression shift and go to state 208
    object_creation_expression     shift and go to state 209
    postfix_increment_expression   shift and go to state 210
    postfix_decrement_expression   shift and go to state 211
    prefix_increment_expression    shift and go to state 212
    prefix_decrement_expression    shift and go to state 213
    byref_assignment_expression    shift and go to state 214
    shell_command_expression       shift and go to state 215
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    scope_resolution_qualifier     shift and go to state 362
    qualified_name                 shift and go to state 363
    integer_literal                shift and go to state 216
    floating_literal               shift and go to state 217
    string_literal                 shift and go to state 364
    empty_intrinsic                shift and go to state 218
    eval_intrinsic                 shift and go to state 219
    exit_intrinsic                 shift and go to state 220
    isset_intrinsic                shift and go to state 221
    static_opt                     shift and go to state 222
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    dereferencable_expression      shift and go to state 365
    relative_scope                 shift and go to state 171
    name                           shift and go to state 175
    callable_expression            shift and go to state 170

state 620

    (214) conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .

    TERNARY_OPERATION reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    AND             reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    XOR             reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    OR              reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    SEMICOLON       reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    INCLUDE         reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    REQUIRE         reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    PRINT           reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    YIELD           reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    YIELD_FROM      reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    COLON           reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    AS              reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ARROW           reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    STRING          reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    VARIABLE        reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    DOUBLE_POINT    reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ELLIPSIS        reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    AMPERSAND       reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ARRAY           reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    CALLABLE        reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ITERABLE        reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    BOOL            reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    FLOAT           reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    INT             reduce using rule 214 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)


state 621

    (233) byref_assignment_expression -> variable EQUAL AMPERSAND variable .
    (38) dereferencable_expression -> variable .

  ! reduce/reduce conflict for ARROW resolved using rule 38 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ASTERISK        reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    DIVIDE          reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    MODULO          reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    PLUS            reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    LESS            reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    CONCAT          reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SL              reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SR              reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    LESS_THAN       reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_GREATER_OR_EQUAL reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SPACESHIP       reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    EQUAL           reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_NOT_EQUAL    reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_IDENTICAL    reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_NOT_IDENTICAL reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    AMPERSAND       reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    BITWISE_XOR     reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    BITWISE_OR      reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    COALESCE        reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    TERNARY_OPERATION reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    AND             reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    XOR             reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    OR              reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SEMICOLON       reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INCLUDE         reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INCLUDE_ONCE    reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    REQUIRE         reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    REQUIRE_ONCE    reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    PRINT           reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    YIELD           reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    YIELD_FROM      reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    RIGHT_PARENTHESIS reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    COLON           reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    AS              reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    STRING          reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    RIGHT_CBRAC     reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    VARIABLE        reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    DOUBLE_POINT    reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    DOUBLE_ARROW    reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ELLIPSIS        reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ARRAY           reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    CALLABLE        reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ITERABLE        reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    BOOL            reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    FLOAT           reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INT             reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INSTANCEOF      reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ARROW           reduce using rule 38 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)

  ! ARROW           [ reduce using rule 233 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .) ]


state 622

    (209) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .
    (207) logical_AND_expression_1 -> logical_AND_expression_1 . AMPERSAND AMPERSAND bitwise_inc_OR_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    COALESCE        reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    BITWISE_OR      reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    TERNARY_OPERATION reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    AND             reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    XOR             reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    OR              reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    SEMICOLON       reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    INCLUDE         reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    INCLUDE_ONCE    reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    REQUIRE         reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    REQUIRE_ONCE    reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    PRINT           reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    YIELD           reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    YIELD_FROM      reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    RIGHT_PARENTHESIS reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    COLON           reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    AS              reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ARROW           reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    STRING          reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    RIGHT_CBRAC     reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    VARIABLE        reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    DOUBLE_POINT    reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    DOUBLE_ARROW    reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ELLIPSIS        reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ARRAY           reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    CALLABLE        reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ITERABLE        reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    BOOL            reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    FLOAT           reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    INT             reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    AMPERSAND       shift and go to state 323

  ! AMPERSAND       [ reduce using rule 209 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .) ]


state 623

    (220) list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 220 (list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 220 (list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 220 (list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .)


state 624

    (226) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON . list_or_variable COLON
    (227) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON . list_or_variable
    (230) list_or_variable -> . list_intrinsic
    (231) list_or_variable -> . AMPERSAND variable
    (232) list_or_variable -> . variable
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    AMPERSAND       shift and go to state 470
    LIST            shift and go to state 157
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    list_or_variable               shift and go to state 733
    list_intrinsic                 shift and go to state 469
    variable                       shift and go to state 471
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 625

    (222) list_expression_list -> keyed_list_expression_list COLON .
    (229) keyed_list_expression_list -> keyed_list_expression_list COLON . expression DOUBLE_ARROW list_or_variable
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 222 (list_expression_list -> keyed_list_expression_list COLON .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 734
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 626

    (228) keyed_list_expression_list -> expression DOUBLE_ARROW . list_or_variable
    (230) list_or_variable -> . list_intrinsic
    (231) list_or_variable -> . AMPERSAND variable
    (232) list_or_variable -> . variable
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    AMPERSAND       shift and go to state 470
    LIST            shift and go to state 157
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    list_or_variable               shift and go to state 735
    list_intrinsic                 shift and go to state 469
    variable                       shift and go to state 471
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 627

    (231) list_or_variable -> AMPERSAND variable .
    (38) dereferencable_expression -> variable .

    COLON           reduce using rule 231 (list_or_variable -> AMPERSAND variable .)
    RIGHT_PARENTHESIS reduce using rule 231 (list_or_variable -> AMPERSAND variable .)
    ARROW           reduce using rule 38 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 38 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 38 (dereferencable_expression -> variable .)


state 628

    (207) logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .
    (205) bitwise_inc_OR_expression -> bitwise_inc_OR_expression . BITWISE_OR bitwise_exc_OR_expression

  ! shift/reduce conflict for BITWISE_OR resolved as shift
    AMPERSAND       reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    COALESCE        reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    TERNARY_OPERATION reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    AND             reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    XOR             reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    OR              reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    SEMICOLON       reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    INCLUDE         reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    REQUIRE         reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    PRINT           reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    YIELD           reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    YIELD_FROM      reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    COLON           reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    AS              reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ARROW           reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    STRING          reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    VARIABLE        reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    DOUBLE_POINT    reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ELLIPSIS        reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ARRAY           reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    CALLABLE        reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ITERABLE        reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    BOOL            reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    FLOAT           reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    INT             reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    BITWISE_OR      shift and go to state 327

  ! BITWISE_OR      [ reduce using rule 207 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .) ]


state 629

    (150) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> . argument_expression_list
    (95) argument_expression_list_opt -> .
    (131) argument_expression_list -> . argument_expression
    (132) argument_expression_list -> . argument_expression_list argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 95 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression_list_opt   shift and go to state 736
    argument_expression_list       shift and go to state 737
    argument_expression            shift and go to state 493
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 630

    (139) member_name -> LEFT_CBRAC expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 738


state 631

    (140) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> . argument_expression_list
    (95) argument_expression_list_opt -> .
    (131) argument_expression_list -> . argument_expression
    (132) argument_expression_list -> . argument_expression_list argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 95 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression_list_opt   shift and go to state 739
    argument_expression_list       shift and go to state 740
    argument_expression            shift and go to state 493
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 632

    (125) subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .

    EQUAL           reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLEPLUS      reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLELESS      reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    POW_EQUAL       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MUL_EQUAL       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DIV_EQUAL       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MOD_EQUAL       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PLUS_EQUAL      reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MINUS_EQUAL     reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CONCAT_EQUAL    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SL_EQUAL        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SR_EQUAL        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AND_EQUAL       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    XOR_EQUAL       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    OR_EQUAL        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARROW           reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LEFT_CBRAC      reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ASTERISK        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DIVIDE          reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MODULO          reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PLUS            reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS            reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CONCAT          reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SL              reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SR              reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COALESCE        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AND             reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    XOR             reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    OR              reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PRINT           reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD           reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COLON           reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AS              reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    STRING          reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    VARIABLE        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARRAY           reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CALLABLE        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ITERABLE        reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BOOL            reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    FLOAT           reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INT             reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOLLAR          reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SELF            reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PARENT          reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    STATIC          reduce using rule 125 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)


state 633

    (126) subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SELF            reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 126 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)


state 634

    (120) array_initializer_list -> array_element_initializer COLON array_element_initializer .

    COLON           reduce using rule 120 (array_initializer_list -> array_element_initializer COLON array_element_initializer .)
    RIGHT_CBRAC     reduce using rule 120 (array_initializer_list -> array_element_initializer COLON array_element_initializer .)
    RIGHT_PARENTHESIS reduce using rule 120 (array_initializer_list -> array_element_initializer COLON array_element_initializer .)


state 635

    (122) array_element_initializer -> element_key ARROW AMPERSAND_opt . element_value
    (124) element_value -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    element_value                  shift and go to state 741
    expression                     shift and go to state 489
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 636

    (127) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 127 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 637

    (128) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 128 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 638

    (132) argument_expression_list -> argument_expression_list argument_expression .

    RIGHT_PARENTHESIS reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    ELLIPSIS        reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    INCLUDE         reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    INCLUDE_ONCE    reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    REQUIRE         reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    REQUIRE_ONCE    reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    PRINT           reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    YIELD           reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    YIELD_FROM      reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)
    COLON           reduce using rule 132 (argument_expression_list -> argument_expression_list argument_expression .)


state 639

    (135) variadic_unpacking -> ELLIPSIS expression .

    RIGHT_PARENTHESIS reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    ELLIPSIS        reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    INCLUDE         reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    INCLUDE_ONCE    reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    REQUIRE         reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    REQUIRE_ONCE    reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    PRINT           reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    YIELD           reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    YIELD_FROM      reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)
    COLON           reduce using rule 135 (variadic_unpacking -> ELLIPSIS expression .)


state 640

    (129) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 129 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 641

    (130) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 130 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 642

    (113) array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .

    ARROW           reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 113 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)


state 643

    (34) primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (39) dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (43) callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

  ! reduce/reduce conflict for ARROW resolved using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 34 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 43 (callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)

  ! ARROW           [ reduce using rule 39 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .) ]


state 644

    (75) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS . parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (80) parameter_declaration_list_opt -> . parameter_declaration_list
    (81) parameter_declaration_list_opt -> .
    (406) parameter_declaration_list -> . simple_parameter_declaration_list
    (407) parameter_declaration_list -> . variadic_declaration_list
    (408) simple_parameter_declaration_list -> . parameter_declaration
    (409) simple_parameter_declaration_list -> . parameter_declaration_list parameter_declaration
    (410) variadic_declaration_list -> . simple_parameter_declaration_list variadic_parameter
    (411) variadic_declaration_list -> . variadic_parameter
    (412) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (413) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (416) type_declarationopt -> . type_declaration
    (417) type_declarationopt -> .
    (418) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (419) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (420) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 81 (parameter_declaration_list_opt -> .)
    AMPERSAND       reduce using rule 417 (type_declarationopt -> .)
    VARIABLE        reduce using rule 417 (type_declarationopt -> .)
    ELLIPSIS        reduce using rule 417 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 618
    ARRAY           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 420 (TERNARY_OPERATIONopt -> .)

    parameter_declaration_list_opt shift and go to state 742
    parameter_declaration_list     shift and go to state 743
    simple_parameter_declaration_list shift and go to state 611
    variadic_declaration_list      shift and go to state 612
    parameter_declaration          shift and go to state 613
    variadic_parameter             shift and go to state 614
    type_declarationopt            shift and go to state 615
    type_declaration               shift and go to state 616
    TERNARY_OPERATIONopt           shift and go to state 617

state 645

    (89) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 744


state 646

    (90) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list . COLON RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> argument_expression_list .
    (132) argument_expression_list -> argument_expression_list . argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    COLON           shift and go to state 745
    RIGHT_PARENTHESIS reduce using rule 94 (argument_expression_list_opt -> argument_expression_list .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression            shift and go to state 638
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 647

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 746


state 648

    (94) argument_expression_list_opt -> argument_expression_list .
    (132) argument_expression_list -> argument_expression_list . argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 94 (argument_expression_list_opt -> argument_expression_list .)
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    argument_expression            shift and go to state 638
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 649

    (93) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt . LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS

    LEFT_CBRAC      shift and go to state 747


state 650

    (98) class_interface_clause_opt -> class_interface_clause .
    (446) class_interface_clause -> class_interface_clause . qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    LEFT_CBRAC      reduce using rule 98 (class_interface_clause_opt -> class_interface_clause .)
    STRING          shift and go to state 51

    qualified_name                 shift and go to state 666
    name                           shift and go to state 175

state 651

    (108) new_variable -> qualified_name DOUBLE_COLON simple_variable .

    LEFT_CBRAC      reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SL              reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SR              reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    EQUAL           reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    AND             reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    OR              reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    AS              reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INT             reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 108 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)


state 652

    (105) new_variable -> new_variable LEFT_CBRAC expression_opt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 748


state 653

    (106) new_variable -> new_variable LEFT_CBRAC expression . RIGHT_PARENTHESIS
    (111) expression_opt -> expression .

    RIGHT_PARENTHESIS shift and go to state 749
    RIGHT_CBRAC     reduce using rule 111 (expression_opt -> expression .)


state 654

    (107) new_variable -> new_variable ARROW member_name .

    LEFT_CBRAC      reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    ARROW           reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    DOUBLE_COLON    reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    LEFT_PARENTHESIS reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    DOUBLEASTERISK  reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    ASTERISK        reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    DIVIDE          reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    MODULO          reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    PLUS            reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    LESS            reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    CONCAT          reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    SL              reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    SR              reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    LESS_THAN       reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    IS_GREATER_OR_EQUAL reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    SPACESHIP       reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    EQUAL           reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    IS_NOT_EQUAL    reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    IS_IDENTICAL    reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    IS_NOT_IDENTICAL reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    AMPERSAND       reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    BITWISE_XOR     reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    BITWISE_OR      reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    COALESCE        reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    TERNARY_OPERATION reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    AND             reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    XOR             reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    OR              reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    SEMICOLON       reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    INCLUDE         reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    INCLUDE_ONCE    reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    REQUIRE         reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    REQUIRE_ONCE    reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    PRINT           reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    YIELD           reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    YIELD_FROM      reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    RIGHT_PARENTHESIS reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    COLON           reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    AS              reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    STRING          reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    RIGHT_CBRAC     reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    VARIABLE        reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    DOUBLE_POINT    reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    DOUBLE_ARROW    reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    ELLIPSIS        reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    ARRAY           reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    CALLABLE        reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    ITERABLE        reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    BOOL            reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    FLOAT           reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    INT             reduce using rule 107 (new_variable -> new_variable ARROW member_name .)
    INSTANCEOF      reduce using rule 107 (new_variable -> new_variable ARROW member_name .)


state 655

    (110) new_variable -> new_variable DOUBLE_COLON simple_variable .

    LEFT_CBRAC      reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SL              reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SR              reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    EQUAL           reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    AND             reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    OR              reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    AS              reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INT             reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 110 (new_variable -> new_variable DOUBLE_COLON simple_variable .)


state 656

    (109) new_variable -> relative_scope DOUBLE_COLON simple_variable .

    LEFT_CBRAC      reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SL              reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SR              reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    EQUAL           reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    AND             reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    OR              reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    AS              reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INT             reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 109 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)


state 657

    (65) empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 65 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 658

    (66) eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 66 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 659

    (68) exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 68 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)


state 660

    (70) exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 70 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)


state 661

    (71) isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 71 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)


state 662

    (387) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE . RIGHT_PARENTHESIS compound_statement

    RIGHT_PARENTHESIS shift and go to state 750


state 663

    (392) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDDECLARE SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDDECLARE      shift and go to state 751
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 664

    (400) unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .

    LEFT_CBRAC      reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    TRY             reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    DECLARE         reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    UNSET           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    TRAIT           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    NAMESPACE       reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    USE             reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    GLOBAL          reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    STATIC          reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    GOTO            reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    THROW           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE         reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE         reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ABSTRACT        reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    YIELD           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    YIELD_FROM      reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ELSEIF          reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDDECLARE      reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDWHILE        reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOR          reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CASE            reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDSWITCH       reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOREACH      reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDIF           reduce using rule 400 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)


state 665

    (433) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC . class_member_declarationsopt RIGHT_CBRAC
    (440) class_member_declarationsopt -> . class_member_declarations
    (441) class_member_declarationsopt -> .
    (447) class_member_declarations -> . class_member_declaration
    (448) class_member_declarations -> . class_member_declarations class_member_declaration
    (449) class_member_declaration -> . class_const_declaration
    (450) class_member_declaration -> . property_declaration
    (451) class_member_declaration -> . method_declaration
    (452) class_member_declaration -> . constructor_declaration
    (453) class_member_declaration -> . destructor_declaration
    (454) class_member_declaration -> . trait_use_clause
    (456) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (460) property_declaration -> . property_modifier property_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (485) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (461) property_modifier -> . VAR
    (462) property_modifier -> . visibility_modifier static_modifieropt
    (463) property_modifier -> . static_modifier visibility_modifier_opt
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 441 (class_member_declarationsopt -> .)
    USE             shift and go to state 426
    CONST           reduce using rule 527 (visibility_modifier_opt -> .)
    VAR             shift and go to state 422
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    class_member_declarationsopt   shift and go to state 752
    class_member_declarations      shift and go to state 753
    class_member_declaration       shift and go to state 754
    class_const_declaration        shift and go to state 755
    property_declaration           shift and go to state 756
    method_declaration             shift and go to state 757
    constructor_declaration        shift and go to state 758
    destructor_declaration         shift and go to state 759
    trait_use_clause               shift and go to state 760
    visibility_modifier_opt        shift and go to state 564
    property_modifier              shift and go to state 418
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 420
    visibility_modifier            shift and go to state 761
    static_modifier                shift and go to state 424
    method_modifier                shift and go to state 425
    class_modifier                 shift and go to state 431

state 666

    (446) class_interface_clause -> class_interface_clause qualified_name .

    STRING          reduce using rule 446 (class_interface_clause -> class_interface_clause qualified_name .)
    LEFT_CBRAC      reduce using rule 446 (class_interface_clause -> class_interface_clause qualified_name .)


state 667

    (445) class_interface_clause -> IMPLEMENTS qualified_name .

    STRING          reduce using rule 445 (class_interface_clause -> IMPLEMENTS qualified_name .)
    LEFT_CBRAC      reduce using rule 445 (class_interface_clause -> IMPLEMENTS qualified_name .)


state 668

    (489) interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    TRY             reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    DECLARE         reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ECHO            reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    UNSET           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CONST           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    INTERFACE       reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    TRAIT           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    USE             reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    GLOBAL          reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    STATIC          reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    STRING          reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    IF              reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    SWITCH          reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    WHILE           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    DO              reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FOR             reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FOREACH         reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    GOTO            reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CONTINUE        reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    BREAK           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    RETURN          reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    THROW           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FINAL           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    PRINT           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    YIELD           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CLASS           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    $end            reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ELSE            reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ELSEIF          reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDFOR          reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CASE            reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    DEFAULT         reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDIF           reduce using rule 489 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)


state 669

    (497) interface_member_declarations -> interface_member_declarations interface_member_declaration .

    PUBLIC          reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PROTECTED       reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PRIVATE         reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    STATIC          reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    ABSTRACT        reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FINAL           reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    CONST           reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FUNCTION        reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    RIGHT_CBRAC     reduce using rule 497 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)


state 670

    (456) class_const_declaration -> visibility_modifier_opt CONST . const_elements SEMICOLON
    (457) const_elements -> . const_element
    (458) const_elements -> . const_elements const_element
    (459) const_element -> . name EQUAL constant_expression
    (555) name -> . STRING

    STRING          shift and go to state 51

    const_elements                 shift and go to state 762
    const_element                  shift and go to state 95
    name                           shift and go to state 96

state 671

    (460) property_declaration -> property_modifier property_elements SEMICOLON .

    VAR             reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    USE             reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    PUBLIC          reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    PROTECTED       reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    PRIVATE         reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    STATIC          reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    ABSTRACT        reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    FINAL           reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    FUNCTION        reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    CONST           reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 460 (property_declaration -> property_modifier property_elements SEMICOLON .)


state 672

    (471) property_elements -> property_elements property_element .

    SEMICOLON       reduce using rule 471 (property_elements -> property_elements property_element .)
    VARIABLE        reduce using rule 471 (property_elements -> property_elements property_element .)


state 673

    (472) property_element -> VARIABLE property_initializeropt . SEMICOLON

    SEMICOLON       shift and go to state 763


state 674

    (473) property_initializeropt -> property_initializer .

    SEMICOLON       reduce using rule 473 (property_initializeropt -> property_initializer .)


state 675

    (475) property_initializer -> EQUAL . constant_expression
    (269) constant_expression -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    constant_expression            shift and go to state 764
    expression                     shift and go to state 403
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 676

    (477) method_declaration -> method_modifiers function_definition_header SEMICOLON .

    VAR             reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    USE             reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    PUBLIC          reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    PROTECTED       reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    PRIVATE         reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    STATIC          reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    ABSTRACT        reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    FINAL           reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    FUNCTION        reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    CONST           reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 477 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)


state 677

    (485) constructor_declaration -> method_modifiers FUNCTION name . AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> method_modifiers FUNCTION name . AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 334
    CONSTRUCT       reduce using rule 79 (AMPERSAND_opt -> .)
    DESTRUCT        reduce using rule 79 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 765

state 678

    (512) trait_use_clause -> USE trait_name_list trait_use_specification .

    USE             reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    VAR             reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    PUBLIC          reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    PROTECTED       reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    PRIVATE         reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    STATIC          reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    ABSTRACT        reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    FINAL           reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    FUNCTION        reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    RIGHT_CBRAC     reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    CONST           reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    RIGHT_PARENTHESIS reduce using rule 512 (trait_use_clause -> USE trait_name_list trait_use_specification .)


state 679

    (514) trait_name_list -> trait_name_list qualified_name .

    SEMICOLON       reduce using rule 514 (trait_name_list -> trait_name_list qualified_name .)
    LEFT_CBRAC      reduce using rule 514 (trait_name_list -> trait_name_list qualified_name .)
    STRING          reduce using rule 514 (trait_name_list -> trait_name_list qualified_name .)


state 680

    (515) trait_use_specification -> SEMICOLON .

    USE             reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    VAR             reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    PUBLIC          reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    PROTECTED       reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    PRIVATE         reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    STATIC          reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    ABSTRACT        reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    FINAL           reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    FUNCTION        reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    CONST           reduce using rule 515 (trait_use_specification -> SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 515 (trait_use_specification -> SEMICOLON .)


state 681

    (516) trait_use_specification -> LEFT_CBRAC . trait_select_and_alias_clausesopt RIGHT_CBRAC
    (517) trait_select_and_alias_clausesopt -> . trait_select_and_alias_clauses
    (518) trait_select_and_alias_clausesopt -> .
    (519) trait_select_and_alias_clauses -> . trait_select_and_alias_clause
    (520) trait_select_and_alias_clauses -> . trait_select_and_alias_clauses trait_select_and_alias_clause
    (521) trait_select_and_alias_clause -> . trait_select_insteadof_clause SEMICOLON
    (522) trait_select_and_alias_clause -> . trait_alias_as_clause SEMICOLON
    (523) trait_select_insteadof_clause -> . qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
    (524) trait_alias_as_clause -> . name AS visibility_modifier_opt name
    (525) trait_alias_as_clause -> . name AS visibility_modifier nameopt
    (545) qualified_name -> . name
    (555) name -> . STRING

    RIGHT_CBRAC     reduce using rule 518 (trait_select_and_alias_clausesopt -> .)
    STRING          shift and go to state 51

    trait_select_and_alias_clausesopt shift and go to state 766
    trait_select_and_alias_clauses shift and go to state 767
    trait_select_and_alias_clause  shift and go to state 768
    trait_select_insteadof_clause  shift and go to state 769
    trait_alias_as_clause          shift and go to state 770
    qualified_name                 shift and go to state 771
    name                           shift and go to state 772

state 682

    (535) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC . namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (549) namespace_use_group_clauses_1 -> . namespace_use_group_clause_1
    (550) namespace_use_group_clauses_1 -> . namespace_use_group_clauses_1 namespace_use_group_clause_1
    (551) namespace_use_group_clause_1 -> . namespace_name namespace_aliasing_clause_opt
    (7) namespace_name -> . NAME
    (8) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 103

    namespace_name                 shift and go to state 773
    namespace_use_group_clauses_1  shift and go to state 774
    namespace_use_group_clause_1   shift and go to state 775

state 683

    (536) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 . RIGHT_CBRAC SEMICOLON
    (553) namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 . namespace_use_group_clause_2
    (554) namespace_use_group_clause_2 -> . namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt
    (537) namespace_function_or_constopt -> . namespace_function_or_const
    (538) namespace_function_or_constopt -> .
    (547) namespace_function_or_const -> . FUNCTION
    (548) namespace_function_or_const -> . CONST

    RIGHT_CBRAC     shift and go to state 776
    NAME            reduce using rule 538 (namespace_function_or_constopt -> .)
    FUNCTION        shift and go to state 108
    CONST           shift and go to state 109

    namespace_use_group_clause_2   shift and go to state 777
    namespace_function_or_constopt shift and go to state 685
    namespace_function_or_const    shift and go to state 686

state 684

    (552) namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .

    RIGHT_CBRAC     reduce using rule 552 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)
    FUNCTION        reduce using rule 552 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)
    CONST           reduce using rule 552 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)
    NAME            reduce using rule 552 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)


state 685

    (554) namespace_use_group_clause_2 -> namespace_function_or_constopt . namespace_name namespace_aliasing_clause_opt
    (7) namespace_name -> . NAME
    (8) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 103

    namespace_name                 shift and go to state 778

state 686

    (537) namespace_function_or_constopt -> namespace_function_or_const .

    NAME            reduce using rule 537 (namespace_function_or_constopt -> namespace_function_or_const .)


state 687

    (298) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 . else_clause_1
    (299) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .
    (306) elseif_clauses_1 -> elseif_clauses_1 . elseif_clause_1
    (308) else_clause_1 -> . ELSE statement
    (307) elseif_clause_1 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    LEFT_CBRAC      reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    SEMICOLON       reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    TRY             reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    DECLARE         reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ECHO            reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    UNSET           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CONST           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    INTERFACE       reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    TRAIT           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    NAMESPACE       reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    USE             reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    GLOBAL          reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    STATIC          reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    STRING          reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    IF              reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    SWITCH          reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    WHILE           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    DO              reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FOR             reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FOREACH         reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    GOTO            reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CONTINUE        reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    BREAK           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    RETURN          reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    THROW           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FUNCTION        reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    INCLUDE         reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    INCLUDE_ONCE    reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    REQUIRE         reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    REQUIRE_ONCE    reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ABSTRACT        reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FINAL           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    PRINT           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    YIELD           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    YIELD_FROM      reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CLASS           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    $end            reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    RIGHT_CBRAC     reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDDECLARE      reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDWHILE        reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDFOR          reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CASE            reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    DEFAULT         reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDSWITCH       reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDFOREACH      reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDIF           reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ELSE            shift and go to state 690
    ELSEIF          shift and go to state 691

  ! ELSE            [ reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .) ]
  ! ELSEIF          [ reduce using rule 299 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .) ]

    else_clause_1                  shift and go to state 779
    elseif_clause_1                shift and go to state 780

state 688

    (300) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .

    LEFT_CBRAC      reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    SEMICOLON       reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    TRY             reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    DECLARE         reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ECHO            reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    UNSET           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CONST           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    INTERFACE       reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    TRAIT           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    NAMESPACE       reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    USE             reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    GLOBAL          reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    STATIC          reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    STRING          reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    IF              reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    SWITCH          reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    WHILE           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    DO              reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FOR             reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FOREACH         reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    GOTO            reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CONTINUE        reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    BREAK           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    RETURN          reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    THROW           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FUNCTION        reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    INCLUDE         reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    INCLUDE_ONCE    reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    REQUIRE         reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    REQUIRE_ONCE    reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ABSTRACT        reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FINAL           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    PRINT           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    YIELD           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    YIELD_FROM      reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CLASS           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    $end            reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    RIGHT_CBRAC     reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ELSE            reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ELSEIF          reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDDECLARE      reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDWHILE        reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDFOR          reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CASE            reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    DEFAULT         reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDSWITCH       reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDFOREACH      reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDIF           reduce using rule 300 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)


state 689

    (305) elseif_clauses_1 -> elseif_clause_1 .

    LEFT_CBRAC      reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    SEMICOLON       reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    TRY             reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    DECLARE         reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ECHO            reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    UNSET           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    CONST           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    INTERFACE       reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    TRAIT           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    NAMESPACE       reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    USE             reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    GLOBAL          reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    STATIC          reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    STRING          reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    IF              reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    SWITCH          reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    WHILE           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    DO              reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    FOR             reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    FOREACH         reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    GOTO            reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    CONTINUE        reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    BREAK           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    RETURN          reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    THROW           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    FUNCTION        reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    INCLUDE         reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    INCLUDE_ONCE    reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    REQUIRE         reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    REQUIRE_ONCE    reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ABSTRACT        reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    FINAL           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    PRINT           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    YIELD           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    YIELD_FROM      reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    CLASS           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    $end            reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    RIGHT_CBRAC     reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ELSE            reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ELSEIF          reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDDECLARE      reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDWHILE        reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDFOR          reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    CASE            reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    DEFAULT         reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDSWITCH       reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDFOREACH      reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDIF           reduce using rule 305 (elseif_clauses_1 -> elseif_clause_1 .)


state 690

    (308) else_clause_1 -> ELSE . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 781
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 691

    (307) elseif_clause_1 -> ELSEIF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

    LEFT_PARENTHESIS shift and go to state 782


state 692

    (302) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . else_clause_2 ENDIF SEMICOLON
    (292) statement_list -> statement_list . statement
    (309) elseif_clauses_2 -> . elseif_clause_2
    (310) elseif_clauses_2 -> . elseif_clauses_2 elseif_clause_2
    (312) else_clause_2 -> . ELSE DOUBLE_POINT statement_list
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (311) elseif_clause_2 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ELSE            shift and go to state 786
    ELSEIF          shift and go to state 787
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    elseif_clauses_2               shift and go to state 783
    else_clause_2                  shift and go to state 784
    statement                      shift and go to state 84
    elseif_clause_2                shift and go to state 785
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 693

    (313) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 788


state 694

    (314) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    TRY             reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    DECLARE         reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ECHO            reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    UNSET           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CONST           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    INTERFACE       reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    TRAIT           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    USE             reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    GLOBAL          reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    STATIC          reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    STRING          reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    IF              reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    SWITCH          reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    WHILE           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    DO              reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FOR             reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FOREACH         reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    GOTO            reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CONTINUE        reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    BREAK           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    RETURN          reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    THROW           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FUNCTION        reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE         reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE         reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FINAL           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    PRINT           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    YIELD           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CLASS           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    $end            reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ELSE            reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ELSEIF          reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOR          reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CASE            reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    DEFAULT         reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDIF           reduce using rule 314 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)


state 695

    (317) case_statements -> case_statement . case_statements
    (318) case_statements -> case_statement .
    (317) case_statements -> . case_statement case_statements
    (318) case_statements -> . case_statement
    (319) case_statements -> . default_statement case_statements
    (320) case_statements -> . default_statement
    (321) case_statement -> . CASE expression case_default_label_terminator statement_list
    (322) case_statement -> . CASE expression case_default_label_terminator
    (323) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (324) default_statement -> . DEFAULT case_default_label_terminator

    RIGHT_CBRAC     reduce using rule 318 (case_statements -> case_statement .)
    ENDSWITCH       reduce using rule 318 (case_statements -> case_statement .)
    CASE            shift and go to state 697
    DEFAULT         shift and go to state 698

    case_statement                 shift and go to state 695
    case_statements                shift and go to state 789
    default_statement              shift and go to state 696

state 696

    (319) case_statements -> default_statement . case_statements
    (320) case_statements -> default_statement .
    (317) case_statements -> . case_statement case_statements
    (318) case_statements -> . case_statement
    (319) case_statements -> . default_statement case_statements
    (320) case_statements -> . default_statement
    (321) case_statement -> . CASE expression case_default_label_terminator statement_list
    (322) case_statement -> . CASE expression case_default_label_terminator
    (323) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (324) default_statement -> . DEFAULT case_default_label_terminator

    RIGHT_CBRAC     reduce using rule 320 (case_statements -> default_statement .)
    ENDSWITCH       reduce using rule 320 (case_statements -> default_statement .)
    CASE            shift and go to state 697
    DEFAULT         shift and go to state 698

    default_statement              shift and go to state 696
    case_statements                shift and go to state 790
    case_statement                 shift and go to state 695

state 697

    (321) case_statement -> CASE . expression case_default_label_terminator statement_list
    (322) case_statement -> CASE . expression case_default_label_terminator
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 791
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 698

    (323) default_statement -> DEFAULT . case_default_label_terminator statement_list
    (324) default_statement -> DEFAULT . case_default_label_terminator
    (325) case_default_label_terminator -> . DOUBLE_POINT
    (326) case_default_label_terminator -> . SEMICOLON

    DOUBLE_POINT    shift and go to state 793
    SEMICOLON       shift and go to state 794

    case_default_label_terminator  shift and go to state 792

state 699

    (315) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements . ENDSWITCH SEMICOLON

    ENDSWITCH       shift and go to state 795


state 700

    (316) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 796


state 701

    (332) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDWHILE SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDWHILE        shift and go to state 797
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 702

    (333) do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 798


state 703

    (336) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 799


state 704

    (337) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS . statement
    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 801
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 800
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 705

    (334) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS statement
    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_end_of_loop -> . for_expression_group
    (353) for_expression_group -> . expression
    (354) for_expression_group -> . for_expression_group COLON expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 803
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    for_end_of_loop                shift and go to state 802
    for_expression_group           shift and go to state 600
    expression                     shift and go to state 287
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 706

    (340) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 805
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 804
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 707

    (341) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 341 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)


state 708

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 806
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 709

    (338) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 807


state 710

    (339) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . statement
    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 809
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 808
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 711

    (355) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value . RIGHT_PARENTHESIS statement
    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 810


state 712

    (356) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS . statement
    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 812
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 811
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 713

    (360) foreach_key -> expression DOUBLE_ARROW .

    AMPERSAND       reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    LIST            reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    INCLUDE         reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    INCLUDE_ONCE    reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    REQUIRE         reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    REQUIRE_ONCE    reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    PRINT           reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    YIELD           reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)
    YIELD_FROM      reduce using rule 360 (foreach_key -> expression DOUBLE_ARROW .)


state 714

    (361) foreach_value -> AMPERSAND_opt expression .

    RIGHT_PARENTHESIS reduce using rule 361 (foreach_value -> AMPERSAND_opt expression .)


state 715

    (362) foreach_value -> AMPERSAND expression .

    RIGHT_PARENTHESIS reduce using rule 362 (foreach_value -> AMPERSAND expression .)


state 716

    (403) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS . return_type_opt
    (84) return_type_opt -> . return_type
    (85) return_type_opt -> .
    (414) return_type -> . DOUBLE_POINT type_declaration
    (415) return_type -> . DOUBLE_POINT VOID

    LEFT_CBRAC      reduce using rule 85 (return_type_opt -> .)
    SEMICOLON       reduce using rule 85 (return_type_opt -> .)
    DOUBLE_POINT    shift and go to state 815

    return_type_opt                shift and go to state 813
    return_type                    shift and go to state 814

state 717

    (409) simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .

    TERNARY_OPERATION reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    AMPERSAND       reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    ELLIPSIS        reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    ARRAY           reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    CALLABLE        reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    ITERABLE        reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    BOOL            reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    FLOAT           reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    INT             reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    STRING          reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    VARIABLE        reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    RIGHT_PARENTHESIS reduce using rule 409 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)


state 718

    (412) parameter_declaration -> type_declarationopt . ampersandopt VARIABLE default_argument_specifieropt
    (404) ampersandopt -> . AMPERSAND
    (405) ampersandopt -> .

    AMPERSAND       shift and go to state 136
    VARIABLE        reduce using rule 405 (ampersandopt -> .)

    ampersandopt                   shift and go to state 816

state 719

    (410) variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .

    TERNARY_OPERATION reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    AMPERSAND       reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    VARIABLE        reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    ARRAY           reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    CALLABLE        reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    ITERABLE        reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    BOOL            reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    FLOAT           reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    INT             reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    STRING          reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    RIGHT_PARENTHESIS reduce using rule 410 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)


state 720

    (413) variadic_parameter -> type_declarationopt . ampersandopt ELLIPSIS VARIABLE
    (404) ampersandopt -> . AMPERSAND
    (405) ampersandopt -> .

    AMPERSAND       shift and go to state 136
    ELLIPSIS        reduce using rule 405 (ampersandopt -> .)

    ampersandopt                   shift and go to state 817

state 721

    (412) parameter_declaration -> type_declarationopt ampersandopt . VARIABLE default_argument_specifieropt
    (413) variadic_parameter -> type_declarationopt ampersandopt . ELLIPSIS VARIABLE

    VARIABLE        shift and go to state 818
    ELLIPSIS        shift and go to state 819


state 722

    (418) type_declaration -> TERNARY_OPERATIONopt base_type_declaration .

    AMPERSAND       reduce using rule 418 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    VARIABLE        reduce using rule 418 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    ELLIPSIS        reduce using rule 418 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    LEFT_CBRAC      reduce using rule 418 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    SEMICOLON       reduce using rule 418 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)


state 723

    (421) base_type_declaration -> ARRAY .

    AMPERSAND       reduce using rule 421 (base_type_declaration -> ARRAY .)
    VARIABLE        reduce using rule 421 (base_type_declaration -> ARRAY .)
    ELLIPSIS        reduce using rule 421 (base_type_declaration -> ARRAY .)
    LEFT_CBRAC      reduce using rule 421 (base_type_declaration -> ARRAY .)
    SEMICOLON       reduce using rule 421 (base_type_declaration -> ARRAY .)


state 724

    (422) base_type_declaration -> CALLABLE .

    AMPERSAND       reduce using rule 422 (base_type_declaration -> CALLABLE .)
    VARIABLE        reduce using rule 422 (base_type_declaration -> CALLABLE .)
    ELLIPSIS        reduce using rule 422 (base_type_declaration -> CALLABLE .)
    LEFT_CBRAC      reduce using rule 422 (base_type_declaration -> CALLABLE .)
    SEMICOLON       reduce using rule 422 (base_type_declaration -> CALLABLE .)


state 725

    (423) base_type_declaration -> ITERABLE .

    AMPERSAND       reduce using rule 423 (base_type_declaration -> ITERABLE .)
    VARIABLE        reduce using rule 423 (base_type_declaration -> ITERABLE .)
    ELLIPSIS        reduce using rule 423 (base_type_declaration -> ITERABLE .)
    LEFT_CBRAC      reduce using rule 423 (base_type_declaration -> ITERABLE .)
    SEMICOLON       reduce using rule 423 (base_type_declaration -> ITERABLE .)


state 726

    (424) base_type_declaration -> scalar_type .

    AMPERSAND       reduce using rule 424 (base_type_declaration -> scalar_type .)
    VARIABLE        reduce using rule 424 (base_type_declaration -> scalar_type .)
    ELLIPSIS        reduce using rule 424 (base_type_declaration -> scalar_type .)
    LEFT_CBRAC      reduce using rule 424 (base_type_declaration -> scalar_type .)
    SEMICOLON       reduce using rule 424 (base_type_declaration -> scalar_type .)


state 727

    (425) base_type_declaration -> qualified_name .

    AMPERSAND       reduce using rule 425 (base_type_declaration -> qualified_name .)
    VARIABLE        reduce using rule 425 (base_type_declaration -> qualified_name .)
    ELLIPSIS        reduce using rule 425 (base_type_declaration -> qualified_name .)
    LEFT_CBRAC      reduce using rule 425 (base_type_declaration -> qualified_name .)
    SEMICOLON       reduce using rule 425 (base_type_declaration -> qualified_name .)


state 728

    (426) scalar_type -> BOOL .

    AMPERSAND       reduce using rule 426 (scalar_type -> BOOL .)
    VARIABLE        reduce using rule 426 (scalar_type -> BOOL .)
    ELLIPSIS        reduce using rule 426 (scalar_type -> BOOL .)
    LEFT_CBRAC      reduce using rule 426 (scalar_type -> BOOL .)
    SEMICOLON       reduce using rule 426 (scalar_type -> BOOL .)


state 729

    (427) scalar_type -> FLOAT .

    AMPERSAND       reduce using rule 427 (scalar_type -> FLOAT .)
    VARIABLE        reduce using rule 427 (scalar_type -> FLOAT .)
    ELLIPSIS        reduce using rule 427 (scalar_type -> FLOAT .)
    LEFT_CBRAC      reduce using rule 427 (scalar_type -> FLOAT .)
    SEMICOLON       reduce using rule 427 (scalar_type -> FLOAT .)


state 730

    (428) scalar_type -> INT .

    AMPERSAND       reduce using rule 428 (scalar_type -> INT .)
    VARIABLE        reduce using rule 428 (scalar_type -> INT .)
    ELLIPSIS        reduce using rule 428 (scalar_type -> INT .)
    LEFT_CBRAC      reduce using rule 428 (scalar_type -> INT .)
    SEMICOLON       reduce using rule 428 (scalar_type -> INT .)


state 731

    (429) scalar_type -> STRING .
    (555) name -> STRING .

  ! reduce/reduce conflict for AMPERSAND resolved using rule 429 (scalar_type -> STRING .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 429 (scalar_type -> STRING .)
  ! reduce/reduce conflict for ELLIPSIS resolved using rule 429 (scalar_type -> STRING .)
  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 429 (scalar_type -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 429 (scalar_type -> STRING .)
    AMPERSAND       reduce using rule 429 (scalar_type -> STRING .)
    VARIABLE        reduce using rule 429 (scalar_type -> STRING .)
    ELLIPSIS        reduce using rule 429 (scalar_type -> STRING .)
    LEFT_CBRAC      reduce using rule 429 (scalar_type -> STRING .)
    SEMICOLON       reduce using rule 429 (scalar_type -> STRING .)

  ! AMPERSAND       [ reduce using rule 555 (name -> STRING .) ]
  ! VARIABLE        [ reduce using rule 555 (name -> STRING .) ]
  ! ELLIPSIS        [ reduce using rule 555 (name -> STRING .) ]
  ! LEFT_CBRAC      [ reduce using rule 555 (name -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 555 (name -> STRING .) ]


state 732

    (213) conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .

    TERNARY_OPERATION reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    AND             reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    XOR             reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    OR              reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    SEMICOLON       reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    INCLUDE         reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    REQUIRE         reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    PRINT           reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    YIELD           reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    YIELD_FROM      reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    COLON           reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    AS              reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ARROW           reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    STRING          reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    VARIABLE        reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    DOUBLE_POINT    reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ELLIPSIS        reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    AMPERSAND       reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ARRAY           reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    CALLABLE        reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ITERABLE        reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    BOOL            reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    FLOAT           reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    INT             reduce using rule 213 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)


state 733

    (226) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable . COLON
    (227) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 820
    RIGHT_PARENTHESIS reduce using rule 227 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable .)

  ! COLON           [ reduce using rule 227 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable .) ]


state 734

    (229) keyed_list_expression_list -> keyed_list_expression_list COLON expression . DOUBLE_ARROW list_or_variable

    DOUBLE_ARROW    shift and go to state 821


state 735

    (228) keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable .

    COLON           reduce using rule 228 (keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable .)
    RIGHT_PARENTHESIS reduce using rule 228 (keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable .)


state 736

    (150) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 822


state 737

    (151) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> argument_expression_list .
    (132) argument_expression_list -> argument_expression_list . argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 823
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! RIGHT_PARENTHESIS [ reduce using rule 94 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 638
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 738

    (139) member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .

    LEFT_PARENTHESIS reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SELF            reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 139 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)


state 739

    (140) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 824


state 740

    (141) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (94) argument_expression_list_opt -> argument_expression_list .
    (132) argument_expression_list -> argument_expression_list . argument_expression
    (133) argument_expression -> . variadic_unpacking
    (134) argument_expression -> . expression
    (135) variadic_unpacking -> . ELLIPSIS expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 825
    ELLIPSIS        shift and go to state 496
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

  ! RIGHT_PARENTHESIS [ reduce using rule 94 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 638
    variadic_unpacking             shift and go to state 494
    expression                     shift and go to state 495
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 741

    (122) array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .

    COLON           reduce using rule 122 (array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .)
    RIGHT_CBRAC     reduce using rule 122 (array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .)
    RIGHT_PARENTHESIS reduce using rule 122 (array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .)


state 742

    (75) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt . RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement

    RIGHT_PARENTHESIS shift and go to state 826


state 743

    (80) parameter_declaration_list_opt -> parameter_declaration_list .
    (409) simple_parameter_declaration_list -> parameter_declaration_list . parameter_declaration
    (412) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (416) type_declarationopt -> . type_declaration
    (417) type_declarationopt -> .
    (418) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (419) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (420) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 80 (parameter_declaration_list_opt -> parameter_declaration_list .)
    AMPERSAND       reduce using rule 417 (type_declarationopt -> .)
    VARIABLE        reduce using rule 417 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 618
    ARRAY           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 420 (TERNARY_OPERATIONopt -> .)

    parameter_declaration          shift and go to state 717
    type_declarationopt            shift and go to state 718
    type_declaration               shift and go to state 616
    TERNARY_OPERATIONopt           shift and go to state 617

state 744

    (89) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 89 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 745

    (90) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 827


state 746

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS . class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (96) class_base_clause_opt -> . class_base_clause
    (97) class_base_clause_opt -> .
    (444) class_base_clause -> . EXTENDS qualified_name

    IMPLEMENTS      reduce using rule 97 (class_base_clause_opt -> .)
    LEFT_CBRAC      reduce using rule 97 (class_base_clause_opt -> .)
    EXTENDS         shift and go to state 406

    class_base_clause_opt          shift and go to state 828
    class_base_clause              shift and go to state 528

state 747

    (93) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC . class_member_declarations_opt RIGHT_PARENTHESIS
    (100) class_member_declarations_opt -> . class_member_declarations
    (101) class_member_declarations_opt -> .
    (447) class_member_declarations -> . class_member_declaration
    (448) class_member_declarations -> . class_member_declarations class_member_declaration
    (449) class_member_declaration -> . class_const_declaration
    (450) class_member_declaration -> . property_declaration
    (451) class_member_declaration -> . method_declaration
    (452) class_member_declaration -> . constructor_declaration
    (453) class_member_declaration -> . destructor_declaration
    (454) class_member_declaration -> . trait_use_clause
    (456) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (460) property_declaration -> . property_modifier property_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (485) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (461) property_modifier -> . VAR
    (462) property_modifier -> . visibility_modifier static_modifieropt
    (463) property_modifier -> . static_modifier visibility_modifier_opt
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_PARENTHESIS reduce using rule 101 (class_member_declarations_opt -> .)
    USE             shift and go to state 426
    CONST           reduce using rule 527 (visibility_modifier_opt -> .)
    VAR             shift and go to state 422
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    class_member_declarations_opt  shift and go to state 829
    class_member_declarations      shift and go to state 830
    class_member_declaration       shift and go to state 754
    class_const_declaration        shift and go to state 755
    property_declaration           shift and go to state 756
    method_declaration             shift and go to state 757
    constructor_declaration        shift and go to state 758
    destructor_declaration         shift and go to state 759
    trait_use_clause               shift and go to state 760
    visibility_modifier_opt        shift and go to state 564
    property_modifier              shift and go to state 418
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 420
    visibility_modifier            shift and go to state 761
    static_modifier                shift and go to state 424
    method_modifier                shift and go to state 425
    class_modifier                 shift and go to state 431

state 748

    (105) new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARROW           reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ASTERISK        reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DIVIDE          reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MODULO          reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PLUS            reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS            reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CONCAT          reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SL              reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SR              reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    EQUAL           reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COALESCE        reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AND             reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    XOR             reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    OR              reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PRINT           reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD           reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COLON           reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AS              reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    STRING          reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    VARIABLE        reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARRAY           reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CALLABLE        reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ITERABLE        reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BOOL            reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    FLOAT           reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INT             reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 105 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)


state 749

    (106) new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .

    LEFT_CBRAC      reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 106 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)


state 750

    (387) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS . compound_statement
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 831

state 751

    (392) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE . SEMICOLON

    SEMICOLON       shift and go to state 832


state 752

    (433) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 833


state 753

    (440) class_member_declarationsopt -> class_member_declarations .
    (448) class_member_declarations -> class_member_declarations . class_member_declaration
    (449) class_member_declaration -> . class_const_declaration
    (450) class_member_declaration -> . property_declaration
    (451) class_member_declaration -> . method_declaration
    (452) class_member_declaration -> . constructor_declaration
    (453) class_member_declaration -> . destructor_declaration
    (454) class_member_declaration -> . trait_use_clause
    (456) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (460) property_declaration -> . property_modifier property_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (485) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (461) property_modifier -> . VAR
    (462) property_modifier -> . visibility_modifier static_modifieropt
    (463) property_modifier -> . static_modifier visibility_modifier_opt
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 440 (class_member_declarationsopt -> class_member_declarations .)
    USE             shift and go to state 426
    CONST           reduce using rule 527 (visibility_modifier_opt -> .)
    VAR             shift and go to state 422
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    class_member_declaration       shift and go to state 834
    class_const_declaration        shift and go to state 755
    property_declaration           shift and go to state 756
    method_declaration             shift and go to state 757
    constructor_declaration        shift and go to state 758
    destructor_declaration         shift and go to state 759
    trait_use_clause               shift and go to state 760
    visibility_modifier_opt        shift and go to state 564
    property_modifier              shift and go to state 418
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 420
    visibility_modifier            shift and go to state 761
    static_modifier                shift and go to state 424
    method_modifier                shift and go to state 425
    class_modifier                 shift and go to state 431

state 754

    (447) class_member_declarations -> class_member_declaration .

    USE             reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    VAR             reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    PUBLIC          reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    PROTECTED       reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    PRIVATE         reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    STATIC          reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    ABSTRACT        reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    FINAL           reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    CONST           reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    FUNCTION        reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    RIGHT_CBRAC     reduce using rule 447 (class_member_declarations -> class_member_declaration .)
    RIGHT_PARENTHESIS reduce using rule 447 (class_member_declarations -> class_member_declaration .)


state 755

    (449) class_member_declaration -> class_const_declaration .

    USE             reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    VAR             reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    PUBLIC          reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    PROTECTED       reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    PRIVATE         reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    STATIC          reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    ABSTRACT        reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    FINAL           reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    CONST           reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    FUNCTION        reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    RIGHT_CBRAC     reduce using rule 449 (class_member_declaration -> class_const_declaration .)
    RIGHT_PARENTHESIS reduce using rule 449 (class_member_declaration -> class_const_declaration .)


state 756

    (450) class_member_declaration -> property_declaration .

    USE             reduce using rule 450 (class_member_declaration -> property_declaration .)
    VAR             reduce using rule 450 (class_member_declaration -> property_declaration .)
    PUBLIC          reduce using rule 450 (class_member_declaration -> property_declaration .)
    PROTECTED       reduce using rule 450 (class_member_declaration -> property_declaration .)
    PRIVATE         reduce using rule 450 (class_member_declaration -> property_declaration .)
    STATIC          reduce using rule 450 (class_member_declaration -> property_declaration .)
    ABSTRACT        reduce using rule 450 (class_member_declaration -> property_declaration .)
    FINAL           reduce using rule 450 (class_member_declaration -> property_declaration .)
    CONST           reduce using rule 450 (class_member_declaration -> property_declaration .)
    FUNCTION        reduce using rule 450 (class_member_declaration -> property_declaration .)
    RIGHT_CBRAC     reduce using rule 450 (class_member_declaration -> property_declaration .)
    RIGHT_PARENTHESIS reduce using rule 450 (class_member_declaration -> property_declaration .)


state 757

    (451) class_member_declaration -> method_declaration .

    USE             reduce using rule 451 (class_member_declaration -> method_declaration .)
    VAR             reduce using rule 451 (class_member_declaration -> method_declaration .)
    PUBLIC          reduce using rule 451 (class_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 451 (class_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 451 (class_member_declaration -> method_declaration .)
    STATIC          reduce using rule 451 (class_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 451 (class_member_declaration -> method_declaration .)
    FINAL           reduce using rule 451 (class_member_declaration -> method_declaration .)
    CONST           reduce using rule 451 (class_member_declaration -> method_declaration .)
    FUNCTION        reduce using rule 451 (class_member_declaration -> method_declaration .)
    RIGHT_CBRAC     reduce using rule 451 (class_member_declaration -> method_declaration .)
    RIGHT_PARENTHESIS reduce using rule 451 (class_member_declaration -> method_declaration .)


state 758

    (452) class_member_declaration -> constructor_declaration .

    USE             reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    VAR             reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    PUBLIC          reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    PROTECTED       reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    PRIVATE         reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    STATIC          reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    ABSTRACT        reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    FINAL           reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    CONST           reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    RIGHT_CBRAC     reduce using rule 452 (class_member_declaration -> constructor_declaration .)
    RIGHT_PARENTHESIS reduce using rule 452 (class_member_declaration -> constructor_declaration .)


state 759

    (453) class_member_declaration -> destructor_declaration .

    USE             reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    VAR             reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    PUBLIC          reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    PROTECTED       reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    PRIVATE         reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    STATIC          reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    ABSTRACT        reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    FINAL           reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    CONST           reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    RIGHT_CBRAC     reduce using rule 453 (class_member_declaration -> destructor_declaration .)
    RIGHT_PARENTHESIS reduce using rule 453 (class_member_declaration -> destructor_declaration .)


state 760

    (454) class_member_declaration -> trait_use_clause .

    USE             reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    VAR             reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    PUBLIC          reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    PROTECTED       reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    PRIVATE         reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    STATIC          reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    ABSTRACT        reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    FINAL           reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    CONST           reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    FUNCTION        reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    RIGHT_CBRAC     reduce using rule 454 (class_member_declaration -> trait_use_clause .)
    RIGHT_PARENTHESIS reduce using rule 454 (class_member_declaration -> trait_use_clause .)


state 761

    (526) visibility_modifier_opt -> visibility_modifier .
    (462) property_modifier -> visibility_modifier . static_modifieropt
    (482) method_modifier -> visibility_modifier .
    (464) static_modifieropt -> . static_modifier
    (465) static_modifieropt -> .
    (469) static_modifier -> . STATIC

  ! shift/reduce conflict for STATIC resolved as shift
    CONST           reduce using rule 526 (visibility_modifier_opt -> visibility_modifier .)
    FUNCTION        reduce using rule 482 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 482 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 482 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 482 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 482 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 482 (method_modifier -> visibility_modifier .)
    VARIABLE        reduce using rule 465 (static_modifieropt -> .)
    STATIC          shift and go to state 430

  ! STATIC          [ reduce using rule 482 (method_modifier -> visibility_modifier .) ]

    static_modifieropt             shift and go to state 579
    static_modifier                shift and go to state 580

state 762

    (456) class_const_declaration -> visibility_modifier_opt CONST const_elements . SEMICOLON
    (458) const_elements -> const_elements . const_element
    (459) const_element -> . name EQUAL constant_expression
    (555) name -> . STRING

    SEMICOLON       shift and go to state 835
    STRING          shift and go to state 51

    const_element                  shift and go to state 255
    name                           shift and go to state 96

state 763

    (472) property_element -> VARIABLE property_initializeropt SEMICOLON .

    SEMICOLON       reduce using rule 472 (property_element -> VARIABLE property_initializeropt SEMICOLON .)
    VARIABLE        reduce using rule 472 (property_element -> VARIABLE property_initializeropt SEMICOLON .)


state 764

    (475) property_initializer -> EQUAL constant_expression .

    SEMICOLON       reduce using rule 475 (property_initializer -> EQUAL constant_expression .)


state 765

    (485) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt . CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt . DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement

    CONSTRUCT       shift and go to state 836
    DESTRUCT        shift and go to state 837


state 766

    (516) trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 838


state 767

    (517) trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses .
    (520) trait_select_and_alias_clauses -> trait_select_and_alias_clauses . trait_select_and_alias_clause
    (521) trait_select_and_alias_clause -> . trait_select_insteadof_clause SEMICOLON
    (522) trait_select_and_alias_clause -> . trait_alias_as_clause SEMICOLON
    (523) trait_select_insteadof_clause -> . qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
    (524) trait_alias_as_clause -> . name AS visibility_modifier_opt name
    (525) trait_alias_as_clause -> . name AS visibility_modifier nameopt
    (545) qualified_name -> . name
    (555) name -> . STRING

    RIGHT_CBRAC     reduce using rule 517 (trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses .)
    STRING          shift and go to state 51

    trait_select_and_alias_clause  shift and go to state 839
    trait_select_insteadof_clause  shift and go to state 769
    trait_alias_as_clause          shift and go to state 770
    qualified_name                 shift and go to state 771
    name                           shift and go to state 772

state 768

    (519) trait_select_and_alias_clauses -> trait_select_and_alias_clause .

    STRING          reduce using rule 519 (trait_select_and_alias_clauses -> trait_select_and_alias_clause .)
    RIGHT_CBRAC     reduce using rule 519 (trait_select_and_alias_clauses -> trait_select_and_alias_clause .)


state 769

    (521) trait_select_and_alias_clause -> trait_select_insteadof_clause . SEMICOLON

    SEMICOLON       shift and go to state 840


state 770

    (522) trait_select_and_alias_clause -> trait_alias_as_clause . SEMICOLON

    SEMICOLON       shift and go to state 841


state 771

    (523) trait_select_insteadof_clause -> qualified_name . DOUBLE_COLON name INSTEADOF trait_name_list

    DOUBLE_COLON    shift and go to state 842


state 772

    (524) trait_alias_as_clause -> name . AS visibility_modifier_opt name
    (525) trait_alias_as_clause -> name . AS visibility_modifier nameopt
    (545) qualified_name -> name .

    AS              shift and go to state 843
    DOUBLE_COLON    reduce using rule 545 (qualified_name -> name .)


state 773

    (551) namespace_use_group_clause_1 -> namespace_name . namespace_aliasing_clause_opt
    (8) namespace_name -> namespace_name . NS_SEPARATOR NAME
    (544) namespace_aliasing_clause_opt -> . namespace_aliasing_clause
    (546) namespace_aliasing_clause -> . AS name

    NS_SEPARATOR    shift and go to state 263
    AS              shift and go to state 437

    namespace_aliasing_clause_opt  shift and go to state 844
    namespace_aliasing_clause      shift and go to state 436

state 774

    (535) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 . RIGHT_CBRAC SEMICOLON
    (550) namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 . namespace_use_group_clause_1
    (551) namespace_use_group_clause_1 -> . namespace_name namespace_aliasing_clause_opt
    (7) namespace_name -> . NAME
    (8) namespace_name -> . namespace_name NS_SEPARATOR NAME

    RIGHT_CBRAC     shift and go to state 845
    NAME            shift and go to state 103

    namespace_name                 shift and go to state 773
    namespace_use_group_clause_1   shift and go to state 846

state 775

    (549) namespace_use_group_clauses_1 -> namespace_use_group_clause_1 .

    RIGHT_CBRAC     reduce using rule 549 (namespace_use_group_clauses_1 -> namespace_use_group_clause_1 .)
    NAME            reduce using rule 549 (namespace_use_group_clauses_1 -> namespace_use_group_clause_1 .)


state 776

    (536) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC . SEMICOLON

    SEMICOLON       shift and go to state 847


state 777

    (553) namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .

    RIGHT_CBRAC     reduce using rule 553 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)
    FUNCTION        reduce using rule 553 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)
    CONST           reduce using rule 553 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)
    NAME            reduce using rule 553 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)


state 778

    (554) namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name . namespace_aliasing_clause_opt
    (8) namespace_name -> namespace_name . NS_SEPARATOR NAME
    (544) namespace_aliasing_clause_opt -> . namespace_aliasing_clause
    (546) namespace_aliasing_clause -> . AS name

    NS_SEPARATOR    shift and go to state 263
    AS              shift and go to state 437

    namespace_aliasing_clause_opt  shift and go to state 848
    namespace_aliasing_clause      shift and go to state 436

state 779

    (298) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .

    LEFT_CBRAC      reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    SEMICOLON       reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    TRY             reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    DECLARE         reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ECHO            reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    UNSET           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CONST           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    INTERFACE       reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    TRAIT           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    NAMESPACE       reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    USE             reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    GLOBAL          reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    STATIC          reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    STRING          reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    IF              reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    SWITCH          reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    WHILE           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    DO              reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FOR             reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FOREACH         reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    GOTO            reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CONTINUE        reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    BREAK           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    RETURN          reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    THROW           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FUNCTION        reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    INCLUDE         reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    INCLUDE_ONCE    reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    REQUIRE         reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    REQUIRE_ONCE    reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ABSTRACT        reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FINAL           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    PRINT           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    YIELD           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    YIELD_FROM      reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CLASS           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    $end            reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    RIGHT_CBRAC     reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ELSE            reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ELSEIF          reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDDECLARE      reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDWHILE        reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDFOR          reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CASE            reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    DEFAULT         reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDSWITCH       reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDFOREACH      reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDIF           reduce using rule 298 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)


state 780

    (306) elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .

    LEFT_CBRAC      reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    SEMICOLON       reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    TRY             reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    DECLARE         reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ECHO            reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    UNSET           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CONST           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    INTERFACE       reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    TRAIT           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    NAMESPACE       reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    USE             reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    GLOBAL          reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    STATIC          reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    STRING          reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    IF              reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    SWITCH          reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    WHILE           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    DO              reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FOR             reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FOREACH         reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    GOTO            reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CONTINUE        reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    BREAK           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    RETURN          reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    THROW           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FUNCTION        reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    INCLUDE         reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    INCLUDE_ONCE    reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    REQUIRE         reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    REQUIRE_ONCE    reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ABSTRACT        reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FINAL           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    PRINT           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    YIELD           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    YIELD_FROM      reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CLASS           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    $end            reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    RIGHT_CBRAC     reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ELSE            reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ELSEIF          reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDDECLARE      reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDWHILE        reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDFOR          reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CASE            reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    DEFAULT         reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDSWITCH       reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDFOREACH      reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDIF           reduce using rule 306 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)


state 781

    (308) else_clause_1 -> ELSE statement .

    LEFT_CBRAC      reduce using rule 308 (else_clause_1 -> ELSE statement .)
    SEMICOLON       reduce using rule 308 (else_clause_1 -> ELSE statement .)
    TRY             reduce using rule 308 (else_clause_1 -> ELSE statement .)
    DECLARE         reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ECHO            reduce using rule 308 (else_clause_1 -> ELSE statement .)
    UNSET           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    CONST           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    INTERFACE       reduce using rule 308 (else_clause_1 -> ELSE statement .)
    TRAIT           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    NAMESPACE       reduce using rule 308 (else_clause_1 -> ELSE statement .)
    USE             reduce using rule 308 (else_clause_1 -> ELSE statement .)
    GLOBAL          reduce using rule 308 (else_clause_1 -> ELSE statement .)
    STATIC          reduce using rule 308 (else_clause_1 -> ELSE statement .)
    STRING          reduce using rule 308 (else_clause_1 -> ELSE statement .)
    IF              reduce using rule 308 (else_clause_1 -> ELSE statement .)
    SWITCH          reduce using rule 308 (else_clause_1 -> ELSE statement .)
    WHILE           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    DO              reduce using rule 308 (else_clause_1 -> ELSE statement .)
    FOR             reduce using rule 308 (else_clause_1 -> ELSE statement .)
    FOREACH         reduce using rule 308 (else_clause_1 -> ELSE statement .)
    GOTO            reduce using rule 308 (else_clause_1 -> ELSE statement .)
    CONTINUE        reduce using rule 308 (else_clause_1 -> ELSE statement .)
    BREAK           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    RETURN          reduce using rule 308 (else_clause_1 -> ELSE statement .)
    THROW           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    FUNCTION        reduce using rule 308 (else_clause_1 -> ELSE statement .)
    INCLUDE         reduce using rule 308 (else_clause_1 -> ELSE statement .)
    INCLUDE_ONCE    reduce using rule 308 (else_clause_1 -> ELSE statement .)
    REQUIRE         reduce using rule 308 (else_clause_1 -> ELSE statement .)
    REQUIRE_ONCE    reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ABSTRACT        reduce using rule 308 (else_clause_1 -> ELSE statement .)
    FINAL           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    PRINT           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    YIELD           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    YIELD_FROM      reduce using rule 308 (else_clause_1 -> ELSE statement .)
    CLASS           reduce using rule 308 (else_clause_1 -> ELSE statement .)
    $end            reduce using rule 308 (else_clause_1 -> ELSE statement .)
    RIGHT_CBRAC     reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ELSE            reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ELSEIF          reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ENDDECLARE      reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ENDWHILE        reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ENDFOR          reduce using rule 308 (else_clause_1 -> ELSE statement .)
    CASE            reduce using rule 308 (else_clause_1 -> ELSE statement .)
    DEFAULT         reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ENDSWITCH       reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ENDFOREACH      reduce using rule 308 (else_clause_1 -> ELSE statement .)
    ENDIF           reduce using rule 308 (else_clause_1 -> ELSE statement .)


state 782

    (307) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 849
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 783

    (302) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 . else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 . ENDIF SEMICOLON
    (310) elseif_clauses_2 -> elseif_clauses_2 . elseif_clause_2
    (312) else_clause_2 -> . ELSE DOUBLE_POINT statement_list
    (311) elseif_clause_2 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list

    ENDIF           shift and go to state 851
    ELSE            shift and go to state 786
    ELSEIF          shift and go to state 787

    else_clause_2                  shift and go to state 850
    elseif_clause_2                shift and go to state 852

state 784

    (304) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 . ENDIF SEMICOLON

    ENDIF           shift and go to state 853


state 785

    (309) elseif_clauses_2 -> elseif_clause_2 .

    ENDIF           reduce using rule 309 (elseif_clauses_2 -> elseif_clause_2 .)
    ELSE            reduce using rule 309 (elseif_clauses_2 -> elseif_clause_2 .)
    ELSEIF          reduce using rule 309 (elseif_clauses_2 -> elseif_clause_2 .)


state 786

    (312) else_clause_2 -> ELSE . DOUBLE_POINT statement_list

    DOUBLE_POINT    shift and go to state 854


state 787

    (311) elseif_clause_2 -> ELSEIF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list

    LEFT_PARENTHESIS shift and go to state 855


state 788

    (313) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    TRY             reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    DECLARE         reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ECHO            reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    UNSET           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CONST           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    INTERFACE       reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    TRAIT           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    USE             reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    GLOBAL          reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    STATIC          reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    STRING          reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    IF              reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    SWITCH          reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    WHILE           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    DO              reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FOR             reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FOREACH         reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    GOTO            reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CONTINUE        reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    BREAK           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    RETURN          reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    THROW           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FUNCTION        reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    INCLUDE         reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    REQUIRE         reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FINAL           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    PRINT           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    YIELD           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CLASS           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    $end            reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ELSE            reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ELSEIF          reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDFOR          reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CASE            reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    DEFAULT         reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDIF           reduce using rule 313 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)


state 789

    (317) case_statements -> case_statement case_statements .

    RIGHT_CBRAC     reduce using rule 317 (case_statements -> case_statement case_statements .)
    ENDSWITCH       reduce using rule 317 (case_statements -> case_statement case_statements .)


state 790

    (319) case_statements -> default_statement case_statements .

    RIGHT_CBRAC     reduce using rule 319 (case_statements -> default_statement case_statements .)
    ENDSWITCH       reduce using rule 319 (case_statements -> default_statement case_statements .)


state 791

    (321) case_statement -> CASE expression . case_default_label_terminator statement_list
    (322) case_statement -> CASE expression . case_default_label_terminator
    (325) case_default_label_terminator -> . DOUBLE_POINT
    (326) case_default_label_terminator -> . SEMICOLON

    DOUBLE_POINT    shift and go to state 793
    SEMICOLON       shift and go to state 794

    case_default_label_terminator  shift and go to state 856

state 792

    (323) default_statement -> DEFAULT case_default_label_terminator . statement_list
    (324) default_statement -> DEFAULT case_default_label_terminator .
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 324 (default_statement -> DEFAULT case_default_label_terminator .)
    DEFAULT         reduce using rule 324 (default_statement -> DEFAULT case_default_label_terminator .)
    RIGHT_CBRAC     reduce using rule 324 (default_statement -> DEFAULT case_default_label_terminator .)
    ENDSWITCH       reduce using rule 324 (default_statement -> DEFAULT case_default_label_terminator .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 857
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 793

    (325) case_default_label_terminator -> DOUBLE_POINT .

    LEFT_CBRAC      reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    SEMICOLON       reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    TRY             reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    DECLARE         reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    ECHO            reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    UNSET           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    CONST           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    INTERFACE       reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    TRAIT           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    NAMESPACE       reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    USE             reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    GLOBAL          reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    STATIC          reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    STRING          reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    IF              reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    SWITCH          reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    WHILE           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    DO              reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    FOR             reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    FOREACH         reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    GOTO            reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    CONTINUE        reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    BREAK           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    RETURN          reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    THROW           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    FUNCTION        reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    INCLUDE         reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    INCLUDE_ONCE    reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    REQUIRE         reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    REQUIRE_ONCE    reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    ABSTRACT        reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    FINAL           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    PRINT           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    YIELD           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    YIELD_FROM      reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    CLASS           reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    CASE            reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    DEFAULT         reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    RIGHT_CBRAC     reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)
    ENDSWITCH       reduce using rule 325 (case_default_label_terminator -> DOUBLE_POINT .)


state 794

    (326) case_default_label_terminator -> SEMICOLON .

    LEFT_CBRAC      reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    SEMICOLON       reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    TRY             reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    DECLARE         reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    ECHO            reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    UNSET           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    CONST           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    INTERFACE       reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    TRAIT           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    NAMESPACE       reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    USE             reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    GLOBAL          reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    STATIC          reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    STRING          reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    IF              reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    SWITCH          reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    WHILE           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    DO              reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    FOR             reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    FOREACH         reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    GOTO            reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    CONTINUE        reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    BREAK           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    RETURN          reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    THROW           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    FUNCTION        reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    INCLUDE         reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    REQUIRE         reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    ABSTRACT        reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    FINAL           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    PRINT           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    YIELD           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    YIELD_FROM      reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    CLASS           reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    CASE            reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    DEFAULT         reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)
    ENDSWITCH       reduce using rule 326 (case_default_label_terminator -> SEMICOLON .)


state 795

    (315) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 858


state 796

    (316) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .

    LEFT_CBRAC      reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    SEMICOLON       reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    DECLARE         reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    UNSET           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CONST           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    INTERFACE       reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    TRAIT           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    NAMESPACE       reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    USE             reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    GLOBAL          reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    STATIC          reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    IF              reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    DO              reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    GOTO            reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CONTINUE        reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    THROW           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    INCLUDE         reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    REQUIRE         reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ABSTRACT        reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FINAL           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    YIELD           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    YIELD_FROM      reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CLASS           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    $end            reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ELSE            reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ELSEIF          reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDDECLARE      reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDWHILE        reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDFOR          reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDFOREACH      reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDIF           reduce using rule 316 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)


state 797

    (332) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 859


state 798

    (333) do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .

    LEFT_CBRAC      reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TRY             reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    DECLARE         reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    UNSET           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TRAIT           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NAMESPACE       reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    USE             reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    GLOBAL          reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STATIC          reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    GOTO            reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    THROW           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE         reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE         reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ABSTRACT        reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    YIELD           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    YIELD_FROM      reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSEIF          reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDDECLARE      reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDWHILE        reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOR          reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CASE            reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDSWITCH       reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOREACH      reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDIF           reduce using rule 333 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)


state 799

    (336) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 861
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 860
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 800

    (337) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 337 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)


state 801

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 862
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 802

    (334) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 863


state 803

    (335) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . statement
    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 865
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 864
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 804

    (340) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 340 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 805

    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 866
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 806

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 867
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 807

    (338) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 869
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 868
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 808

    (339) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 339 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)


state 809

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 870
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 810

    (355) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS . statement
    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 872
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 871
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 811

    (356) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 356 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)


state 812

    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOREACH SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 873
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 813

    (403) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt .

    LEFT_CBRAC      reduce using rule 403 (function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt .)
    SEMICOLON       reduce using rule 403 (function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt .)


state 814

    (84) return_type_opt -> return_type .

    LEFT_CBRAC      reduce using rule 84 (return_type_opt -> return_type .)
    SEMICOLON       reduce using rule 84 (return_type_opt -> return_type .)


state 815

    (414) return_type -> DOUBLE_POINT . type_declaration
    (415) return_type -> DOUBLE_POINT . VOID
    (418) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (419) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (420) TERNARY_OPERATIONopt -> .

    VOID            shift and go to state 875
    TERNARY_OPERATION shift and go to state 618
    ARRAY           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 420 (TERNARY_OPERATIONopt -> .)

    type_declaration               shift and go to state 874
    TERNARY_OPERATIONopt           shift and go to state 617

state 816

    (412) parameter_declaration -> type_declarationopt ampersandopt . VARIABLE default_argument_specifieropt

    VARIABLE        shift and go to state 818


state 817

    (413) variadic_parameter -> type_declarationopt ampersandopt . ELLIPSIS VARIABLE

    ELLIPSIS        shift and go to state 819


state 818

    (412) parameter_declaration -> type_declarationopt ampersandopt VARIABLE . default_argument_specifieropt
    (430) default_argument_specifieropt -> . default_argument_specifier
    (431) default_argument_specifieropt -> .
    (432) default_argument_specifier -> . EQUAL constant_expression

    TERNARY_OPERATION reduce using rule 431 (default_argument_specifieropt -> .)
    AMPERSAND       reduce using rule 431 (default_argument_specifieropt -> .)
    ELLIPSIS        reduce using rule 431 (default_argument_specifieropt -> .)
    ARRAY           reduce using rule 431 (default_argument_specifieropt -> .)
    CALLABLE        reduce using rule 431 (default_argument_specifieropt -> .)
    ITERABLE        reduce using rule 431 (default_argument_specifieropt -> .)
    BOOL            reduce using rule 431 (default_argument_specifieropt -> .)
    FLOAT           reduce using rule 431 (default_argument_specifieropt -> .)
    INT             reduce using rule 431 (default_argument_specifieropt -> .)
    STRING          reduce using rule 431 (default_argument_specifieropt -> .)
    VARIABLE        reduce using rule 431 (default_argument_specifieropt -> .)
    RIGHT_PARENTHESIS reduce using rule 431 (default_argument_specifieropt -> .)
    EQUAL           shift and go to state 878

    default_argument_specifieropt  shift and go to state 876
    default_argument_specifier     shift and go to state 877

state 819

    (413) variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS . VARIABLE

    VARIABLE        shift and go to state 879


state 820

    (226) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON .

    COLON           reduce using rule 226 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON .)
    RIGHT_PARENTHESIS reduce using rule 226 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON .)


state 821

    (229) keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW . list_or_variable
    (230) list_or_variable -> . list_intrinsic
    (231) list_or_variable -> . AMPERSAND variable
    (232) list_or_variable -> . variable
    (220) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (51) variable -> . callable_variable
    (52) variable -> . scoped_property_access_expression
    (53) variable -> . member_access_expression
    (46) callable_variable -> . simple_variable
    (47) callable_variable -> . subscript_expression
    (48) callable_variable -> . member_call_expression
    (49) callable_variable -> . scoped_call_expression
    (50) callable_variable -> . function_call_expression
    (149) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (136) member_access_expression -> . dereferencable_expression ARROW member_name
    (35) simple_variable -> . VARIABLE
    (36) simple_variable -> . DOLLAR simple_variable
    (37) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (125) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (126) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (140) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (141) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (150) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (151) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (127) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (128) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (129) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (130) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (153) scope_resolution_qualifier -> . relative_scope
    (154) scope_resolution_qualifier -> . qualified_name
    (155) scope_resolution_qualifier -> . dereferencable_expression
    (38) dereferencable_expression -> . variable
    (39) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (40) dereferencable_expression -> . array_creation_expression
    (41) dereferencable_expression -> . string_literal
    (545) qualified_name -> . name
    (42) callable_expression -> . callable_variable
    (43) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (44) callable_expression -> . array_creation_expression
    (45) callable_expression -> . string_literal
    (156) relative_scope -> . SELF
    (157) relative_scope -> . PARENT
    (158) relative_scope -> . STATIC
    (113) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (114) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (60) string_literal -> . STRING
    (555) name -> . STRING

    AMPERSAND       shift and go to state 470
    LIST            shift and go to state 157
    VARIABLE        shift and go to state 112
    DOLLAR          shift and go to state 113
    LEFT_PARENTHESIS shift and go to state 246
    SELF            shift and go to state 176
    PARENT          shift and go to state 177
    STATIC          shift and go to state 253
    ARRAY           shift and go to state 179
    LEFT_CBRAC      shift and go to state 168
    STRING          shift and go to state 180

    list_or_variable               shift and go to state 880
    list_intrinsic                 shift and go to state 469
    variable                       shift and go to state 471
    callable_variable              shift and go to state 154
    scoped_property_access_expression shift and go to state 155
    member_access_expression       shift and go to state 156
    simple_variable                shift and go to state 160
    subscript_expression           shift and go to state 161
    member_call_expression         shift and go to state 162
    scoped_call_expression         shift and go to state 163
    function_call_expression       shift and go to state 164
    scope_resolution_qualifier     shift and go to state 249
    dereferencable_expression      shift and go to state 166
    qualified_name                 shift and go to state 250
    callable_expression            shift and go to state 170
    relative_scope                 shift and go to state 171
    array_creation_expression      shift and go to state 251
    string_literal                 shift and go to state 252
    name                           shift and go to state 175

state 822

    (150) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 150 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 823

    (151) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 151 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 824

    (140) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 140 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 825

    (141) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 141 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 826

    (75) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS . anonymous_function_use_clause_opt return_type_opt compound_statement
    (82) anonymous_function_use_clause_opt -> . anonymous_function_use_clause
    (83) anonymous_function_use_clause_opt -> .
    (86) anonymous_function_use_clause -> . USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS

    DOUBLE_POINT    reduce using rule 83 (anonymous_function_use_clause_opt -> .)
    LEFT_CBRAC      reduce using rule 83 (anonymous_function_use_clause_opt -> .)
    USE             shift and go to state 883

    anonymous_function_use_clause_opt shift and go to state 881
    anonymous_function_use_clause  shift and go to state 882

state 827

    (90) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    LESS            reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SL              reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SR              reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    AND             reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    XOR             reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    OR              reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    COLON           reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    AS              reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    STRING          reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INT             reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 90 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)


state 828

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt . class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (98) class_interface_clause_opt -> . class_interface_clause
    (99) class_interface_clause_opt -> .
    (445) class_interface_clause -> . IMPLEMENTS qualified_name
    (446) class_interface_clause -> . class_interface_clause qualified_name

    LEFT_CBRAC      reduce using rule 99 (class_interface_clause_opt -> .)
    IMPLEMENTS      shift and go to state 557

    class_interface_clause_opt     shift and go to state 884
    class_interface_clause         shift and go to state 650

state 829

    (93) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 885


state 830

    (100) class_member_declarations_opt -> class_member_declarations .
    (448) class_member_declarations -> class_member_declarations . class_member_declaration
    (449) class_member_declaration -> . class_const_declaration
    (450) class_member_declaration -> . property_declaration
    (451) class_member_declaration -> . method_declaration
    (452) class_member_declaration -> . constructor_declaration
    (453) class_member_declaration -> . destructor_declaration
    (454) class_member_declaration -> . trait_use_clause
    (456) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (460) property_declaration -> . property_modifier property_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (485) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (461) property_modifier -> . VAR
    (462) property_modifier -> . visibility_modifier static_modifieropt
    (463) property_modifier -> . static_modifier visibility_modifier_opt
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_PARENTHESIS reduce using rule 100 (class_member_declarations_opt -> class_member_declarations .)
    USE             shift and go to state 426
    CONST           reduce using rule 527 (visibility_modifier_opt -> .)
    VAR             shift and go to state 422
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    class_member_declaration       shift and go to state 834
    class_const_declaration        shift and go to state 755
    property_declaration           shift and go to state 756
    method_declaration             shift and go to state 757
    constructor_declaration        shift and go to state 758
    destructor_declaration         shift and go to state 759
    trait_use_clause               shift and go to state 760
    visibility_modifier_opt        shift and go to state 564
    property_modifier              shift and go to state 418
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 420
    visibility_modifier            shift and go to state 761
    static_modifier                shift and go to state 424
    method_modifier                shift and go to state 425
    class_modifier                 shift and go to state 431

state 831

    (387) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .

    FINALLY         reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CATCH           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    LEFT_CBRAC      reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    TRY             reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    DECLARE         reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ECHO            reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    UNSET           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CONST           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    INTERFACE       reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    TRAIT           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    NAMESPACE       reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    USE             reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    GLOBAL          reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    STATIC          reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    STRING          reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    SWITCH          reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    DO              reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FOREACH         reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    THROW           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FUNCTION        reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    INCLUDE         reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    INCLUDE_ONCE    reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    REQUIRE         reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    REQUIRE_ONCE    reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ABSTRACT        reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FINAL           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    PRINT           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    YIELD           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    YIELD_FROM      reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CLASS           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    $end            reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    RIGHT_CBRAC     reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ELSEIF          reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDDECLARE      reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDWHILE        reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDFOR          reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CASE            reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    DEFAULT         reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDSWITCH       reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDFOREACH      reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDIF           reduce using rule 387 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)


state 832

    (392) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .

    LEFT_CBRAC      reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    SEMICOLON       reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    TRY             reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    DECLARE         reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ECHO            reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    UNSET           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CONST           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    INTERFACE       reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    TRAIT           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    NAMESPACE       reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    USE             reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    GLOBAL          reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    STATIC          reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    STRING          reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    IF              reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    SWITCH          reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    WHILE           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    DO              reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FOR             reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FOREACH         reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    GOTO            reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CONTINUE        reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    BREAK           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    RETURN          reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    THROW           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FUNCTION        reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    INCLUDE         reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    REQUIRE         reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ABSTRACT        reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FINAL           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    PRINT           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    YIELD           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    YIELD_FROM      reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CLASS           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    $end            reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ELSE            reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ELSEIF          reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDDECLARE      reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDWHILE        reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDFOR          reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CASE            reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    DEFAULT         reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDSWITCH       reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDFOREACH      reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDIF           reduce using rule 392 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)


state 833

    (433) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    TRY             reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    DECLARE         reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ECHO            reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    UNSET           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CONST           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    INTERFACE       reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    TRAIT           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    USE             reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    GLOBAL          reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    STATIC          reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    STRING          reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    IF              reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    SWITCH          reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    WHILE           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    DO              reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FOR             reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FOREACH         reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    GOTO            reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CONTINUE        reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    BREAK           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    RETURN          reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    THROW           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FINAL           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    PRINT           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    YIELD           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CLASS           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    $end            reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ELSE            reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ELSEIF          reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDFOR          reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CASE            reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    DEFAULT         reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDIF           reduce using rule 433 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)


state 834

    (448) class_member_declarations -> class_member_declarations class_member_declaration .

    USE             reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    VAR             reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    PUBLIC          reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    PROTECTED       reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    PRIVATE         reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    STATIC          reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    ABSTRACT        reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    FINAL           reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    CONST           reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    FUNCTION        reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    RIGHT_CBRAC     reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)
    RIGHT_PARENTHESIS reduce using rule 448 (class_member_declarations -> class_member_declarations class_member_declaration .)


state 835

    (456) class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .

    PUBLIC          reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    PROTECTED       reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    PRIVATE         reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    STATIC          reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    ABSTRACT        reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    FINAL           reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    CONST           reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    FUNCTION        reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    USE             reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    VAR             reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 456 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)


state 836

    (485) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT . LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 886


state 837

    (486) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT . LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 887


state 838

    (516) trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .

    USE             reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    VAR             reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    PUBLIC          reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    PROTECTED       reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    PRIVATE         reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    STATIC          reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    FINAL           reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    CONST           reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 516 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)


state 839

    (520) trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause .

    STRING          reduce using rule 520 (trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause .)
    RIGHT_CBRAC     reduce using rule 520 (trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause .)


state 840

    (521) trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON .

    STRING          reduce using rule 521 (trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 521 (trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON .)


state 841

    (522) trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON .

    STRING          reduce using rule 522 (trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 522 (trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON .)


state 842

    (523) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON . name INSTEADOF trait_name_list
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 888

state 843

    (524) trait_alias_as_clause -> name AS . visibility_modifier_opt name
    (525) trait_alias_as_clause -> name AS . visibility_modifier nameopt
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE

    STRING          reduce using rule 527 (visibility_modifier_opt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429

    visibility_modifier_opt        shift and go to state 889
    visibility_modifier            shift and go to state 890

state 844

    (551) namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt .

    RIGHT_CBRAC     reduce using rule 551 (namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt .)
    NAME            reduce using rule 551 (namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt .)


state 845

    (535) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC . SEMICOLON

    SEMICOLON       shift and go to state 891


state 846

    (550) namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1 .

    RIGHT_CBRAC     reduce using rule 550 (namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1 .)
    NAME            reduce using rule 550 (namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1 .)


state 847

    (536) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .

    LEFT_CBRAC      reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    SEMICOLON       reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    TRY             reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    DECLARE         reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ECHO            reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    UNSET           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CONST           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    INTERFACE       reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    TRAIT           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    NAMESPACE       reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    USE             reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    GLOBAL          reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    STATIC          reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    STRING          reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    IF              reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    SWITCH          reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    WHILE           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    DO              reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FOR             reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FOREACH         reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    GOTO            reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CONTINUE        reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    BREAK           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    RETURN          reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    THROW           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FUNCTION        reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    INCLUDE         reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    REQUIRE         reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ABSTRACT        reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FINAL           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    PRINT           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    YIELD           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    YIELD_FROM      reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CLASS           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    $end            reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ELSE            reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ELSEIF          reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDDECLARE      reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDWHILE        reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDFOR          reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CASE            reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    DEFAULT         reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDSWITCH       reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDFOREACH      reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDIF           reduce using rule 536 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)


state 848

    (554) namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .

    RIGHT_CBRAC     reduce using rule 554 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)
    FUNCTION        reduce using rule 554 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)
    CONST           reduce using rule 554 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)
    NAME            reduce using rule 554 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)


state 849

    (307) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement

    RIGHT_PARENTHESIS shift and go to state 892


state 850

    (302) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 . ENDIF SEMICOLON

    ENDIF           shift and go to state 893


state 851

    (303) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 894


state 852

    (310) elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .

    ENDIF           reduce using rule 310 (elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .)
    ELSE            reduce using rule 310 (elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .)
    ELSEIF          reduce using rule 310 (elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .)


state 853

    (304) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 895


state 854

    (312) else_clause_2 -> ELSE DOUBLE_POINT . statement_list
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 896
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 855

    (311) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 897
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 856

    (321) case_statement -> CASE expression case_default_label_terminator . statement_list
    (322) case_statement -> CASE expression case_default_label_terminator .
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 322 (case_statement -> CASE expression case_default_label_terminator .)
    DEFAULT         reduce using rule 322 (case_statement -> CASE expression case_default_label_terminator .)
    RIGHT_CBRAC     reduce using rule 322 (case_statement -> CASE expression case_default_label_terminator .)
    ENDSWITCH       reduce using rule 322 (case_statement -> CASE expression case_default_label_terminator .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement_list                 shift and go to state 898
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 857

    (323) default_statement -> DEFAULT case_default_label_terminator statement_list .
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 323 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    DEFAULT         reduce using rule 323 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    RIGHT_CBRAC     reduce using rule 323 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    ENDSWITCH       reduce using rule 323 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 858

    (315) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .

    LEFT_CBRAC      reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    SEMICOLON       reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    DECLARE         reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    UNSET           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CONST           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    INTERFACE       reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    TRAIT           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    NAMESPACE       reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    USE             reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    GLOBAL          reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    STATIC          reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    IF              reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    DO              reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    GOTO            reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CONTINUE        reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    THROW           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    INCLUDE         reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    REQUIRE         reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ABSTRACT        reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FINAL           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    YIELD           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    YIELD_FROM      reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CLASS           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    $end            reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ELSE            reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ELSEIF          reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDDECLARE      reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDWHILE        reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDFOR          reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDFOREACH      reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDIF           reduce using rule 315 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)


state 859

    (332) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .

    LEFT_CBRAC      reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    SEMICOLON       reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    TRY             reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    DECLARE         reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    UNSET           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CONST           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    INTERFACE       reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    TRAIT           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    NAMESPACE       reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    USE             reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    GLOBAL          reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    STATIC          reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    STRING          reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    IF              reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    SWITCH          reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    DO              reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FOR             reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FOREACH         reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    GOTO            reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CONTINUE        reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    BREAK           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    RETURN          reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    THROW           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FUNCTION        reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    INCLUDE         reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    REQUIRE         reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ABSTRACT        reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FINAL           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    YIELD           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    YIELD_FROM      reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CLASS           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    $end            reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDDECLARE      reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDFOR          reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CASE            reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    DEFAULT         reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDSWITCH       reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDFOREACH      reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 332 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)


state 860

    (336) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 336 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 861

    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 899
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 862

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 900
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 863

    (334) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 902
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 901
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 864

    (335) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 335 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)


state 865

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 903
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 866

    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 904
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 867

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 905


state 868

    (338) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 338 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 869

    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 906
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 870

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 907
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 871

    (355) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 355 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)


state 872

    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOREACH SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 908
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 873

    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOREACH SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOREACH      shift and go to state 909
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 874

    (414) return_type -> DOUBLE_POINT type_declaration .

    LEFT_CBRAC      reduce using rule 414 (return_type -> DOUBLE_POINT type_declaration .)
    SEMICOLON       reduce using rule 414 (return_type -> DOUBLE_POINT type_declaration .)


state 875

    (415) return_type -> DOUBLE_POINT VOID .

    LEFT_CBRAC      reduce using rule 415 (return_type -> DOUBLE_POINT VOID .)
    SEMICOLON       reduce using rule 415 (return_type -> DOUBLE_POINT VOID .)


state 876

    (412) parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .

    TERNARY_OPERATION reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    AMPERSAND       reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    ELLIPSIS        reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    ARRAY           reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    CALLABLE        reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    ITERABLE        reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    BOOL            reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    FLOAT           reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    INT             reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    STRING          reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    VARIABLE        reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    RIGHT_PARENTHESIS reduce using rule 412 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)


state 877

    (430) default_argument_specifieropt -> default_argument_specifier .

    TERNARY_OPERATION reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    AMPERSAND       reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    ELLIPSIS        reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    ARRAY           reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    CALLABLE        reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    ITERABLE        reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    BOOL            reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    FLOAT           reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    INT             reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    STRING          reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    VARIABLE        reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)
    RIGHT_PARENTHESIS reduce using rule 430 (default_argument_specifieropt -> default_argument_specifier .)


state 878

    (432) default_argument_specifier -> EQUAL . constant_expression
    (269) constant_expression -> . expression
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    constant_expression            shift and go to state 910
    expression                     shift and go to state 403
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 879

    (413) variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .

    TERNARY_OPERATION reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    AMPERSAND       reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    VARIABLE        reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    ARRAY           reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    CALLABLE        reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    ITERABLE        reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    BOOL            reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    FLOAT           reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    INT             reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    STRING          reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    RIGHT_PARENTHESIS reduce using rule 413 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)


state 880

    (229) keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable .

    COLON           reduce using rule 229 (keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable .)
    RIGHT_PARENTHESIS reduce using rule 229 (keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable .)


state 881

    (75) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt . return_type_opt compound_statement
    (84) return_type_opt -> . return_type
    (85) return_type_opt -> .
    (414) return_type -> . DOUBLE_POINT type_declaration
    (415) return_type -> . DOUBLE_POINT VOID

    LEFT_CBRAC      reduce using rule 85 (return_type_opt -> .)
    DOUBLE_POINT    shift and go to state 815

    return_type_opt                shift and go to state 911
    return_type                    shift and go to state 814

state 882

    (82) anonymous_function_use_clause_opt -> anonymous_function_use_clause .

    DOUBLE_POINT    reduce using rule 82 (anonymous_function_use_clause_opt -> anonymous_function_use_clause .)
    LEFT_CBRAC      reduce using rule 82 (anonymous_function_use_clause_opt -> anonymous_function_use_clause .)


state 883

    (86) anonymous_function_use_clause -> USE . LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 912


state 884

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt . LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS

    LEFT_CBRAC      shift and go to state 913


state 885

    (93) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 93 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)


state 886

    (485) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS . parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (487) parameter_declaration_listopt -> . parameter_declaration_list
    (488) parameter_declaration_listopt -> .
    (406) parameter_declaration_list -> . simple_parameter_declaration_list
    (407) parameter_declaration_list -> . variadic_declaration_list
    (408) simple_parameter_declaration_list -> . parameter_declaration
    (409) simple_parameter_declaration_list -> . parameter_declaration_list parameter_declaration
    (410) variadic_declaration_list -> . simple_parameter_declaration_list variadic_parameter
    (411) variadic_declaration_list -> . variadic_parameter
    (412) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (413) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (416) type_declarationopt -> . type_declaration
    (417) type_declarationopt -> .
    (418) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (419) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (420) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 488 (parameter_declaration_listopt -> .)
    AMPERSAND       reduce using rule 417 (type_declarationopt -> .)
    VARIABLE        reduce using rule 417 (type_declarationopt -> .)
    ELLIPSIS        reduce using rule 417 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 618
    ARRAY           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 420 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 420 (TERNARY_OPERATIONopt -> .)

    parameter_declaration_listopt  shift and go to state 914
    parameter_declaration_list     shift and go to state 610
    simple_parameter_declaration_list shift and go to state 611
    variadic_declaration_list      shift and go to state 612
    parameter_declaration          shift and go to state 613
    variadic_parameter             shift and go to state 614
    type_declarationopt            shift and go to state 615
    type_declaration               shift and go to state 616
    TERNARY_OPERATIONopt           shift and go to state 617

state 887

    (486) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS . RIGHT_PARENTHESIS compound_statement

    RIGHT_PARENTHESIS shift and go to state 915


state 888

    (523) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name . INSTEADOF trait_name_list

    INSTEADOF       shift and go to state 916


state 889

    (524) trait_alias_as_clause -> name AS visibility_modifier_opt . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    name                           shift and go to state 917

state 890

    (525) trait_alias_as_clause -> name AS visibility_modifier . nameopt
    (526) visibility_modifier_opt -> visibility_modifier .
    (528) nameopt -> . name
    (529) nameopt -> .
    (555) name -> . STRING

  ! shift/reduce conflict for STRING resolved as shift
    SEMICOLON       reduce using rule 529 (nameopt -> .)
    STRING          shift and go to state 51

  ! STRING          [ reduce using rule 526 (visibility_modifier_opt -> visibility_modifier .) ]

    name                           shift and go to state 918
    nameopt                        shift and go to state 919

state 891

    (535) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .

    LEFT_CBRAC      reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    SEMICOLON       reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    TRY             reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    DECLARE         reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ECHO            reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    UNSET           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CONST           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    INTERFACE       reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    TRAIT           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    NAMESPACE       reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    USE             reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    GLOBAL          reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    STATIC          reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    STRING          reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    IF              reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    SWITCH          reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    WHILE           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    DO              reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FOR             reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FOREACH         reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    GOTO            reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CONTINUE        reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    BREAK           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    RETURN          reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    THROW           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FUNCTION        reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    INCLUDE         reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    REQUIRE         reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ABSTRACT        reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FINAL           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    PRINT           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    YIELD           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    YIELD_FROM      reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CLASS           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    $end            reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ELSE            reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ELSEIF          reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDDECLARE      reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDWHILE        reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDFOR          reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CASE            reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    DEFAULT         reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDSWITCH       reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDFOREACH      reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDIF           reduce using rule 535 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)


state 892

    (307) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement                      shift and go to state 920
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 893

    (302) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 921


state 894

    (303) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .

    LEFT_CBRAC      reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    SEMICOLON       reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    TRY             reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    DECLARE         reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ECHO            reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    UNSET           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CONST           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    INTERFACE       reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    TRAIT           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    NAMESPACE       reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    USE             reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    GLOBAL          reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    STATIC          reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    STRING          reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    IF              reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    SWITCH          reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    WHILE           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    DO              reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FOR             reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FOREACH         reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    GOTO            reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CONTINUE        reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    BREAK           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    RETURN          reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    THROW           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    INCLUDE         reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    REQUIRE         reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ABSTRACT        reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FINAL           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    PRINT           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    YIELD           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    YIELD_FROM      reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CLASS           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    $end            reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ELSE            reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDDECLARE      reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDFOR          reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CASE            reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    DEFAULT         reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDSWITCH       reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDFOREACH      reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDIF           reduce using rule 303 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)


state 895

    (304) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .

    LEFT_CBRAC      reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    SEMICOLON       reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    TRY             reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    DECLARE         reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ECHO            reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    UNSET           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CONST           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    INTERFACE       reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    TRAIT           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    NAMESPACE       reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    USE             reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    GLOBAL          reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    STATIC          reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    STRING          reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    IF              reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    SWITCH          reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    WHILE           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    DO              reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FOR             reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FOREACH         reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    GOTO            reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CONTINUE        reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    BREAK           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    RETURN          reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    THROW           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    INCLUDE         reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    REQUIRE         reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ABSTRACT        reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FINAL           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    PRINT           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    YIELD           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    YIELD_FROM      reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CLASS           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    $end            reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ELSE            reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDDECLARE      reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDFOR          reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CASE            reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    DEFAULT         reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDSWITCH       reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDFOREACH      reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDIF           reduce using rule 304 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)


state 896

    (312) else_clause_2 -> ELSE DOUBLE_POINT statement_list .
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDIF           reduce using rule 312 (else_clause_2 -> ELSE DOUBLE_POINT statement_list .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 897

    (311) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list

    RIGHT_PARENTHESIS shift and go to state 922


state 898

    (321) case_statement -> CASE expression case_default_label_terminator statement_list .
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 321 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    DEFAULT         reduce using rule 321 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    RIGHT_CBRAC     reduce using rule 321 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    ENDSWITCH       reduce using rule 321 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 899

    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 923
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 900

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 924


state 901

    (334) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 334 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 902

    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement_list                 shift and go to state 925
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 903

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 926
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 904

    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 927


state 905

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 906

    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 928
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 907

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 929


state 908

    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOREACH SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOREACH      shift and go to state 930
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 909

    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH . SEMICOLON

    SEMICOLON       shift and go to state 931


state 910

    (432) default_argument_specifier -> EQUAL constant_expression .

    TERNARY_OPERATION reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    AMPERSAND       reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    ELLIPSIS        reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    ARRAY           reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    CALLABLE        reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    ITERABLE        reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    BOOL            reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    FLOAT           reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    INT             reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    STRING          reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    VARIABLE        reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)
    RIGHT_PARENTHESIS reduce using rule 432 (default_argument_specifier -> EQUAL constant_expression .)


state 911

    (75) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt . compound_statement
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 932

state 912

    (86) anonymous_function_use_clause -> USE LEFT_PARENTHESIS . use_variable_name_list RIGHT_PARENTHESIS
    (87) use_variable_name_list -> . AMPERSAND_opt VARIABLE
    (88) use_variable_name_list -> . use_variable_name_list AMPERSAND_opt VARIABLE
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 334
    VARIABLE        reduce using rule 79 (AMPERSAND_opt -> .)

    use_variable_name_list         shift and go to state 933
    AMPERSAND_opt                  shift and go to state 934

state 913

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC . class_member_declarations_opt RIGHT_PARENTHESIS
    (100) class_member_declarations_opt -> . class_member_declarations
    (101) class_member_declarations_opt -> .
    (447) class_member_declarations -> . class_member_declaration
    (448) class_member_declarations -> . class_member_declarations class_member_declaration
    (449) class_member_declaration -> . class_const_declaration
    (450) class_member_declaration -> . property_declaration
    (451) class_member_declaration -> . method_declaration
    (452) class_member_declaration -> . constructor_declaration
    (453) class_member_declaration -> . destructor_declaration
    (454) class_member_declaration -> . trait_use_clause
    (456) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (460) property_declaration -> . property_modifier property_elements SEMICOLON
    (476) method_declaration -> . method_modifiersopt function_definition
    (477) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (485) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (486) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (512) trait_use_clause -> . USE trait_name_list trait_use_specification
    (526) visibility_modifier_opt -> . visibility_modifier
    (527) visibility_modifier_opt -> .
    (461) property_modifier -> . VAR
    (462) property_modifier -> . visibility_modifier static_modifieropt
    (463) property_modifier -> . static_modifier visibility_modifier_opt
    (478) method_modifiersopt -> . method_modifiers
    (479) method_modifiersopt -> .
    (480) method_modifiers -> . method_modifier
    (481) method_modifiers -> . method_modifiers method_modifier
    (466) visibility_modifier -> . PUBLIC
    (467) visibility_modifier -> . PROTECTED
    (468) visibility_modifier -> . PRIVATE
    (469) static_modifier -> . STATIC
    (482) method_modifier -> . visibility_modifier
    (483) method_modifier -> . static_modifier
    (484) method_modifier -> . class_modifier
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL

    RIGHT_PARENTHESIS reduce using rule 101 (class_member_declarations_opt -> .)
    USE             shift and go to state 426
    CONST           reduce using rule 527 (visibility_modifier_opt -> .)
    VAR             shift and go to state 422
    FUNCTION        reduce using rule 479 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 427
    PROTECTED       shift and go to state 428
    PRIVATE         shift and go to state 429
    STATIC          shift and go to state 430
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76

    class_member_declarations_opt  shift and go to state 935
    class_member_declarations      shift and go to state 830
    class_member_declaration       shift and go to state 754
    class_const_declaration        shift and go to state 755
    property_declaration           shift and go to state 756
    method_declaration             shift and go to state 757
    constructor_declaration        shift and go to state 758
    destructor_declaration         shift and go to state 759
    trait_use_clause               shift and go to state 760
    visibility_modifier_opt        shift and go to state 564
    property_modifier              shift and go to state 418
    method_modifiersopt            shift and go to state 419
    method_modifiers               shift and go to state 420
    visibility_modifier            shift and go to state 761
    static_modifier                shift and go to state 424
    method_modifier                shift and go to state 425
    class_modifier                 shift and go to state 431

state 914

    (485) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt . RIGHT_PARENTHESIS compound_statement

    RIGHT_PARENTHESIS shift and go to state 936


state 915

    (486) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS . compound_statement
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 937

state 916

    (523) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF . trait_name_list
    (513) trait_name_list -> . qualified_name
    (514) trait_name_list -> . trait_name_list qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    STRING          shift and go to state 51

    qualified_name                 shift and go to state 584
    name                           shift and go to state 175
    trait_name_list                shift and go to state 938

state 917

    (524) trait_alias_as_clause -> name AS visibility_modifier_opt name .

    SEMICOLON       reduce using rule 524 (trait_alias_as_clause -> name AS visibility_modifier_opt name .)


state 918

    (528) nameopt -> name .

    SEMICOLON       reduce using rule 528 (nameopt -> name .)


state 919

    (525) trait_alias_as_clause -> name AS visibility_modifier nameopt .

    SEMICOLON       reduce using rule 525 (trait_alias_as_clause -> name AS visibility_modifier nameopt .)


state 920

    (307) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 307 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)


state 921

    (302) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .

    LEFT_CBRAC      reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    SEMICOLON       reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    TRY             reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    DECLARE         reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ECHO            reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    UNSET           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CONST           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    INTERFACE       reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    TRAIT           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    NAMESPACE       reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    USE             reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    GLOBAL          reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    STATIC          reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    STRING          reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    IF              reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    SWITCH          reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    WHILE           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    DO              reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FOR             reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FOREACH         reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    GOTO            reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CONTINUE        reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    BREAK           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    RETURN          reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    THROW           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    INCLUDE         reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    REQUIRE         reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ABSTRACT        reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FINAL           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    PRINT           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    YIELD           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    YIELD_FROM      reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CLASS           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    $end            reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ELSE            reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDDECLARE      reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDFOR          reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CASE            reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    DEFAULT         reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDSWITCH       reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDFOREACH      reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDIF           reduce using rule 302 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)


state 922

    (311) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list

    DOUBLE_POINT    shift and go to state 939


state 923

    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 940


state 924

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 925

    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 941
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    expression                     shift and go to state 25
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 926

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 942


state 927

    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 928

    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 943


state 929

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 930

    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH . SEMICOLON

    SEMICOLON       shift and go to state 944


state 931

    (358) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .

    LEFT_CBRAC      reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SEMICOLON       reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRY             reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DECLARE         reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ECHO            reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    UNSET           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONST           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INTERFACE       reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRAIT           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    NAMESPACE       reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    USE             reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GLOBAL          reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STATIC          reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STRING          reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    IF              reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SWITCH          reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    WHILE           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DO              reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOR             reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOREACH         reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GOTO            reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONTINUE        reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    BREAK           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RETURN          reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    THROW           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FUNCTION        reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE         reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE         reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ABSTRACT        reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FINAL           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    PRINT           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD_FROM      reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CLASS           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    $end            reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSE            reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSEIF          reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDDECLARE      reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDWHILE        reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOR          reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CASE            reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DEFAULT         reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDSWITCH       reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOREACH      reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDIF           reduce using rule 358 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)


state 932

    (75) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .

    DOUBLEASTERISK  reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ASTERISK        reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    DIVIDE          reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    MODULO          reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    PLUS            reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    LESS            reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    CONCAT          reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SL              reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SR              reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    LESS_THAN       reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_SMALLER_OR_EQUAL reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_GREATER_OR_EQUAL reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    GREATER_THAN_OR_EQUAL reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SPACESHIP       reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    EQUAL           reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_NOT_EQUAL    reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_IDENTICAL    reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_NOT_IDENTICAL reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    AMPERSAND       reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    BITWISE_XOR     reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    BITWISE_OR      reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    COALESCE        reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    TERNARY_OPERATION reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    AND             reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    XOR             reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    OR              reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SEMICOLON       reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INCLUDE         reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INCLUDE_ONCE    reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    REQUIRE         reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    REQUIRE_ONCE    reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    PRINT           reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    YIELD           reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    YIELD_FROM      reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    COLON           reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    AS              reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ARROW           reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    STRING          reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    RIGHT_CBRAC     reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    VARIABLE        reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    DOUBLE_POINT    reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    DOUBLE_ARROW    reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ELLIPSIS        reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ARRAY           reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    CALLABLE        reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ITERABLE        reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    BOOL            reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    FLOAT           reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INT             reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INSTANCEOF      reduce using rule 75 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)


state 933

    (86) anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list . RIGHT_PARENTHESIS
    (88) use_variable_name_list -> use_variable_name_list . AMPERSAND_opt VARIABLE
    (78) AMPERSAND_opt -> . AMPERSAND
    (79) AMPERSAND_opt -> .

    RIGHT_PARENTHESIS shift and go to state 945
    AMPERSAND       shift and go to state 334
    VARIABLE        reduce using rule 79 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 946

state 934

    (87) use_variable_name_list -> AMPERSAND_opt . VARIABLE

    VARIABLE        shift and go to state 947


state 935

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 948


state 936

    (485) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS . compound_statement
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 23

    compound_statement             shift and go to state 949

state 937

    (486) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .

    VAR             reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    USE             reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    PUBLIC          reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    PROTECTED       reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    PRIVATE         reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    STATIC          reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    ABSTRACT        reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    FINAL           reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    FUNCTION        reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    RIGHT_CBRAC     reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    CONST           reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 486 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)


state 938

    (523) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list .
    (514) trait_name_list -> trait_name_list . qualified_name
    (545) qualified_name -> . name
    (555) name -> . STRING

    SEMICOLON       reduce using rule 523 (trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list .)
    STRING          shift and go to state 51

    qualified_name                 shift and go to state 679
    name                           shift and go to state 175

state 939

    (311) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list
    (291) statement_list -> . statement
    (292) statement_list -> . statement_list statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement_list                 shift and go to state 950
    statement                      shift and go to state 3
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 940

    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 941

    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 951


state 942

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 943

    (346) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 944

    (357) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .

    LEFT_CBRAC      reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SEMICOLON       reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRY             reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DECLARE         reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ECHO            reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    UNSET           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONST           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INTERFACE       reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRAIT           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    NAMESPACE       reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    USE             reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GLOBAL          reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STATIC          reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STRING          reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    IF              reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SWITCH          reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    WHILE           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DO              reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOR             reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOREACH         reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GOTO            reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONTINUE        reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    BREAK           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RETURN          reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    THROW           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FUNCTION        reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE         reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE         reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ABSTRACT        reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FINAL           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    PRINT           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD_FROM      reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CLASS           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    $end            reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSE            reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSEIF          reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDDECLARE      reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDWHILE        reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOR          reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CASE            reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DEFAULT         reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDSWITCH       reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOREACH      reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDIF           reduce using rule 357 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)


state 945

    (86) anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS .

    DOUBLE_POINT    reduce using rule 86 (anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 86 (anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS .)


state 946

    (88) use_variable_name_list -> use_variable_name_list AMPERSAND_opt . VARIABLE

    VARIABLE        shift and go to state 952


state 947

    (87) use_variable_name_list -> AMPERSAND_opt VARIABLE .

    RIGHT_PARENTHESIS reduce using rule 87 (use_variable_name_list -> AMPERSAND_opt VARIABLE .)
    AMPERSAND       reduce using rule 87 (use_variable_name_list -> AMPERSAND_opt VARIABLE .)
    VARIABLE        reduce using rule 87 (use_variable_name_list -> AMPERSAND_opt VARIABLE .)


state 948

    (92) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 92 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)


state 949

    (485) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .

    VAR             reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    USE             reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    PUBLIC          reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    PROTECTED       reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    PRIVATE         reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    STATIC          reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    ABSTRACT        reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    FINAL           reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    FUNCTION        reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    RIGHT_CBRAC     reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    CONST           reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 485 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)


state 950

    (311) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .
    (292) statement_list -> statement_list . statement
    (270) statement -> . compound_statement
    (271) statement -> . named_label_statement
    (272) statement -> . expression_statement
    (273) statement -> . selection_statement
    (274) statement -> . iteration_statement
    (275) statement -> . jump_statement
    (276) statement -> . try_statement
    (277) statement -> . declare_statement
    (278) statement -> . echo_statement
    (279) statement -> . unset_statement
    (280) statement -> . const_declaration
    (281) statement -> . function_definition
    (282) statement -> . class_declaration
    (283) statement -> . interface_declaration
    (284) statement -> . trait_declaration
    (285) statement -> . namespace_definition
    (286) statement -> . namespace_use_declaration
    (287) statement -> . global_declaration
    (288) statement -> . function_static_declaration
    (289) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (290) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (293) named_label_statement -> . name DOUBLE_POINT
    (294) expression_statement -> . expression SEMICOLON
    (295) expression_statement -> . SEMICOLON
    (296) selection_statement -> . if_statement
    (297) selection_statement -> . switch_statement
    (327) iteration_statement -> . while_statement
    (328) iteration_statement -> . do_statement
    (329) iteration_statement -> . for_statement
    (330) iteration_statement -> . foreach_statement
    (364) jump_statement -> . goto_statement
    (365) jump_statement -> . continue_statement
    (366) jump_statement -> . break_statement
    (367) jump_statement -> . return_statement
    (368) jump_statement -> . throw_statement
    (382) try_statement -> . TRY compound_statement catch_clauses
    (383) try_statement -> . TRY compound_statement finally_clause
    (384) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (391) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (392) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (393) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (397) echo_statement -> . ECHO expression_list SEMICOLON
    (400) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (401) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (455) const_declaration -> . CONST const_elements SEMICOLON
    (402) function_definition -> . function_definition_header compound_statement
    (433) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (489) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (500) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (530) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (531) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (534) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (535) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (536) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (17) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (9) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (555) name -> . STRING
    (260) expression -> . logical_inc_OR_expression_2
    (261) expression -> . include_expression
    (262) expression -> . include_once_expression
    (263) expression -> . require_expression
    (264) expression -> . require_once_expression
    (298) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (299) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (300) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (301) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (302) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (303) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (304) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (313) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (314) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (315) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (316) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (331) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (332) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (333) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (334) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (335) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (336) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (337) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (338) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (339) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (340) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (341) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (342) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (346) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (356) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (357) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (358) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) goto_statement -> . GOTO name SEMICOLON
    (370) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (371) continue_statement -> . CONTINUE SEMICOLON
    (374) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (378) return_statement -> . RETURN expressionopt SEMICOLON
    (381) throw_statement -> . THROW expression SEMICOLON
    (403) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (434) class_modifieropt -> . class_modifier
    (435) class_modifieropt -> .
    (258) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (259) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (265) include_expression -> . INCLUDE expression
    (266) include_once_expression -> . INCLUDE_ONCE expression
    (267) require_expression -> . REQUIRE expression
    (268) require_once_expression -> . REQUIRE_ONCE expression
    (442) class_modifier -> . ABSTRACT
    (443) class_modifier -> . FINAL
    (256) logical_exc_OR_expression -> . logical_AND_expression_2
    (257) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (254) logical_AND_expression_2 -> . print_expression
    (255) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (252) print_expression -> . yield_expression
    (253) print_expression -> . PRINT print_expression
    (248) yield_expression -> . yield_from_expression
    (249) yield_expression -> . YIELD
    (250) yield_expression -> . YIELD yield_expression
    (251) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (247) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDIF           reduce using rule 311 (elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .)
    ELSE            reduce using rule 311 (elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .)
    ELSEIF          reduce using rule 311 (elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .)
    LEFT_CBRAC      shift and go to state 23
    SEMICOLON       shift and go to state 26
    TRY             shift and go to state 38
    DECLARE         shift and go to state 39
    ECHO            shift and go to state 40
    UNSET           shift and go to state 41
    CONST           shift and go to state 42
    INTERFACE       shift and go to state 45
    TRAIT           shift and go to state 46
    NAMESPACE       shift and go to state 47
    USE             shift and go to state 48
    GLOBAL          shift and go to state 49
    STATIC          shift and go to state 50
    STRING          shift and go to state 51
    IF              shift and go to state 57
    SWITCH          shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    FOR             shift and go to state 61
    FOREACH         shift and go to state 62
    GOTO            shift and go to state 63
    CONTINUE        shift and go to state 64
    BREAK           shift and go to state 65
    RETURN          shift and go to state 66
    THROW           shift and go to state 67
    FUNCTION        shift and go to state 68
    CLASS           reduce using rule 435 (class_modifieropt -> .)
    INCLUDE         shift and go to state 71
    INCLUDE_ONCE    shift and go to state 72
    REQUIRE         shift and go to state 73
    REQUIRE_ONCE    shift and go to state 74
    ABSTRACT        shift and go to state 75
    FINAL           shift and go to state 76
    PRINT           shift and go to state 80
    YIELD           shift and go to state 82
    YIELD_FROM      shift and go to state 83

    expression                     shift and go to state 25
    statement                      shift and go to state 84
    compound_statement             shift and go to state 4
    named_label_statement          shift and go to state 5
    expression_statement           shift and go to state 6
    selection_statement            shift and go to state 7
    iteration_statement            shift and go to state 8
    jump_statement                 shift and go to state 9
    try_statement                  shift and go to state 10
    declare_statement              shift and go to state 11
    echo_statement                 shift and go to state 12
    unset_statement                shift and go to state 13
    const_declaration              shift and go to state 14
    function_definition            shift and go to state 15
    class_declaration              shift and go to state 16
    interface_declaration          shift and go to state 17
    trait_declaration              shift and go to state 18
    namespace_definition           shift and go to state 19
    namespace_use_declaration      shift and go to state 20
    global_declaration             shift and go to state 21
    function_static_declaration    shift and go to state 22
    name                           shift and go to state 24
    if_statement                   shift and go to state 27
    switch_statement               shift and go to state 28
    while_statement                shift and go to state 29
    do_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    foreach_statement              shift and go to state 32
    goto_statement                 shift and go to state 33
    continue_statement             shift and go to state 34
    break_statement                shift and go to state 35
    return_statement               shift and go to state 36
    throw_statement                shift and go to state 37
    function_definition_header     shift and go to state 43
    class_modifieropt              shift and go to state 44
    logical_inc_OR_expression_2    shift and go to state 52
    include_expression             shift and go to state 53
    include_once_expression        shift and go to state 54
    require_expression             shift and go to state 55
    require_once_expression        shift and go to state 56
    class_modifier                 shift and go to state 69
    logical_exc_OR_expression      shift and go to state 70
    logical_AND_expression_2       shift and go to state 77
    print_expression               shift and go to state 78
    yield_expression               shift and go to state 79
    yield_from_expression          shift and go to state 81

state 951

    (342) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 342 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 952

    (88) use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .

    RIGHT_PARENTHESIS reduce using rule 88 (use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .)
    AMPERSAND       reduce using rule 88 (use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .)
    VARIABLE        reduce using rule 88 (use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for YIELD in state 82 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 82 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_ARROW in state 145 resolved as shift
WARNING: shift/reduce conflict for TERNARY_OPERATION in state 147 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 151 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 159 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 167 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 168 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 168 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 168 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 168 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 168 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 168 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 168 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 181 resolved as shift
WARNING: shift/reduce conflict for COLON in state 331 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 339 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 339 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 339 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 339 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 339 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 339 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 339 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 360 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 377 resolved as shift
WARNING: shift/reduce conflict for USE in state 417 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 420 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 423 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 424 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 424 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 424 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 451 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 451 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 451 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 451 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 451 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 451 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 451 resolved as shift
WARNING: shift/reduce conflict for LEFT_PARENTHESIS in state 479 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 487 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 487 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 487 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 487 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 487 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 487 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 487 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 492 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 498 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 499 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 542 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 565 resolved as shift
WARNING: shift/reduce conflict for STRING in state 576 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 589 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 589 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 607 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 607 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 607 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 607 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 607 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 607 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 607 resolved as shift
WARNING: shift/reduce conflict for TERNARY_OPERATION in state 611 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 622 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 628 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 687 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 687 resolved as shift
WARNING: shift/reduce conflict for COLON in state 733 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 737 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 740 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 761 resolved as shift
WARNING: shift/reduce conflict for STRING in state 890 resolved as shift
WARNING: reduce/reduce conflict in state 151 resolved using rule (primary_expression -> variable)
WARNING: rejected rule (dereferencable_expression -> variable) in state 151
WARNING: reduce/reduce conflict in state 154 resolved using rule (callable_expression -> callable_variable)
WARNING: rejected rule (variable -> callable_variable) in state 154
WARNING: reduce/reduce conflict in state 172 resolved using rule (primary_expression -> array_creation_expression)
WARNING: rejected rule (dereferencable_expression -> array_creation_expression) in state 172
WARNING: reduce/reduce conflict in state 173 resolved using rule (dereferencable_expression -> string_literal)
WARNING: rejected rule (literal -> string_literal) in state 173
WARNING: reduce/reduce conflict in state 180 resolved using rule (string_literal -> STRING)
WARNING: rejected rule (name -> STRING) in state 180
WARNING: reduce/reduce conflict in state 248 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (variable_list -> variable) in state 248
WARNING: reduce/reduce conflict in state 360 resolved using rule (primary_expression -> variable)
WARNING: rejected rule (dereferencable_expression -> variable) in state 360
WARNING: reduce/reduce conflict in state 361 resolved using rule (primary_expression -> array_creation_expression)
WARNING: rejected rule (dereferencable_expression -> array_creation_expression) in state 361
WARNING: reduce/reduce conflict in state 364 resolved using rule (dereferencable_expression -> string_literal)
WARNING: rejected rule (literal -> string_literal) in state 364
WARNING: reduce/reduce conflict in state 380 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (prefix_increment_expression -> DOUBLEPLUS variable) in state 380
WARNING: reduce/reduce conflict in state 381 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (prefix_decrement_expression -> DOUBLELESS variable) in state 381
WARNING: reduce/reduce conflict in state 400 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (variable_list -> variable_list variable) in state 400
WARNING: reduce/reduce conflict in state 441 resolved using rule (function_static_initializer -> EQUAL constant_expression)
WARNING: rejected rule (function_static_initializer_opt -> EQUAL constant_expression) in state 441
WARNING: reduce/reduce conflict in state 472 resolved using rule (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS)
WARNING: rejected rule (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS) in state 472
WARNING: reduce/reduce conflict in state 475 resolved using rule (member_name -> simple_variable)
WARNING: rejected rule (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable) in state 475
WARNING: reduce/reduce conflict in state 546 resolved using rule (expression_statement -> SEMICOLON)
WARNING: rejected rule (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON) in state 546
WARNING: reduce/reduce conflict in state 611 resolved using rule (parameter_declaration_list -> simple_parameter_declaration_list)
WARNING: rejected rule (type_declarationopt -> <empty>) in state 611
WARNING: reduce/reduce conflict in state 611 resolved using rule (parameter_declaration_list -> simple_parameter_declaration_list)
WARNING: rejected rule (TERNARY_OPERATIONopt -> <empty>) in state 611
WARNING: reduce/reduce conflict in state 621 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (byref_assignment_expression -> variable EQUAL AMPERSAND variable) in state 621
WARNING: reduce/reduce conflict in state 643 resolved using rule (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS)
WARNING: rejected rule (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS) in state 643
WARNING: reduce/reduce conflict in state 731 resolved using rule (scalar_type -> STRING)
WARNING: rejected rule (name -> STRING) in state 731
WARNING: Rule (function_static_initializer_opt -> EQUAL constant_expression) is never reduced
WARNING: Rule (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON) is never reduced
