Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASTERISK
    ATTRIBUTE
    BAD_CARACTER
    BITWISE_NOT
    BOOLEAN_AND
    BOOLEAN_OR
    CALLABLE
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DNUMBER
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    INSTANCEOF
    IS_EQUAL
    LEFT_SQRBRAC
    LNUMBER
    MORE_THAN
    NEGATION
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    WHITESPACE
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> script
Rule 1     script -> script_section
Rule 2     script -> script script_section
Rule 3     script_section -> text_opt start_tag statement_list_opt end_tago_opt text_opt
Rule 4     text_opt -> text
Rule 5     text_opt -> <empty>
Rule 6     end_tago_opt -> end_tago
Rule 7     end_tago_opt -> <empty>
Rule 8     statement_list_opt -> statement_list
Rule 9     statement_list_opt -> <empty>
Rule 10    start_tag -> OPEN_TAG
Rule 11    start_tag -> OPEN_TAG_WITH_ECHO
Rule 12    end_tag -> CLOSE_TAG
Rule 13    end_tag -> <empty>
Rule 14    text -> ARBITRARY_TEXT
Rule 15    function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 16    static_variable_name_list -> static_variable_declaration
Rule 17    static_variable_name_list -> static_variable_name_list COMMA static_variable_declaration
Rule 18    static_variable_declaration -> variable_name function_static_initializer_opt
Rule 19    function_static_initializer_opt -> function_static_initializer
Rule 20    function_static_initializer_opt -> <empty>
Rule 21    function_static_initializer_opt -> EQUAL constant_expression
Rule 22    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 23    variable_name_list -> simple_variable
Rule 24    variable_name_list -> variable_name_list COMMA simple_variable
Rule 25    primary_expression -> variable
Rule 26    primary_expression -> class_constant_access_expression
Rule 27    primary_expression -> constant_access_expression
Rule 28    primary_expression -> literal
Rule 29    primary_expression -> array_creation_expression
Rule 30    primary_expression -> intrinsic
Rule 31    primary_expression -> anonymous_function_creation_expression
Rule 32    primary_expression -> object_creation_expression
Rule 33    primary_expression -> postfix_increment_expression
Rule 34    primary_expression -> postfix_decrement_expression
Rule 35    primary_expression -> prefix_increment_expression
Rule 36    primary_expression -> prefix_decrement_expression
Rule 37    primary_expression -> byref_assignment_expression
Rule 38    primary_expression -> shell_command_expression
Rule 39    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 40    simple_variable -> variable_name
Rule 41    simple_variable -> DOLLAR simple_variable
Rule 42    simple_variable -> DOLLAR LBRACE expression RIGHT_PARENTHESIS
Rule 43    dereferencable_expression -> variable
Rule 44    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 45    dereferencable_expression -> array_creation_expression
Rule 46    dereferencable_expression -> string_literal
Rule 47    callable_expression -> callable_variable
Rule 48    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 49    callable_expression -> array_creation_expression
Rule 50    callable_expression -> string_literal
Rule 51    callable_variable -> simple_variable
Rule 52    callable_variable -> subscript_expression
Rule 53    callable_variable -> member_call_expression
Rule 54    callable_variable -> scoped_call_expression
Rule 55    callable_variable -> function_call_expression
Rule 56    variable -> callable_variable
Rule 57    variable -> scoped_property_access_expression
Rule 58    variable -> member_access_expression
Rule 59    constant_access_expression -> qualified_name
Rule 60    literal -> integer_literal
Rule 61    literal -> floating_literal
Rule 62    literal -> string_literal
Rule 63    intrinsic -> empty_intrinsic
Rule 64    intrinsic -> eval_intrinsic
Rule 65    intrinsic -> exit_intrinsic
Rule 66    intrinsic -> isset_intrinsic
Rule 67    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 68    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 69    exit_intrinsic -> EXIT
Rule 70    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 71    exit_intrinsic -> DIE
Rule 72    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 73    intrinsic -> ISSET LEFT_PARENTHESIS variable_list COMMA_opt RIGHT_PARENTHESIS
Rule 74    COMMA_opt -> COMMA
Rule 75    COMMA_opt -> <empty>
Rule 76    variable_list -> variable
Rule 77    variable_list -> variable_list COMMA variable
Rule 78    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 79    static_opt -> static
Rule 80    static_opt -> <empty>
Rule 81    AMPERSAND_opt -> AMPERSAND
Rule 82    AMPERSAND_opt -> <empty>
Rule 83    parameter_declaration_list_opt -> parameter_declaration_list
Rule 84    parameter_declaration_list_opt -> <empty>
Rule 85    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 86    anonymous_function_use_clause_opt -> <empty>
Rule 87    return_type_opt -> return_type
Rule 88    return_type_opt -> <empty>
Rule 89    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 90    use_variable_name_list -> AMPERSAND_opt variable_name
Rule 91    use_variable_name_list -> use_variable_name_list COMMA AMPERSAND_opt variable_name
Rule 92    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 93    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COMMA_opt RIGHT_PARENTHESIS
Rule 94    object_creation_expression -> NEW class_type_designator
Rule 95    object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 96    object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 97    argument_expression_list_opt -> argument_expression_list
Rule 98    argument_expression_list_opt -> <empty>
Rule 99    class_base_clause_opt -> class_base_clause
Rule 100   class_base_clause_opt -> <empty>
Rule 101   class_interface_clause_opt -> class_interface_clause
Rule 102   class_interface_clause_opt -> <empty>
Rule 103   class_member_declarations_opt -> class_member_declarations
Rule 104   class_member_declarations_opt -> <empty>
Rule 105   class_type_designator -> qualified_name
Rule 106   class_type_designator -> new_variable
Rule 107   new_variable -> simple_variable
Rule 108   new_variable -> new_variable LBRACKET expression_opt RBRACKET
Rule 109   new_variable -> new_variable LBRACE expression RBRACE
Rule 110   new_variable -> new_variable ARROW member_name
Rule 111   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 112   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 113   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 114   expression_opt -> expression
Rule 115   expression_opt -> <empty>
Rule 116   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 117   array_creation_expression -> LBRACKET array_initializer_opt RBRACKET
Rule 118   array_initializer_opt -> array_initializer
Rule 119   array_initializer_opt -> <empty>
Rule 120   array_initializer -> array_initializer_list COMMA_opt
Rule 121   array_initializer_list -> array_element_initializer COMMA_opt
Rule 122   array_element_initializer -> AMPERSAND_opt element_value
Rule 123   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 124   element_key -> expression
Rule 125   element_value -> expression
Rule 126   subscript_expression -> dereferencable_expression LBRACKET expression_opt RBRACKET
Rule 127   subscript_expression -> dereferencable_expression LBRACE expression RBRACE
Rule 128   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 129   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 130   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 131   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 132   argument_expression_list -> argument_expression
Rule 133   argument_expression_list -> argument_expression_list COMMA argument_expression
Rule 134   argument_expression -> variadic_unpacking
Rule 135   argument_expression -> expression
Rule 136   variadic_unpacking -> ELLIPSIS expression
Rule 137   member_access_expression -> dereferencable_expression ARROW member_name
Rule 138   member_name -> NAME
Rule 139   member_name -> simple_variable
Rule 140   member_name -> LBRACE expression RBRACE
Rule 141   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 142   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 143   postfix_increment_expression -> variable INCREMENT
Rule 144   postfix_decrement_expression -> variable DECREMENT
Rule 145   prefix_increment_expression -> INCREMENT variable
Rule 146   prefix_decrement_expression -> DECREMENT variable
Rule 147   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 148   dq_char_sequence_opt -> dq_char_sequence
Rule 149   dq_char_sequence_opt -> <empty>
Rule 150   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 151   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 152   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 153   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 154   scope_resolution_qualifier -> relative_scope
Rule 155   scope_resolution_qualifier -> qualified_name
Rule 156   scope_resolution_qualifier -> dereferencable_expression
Rule 157   relative_scope -> SELF
Rule 158   relative_scope -> PARENT
Rule 159   relative_scope -> STATIC
Rule 160   clone_expression -> primary_expression
Rule 161   clone_expression -> CLONE primary_expression
Rule 162   exponentiation_expression -> clone_expression
Rule 163   exponentiation_expression -> clone_expression EXPONENTIATION exponentiation_expression
Rule 164   unary_expression -> exponentiation_expression
Rule 165   unary_expression -> unary_op_expression
Rule 166   unary_expression -> error_control_expression
Rule 167   unary_expression -> cast_expression
Rule 168   unary_op_expression -> unary_operator unary_expression
Rule 169   unary_operator -> PLUS
Rule 170   unary_operator -> MINUS
Rule 171   unary_operator -> TILDE
Rule 172   error_control_expression -> AT unary_expression
Rule 173   cast_expression -> LEFT_PARENTHESIS cast_type RIGHT_PARENTHESIS unary_expression
Rule 174   cast_type -> ARRAY
Rule 175   cast_type -> BINARY
Rule 176   cast_type -> BOOL
Rule 177   cast_type -> BOOLEAN
Rule 178   cast_type -> DOUBLE
Rule 179   cast_type -> INT
Rule 180   cast_type -> INTEGER
Rule 181   cast_type -> FLOAT
Rule 182   cast_type -> OBJECT
Rule 183   cast_type -> REAL
Rule 184   cast_type -> STRING
Rule 185   cast_type -> UNSET
Rule 186   instanceof_expression -> unary_expression
Rule 187   instanceof_expression -> instanceof_subj instanceof class_type_designator
Rule 188   instanceof_subj -> instanceof_expression
Rule 189   logical_not_expression -> instanceof_expression
Rule 190   logical_not_expression -> NOT instanceof_expression
Rule 191   multiplicative_expression -> logical_not_expression
Rule 192   multiplicative_expression -> multiplicative_expression TIMES logical_not_expression
Rule 193   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 194   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 195   additive-expression -> multiplicative-expression
Rule 196   additive-expression -> additive-expression PLUS multiplicative-expression
Rule 197   additive-expression -> additive-expression LESS multiplicative-expression
Rule 198   additive-expression -> additive-expression CONCAT multiplicative-expression
Rule 199   shift-expression -> additive-expression
Rule 200   shift-expression -> shift-expression SL additive-expression
Rule 201   shift-expression -> shift-expression SR additive-expression
Rule 202   relational-expression -> shift-expression
Rule 203   relational-expression -> relational-expression LESS_THAN shift-expression
Rule 204   relational-expression -> relational-expression IS_SMALLER_OR_EQUAL shift-expression
Rule 205   relational-expression -> relational-expression IS_GREATER_OR_EQUAL shift-expression
Rule 206   relational-expression -> relational-expression GREATER_THAN_OR_EQUAL shift-expression
Rule 207   relational-expression -> relational-expression SPACESHIP shift-expression
Rule 208   equality-expression -> relational-expression
Rule 209   equality-expression -> equality-expression EQUAL relational-expression
Rule 210   equality-expression -> equality-expression IS_NOT_EQUAL relational-expression
Rule 211   equality-expression -> equality-expression IS_IDENTICAL relational-expression
Rule 212   equality-expression -> equality-expression IS_NOT_IDENTICAL relational-expression
Rule 213   bitwise-AND-expression -> equality-expression
Rule 214   bitwise-AND-expression -> bitwise-AND-expression AMPERSAND equality-expression
Rule 215   bitwise-exc-OR-expression -> bitwise-AND-expression
Rule 216   bitwise-exc-OR-expression -> bitwise-exc-OR-expression BITWISE_XOR bitwise-AND-expression
Rule 217   bitwise-inc-OR-expression -> bitwise-exc-OR-expression
Rule 218   bitwise-inc-OR-expression -> bitwise-inc-OR-expression BITWISE_OR bitwise-exc-OR-expression
Rule 219   logical-AND-expression-1 -> bitwise-inc-OR-expression
Rule 220   logical-AND-expression-1 -> logical-AND-expression-1 AMPERSAND AMPERSAND bitwise-inc-OR-expression
Rule 221   logical-inc-OR-expression-1 -> logical-AND-expression-1
Rule 222   logical-inc-OR-expression-1 -> logical-inc-OR-expression-1 BITWISE_OR BITWISE_OR logical-AND-expression-1
Rule 223   coalesce-expression -> logical-inc-OR-expression-1
Rule 224   coalesce-expression -> logical-inc-OR-expression-1 COALESCE coalesce-expression
Rule 225   conditional-expression -> coalesce-expression
Rule 226   conditional-expression -> conditional-expression TERNARY_OPERATION expression DOUBLE_POINT coalesce-expression
Rule 227   conditional-expression -> conditional-expression TERNARY_OPERATION DOUBLE_POINT coalesce-expression
Rule 228   assignment-expression -> conditional-expression
Rule 229   assignment-expression -> simple-assignment-expression
Rule 230   assignment-expression -> compound-assignment-expression
Rule 231   simple-assignment-expression -> variable EQUAL assignment-expression
Rule 232   simple-assignment-expression -> list-intrinsic EQUAL assignment-expression
Rule 233   list-intrinsic -> LIST LEFT_PARENTHESIS list-expression-list RIGHT_PARENTHESIS
Rule 234   list-expression-list -> unkeyed-list-expression-list
Rule 235   list-expression-list -> keyed-list-expression-list COLON
Rule 236   list-expression-list -> keyed-list-expression-list
Rule 237   unkeyed-list-expression-list -> list-or-variable
Rule 238   unkeyed-list-expression-list -> COLON
Rule 239   unkeyed-list-expression-list -> unkeyed-list-expression-list COLON list-or-variable COLON
Rule 240   unkeyed-list-expression-list -> unkeyed-list-expression-list COLON list-or-variable
Rule 241   keyed-list-expression-list -> expression DOUBLE_ARROW list-or-variable
Rule 242   keyed-list-expression-list -> keyed-list-expression-list COLON expression DOUBLE_ARROW list-or-variable
Rule 243   list-or-variable -> list-intrinsic
Rule 244   list-or-variable -> AMPERSAND variable
Rule 245   list-or-variable -> variable
Rule 246   byref-assignment-expression -> variable EQUAL AMPERSAND variable
Rule 247   compound-assignment-expression -> variable compound-assignment-operator assignment-expression
Rule 248   compound-assignment-operator -> POW_EQUAL
Rule 249   compound-assignment-operator -> MUL_EQUAL
Rule 250   compound-assignment-operator -> DIV_EQUAL
Rule 251   compound-assignment-operator -> MOD_EQUAL
Rule 252   compound-assignment-operator -> PLUS_EQUAL
Rule 253   compound-assignment-operator -> MINUS_EQUAL
Rule 254   compound-assignment-operator -> CONCAT_EQUAL
Rule 255   compound-assignment-operator -> SL_EQUAL
Rule 256   compound-assignment-operator -> SR_EQUAL
Rule 257   compound-assignment-operator -> AND_EQUAL
Rule 258   compound-assignment-operator -> XOR_EQUAL
Rule 259   compound-assignment-operator -> OR_EQUAL
Rule 260   yield-from-expression -> YIELD_FROM assignment-expression
Rule 261   yield-expression -> yield-from-expression
Rule 262   yield-expression -> YIELD
Rule 263   yield-expression -> YIELD yield-expression
Rule 264   yield-expression -> YIELD yield-from-expression DOUBLE_ARROW yield-expression
Rule 265   print-expression -> yield-expression
Rule 266   print-expression -> PRINT print-expression
Rule 267   logical-AND-expression-2 -> print-expression
Rule 268   logical-AND-expression-2 -> logical-AND-expression-2 AND yield-expression
Rule 269   logical-exc-OR-expression -> logical-AND-expression-2
Rule 270   logical-exc-OR-expression -> logical-exc-OR-expression XOR logical-AND-expression-2
Rule 271   logical-inc-OR-expression-2 -> logical-exc-OR-expression
Rule 272   logical-inc-OR-expression-2 -> logical-inc-OR-expression-2 OR logical-exc-OR-expression
Rule 273   expression -> logical-inc-OR-expression-2
Rule 274   expression -> include-expression
Rule 275   expression -> include-once-expression
Rule 276   expression -> require-expression
Rule 277   expression -> require-once-expression
Rule 278   include-expression -> INCLUDE expression
Rule 279   include-once-expression -> INCLUDE_ONCE expression
Rule 280   require-expression -> REQUIRE expression
Rule 281   require-once-expression -> REQUIRE_ONCE expression
Rule 282   constant-expression -> expression
Rule 283   statement -> compound-statement
Rule 284   statement -> named-label-statement
Rule 285   statement -> expression-statement
Rule 286   statement -> selection-statement
Rule 287   statement -> iteration-statement
Rule 288   statement -> jump-statement
Rule 289   statement -> try-statement
Rule 290   statement -> declare-statement
Rule 291   statement -> echo-statement
Rule 292   statement -> unset-statement
Rule 293   statement -> const-declaration
Rule 294   statement -> function-definition
Rule 295   statement -> class-declaration
Rule 296   statement -> interface-declaration
Rule 297   statement -> trait-declaration
Rule 298   statement -> namespace-definition
Rule 299   statement -> namespace-use-declaration
Rule 300   statement -> global-declaration
Rule 301   statement -> function-static-declaration
Rule 302   compound-statement -> LEFT_CBRAC statement-list RIGHT_CBRAC
Rule 303   compound-statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 304   statement-list -> statement
Rule 305   statement-list -> statement-list statement
Rule 306   named-label-statement -> name DOUBLE_POINT
Rule 307   expression-statement -> expression SEMICOLON
Rule 308   expression-statement -> SEMICOLON
Rule 309   selection-statement -> if-statement
Rule 310   selection-statement -> switch-statement
Rule 311   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif-clauses-1 else-clause-1
Rule 312   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif-clauses-1
Rule 313   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else-clause-1
Rule 314   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 315   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list elseif-clauses-2 else-clause-2 ENDIF SEMICOLON
Rule 316   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list elseif-clauses-2 ENDIF SEMICOLON
Rule 317   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list else-clause-2 ENDIF SEMICOLON
Rule 318   elseif-clauses-1 -> elseif-clause-1
Rule 319   elseif-clauses-1 -> elseif-clauses-1 elseif-clause-1
Rule 320   elseif-clause-1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 321   else-clause-1 -> ELSE statement
Rule 322   elseif-clauses-2 -> elseif-clause-2
Rule 323   elseif-clauses-2 -> elseif-clauses-2 elseif-clause-2
Rule 324   elseif-clause-2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list
Rule 325   else-clause-2 -> ELSE DOUBLE_POINT statement-list
Rule 326   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case-statements RIGHT_CBRAC
Rule 327   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 328   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case-statements ENDSWITCH SEMICOLON
Rule 329   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 330   case-statements -> case-statement case-statements
Rule 331   case-statements -> case-statement
Rule 332   case-statements -> default-statement case-statements
Rule 333   case-statements -> default-statement
Rule 334   case-statement -> CASE expression case-default-label-terminator statement-list
Rule 335   case-statement -> CASE expression case-default-label-terminator
Rule 336   default-statement -> DEFAULT case-default-label-terminator statement-list
Rule 337   default-statement -> DEFAULT case-default-label-terminator
Rule 338   case-default-label-terminator -> DOUBLE_POINT
Rule 339   case-default-label-terminator -> SEMICOLON
Rule 340   iteration-statement -> while-statement
Rule 341   iteration-statement -> do-statement
Rule 342   iteration-statement -> for-statement
Rule 343   iteration-statement -> foreach-statement
Rule 344   while-statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 345   while-statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDWHILE SEMICOLON
Rule 346   do-statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 347   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 348   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS statement
Rule 349   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 350   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 351   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 352   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS statement
Rule 353   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 354   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 355   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 356   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 357   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 358   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 359   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 360   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 361   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 362   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 363   for-initializer -> for-expression-group
Rule 364   for-control -> for-expression-group
Rule 365   for-end-of-loop -> for-expression-group
Rule 366   for-expression-group -> expression
Rule 367   for-expression-group -> for-expression-group COLON expression
Rule 368   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-key foreach-value RIGHT_PARENTHESIS statement
Rule 369   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-value RIGHT_PARENTHESIS statement
Rule 370   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-key foreach-value RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOREACH SEMICOLON
Rule 371   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-value RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOREACH SEMICOLON
Rule 372   foreach-collection-name -> expression
Rule 373   foreach-key -> expression DOUBLE_ARROW
Rule 374   foreach-value -> foreach-value_expression
Rule 375   foreach-value -> AMPERSAND expression
Rule 376   foreach-value -> list-intrinsic
Rule 377   jump-statement -> goto-statement
Rule 378   jump-statement -> continue-statement
Rule 379   jump-statement -> break-statement
Rule 380   jump-statement -> return-statement
Rule 381   jump-statement -> throw-statement
Rule 382   goto-statement -> GOTO name SEMICOLON
Rule 383   continue-statement -> CONTINUE breakout-level SEMICOLON
Rule 384   continue-statement -> CONTINUE SEMICOLON
Rule 385   breakout-level -> INTEGER_LITERAL
Rule 386   breakout-level -> LEFT_PARENTHESIS breakout-level RIGHT_PARENTHESIS
Rule 387   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 388   breakout_levelopt -> breakout_level
Rule 389   breakout_levelopt -> <empty>
Rule 390   breakout_level -> expression
Rule 391   return_statement -> RETURN expressionopt SEMICOLON
Rule 392   expressionopt -> expression
Rule 393   expressionopt -> <empty>
Rule 394   throw_statement -> THROW expression SEMICOLON
Rule 395   try_statement -> TRY compound_statement catch_clauses
Rule 396   try_statement -> TRY compound_statement finally_clause
Rule 397   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 398   catch_clauses -> catch_clause
Rule 399   catch_clauses -> catch_clauses catch_clause
Rule 400   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 401   catch_name_list -> qualified_name
Rule 402   catch_name_list -> catch_name_list
Rule 403   finally_clause -> FINALLY compound_statement
Rule 404   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 405   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 406   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 407   declare_directive -> TICKS EQUALS literal
Rule 408   declare_directive -> ENCODING EQUALS literal
Rule 409   declare_directive -> STRICT_TYPES EQUALS literal
Rule 410   echo_statement -> ECHO expression_list SEMICOLON
Rule 411   expression_list -> expression
Rule 412   expression_list -> expression_list COMMA expression
Rule 413   unset_statement -> UNSET LEFT_PARENTHESIS variable_list commaopt RIGHT_PARENTHESIS SEMICOLON
Rule 414   commaopt -> COMMA
Rule 415   commaopt -> <empty>
Rule 416   function_definition -> function_definition_header compound_statement
Rule 417   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_typeopt
Rule 418   ampersandopt -> AMPERSAND
Rule 419   ampersandopt -> <empty>
Rule 420   parameter_declaration_list -> simple_parameter_declaration_list
Rule 421   parameter_declaration_list -> variadic_declaration_list
Rule 422   simple_parameter_declaration_list -> parameter_declaration
Rule 423   simple_parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration
Rule 424   variadic_declaration_list -> simple_parameter_declaration_list COMMA variadic_parameter
Rule 425   variadic_declaration_list -> variadic_parameter
Rule 426   parameter_declaration -> type_declarationopt ampersandopt variable_name default_argument_specifieropt
Rule 427   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS variable_name
Rule 428   return_type -> DOUBLE_POINT type_declaration
Rule 429   return_type -> DOUBLE_POINT VOID
Rule 430   type_declarationopt -> type_declaration
Rule 431   type_declarationopt -> <empty>
Rule 432   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 433   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 434   TERNARY_OPERATIONopt -> <empty>
Rule 435   base_type_declaration -> array
Rule 436   base_type_declaration -> callable
Rule 437   base_type_declaration -> iterable
Rule 438   base_type_declaration -> scalar_type
Rule 439   base_type_declaration -> qualified_name
Rule 440   scalar_type -> BOOL
Rule 441   scalar_type -> FLOAT
Rule 442   scalar_type -> INT
Rule 443   scalar_type -> STRING
Rule 444   default_argument_specifieropt -> default_argument_specifier
Rule 445   default_argument_specifieropt -> <empty>
Rule 446   default_argument_specifier -> EQUAL constant_expression
Rule 447   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 448   class_modifieropt -> class_modifier
Rule 449   class_modifieropt -> <empty>
Rule 450   class_base_clauseopt -> class_base_clause
Rule 451   class_base_clauseopt -> <empty>
Rule 452   class_interface_clauseopt -> class_interface_clause
Rule 453   class_interface_clauseopt -> <empty>
Rule 454   class_member_declarationsopt -> class_member_declarations
Rule 455   class_member_declarationsopt -> <empty>
Rule 456   class_modifier -> ABSTRACT
Rule 457   class_modifier -> FINAL
Rule 458   class_base_clause -> EXTENDS qualified_name
Rule 459   class_interface_clause -> IMPLEMENTS qualified_name
Rule 460   class_interface_clause -> class_interface_clause COMMA qualified_name
Rule 461   class_member_declarations -> class_member_declaration
Rule 462   class_member_declarations -> class_member_declarations class_member_declaration
Rule 463   class_member_declaration -> class_const_declaration
Rule 464   class_member_declaration -> property_declaration
Rule 465   class_member_declaration -> method_declaration
Rule 466   class_member_declaration -> constructor_declaration
Rule 467   class_member_declaration -> destructor_declaration
Rule 468   class_member_declaration -> trait_use_clause
Rule 469   const_declaration -> CONST const_elements SEMICOLON
Rule 470   class_const_declaration -> visibility_modifieropt CONST const_elements SEMICOLON
Rule 471   visibility_modifieropt -> visibility_modifier
Rule 472   visibility_modifieropt -> <empty>
Rule 473   const_elements -> const_element
Rule 474   const_elements -> const_elements COMMA const_element
Rule 475   const_element -> name EQUAL constant_expression
Rule 476   property_declaration -> property_modifier property_elements SEMICOLON
Rule 477   property_modifier -> VAR
Rule 478   property_modifier -> visibility_modifier static_modifieropt
Rule 479   property_modifier -> static_modifier visibility_modifieropt
Rule 480   static_modifieropt -> static_modifier
Rule 481   static_modifieropt -> <empty>
Rule 482   visibility_modifier -> PUBLIC
Rule 483   visibility_modifier -> PROTECTED
Rule 484   visibility_modifier -> PRIVATE
Rule 485   static_modifier -> STATIC
Rule 486   property_elements -> property_element
Rule 487   property_elements -> property_elements property_element
Rule 488   property_element -> variable_name property_initializeropt SEMICOLON
Rule 489   property_initializeropt -> property_initializer
Rule 490   property_initializeropt -> <empty>
Rule 491   property_initializer -> EQUAL constant_expression
Rule 492   method_declaration -> method_modifiersopt function_definition
Rule 493   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 494   method_modifiersopt -> method_modifiers
Rule 495   method_modifiersopt -> <empty>
Rule 496   method_modifiers -> method_modifier
Rule 497   method_modifiers -> method_modifiers method_modifier
Rule 498   method_modifier -> visibility_modifier
Rule 499   method_modifier -> static_modifier
Rule 500   method_modifier -> class_modifier
Rule 501   constructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __construct LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 502   destructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __destruct LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 503   parameter_declaration_listopt -> parameter_declaration_list
Rule 504   parameter_declaration_listopt -> <empty>
Rule 505   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 506   interface_base_clauseopt -> interface_base_clause
Rule 507   interface_base_clauseopt -> <empty>
Rule 508   interface_member_declarationsopt -> interface_member_declarations
Rule 509   interface_member_declarationsopt -> <empty>
Rule 510   interface_base_clause -> EXTENDS qualified_name
Rule 511   interface_base_clause -> interface_base_clause COMMA qualified_name
Rule 512   interface_member_declarations -> interface_member_declaration
Rule 513   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 514   interface_member_declaration -> class_const_declaration
Rule 515   interface_member_declaration -> method_declaration
Rule 516   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 517   trait_member_declarationsopt -> trait_member_declarations
Rule 518   trait_member_declarationsopt -> <empty>
Rule 519   trait_member_declarations -> trait_member_declaration
Rule 520   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 521   trait_member_declaration -> property_declaration
Rule 522   trait_member_declaration -> method_declaration
Rule 523   trait_member_declaration -> constructor_declaration
Rule 524   trait_member_declaration -> destructor_declaration
Rule 525   trait_member_declaration -> trait_use_clauses
Rule 526   trait_use_clauses -> trait_use_clause
Rule 527   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 528   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 529   trait_name_list -> qualified_name
Rule 530   trait_name_list -> trait_name_list COMMA qualified_name
Rule 531   trait_use_specification -> SEMICOLON
Rule 532   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 533   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 534   trait_select_and_alias_clausesopt -> <empty>
Rule 535   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 536   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 537   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 538   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 539   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 540   trait_alias_as_clause -> name AS visibility_modifieropt name
Rule 541   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 542   nameopt -> name
Rule 543   nameopt -> <empty>
Rule 544   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 545   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 546   namespace_nameopt -> namespace_name
Rule 547   namespace_nameopt -> <empty>
Rule 548   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 549   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 550   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 551   namespace_function_or_constopt -> namespace_function_or_const
Rule 552   namespace_function_or_constopt -> <empty>
Rule 553   NS_SEPARATORopt -> NS_SEPARATOR
Rule 554   NS_SEPARATORopt -> <empty>
Rule 555   namespace_use_clauses -> namespace_use_clause
Rule 556   namespace_use_clauses -> namespace_use_clauses COMMA namespace_use_clause
Rule 557   namespace_use_clause -> qualified_name namespace_aliasing_clauseopt
Rule 558   namespace_aliasing_clauseopt -> namespace_aliasing_clause
Rule 559   namespace_aliasing_clauseopt -> <empty>
Rule 560   namespace_aliasing_clause -> AS name
Rule 561   namespace_function_or_const -> FUNCTION
Rule 562   namespace_function_or_const -> CONST
Rule 563   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 564   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 COMMA namespace_use_group_clause_1
Rule 565   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clauseopt
Rule 566   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 567   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 COMMA namespace_use_group_clause_2
Rule 568   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clauseopt

Terminals, with rules where they appear

ABSTRACT             : 456
AMPERSAND            : 81 214 220 220 244 246 375 418
AND                  : 268
AND_EQUAL            : 257
ARRAY                : 116 174
AS                   : 368 369 370 371 540 541 560
ASTERISK             : 
ATTRIBUTE            : 
BACKTICK             : 147 147
BAD_CARACTER         : 
BITWISE_NOT          : 
BITWISE_OR           : 218 222 222
BITWISE_XOR          : 216
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 387
CALLABLE             : 
CASE                 : 334 335
CATCH                : 400
CLASS                : 95 96 447
CLONE                : 161
CLOSE_TAG            : 12
COALESCE             : 224
COALESCE_EQUAL       : 
COLON                : 235 238 239 239 240 242 367
COMMENT              : 
CONCAT               : 198
CONCAT_EQUAL         : 254
CONST                : 469 470 562
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 383 384
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 404 405 406
DEFAULT              : 336 337
DIE                  : 71 72
DIVIDE               : 193
DIV_EQUAL            : 250
DNUMBER              : 
DO                   : 346
DOC_COMMENT          : 
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLE_ARROW         : 241 242 264 373
DOUBLE_COLON         : 111 112 113 150 151 152 153 539
DOUBLE_POINT         : 226 227 306 315 316 317 324 325 328 329 338 345 355 356 357 358 359 360 361 362 370 371 405 428 429
DQUOTATION_MARK      : 
ECHO                 : 410
ELLIPSIS             : 136 427
ELSE                 : 321 325
ELSEIF               : 320 324
EMPTY                : 67
ENDDECLARE           : 405
ENDFOR               : 355 356 357 358 359 360 361 362
ENDFOREACH           : 370 371
ENDIF                : 315 316 317
ENDSWITCH            : 328 329
ENDWHILE             : 345
EQUAL                : 21 209 231 232 246 446 475 491
EQUALS               : 407 408 409
EVAL                 : 68
EXIT                 : 69 70
EXPONENT_DNUMBER     : 
EXTENDS              : 458 510
FINAL                : 457
FINALLY              : 403
FN                   : 
FOR                  : 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362
FOREACH              : 368 369 370 371
FUNCTION             : 78 417 501 502 561
GLOBAL               : 22
GOTO                 : 382
IF                   : 311 312 313 314 315 316 317
IMPLEMENTS           : 459
INC                  : 
INCLUDE              : 278
INCLUDE_ONCE         : 279
INSTANCEOF           : 
INSTEADOF            : 539
INTERFACE            : 505
ISSET                : 73
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 205
IS_IDENTICAL         : 211
IS_NOT_EQUAL         : 210
IS_NOT_IDENTICAL     : 212
IS_SMALLER_OR_EQUAL  : 204
LEFT_CBRAC           : 302 303 326 327 447 505 516 532 549 550
LEFT_PARENTHESIS     : 39 44 48 67 68 70 72 73 78 89 92 93 95 116 128 129 130 131 141 142 151 152 173 233 311 312 313 314 315 316 317 320 324 326 327 328 329 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 368 369 370 371 386 400 404 405 406 413 417 501 502
LEFT_SQRBRAC         : 
LESS                 : 197
LESS_THAN            : 203
LIST                 : 233
LNUMBER              : 
MINUS_EQUAL          : 253
MOD_EQUAL            : 251
MORE_THAN            : 
MUL_EQUAL            : 249
NAMESPACE            : 544 545
NEGATION             : 
NEW                  : 92 93 94 95 96
NS_SEPARATOR         : 549 550 553
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 10
OPEN_TAG_WITH_ECHO   : 11
OR                   : 272
OR_EQUAL             : 259
PLUS                 : 169 196
PLUS_EQUAL           : 252
POW                  : 
POW_EQUAL            : 248
PRINT                : 266
PRIVATE              : 484
PROTECTED            : 483
PUBLIC               : 482
REQUIRE              : 280
REQUIRE_ONCE         : 281
RETURN               : 391
RIGHT_CBRAC          : 302 303 326 327 447 505 516 532 549 550
RIGHT_PARENTHESIS    : 39 42 44 48 67 68 70 72 73 78 89 92 93 95 116 128 129 130 131 141 142 151 152 173 233 311 312 313 314 315 316 317 320 324 326 327 328 329 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 368 369 370 371 386 400 404 405 406 413 417 501 502
RIGHT_SQRBRAC        : 
SEMICOLON            : 15 22 307 308 315 316 317 328 329 339 345 346 347 347 348 348 349 349 350 350 351 351 352 352 353 353 354 354 355 355 355 356 356 356 357 357 357 358 358 358 359 359 359 360 360 360 361 361 361 362 362 362 370 371 382 383 384 387 391 394 405 406 410 413 469 470 476 488 493 531 537 538 544 548 549 550
SL                   : 200
SL_EQUAL             : 255
SPACESHIP            : 207
SR                   : 201
SR_EQUAL             : 256
START_HEREDOC        : 
STATIC               : 15 159 485
STRING               : 184 443
SWITCH               : 326 327 328 329
TERNARY_OPERATION    : 226 227 433
THROW                : 394
TRAIT                : 516
TRY                  : 395 396 397
UNSET                : 185 413
USE                  : 89 528 548 549 550
VAR                  : 477
VARIABLE             : 400
WHILE                : 344 345 346
WHITESPACE           : 
XOR                  : 270
XOR_EQUAL            : 258
YIELD                : 262 263 264
YIELD_FROM           : 260
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 78 90 91 122 123
AMPERSANDopt         : 501 502
ARBITRARY_TEXT       : 14
ARROW                : 110 123 137 141 142
AT                   : 172
BINARY               : 175
BOOL                 : 176 440
BOOLEAN              : 177
COMMA                : 17 24 74 77 91 129 131 133 142 152 412 414 423 424 460 474 511 530 556 564 567
COMMA_opt            : 73 93 120 121
DECREMENT            : 144 146
DOLLAR               : 41 42
DOUBLE               : 178
ENCODING             : 408
EXPONENTIATION       : 163
FLOAT                : 181 441
GREATER_THAN_OR_EQUAL : 206
INCREMENT            : 143 145
INT                  : 179 442
INTEGER              : 180
INTEGER_LITERAL      : 385
LBRACE               : 42 95 96 109 127 140
LBRACKET             : 108 117 126
MINUS                : 170
MODULO               : 194
NAME                 : 138 153
NOT                  : 190
NS_SEPARATORopt      : 549 550
OBJECT               : 182
PARENT               : 158
RBRACE               : 95 96 109 127 140
RBRACKET             : 108 117 126
REAL                 : 183
SELF                 : 157
STRICT_TYPES         : 409
TERNARY_OPERATIONopt : 432
TICKS                : 407
TILDE                : 171
TIMES                : 192
VOID                 : 429
__construct          : 501
__destruct           : 502
additive-expression  : 196 197 198 199 200 201
ampersandopt         : 417 426 427
anonymous_function_creation_expression : 31
anonymous_function_use_clause : 85
anonymous_function_use_clause_opt : 78
argument_expression  : 132 133
argument_expression_list : 93 97 129 131 133 142 152
argument_expression_list_opt : 92 95 128 130 141 151
array                : 435
array_creation_expression : 29 45 49
array_element_initializer : 121
array_initializer    : 118
array_initializer_list : 120
array_initializer_opt : 116 117
assignment-expression : 231 232 247 260
base_type_declaration : 432
bitwise-AND-expression : 214 215 216
bitwise-exc-OR-expression : 216 217 218
bitwise-inc-OR-expression : 218 219 220
break-statement      : 379
break_statement      : 
breakout-level       : 383 386
breakout_level       : 388
breakout_levelopt    : 387
byref-assignment-expression : 
byref_assignment_expression : 37
callable             : 436
callable_expression  : 130 131
callable_variable    : 47 56
case-default-label-terminator : 334 335 336 337
case-statement       : 330 331
case-statements      : 326 328 330 332
cast_expression      : 167
cast_type            : 173
catch_clause         : 398 399
catch_clauses        : 395 397 399
catch_name_list      : 400 402
class-declaration    : 295
class_base_clause    : 99 450
class_base_clause_opt : 95 96
class_base_clauseopt : 447
class_const_declaration : 463 514
class_constant_access_expression : 26
class_declaration    : 
class_interface_clause : 101 452 460
class_interface_clause_opt : 95 96
class_interface_clauseopt : 447
class_member_declaration : 461 462
class_member_declarations : 103 454 462
class_member_declarations_opt : 95 96
class_member_declarationsopt : 447
class_modifier       : 448 500
class_modifieropt    : 447
class_type_designator : 92 93 94 187
clone_expression     : 162 163
coalesce-expression  : 224 225 226 227
commaopt             : 413
compound-assignment-expression : 230
compound-assignment-operator : 247
compound-statement   : 283
compound_statement   : 78 395 396 397 400 403 416 501 502 545
conditional-expression : 226 227 228
const-declaration    : 293
const_declaration    : 
const_element        : 473 474
const_elements       : 469 470 474
constant-expression  : 
constant_access_expression : 27
constant_expression  : 21 446 475 491
constructor_declaration : 466 523
continue-statement   : 378
declare-statement    : 290
declare_directive    : 404 405 406
declare_statement    : 
default-statement    : 332 333
default_argument_specifier : 444
default_argument_specifieropt : 426
dereferencable_expression : 126 127 137 141 142 156
destructor_declaration : 467 524
do-statement         : 341
dq_char_sequence     : 148
dq_char_sequence_opt : 147
echo-statement       : 291
echo_statement       : 
element_key          : 123
element_value        : 122 123
else-clause-1        : 311 313
else-clause-2        : 315 317
elseif-clause-1      : 318 319
elseif-clause-2      : 322 323
elseif-clauses-1     : 311 312 319
elseif-clauses-2     : 315 316 323
empty_intrinsic      : 63
end_tag              : 
end_tago             : 6
end_tago_opt         : 3
equality-expression  : 209 210 211 212 213 214
error_control_expression : 166
eval_intrinsic       : 64
exit_intrinsic       : 65
exponentiation_expression : 163 164
expression           : 39 42 44 48 67 68 109 114 124 125 127 135 136 140 226 241 242 278 279 280 281 282 307 311 312 313 314 315 316 317 320 324 326 327 328 329 334 335 344 345 346 366 367 372 373 375 390 392 394 411 412
expression-statement : 285
expression_list      : 410 412
expression_opt       : 70 72 108 126
expressionopt        : 391
finally_clause       : 396 397
floating_literal     : 61
for-control          : 347 348 351 352 355 356 359 360
for-end-of-loop      : 347 349 351 353 355 357 359 361
for-expression-group : 363 364 365 367
for-initializer      : 347 348 349 350 355 356 357 358
for-statement        : 342
foreach-collection-name : 368 369 370 371
foreach-key          : 368 370
foreach-statement    : 343
foreach-value        : 368 369 370 371
foreach-value_expression : 374
function-definition  : 294
function-static-declaration : 301
function_call_expression : 55
function_definition  : 492
function_definition_header : 416 493
function_static_declaration : 
function_static_initializer : 19
function_static_initializer_opt : 18
global-declaration   : 300
global_declaration   : 
goto-statement       : 377
if-statement         : 309
include-expression   : 274
include-once-expression : 275
instanceof           : 187
instanceof_expression : 188 189 190
instanceof_subj      : 187
integer_literal      : 60
interface-declaration : 296
interface_base_clause : 506 511
interface_base_clauseopt : 505
interface_declaration : 
interface_member_declaration : 512 513
interface_member_declarations : 508 513
interface_member_declarationsopt : 505
intrinsic            : 30
isset_intrinsic      : 66
iterable             : 437
iteration-statement  : 287
jump-statement       : 288
keyed-list-expression-list : 235 236 242
list-expression-list : 233
list-intrinsic       : 232 243 376
list-or-variable     : 237 239 240 241 242
literal              : 28 407 408 409
logical-AND-expression-1 : 220 221 222
logical-AND-expression-2 : 268 269 270
logical-exc-OR-expression : 270 271 272
logical-inc-OR-expression-1 : 222 223 224
logical-inc-OR-expression-2 : 272 273
logical_not_expression : 191 192 193 194
member_access_expression : 58
member_call_expression : 53
member_name          : 110 137 141 142 151 152
method_declaration   : 465 515 522
method_modifier      : 496 497
method_modifiers     : 493 494 497 501 502
method_modifiersopt  : 492
multiplicative-expression : 195 196 197 198
multiplicative_expression : 192 193 194
name                 : 306 382 417 447 475 501 502 505 516 539 540 540 541 542 560
named-label-statement : 284
nameopt              : 541
namespace-definition : 298
namespace-use-declaration : 299
namespace_aliasing_clause : 558
namespace_aliasing_clauseopt : 557 565 568
namespace_definition : 
namespace_function_or_const : 549 551
namespace_function_or_constopt : 548 568
namespace_name       : 544 546 549 550 565 568
namespace_nameopt    : 545
namespace_use_clause : 555 556
namespace_use_clauses : 548 556
namespace_use_declaration : 
namespace_use_group_clause_1 : 563 564
namespace_use_group_clause_2 : 566 567
namespace_use_group_clauses_1 : 549 564
namespace_use_group_clauses_2 : 550 567
new_variable         : 106 108 109 110 113
object_creation_expression : 32
parameter_declaration : 422 423
parameter_declaration_list : 83 423 503
parameter_declaration_list_opt : 78
parameter_declaration_listopt : 417 501
postfix_decrement_expression : 34
postfix_increment_expression : 33
prefix_decrement_expression : 36
prefix_increment_expression : 35
primary_expression   : 160 161
print-expression     : 266 267
property_declaration : 464 521
property_element     : 486 487
property_elements    : 476 487
property_initializer : 489
property_initializeropt : 488
property_modifier    : 476
qualified_name       : 59 105 111 128 129 155 401 439 458 459 460 510 511 529 530 539 557
relational-expression : 203 204 205 206 207 208 209 210 211 212
relative_scope       : 112 154
require-expression   : 276
require-once-expression : 277
return-statement     : 380
return_statement     : 
return_type          : 87
return_type_opt      : 78
return_typeopt       : 417
scalar_type          : 438
scope_resolution_qualifier : 150 151 152 153
scoped_call_expression : 54
scoped_property_access_expression : 57
script               : 2 0
script_section       : 1 2
selection-statement  : 286
shell_command_expression : 38
shift-expression     : 200 201 202 203 204 205 206 207
simple-assignment-expression : 229
simple_parameter_declaration_list : 420 424
simple_variable      : 23 24 41 51 107 111 112 113 139 150
start_tag            : 3
statement            : 304 305 311 312 313 314 320 321 344 346 347 348 349 350 351 352 353 354 368 369 404
statement-list       : 302 305 315 316 317 324 325 334 336 345 355 356 357 358 359 360 361 362 370 371
statement_list       : 8 405
statement_list_opt   : 3
static               : 79
static_modifier      : 479 480 499
static_modifieropt   : 478
static_opt           : 78
static_variable_declaration : 16 17
static_variable_name_list : 15 17
string_literal       : 46 50 62
subscript_expression : 52
switch-statement     : 310
text                 : 4
text_opt             : 3 3
throw-statement      : 381
throw_statement      : 
trait-declaration    : 297
trait_alias_as_clause : 538
trait_declaration    : 
trait_member_declaration : 519 520
trait_member_declarations : 517 520
trait_member_declarationsopt : 516
trait_name_list      : 528 530 539
trait_select_and_alias_clause : 535 536
trait_select_and_alias_clauses : 533 536
trait_select_and_alias_clausesopt : 532
trait_select_insteadof_clause : 537
trait_use_clause     : 468 526 527
trait_use_clauses    : 525 527
trait_use_specification : 528
try-statement        : 289
try_statement        : 
type_declaration     : 428 430
type_declarationopt  : 426 427
unary_expression     : 168 172 173 186
unary_op_expression  : 165
unary_operator       : 168
unkeyed-list-expression-list : 234 239 240
unset-statement      : 292
unset_statement      : 
use_variable_name_list : 89 91
variable             : 25 43 76 77 143 144 145 146 231 244 245 246 246 247
variable_list        : 73 77 413
variable_name        : 18 40 90 91 426 427 488
variable_name_list   : 22 24
variadic_declaration_list : 421
variadic_parameter   : 424 425
variadic_unpacking   : 134
visibility_modifier  : 471 478 498 541
visibility_modifieropt : 470 479 540
while-statement      : 340
yield-expression     : 263 264 265 268
yield-from-expression : 261 264

