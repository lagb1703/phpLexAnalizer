Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASTERISK
    ATTRIBUTE
    BAD_CARACTER
    BITWISE_NOT
    BOOLEAN_AND
    BOOLEAN_OR
    CALLABLE
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DNUMBER
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    INSTANCEOF
    IS_EQUAL
    LEFT_SQRBRAC
    LNUMBER
    MORE_THAN
    NEGATION
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    WHITESPACE
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> statement_list_opt
Rule 1     statement_list_opt -> statement_list
Rule 2     statement_list_opt -> <empty>
Rule 3     start_tag -> OPEN_TAG
Rule 4     start_tag -> OPEN_TAG_WITH_ECHO
Rule 5     end_tag -> CLOSE_TAG
Rule 6     end_tag -> <empty>
Rule 7     function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 8     static_variable_name_list -> static_variable_declaration
Rule 9     static_variable_name_list -> static_variable_name_list static_variable_declaration
Rule 10    static_variable_declaration -> VARIABLE function_static_initializer_opt
Rule 11    function_static_initializer_opt -> function_static_initializer
Rule 12    function_static_initializer_opt -> <empty>
Rule 13    function_static_initializer_opt -> EQUAL constant_expression
Rule 14    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 15    variable_name_list -> simple_variable
Rule 16    variable_name_list -> variable_name_list simple_variable
Rule 17    primary_expression -> variable
Rule 18    primary_expression -> class_constant_access_expression
Rule 19    primary_expression -> constant_access_expression
Rule 20    primary_expression -> literal
Rule 21    primary_expression -> array_creation_expression
Rule 22    primary_expression -> intrinsic
Rule 23    primary_expression -> anonymous_function_creation_expression
Rule 24    primary_expression -> object_creation_expression
Rule 25    primary_expression -> postfix_increment_expression
Rule 26    primary_expression -> postfix_decrement_expression
Rule 27    primary_expression -> prefix_increment_expression
Rule 28    primary_expression -> prefix_decrement_expression
Rule 29    primary_expression -> byref_assignment_expression
Rule 30    primary_expression -> shell_command_expression
Rule 31    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 32    simple_variable -> VARIABLE
Rule 33    simple_variable -> DOLLAR simple_variable
Rule 34    simple_variable -> DOLLAR LBRACE expression RIGHT_PARENTHESIS
Rule 35    dereferencable_expression -> variable
Rule 36    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 37    dereferencable_expression -> array_creation_expression
Rule 38    dereferencable_expression -> string_literal
Rule 39    callable_expression -> callable_variable
Rule 40    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 41    callable_expression -> array_creation_expression
Rule 42    callable_expression -> string_literal
Rule 43    callable_variable -> simple_variable
Rule 44    callable_variable -> subscript_expression
Rule 45    callable_variable -> member_call_expression
Rule 46    callable_variable -> scoped_call_expression
Rule 47    callable_variable -> function_call_expression
Rule 48    variable -> callable_variable
Rule 49    variable -> scoped_property_access_expression
Rule 50    variable -> member_access_expression
Rule 51    constant_access_expression -> qualified_name
Rule 52    literal -> integer_literal
Rule 53    literal -> floating_literal
Rule 54    literal -> string_literal
Rule 55    intrinsic -> empty_intrinsic
Rule 56    intrinsic -> eval_intrinsic
Rule 57    intrinsic -> exit_intrinsic
Rule 58    intrinsic -> isset_intrinsic
Rule 59    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 60    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 61    exit_intrinsic -> EXIT
Rule 62    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 63    exit_intrinsic -> DIE
Rule 64    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 65    intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
Rule 66    variable_list -> variable
Rule 67    variable_list -> variable_list variable
Rule 68    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 69    static_opt -> static
Rule 70    static_opt -> <empty>
Rule 71    AMPERSAND_opt -> AMPERSAND
Rule 72    AMPERSAND_opt -> <empty>
Rule 73    parameter_declaration_list_opt -> parameter_declaration_list
Rule 74    parameter_declaration_list_opt -> <empty>
Rule 75    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 76    anonymous_function_use_clause_opt -> <empty>
Rule 77    return_type_opt -> return_type
Rule 78    return_type_opt -> <empty>
Rule 79    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 80    use_variable_name_list -> AMPERSAND_opt VARIABLE
Rule 81    use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE
Rule 82    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 83    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list _opt RIGHT_PARENTHESIS
Rule 84    object_creation_expression -> NEW class_type_designator
Rule 85    object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 86    object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 87    argument_expression_list_opt -> argument_expression_list
Rule 88    argument_expression_list_opt -> <empty>
Rule 89    class_base_clause_opt -> class_base_clause
Rule 90    class_base_clause_opt -> <empty>
Rule 91    class_interface_clause_opt -> class_interface_clause
Rule 92    class_interface_clause_opt -> <empty>
Rule 93    class_member_declarations_opt -> class_member_declarations
Rule 94    class_member_declarations_opt -> <empty>
Rule 95    class_type_designator -> qualified_name
Rule 96    class_type_designator -> new_variable
Rule 97    new_variable -> simple_variable
Rule 98    new_variable -> new_variable LBRACKET expression_opt RBRACKET
Rule 99    new_variable -> new_variable LBRACE expression RBRACE
Rule 100   new_variable -> new_variable ARROW member_name
Rule 101   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 102   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 103   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 104   expression_opt -> expression
Rule 105   expression_opt -> <empty>
Rule 106   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 107   array_creation_expression -> LBRACKET array_initializer_opt RBRACKET
Rule 108   array_initializer_opt -> array_initializer
Rule 109   array_initializer_opt -> <empty>
Rule 110   array_initializer -> array_initializer_list _opt
Rule 111   array_initializer_list -> array_element_initializer _opt
Rule 112   array_element_initializer -> AMPERSAND_opt element_value
Rule 113   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 114   element_key -> expression
Rule 115   element_value -> expression
Rule 116   subscript_expression -> dereferencable_expression LBRACKET expression_opt RBRACKET
Rule 117   subscript_expression -> dereferencable_expression LBRACE expression RBRACE
Rule 118   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 119   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 120   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 121   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 122   argument_expression_list -> argument_expression
Rule 123   argument_expression_list -> argument_expression_list argument_expression
Rule 124   argument_expression -> variadic_unpacking
Rule 125   argument_expression -> expression
Rule 126   variadic_unpacking -> ELLIPSIS expression
Rule 127   member_access_expression -> dereferencable_expression ARROW member_name
Rule 128   member_name -> NAME
Rule 129   member_name -> simple_variable
Rule 130   member_name -> LBRACE expression RBRACE
Rule 131   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 132   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 133   postfix_increment_expression -> variable INCREMENT
Rule 134   postfix_decrement_expression -> variable DECREMENT
Rule 135   prefix_increment_expression -> INCREMENT variable
Rule 136   prefix_decrement_expression -> DECREMENT variable
Rule 137   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 138   dq_char_sequence_opt -> dq_char_sequence
Rule 139   dq_char_sequence_opt -> <empty>
Rule 140   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 141   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 142   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 143   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 144   scope_resolution_qualifier -> relative_scope
Rule 145   scope_resolution_qualifier -> qualified_name
Rule 146   scope_resolution_qualifier -> dereferencable_expression
Rule 147   relative_scope -> SELF
Rule 148   relative_scope -> PARENT
Rule 149   relative_scope -> STATIC
Rule 150   clone_expression -> primary_expression
Rule 151   clone_expression -> CLONE primary_expression
Rule 152   exponentiation_expression -> clone_expression
Rule 153   exponentiation_expression -> clone_expression EXPONENTIATION exponentiation_expression
Rule 154   unary_expression -> exponentiation_expression
Rule 155   unary_expression -> unary_op_expression
Rule 156   unary_expression -> error_control_expression
Rule 157   unary_expression -> cast_expression
Rule 158   unary_op_expression -> unary_operator unary_expression
Rule 159   unary_operator -> PLUS
Rule 160   unary_operator -> MINUS
Rule 161   unary_operator -> TILDE
Rule 162   error_control_expression -> AT unary_expression
Rule 163   cast_expression -> LEFT_PARENTHESIS cast_type RIGHT_PARENTHESIS unary_expression
Rule 164   cast_type -> ARRAY
Rule 165   cast_type -> BINARY
Rule 166   cast_type -> BOOL
Rule 167   cast_type -> BOOLEAN
Rule 168   cast_type -> DOUBLE
Rule 169   cast_type -> INT
Rule 170   cast_type -> INTEGER
Rule 171   cast_type -> FLOAT
Rule 172   cast_type -> OBJECT
Rule 173   cast_type -> REAL
Rule 174   cast_type -> STRING
Rule 175   cast_type -> UNSET
Rule 176   instanceof_expression -> unary_expression
Rule 177   instanceof_expression -> instanceof_subj instanceof class_type_designator
Rule 178   instanceof_subj -> instanceof_expression
Rule 179   logical_not_expression -> instanceof_expression
Rule 180   logical_not_expression -> NOT instanceof_expression
Rule 181   multiplicative_expression -> logical_not_expression
Rule 182   multiplicative_expression -> multiplicative_expression TIMES logical_not_expression
Rule 183   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 184   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 185   additive_expression -> multiplicative_expression
Rule 186   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 187   additive_expression -> additive_expression LESS multiplicative_expression
Rule 188   additive_expression -> additive_expression CONCAT multiplicative_expression
Rule 189   shift_expression -> additive_expression
Rule 190   shift_expression -> shift_expression SL additive_expression
Rule 191   shift_expression -> shift_expression SR additive_expression
Rule 192   relational_expression -> shift_expression
Rule 193   relational_expression -> relational_expression LESS_THAN shift_expression
Rule 194   relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression
Rule 195   relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression
Rule 196   relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression
Rule 197   relational_expression -> relational_expression SPACESHIP shift_expression
Rule 198   equality_expression -> relational_expression
Rule 199   equality_expression -> equality_expression EQUAL relational_expression
Rule 200   equality_expression -> equality_expression IS_NOT_EQUAL relational_expression
Rule 201   equality_expression -> equality_expression IS_IDENTICAL relational_expression
Rule 202   equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression
Rule 203   bitwise_AND_expression -> equality_expression
Rule 204   bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression
Rule 205   bitwise_exc_OR_expression -> bitwise_AND_expression
Rule 206   bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
Rule 207   bitwise_inc_OR_expression -> bitwise_exc_OR_expression
Rule 208   bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
Rule 209   logical_AND_expression_1 -> bitwise_inc_OR_expression
Rule 210   logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
Rule 211   logical_inc_OR_expression_1 -> logical_AND_expression_1
Rule 212   logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
Rule 213   coalesce_expression -> logical_inc_OR_expression_1
Rule 214   coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression
Rule 215   conditional_expression -> coalesce_expression
Rule 216   conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
Rule 217   conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
Rule 218   assignment_expression -> conditional_expression
Rule 219   assignment_expression -> simple_assignment_expression
Rule 220   assignment_expression -> compound_assignment_expression
Rule 221   simple_assignment_expression -> variable EQUAL assignment_expression
Rule 222   simple_assignment_expression -> list_intrinsic EQUAL assignment_expression
Rule 223   list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
Rule 224   list_expression_list -> unkeyed_list_expression_list
Rule 225   list_expression_list -> keyed_list_expression_list COLON
Rule 226   list_expression_list -> keyed_list_expression_list
Rule 227   unkeyed_list_expression_list -> list_or_variable
Rule 228   unkeyed_list_expression_list -> COLON
Rule 229   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON
Rule 230   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable
Rule 231   keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable
Rule 232   keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
Rule 233   list_or_variable -> list_intrinsic
Rule 234   list_or_variable -> AMPERSAND variable
Rule 235   list_or_variable -> variable
Rule 236   byref_assignment_expression -> variable EQUAL AMPERSAND variable
Rule 237   compound_assignment_expression -> variable compound_assignment_operator assignment_expression
Rule 238   compound_assignment_operator -> POW_EQUAL
Rule 239   compound_assignment_operator -> MUL_EQUAL
Rule 240   compound_assignment_operator -> DIV_EQUAL
Rule 241   compound_assignment_operator -> MOD_EQUAL
Rule 242   compound_assignment_operator -> PLUS_EQUAL
Rule 243   compound_assignment_operator -> MINUS_EQUAL
Rule 244   compound_assignment_operator -> CONCAT_EQUAL
Rule 245   compound_assignment_operator -> SL_EQUAL
Rule 246   compound_assignment_operator -> SR_EQUAL
Rule 247   compound_assignment_operator -> AND_EQUAL
Rule 248   compound_assignment_operator -> XOR_EQUAL
Rule 249   compound_assignment_operator -> OR_EQUAL
Rule 250   yield_from_expression -> YIELD_FROM assignment_expression
Rule 251   yield_expression -> yield_from_expression
Rule 252   yield_expression -> YIELD
Rule 253   yield_expression -> YIELD yield_expression
Rule 254   yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression
Rule 255   print_expression -> yield_expression
Rule 256   print_expression -> PRINT print_expression
Rule 257   logical_AND_expression_2 -> print_expression
Rule 258   logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression
Rule 259   logical_exc_OR_expression -> logical_AND_expression_2
Rule 260   logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2
Rule 261   logical_inc_OR_expression_2 -> logical_exc_OR_expression
Rule 262   logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression
Rule 263   expression -> logical_inc_OR_expression_2
Rule 264   expression -> include_expression
Rule 265   expression -> include_once_expression
Rule 266   expression -> require_expression
Rule 267   expression -> require_once_expression
Rule 268   include_expression -> INCLUDE expression
Rule 269   include_once_expression -> INCLUDE_ONCE expression
Rule 270   require_expression -> REQUIRE expression
Rule 271   require_once_expression -> REQUIRE_ONCE expression
Rule 272   constant_expression -> expression
Rule 273   statement -> compound_statement
Rule 274   statement -> named_label_statement
Rule 275   statement -> expression_statement
Rule 276   statement -> selection_statement
Rule 277   statement -> iteration_statement
Rule 278   statement -> jump_statement
Rule 279   statement -> try_statement
Rule 280   statement -> declare_statement
Rule 281   statement -> echo_statement
Rule 282   statement -> unset_statement
Rule 283   statement -> const_declaration
Rule 284   statement -> function_definition
Rule 285   statement -> class_declaration
Rule 286   statement -> interface_declaration
Rule 287   statement -> trait_declaration
Rule 288   statement -> namespace_definition
Rule 289   statement -> namespace_use_declaration
Rule 290   statement -> global_declaration
Rule 291   statement -> function_static_declaration
Rule 292   compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC
Rule 293   compound_statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 294   statement_list -> statement
Rule 295   statement_list -> statement_list statement
Rule 296   named_label_statement -> name DOUBLE_POINT
Rule 297   expression_statement -> expression SEMICOLON
Rule 298   expression_statement -> SEMICOLON
Rule 299   selection_statement -> if_statement
Rule 300   selection_statement -> switch_statement
Rule 301   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
Rule 302   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
Rule 303   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
Rule 304   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 305   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
Rule 306   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
Rule 307   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
Rule 308   elseif_clauses_1 -> elseif_clause_1
Rule 309   elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1
Rule 310   elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 311   else_clause_1 -> ELSE statement
Rule 312   elseif_clauses_2 -> elseif_clause_2
Rule 313   elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2
Rule 314   elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
Rule 315   else_clause_2 -> ELSE DOUBLE_POINT statement_list
Rule 316   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
Rule 317   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 318   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
Rule 319   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 320   case_statements -> case_statement case_statements
Rule 321   case_statements -> case_statement
Rule 322   case_statements -> default_statement case_statements
Rule 323   case_statements -> default_statement
Rule 324   case_statement -> CASE expression case_default_label_terminator statement_list
Rule 325   case_statement -> CASE expression case_default_label_terminator
Rule 326   default_statement -> DEFAULT case_default_label_terminator statement_list
Rule 327   default_statement -> DEFAULT case_default_label_terminator
Rule 328   case_default_label_terminator -> DOUBLE_POINT
Rule 329   case_default_label_terminator -> SEMICOLON
Rule 330   iteration_statement -> while_statement
Rule 331   iteration_statement -> do_statement
Rule 332   iteration_statement -> for_statement
Rule 333   iteration_statement -> foreach_statement
Rule 334   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 335   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
Rule 336   do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 337   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 338   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 339   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 340   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 341   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 342   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 343   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 344   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 345   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 346   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 347   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 348   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 349   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 350   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 351   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 352   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 353   for_initializer -> for_expression_group
Rule 354   for_control -> for_expression_group
Rule 355   for_end_of_loop -> for_expression_group
Rule 356   for_expression_group -> expression
Rule 357   for_expression_group -> for_expression_group COLON expression
Rule 358   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
Rule 359   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
Rule 360   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 361   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 362   foreach_collection_name -> expression
Rule 363   foreach_key -> expression DOUBLE_ARROW
Rule 364   foreach_value -> foreach_value_expression
Rule 365   foreach_value -> AMPERSAND expression
Rule 366   foreach_value -> list_intrinsic
Rule 367   jump_statement -> goto_statement
Rule 368   jump_statement -> continue_statement
Rule 369   jump_statement -> break_statement
Rule 370   jump_statement -> return_statement
Rule 371   jump_statement -> throw_statement
Rule 372   goto_statement -> GOTO name SEMICOLON
Rule 373   continue_statement -> CONTINUE breakout_level SEMICOLON
Rule 374   continue_statement -> CONTINUE SEMICOLON
Rule 375   breakout_level -> INTEGER_LITERAL
Rule 376   breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
Rule 377   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 378   breakout_levelopt -> breakout_level
Rule 379   breakout_levelopt -> <empty>
Rule 380   breakout_level -> expression
Rule 381   return_statement -> RETURN expressionopt SEMICOLON
Rule 382   expressionopt -> expression
Rule 383   expressionopt -> <empty>
Rule 384   throw_statement -> THROW expression SEMICOLON
Rule 385   try_statement -> TRY compound_statement catch_clauses
Rule 386   try_statement -> TRY compound_statement finally_clause
Rule 387   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 388   catch_clauses -> catch_clause
Rule 389   catch_clauses -> catch_clauses catch_clause
Rule 390   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 391   catch_name_list -> qualified_name
Rule 392   catch_name_list -> catch_name_list
Rule 393   finally_clause -> FINALLY compound_statement
Rule 394   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 395   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 396   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 397   declare_directive -> TICKS EQUALS literal
Rule 398   declare_directive -> ENCODING EQUALS literal
Rule 399   declare_directive -> STRICT_TYPES EQUALS literal
Rule 400   echo_statement -> ECHO expression_list SEMICOLON
Rule 401   expression_list -> expression
Rule 402   expression_list -> expression_list expression
Rule 403   unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
Rule 404   unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
Rule 405   function_definition -> function_definition_header compound_statement
Rule 406   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_typeopt
Rule 407   ampersandopt -> AMPERSAND
Rule 408   ampersandopt -> <empty>
Rule 409   parameter_declaration_list -> simple_parameter_declaration_list
Rule 410   parameter_declaration_list -> variadic_declaration_list
Rule 411   simple_parameter_declaration_list -> parameter_declaration
Rule 412   simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration
Rule 413   variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter
Rule 414   variadic_declaration_list -> variadic_parameter
Rule 415   parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
Rule 416   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE
Rule 417   return_type -> DOUBLE_POINT type_declaration
Rule 418   return_type -> DOUBLE_POINT VOID
Rule 419   type_declarationopt -> type_declaration
Rule 420   type_declarationopt -> <empty>
Rule 421   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 422   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 423   TERNARY_OPERATIONopt -> <empty>
Rule 424   base_type_declaration -> array
Rule 425   base_type_declaration -> callable
Rule 426   base_type_declaration -> iterable
Rule 427   base_type_declaration -> scalar_type
Rule 428   base_type_declaration -> qualified_name
Rule 429   scalar_type -> BOOL
Rule 430   scalar_type -> FLOAT
Rule 431   scalar_type -> INT
Rule 432   scalar_type -> STRING
Rule 433   default_argument_specifieropt -> default_argument_specifier
Rule 434   default_argument_specifieropt -> <empty>
Rule 435   default_argument_specifier -> EQUAL constant_expression
Rule 436   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 437   class_modifieropt -> class_modifier
Rule 438   class_modifieropt -> <empty>
Rule 439   class_base_clauseopt -> class_base_clause
Rule 440   class_base_clauseopt -> <empty>
Rule 441   class_interface_clauseopt -> class_interface_clause
Rule 442   class_interface_clauseopt -> <empty>
Rule 443   class_member_declarationsopt -> class_member_declarations
Rule 444   class_member_declarationsopt -> <empty>
Rule 445   class_modifier -> ABSTRACT
Rule 446   class_modifier -> FINAL
Rule 447   class_base_clause -> EXTENDS qualified_name
Rule 448   class_interface_clause -> IMPLEMENTS qualified_name
Rule 449   class_interface_clause -> class_interface_clause qualified_name
Rule 450   class_member_declarations -> class_member_declaration
Rule 451   class_member_declarations -> class_member_declarations class_member_declaration
Rule 452   class_member_declaration -> class_const_declaration
Rule 453   class_member_declaration -> property_declaration
Rule 454   class_member_declaration -> method_declaration
Rule 455   class_member_declaration -> constructor_declaration
Rule 456   class_member_declaration -> destructor_declaration
Rule 457   class_member_declaration -> trait_use_clause
Rule 458   const_declaration -> CONST const_elements SEMICOLON
Rule 459   class_const_declaration -> visibility_modifieropt CONST const_elements SEMICOLON
Rule 460   const_elements -> const_element
Rule 461   const_elements -> const_elements const_element
Rule 462   const_element -> name EQUAL constant_expression
Rule 463   property_declaration -> property_modifier property_elements SEMICOLON
Rule 464   property_modifier -> VAR
Rule 465   property_modifier -> visibility_modifier static_modifieropt
Rule 466   property_modifier -> static_modifier visibility_modifieropt
Rule 467   static_modifieropt -> static_modifier
Rule 468   static_modifieropt -> <empty>
Rule 469   visibility_modifier -> PUBLIC
Rule 470   visibility_modifier -> PROTECTED
Rule 471   visibility_modifier -> PRIVATE
Rule 472   static_modifier -> STATIC
Rule 473   property_elements -> property_element
Rule 474   property_elements -> property_elements property_element
Rule 475   property_element -> VARIABLE property_initializeropt SEMICOLON
Rule 476   property_initializeropt -> property_initializer
Rule 477   property_initializeropt -> <empty>
Rule 478   property_initializer -> EQUAL constant_expression
Rule 479   method_declaration -> method_modifiersopt function_definition
Rule 480   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 481   method_modifiersopt -> method_modifiers
Rule 482   method_modifiersopt -> <empty>
Rule 483   method_modifiers -> method_modifier
Rule 484   method_modifiers -> method_modifiers method_modifier
Rule 485   method_modifier -> visibility_modifier
Rule 486   method_modifier -> static_modifier
Rule 487   method_modifier -> class_modifier
Rule 488   constructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __construct LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 489   destructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __destruct LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 490   parameter_declaration_listopt -> parameter_declaration_list
Rule 491   parameter_declaration_listopt -> <empty>
Rule 492   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 493   interface_base_clauseopt -> interface_base_clause
Rule 494   interface_base_clauseopt -> <empty>
Rule 495   interface_member_declarationsopt -> interface_member_declarations
Rule 496   interface_member_declarationsopt -> <empty>
Rule 497   interface_base_clause -> EXTENDS qualified_name
Rule 498   interface_base_clause -> interface_base_clause qualified_name
Rule 499   interface_member_declarations -> interface_member_declaration
Rule 500   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 501   interface_member_declaration -> class_const_declaration
Rule 502   interface_member_declaration -> method_declaration
Rule 503   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 504   trait_member_declarationsopt -> trait_member_declarations
Rule 505   trait_member_declarationsopt -> <empty>
Rule 506   trait_member_declarations -> trait_member_declaration
Rule 507   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 508   trait_member_declaration -> property_declaration
Rule 509   trait_member_declaration -> method_declaration
Rule 510   trait_member_declaration -> constructor_declaration
Rule 511   trait_member_declaration -> destructor_declaration
Rule 512   trait_member_declaration -> trait_use_clauses
Rule 513   trait_use_clauses -> trait_use_clause
Rule 514   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 515   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 516   trait_name_list -> qualified_name
Rule 517   trait_name_list -> trait_name_list qualified_name
Rule 518   trait_use_specification -> SEMICOLON
Rule 519   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 520   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 521   trait_select_and_alias_clausesopt -> <empty>
Rule 522   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 523   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 524   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 525   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 526   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 527   trait_alias_as_clause -> name AS visibility_modifieropt name
Rule 528   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 529   nameopt -> name
Rule 530   nameopt -> <empty>
Rule 531   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 532   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 533   namespace_nameopt -> namespace_name
Rule 534   namespace_nameopt -> <empty>
Rule 535   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 536   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 537   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 538   namespace_function_or_constopt -> namespace_function_or_const
Rule 539   namespace_function_or_constopt -> <empty>
Rule 540   NS_SEPARATORopt -> NS_SEPARATOR
Rule 541   NS_SEPARATORopt -> <empty>
Rule 542   namespace_use_clauses -> namespace_use_clause
Rule 543   namespace_use_clauses -> namespace_use_clauses namespace_use_clause
Rule 544   namespace_use_clause -> qualified_name namespace_aliasing_clauseopt
Rule 545   namespace_aliasing_clause -> AS name
Rule 546   namespace_function_or_const -> FUNCTION
Rule 547   namespace_function_or_const -> CONST
Rule 548   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 549   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1
Rule 550   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clauseopt
Rule 551   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 552   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2
Rule 553   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clauseopt

Terminals, with rules where they appear

ABSTRACT             : 445
AMPERSAND            : 71 204 210 210 234 236 365 407
AND                  : 258
AND_EQUAL            : 247
ARRAY                : 106 164
AS                   : 358 359 360 361 527 528 545
ASTERISK             : 
ATTRIBUTE            : 
BACKTICK             : 137 137
BAD_CARACTER         : 
BITWISE_NOT          : 
BITWISE_OR           : 208 212 212
BITWISE_XOR          : 206
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 377
CALLABLE             : 
CASE                 : 324 325
CATCH                : 390
CLASS                : 85 86 436
CLONE                : 151
CLOSE_TAG            : 5
COALESCE             : 214
COALESCE_EQUAL       : 
COLON                : 225 228 229 229 230 232 357 403
COMMENT              : 
CONCAT               : 188
CONCAT_EQUAL         : 244
CONST                : 458 459 547
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 373 374
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 394 395 396
DEFAULT              : 326 327
DIE                  : 63 64
DIVIDE               : 183
DIV_EQUAL            : 240
DNUMBER              : 
DO                   : 336
DOC_COMMENT          : 
DOLLAR               : 33 34
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLE_ARROW         : 231 232 254 363
DOUBLE_COLON         : 101 102 103 140 141 142 143 526
DOUBLE_POINT         : 216 217 296 305 306 307 314 315 318 319 328 335 345 346 347 348 349 350 351 352 360 361 395 417 418
DQUOTATION_MARK      : 
ECHO                 : 400
ELLIPSIS             : 126 416
ELSE                 : 311 315
ELSEIF               : 310 314
EMPTY                : 59
ENDDECLARE           : 395
ENDFOR               : 345 346 347 348 349 350 351 352
ENDFOREACH           : 360 361
ENDIF                : 305 306 307
ENDSWITCH            : 318 319
ENDWHILE             : 335
EQUAL                : 13 199 221 222 236 435 462 478
EQUALS               : 397 398 399
EVAL                 : 60
EXIT                 : 61 62
EXPONENT_DNUMBER     : 
EXTENDS              : 447 497
FINAL                : 446
FINALLY              : 393
FN                   : 
FOR                  : 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352
FOREACH              : 358 359 360 361
FUNCTION             : 68 406 488 489 546
GLOBAL               : 14
GOTO                 : 372
IF                   : 301 302 303 304 305 306 307
IMPLEMENTS           : 448
INC                  : 
INCLUDE              : 268
INCLUDE_ONCE         : 269
INSTANCEOF           : 
INSTEADOF            : 526
INTERFACE            : 492
ISSET                : 65
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 195
IS_IDENTICAL         : 201
IS_NOT_EQUAL         : 200
IS_NOT_IDENTICAL     : 202
IS_SMALLER_OR_EQUAL  : 194
LEFT_CBRAC           : 292 293 316 317 436 492 503 519 536 537
LEFT_PARENTHESIS     : 31 36 40 59 60 62 64 65 68 79 82 83 85 106 118 119 120 121 131 132 141 142 163 223 301 302 303 304 305 306 307 310 314 316 317 318 319 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 358 359 360 361 376 390 394 395 396 403 404 406 488 489
LEFT_SQRBRAC         : 
LESS                 : 187
LESS_THAN            : 193
LIST                 : 223
LNUMBER              : 
MINUS_EQUAL          : 243
MOD_EQUAL            : 241
MORE_THAN            : 
MUL_EQUAL            : 239
NAMESPACE            : 531 532
NEGATION             : 
NEW                  : 82 83 84 85 86
NS_SEPARATOR         : 536 537 540
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 3
OPEN_TAG_WITH_ECHO   : 4
OR                   : 262
OR_EQUAL             : 249
PLUS                 : 159 186
PLUS_EQUAL           : 242
POW                  : 
POW_EQUAL            : 238
PRINT                : 256
PRIVATE              : 471
PROTECTED            : 470
PUBLIC               : 469
REQUIRE              : 270
REQUIRE_ONCE         : 271
RETURN               : 381
RIGHT_CBRAC          : 292 293 316 317 436 492 503 519 536 537
RIGHT_PARENTHESIS    : 31 34 36 40 59 60 62 64 65 68 79 82 83 85 106 118 119 120 121 131 132 141 142 163 223 301 302 303 304 305 306 307 310 314 316 317 318 319 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 358 359 360 361 376 390 394 395 396 403 404 406 488 489
RIGHT_SQRBRAC        : 
SEMICOLON            : 7 14 297 298 305 306 307 318 319 329 335 336 337 337 338 338 339 339 340 340 341 341 342 342 343 343 344 344 345 345 345 346 346 346 347 347 347 348 348 348 349 349 349 350 350 350 351 351 351 352 352 352 360 361 372 373 374 377 381 384 395 396 400 403 404 458 459 463 475 480 518 524 525 531 535 536 537
SL                   : 190
SL_EQUAL             : 245
SPACESHIP            : 197
SR                   : 191
SR_EQUAL             : 246
START_HEREDOC        : 
STATIC               : 7 149 472
STRING               : 174 432
SWITCH               : 316 317 318 319
TERNARY_OPERATION    : 216 217 422
THROW                : 384
TRAIT                : 503
TRY                  : 385 386 387
UNSET                : 175 403 404
USE                  : 79 515 535 536 537
VAR                  : 464
VARIABLE             : 10 32 80 81 390 415 416 475
WHILE                : 334 335 336
WHITESPACE           : 
XOR                  : 260
XOR_EQUAL            : 248
YIELD                : 252 253 254
YIELD_FROM           : 250
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 68 80 81 112 113
AMPERSANDopt         : 488 489
ARROW                : 100 113 127 131 132
AT                   : 162
BINARY               : 165
BOOL                 : 166 429
BOOLEAN              : 167
DECREMENT            : 134 136
DOUBLE               : 168
ENCODING             : 398
EXPONENTIATION       : 153
FLOAT                : 171 430
GREATER_THAN_OR_EQUAL : 196
INCREMENT            : 133 135
INT                  : 169 431
INTEGER              : 170
INTEGER_LITERAL      : 375
LBRACE               : 34 85 86 99 117 130
LBRACKET             : 98 107 116
MINUS                : 160
MODULO               : 184
NAME                 : 128 143
NOT                  : 180
NS_SEPARATORopt      : 536 537
OBJECT               : 172
PARENT               : 148
RBRACE               : 85 86 99 117 130
RBRACKET             : 98 107 116
REAL                 : 173
SELF                 : 147
STRICT_TYPES         : 399
TERNARY_OPERATIONopt : 421
TICKS                : 397
TILDE                : 161
TIMES                : 182
VOID                 : 418
__construct          : 488
__destruct           : 489
_opt                 : 83 110 111
additive_expression  : 186 187 188 189 190 191
ampersandopt         : 406 415 416
anonymous_function_creation_expression : 23
anonymous_function_use_clause : 75
anonymous_function_use_clause_opt : 68
argument_expression  : 122 123
argument_expression_list : 83 87 119 121 123 132 142
argument_expression_list_opt : 82 85 118 120 131 141
array                : 424
array_creation_expression : 21 37 41
array_element_initializer : 111
array_initializer    : 108
array_initializer_list : 110
array_initializer_opt : 106 107
assignment_expression : 221 222 237 250
base_type_declaration : 421
bitwise_AND_expression : 204 205 206
bitwise_exc_OR_expression : 206 207 208
bitwise_inc_OR_expression : 208 209 210
break_statement      : 369
breakout_level       : 373 376 378
breakout_levelopt    : 377
byref_assignment_expression : 29
callable             : 425
callable_expression  : 120 121
callable_variable    : 39 48
case_default_label_terminator : 324 325 326 327
case_statement       : 320 321
case_statements      : 316 318 320 322
cast_expression      : 157
cast_type            : 163
catch_clause         : 388 389
catch_clauses        : 385 387 389
catch_name_list      : 390 392
class_base_clause    : 89 439
class_base_clause_opt : 85 86
class_base_clauseopt : 436
class_const_declaration : 452 501
class_constant_access_expression : 18
class_declaration    : 285
class_interface_clause : 91 441 449
class_interface_clause_opt : 85 86
class_interface_clauseopt : 436
class_member_declaration : 450 451
class_member_declarations : 93 443 451
class_member_declarations_opt : 85 86
class_member_declarationsopt : 436
class_modifier       : 437 487
class_modifieropt    : 436
class_type_designator : 82 83 84 177
clone_expression     : 152 153
coalesce_expression  : 214 215 216 217
compound_assignment_expression : 220
compound_assignment_operator : 237
compound_statement   : 68 273 385 386 387 390 393 405 488 489 532
conditional_expression : 216 217 218
const_declaration    : 283
const_element        : 460 461
const_elements       : 458 459 461
constant_access_expression : 19
constant_expression  : 13 435 462 478
constructor_declaration : 455 510
continue_statement   : 368
declare_directive    : 394 395 396
declare_statement    : 280
default_argument_specifier : 433
default_argument_specifieropt : 415
default_statement    : 322 323
dereferencable_expression : 116 117 127 131 132 146
destructor_declaration : 456 511
do_statement         : 331
dq_char_sequence     : 138
dq_char_sequence_opt : 137
echo_statement       : 281
element_key          : 113
element_value        : 112 113
else_clause_1        : 301 303
else_clause_2        : 305 307
elseif_clause_1      : 308 309
elseif_clause_2      : 312 313
elseif_clauses_1     : 301 302 309
elseif_clauses_2     : 305 306 313
empty_intrinsic      : 55
end_tag              : 
equality_expression  : 199 200 201 202 203 204
error_control_expression : 156
eval_intrinsic       : 56
exit_intrinsic       : 57
exponentiation_expression : 153 154
expression           : 31 34 36 40 59 60 99 104 114 115 117 125 126 130 216 231 232 268 269 270 271 272 297 301 302 303 304 305 306 307 310 314 316 317 318 319 324 325 334 335 336 356 357 362 363 365 380 382 384 401 402
expression_list      : 400 402
expression_opt       : 62 64 98 116
expression_statement : 275
expressionopt        : 381
finally_clause       : 386 387
floating_literal     : 53
for_control          : 337 338 341 342 345 346 349 350
for_end_of_loop      : 337 339 341 343 345 347 349 351
for_expression_group : 353 354 355 357
for_initializer      : 337 338 339 340 345 346 347 348
for_statement        : 332
foreach_collection_name : 358 359 360 361
foreach_key          : 358 360
foreach_statement    : 333
foreach_value        : 358 359 360 361
foreach_value_expression : 364
function_call_expression : 47
function_definition  : 284 479
function_definition_header : 405 480
function_static_declaration : 291
function_static_initializer : 11
function_static_initializer_opt : 10
global_declaration   : 290
goto_statement       : 367
if_statement         : 299
include_expression   : 264
include_once_expression : 265
instanceof           : 177
instanceof_expression : 178 179 180
instanceof_subj      : 177
integer_literal      : 52
interface_base_clause : 493 498
interface_base_clauseopt : 492
interface_declaration : 286
interface_member_declaration : 499 500
interface_member_declarations : 495 500
interface_member_declarationsopt : 492
intrinsic            : 22
isset_intrinsic      : 58
iterable             : 426
iteration_statement  : 277
jump_statement       : 278
keyed_list_expression_list : 225 226 232
list_expression_list : 223
list_intrinsic       : 222 233 366
list_or_variable     : 227 229 230 231 232
literal              : 20 397 398 399
logical_AND_expression_1 : 210 211 212
logical_AND_expression_2 : 258 259 260
logical_exc_OR_expression : 260 261 262
logical_inc_OR_expression_1 : 212 213 214
logical_inc_OR_expression_2 : 262 263
logical_not_expression : 181 182 183 184
member_access_expression : 50
member_call_expression : 45
member_name          : 100 127 131 132 141 142
method_declaration   : 454 502 509
method_modifier      : 483 484
method_modifiers     : 480 481 484 488 489
method_modifiersopt  : 479
multiplicative_expression : 182 183 184 185 186 187 188
name                 : 296 372 406 436 462 488 489 492 503 526 527 527 528 529 545
named_label_statement : 274
nameopt              : 528
namespace_aliasing_clause : 
namespace_aliasing_clauseopt : 544 550 553
namespace_definition : 288
namespace_function_or_const : 536 538
namespace_function_or_constopt : 535 553
namespace_name       : 531 533 536 537 550 553
namespace_nameopt    : 532
namespace_use_clause : 542 543
namespace_use_clauses : 535 543
namespace_use_declaration : 289
namespace_use_group_clause_1 : 548 549
namespace_use_group_clause_2 : 551 552
namespace_use_group_clauses_1 : 536 549
namespace_use_group_clauses_2 : 537 552
new_variable         : 96 98 99 100 103
object_creation_expression : 24
parameter_declaration : 411 412
parameter_declaration_list : 73 412 490
parameter_declaration_list_opt : 68
parameter_declaration_listopt : 406 488
postfix_decrement_expression : 26
postfix_increment_expression : 25
prefix_decrement_expression : 28
prefix_increment_expression : 27
primary_expression   : 150 151
print_expression     : 256 257
property_declaration : 453 508
property_element     : 473 474
property_elements    : 463 474
property_initializer : 476
property_initializeropt : 475
property_modifier    : 463
qualified_name       : 51 95 101 118 119 145 391 428 447 448 449 497 498 516 517 526 544
relational_expression : 193 194 195 196 197 198 199 200 201 202
relative_scope       : 102 144
require_expression   : 266
require_once_expression : 267
return_statement     : 370
return_type          : 77
return_type_opt      : 68
return_typeopt       : 406
scalar_type          : 427
scope_resolution_qualifier : 140 141 142 143
scoped_call_expression : 46
scoped_property_access_expression : 49
selection_statement  : 276
shell_command_expression : 30
shift_expression     : 190 191 192 193 194 195 196 197
simple_assignment_expression : 219
simple_parameter_declaration_list : 409 413
simple_variable      : 15 16 33 43 97 101 102 103 129 140
start_tag            : 
statement            : 294 295 301 302 303 304 310 311 334 336 337 338 339 340 341 342 343 344 358 359 394
statement_list       : 1 292 295 305 306 307 314 315 324 326 335 345 346 347 348 349 350 351 352 360 361 395
statement_list_opt   : 0
static               : 69
static_modifier      : 466 467 486
static_modifieropt   : 465
static_opt           : 68
static_variable_declaration : 8 9
static_variable_name_list : 7 9
string_literal       : 38 42 54
subscript_expression : 44
switch_statement     : 300
throw_statement      : 371
trait_alias_as_clause : 525
trait_declaration    : 287
trait_member_declaration : 506 507
trait_member_declarations : 504 507
trait_member_declarationsopt : 503
trait_name_list      : 515 517 526
trait_select_and_alias_clause : 522 523
trait_select_and_alias_clauses : 520 523
trait_select_and_alias_clausesopt : 519
trait_select_insteadof_clause : 524
trait_use_clause     : 457 513 514
trait_use_clauses    : 512 514
trait_use_specification : 515
try_statement        : 279
type_declaration     : 417 419
type_declarationopt  : 415 416
unary_expression     : 158 162 163 176
unary_op_expression  : 155
unary_operator       : 158
unkeyed_list_expression_list : 224 229 230
unset_statement      : 282
use_variable_name_list : 79 81
variable             : 17 35 66 67 133 134 135 136 221 234 235 236 236 237
variable_list        : 67 403 404
variable_list_opt    : 65
variable_name_list   : 14 16
variadic_declaration_list : 410
variadic_parameter   : 413 414
variadic_unpacking   : 124
visibility_modifier  : 465 485 528
visibility_modifieropt : 459 466 527
while_statement      : 330
yield_expression     : 253 254 255 258
yield_from_expression : 251 254

