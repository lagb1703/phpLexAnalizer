Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASTERISK
    ATTRIBUTE
    BAD_CARACTER
    BITWISE_NOT
    BOOLEAN_AND
    BOOLEAN_OR
    CALLABLE
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DNUMBER
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    INSTANCEOF
    IS_EQUAL
    LEFT_SQRBRAC
    LNUMBER
    MORE_THAN
    NEGATION
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    WHITESPACE
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> script
Rule 1     script -> script_section
Rule 2     script -> script script_section
Rule 3     statement_list_opt -> statement_list
Rule 4     statement_list_opt -> <empty>
Rule 5     start_tag -> OPEN_TAG
Rule 6     start_tag -> OPEN_TAG_WITH_ECHO
Rule 7     end_tag -> CLOSE_TAG
Rule 8     end_tag -> <empty>
Rule 9     text -> ARBITRARY_TEXT
Rule 10    function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 11    static_variable_name_list -> static_variable_declaration
Rule 12    static_variable_name_list -> static_variable_name_list COMMA static_variable_declaration
Rule 13    static_variable_declaration -> variable_name function_static_initializer_opt
Rule 14    function_static_initializer_opt -> function_static_initializer
Rule 15    function_static_initializer_opt -> <empty>
Rule 16    function_static_initializer_opt -> EQUAL constant_expression
Rule 17    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 18    variable_name_list -> simple_variable
Rule 19    variable_name_list -> variable_name_list COMMA simple_variable
Rule 20    primary_expression -> variable
Rule 21    primary_expression -> class_constant_access_expression
Rule 22    primary_expression -> constant_access_expression
Rule 23    primary_expression -> literal
Rule 24    primary_expression -> array_creation_expression
Rule 25    primary_expression -> intrinsic
Rule 26    primary_expression -> anonymous_function_creation_expression
Rule 27    primary_expression -> object_creation_expression
Rule 28    primary_expression -> postfix_increment_expression
Rule 29    primary_expression -> postfix_decrement_expression
Rule 30    primary_expression -> prefix_increment_expression
Rule 31    primary_expression -> prefix_decrement_expression
Rule 32    primary_expression -> byref_assignment_expression
Rule 33    primary_expression -> shell_command_expression
Rule 34    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 35    simple_variable -> variable_name
Rule 36    simple_variable -> DOLLAR simple_variable
Rule 37    simple_variable -> DOLLAR LBRACE expression RIGHT_PARENTHESIS
Rule 38    dereferencable_expression -> variable
Rule 39    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 40    dereferencable_expression -> array_creation_expression
Rule 41    dereferencable_expression -> string_literal
Rule 42    callable_expression -> callable_variable
Rule 43    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 44    callable_expression -> array_creation_expression
Rule 45    callable_expression -> string_literal
Rule 46    callable_variable -> simple_variable
Rule 47    callable_variable -> subscript_expression
Rule 48    callable_variable -> member_call_expression
Rule 49    callable_variable -> scoped_call_expression
Rule 50    callable_variable -> function_call_expression
Rule 51    variable -> callable_variable
Rule 52    variable -> scoped_property_access_expression
Rule 53    variable -> member_access_expression
Rule 54    constant_access_expression -> qualified_name
Rule 55    literal -> integer_literal
Rule 56    literal -> floating_literal
Rule 57    literal -> string_literal
Rule 58    intrinsic -> empty_intrinsic
Rule 59    intrinsic -> eval_intrinsic
Rule 60    intrinsic -> exit_intrinsic
Rule 61    intrinsic -> isset_intrinsic
Rule 62    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 63    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 64    exit_intrinsic -> EXIT
Rule 65    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 66    exit_intrinsic -> DIE
Rule 67    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 68    intrinsic -> ISSET LEFT_PARENTHESIS variable_list COMMA_opt RIGHT_PARENTHESIS
Rule 69    COMMA_opt -> COMMA
Rule 70    COMMA_opt -> <empty>
Rule 71    variable_list -> variable
Rule 72    variable_list -> variable_list COMMA variable
Rule 73    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 74    static_opt -> static
Rule 75    static_opt -> <empty>
Rule 76    AMPERSAND_opt -> AMPERSAND
Rule 77    AMPERSAND_opt -> <empty>
Rule 78    parameter_declaration_list_opt -> parameter_declaration_list
Rule 79    parameter_declaration_list_opt -> <empty>
Rule 80    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 81    anonymous_function_use_clause_opt -> <empty>
Rule 82    return_type_opt -> return_type
Rule 83    return_type_opt -> <empty>
Rule 84    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 85    use_variable_name_list -> AMPERSAND_opt variable_name
Rule 86    use_variable_name_list -> use_variable_name_list COMMA AMPERSAND_opt variable_name
Rule 87    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 88    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COMMA_opt RIGHT_PARENTHESIS
Rule 89    object_creation_expression -> NEW class_type_designator
Rule 90    object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 91    object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LBRACE class_member_declarations_opt RBRACE
Rule 92    argument_expression_list_opt -> argument_expression_list
Rule 93    argument_expression_list_opt -> <empty>
Rule 94    class_base_clause_opt -> class_base_clause
Rule 95    class_base_clause_opt -> <empty>
Rule 96    class_interface_clause_opt -> class_interface_clause
Rule 97    class_interface_clause_opt -> <empty>
Rule 98    class_member_declarations_opt -> class_member_declarations
Rule 99    class_member_declarations_opt -> <empty>
Rule 100   class_type_designator -> qualified_name
Rule 101   class_type_designator -> new_variable
Rule 102   new_variable -> simple_variable
Rule 103   new_variable -> new_variable LBRACKET expression_opt RBRACKET
Rule 104   new_variable -> new_variable LBRACE expression RBRACE
Rule 105   new_variable -> new_variable ARROW member_name
Rule 106   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 107   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 108   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 109   expression_opt -> expression
Rule 110   expression_opt -> <empty>
Rule 111   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 112   array_creation_expression -> LBRACKET array_initializer_opt RBRACKET
Rule 113   array_initializer_opt -> array_initializer
Rule 114   array_initializer_opt -> <empty>
Rule 115   array_initializer -> array_initializer_list COMMA_opt
Rule 116   array_initializer_list -> array_element_initializer COMMA_opt
Rule 117   array_element_initializer -> AMPERSAND_opt element_value
Rule 118   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 119   element_key -> expression
Rule 120   element_value -> expression
Rule 121   subscript_expression -> dereferencable_expression LBRACKET expression_opt RBRACKET
Rule 122   subscript_expression -> dereferencable_expression LBRACE expression RBRACE
Rule 123   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 124   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 125   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 126   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 127   argument_expression_list -> argument_expression
Rule 128   argument_expression_list -> argument_expression_list COMMA argument_expression
Rule 129   argument_expression -> variadic_unpacking
Rule 130   argument_expression -> expression
Rule 131   variadic_unpacking -> ELLIPSIS expression
Rule 132   member_access_expression -> dereferencable_expression ARROW member_name
Rule 133   member_name -> NAME
Rule 134   member_name -> simple_variable
Rule 135   member_name -> LBRACE expression RBRACE
Rule 136   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 137   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 138   postfix_increment_expression -> variable INCREMENT
Rule 139   postfix_decrement_expression -> variable DECREMENT
Rule 140   prefix_increment_expression -> INCREMENT variable
Rule 141   prefix_decrement_expression -> DECREMENT variable
Rule 142   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 143   dq_char_sequence_opt -> dq_char_sequence
Rule 144   dq_char_sequence_opt -> <empty>
Rule 145   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 146   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 147   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list COMMA RIGHT_PARENTHESIS
Rule 148   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 149   scope_resolution_qualifier -> relative_scope
Rule 150   scope_resolution_qualifier -> qualified_name
Rule 151   scope_resolution_qualifier -> dereferencable_expression
Rule 152   relative_scope -> SELF
Rule 153   relative_scope -> PARENT
Rule 154   relative_scope -> STATIC
Rule 155   clone_expression -> primary_expression
Rule 156   clone_expression -> CLONE primary_expression
Rule 157   exponentiation_expression -> clone_expression
Rule 158   exponentiation_expression -> clone_expression EXPONENTIATION exponentiation_expression
Rule 159   unary_expression -> exponentiation_expression
Rule 160   unary_expression -> unary_op_expression
Rule 161   unary_expression -> error_control_expression
Rule 162   unary_expression -> cast_expression
Rule 163   unary_op_expression -> unary_operator unary_expression
Rule 164   unary_operator -> PLUS
Rule 165   unary_operator -> MINUS
Rule 166   unary_operator -> TILDE
Rule 167   error_control_expression -> AT unary_expression
Rule 168   cast_expression -> LEFT_PARENTHESIS cast_type RIGHT_PARENTHESIS unary_expression
Rule 169   cast_type -> ARRAY
Rule 170   cast_type -> BINARY
Rule 171   cast_type -> BOOL
Rule 172   cast_type -> BOOLEAN
Rule 173   cast_type -> DOUBLE
Rule 174   cast_type -> INT
Rule 175   cast_type -> INTEGER
Rule 176   cast_type -> FLOAT
Rule 177   cast_type -> OBJECT
Rule 178   cast_type -> REAL
Rule 179   cast_type -> STRING
Rule 180   cast_type -> UNSET
Rule 181   instanceof_expression -> unary_expression
Rule 182   instanceof_expression -> instanceof_subj instanceof class_type_designator
Rule 183   instanceof_subj -> instanceof_expression
Rule 184   logical_not_expression -> instanceof_expression
Rule 185   logical_not_expression -> NOT instanceof_expression
Rule 186   multiplicative_expression -> logical_not_expression
Rule 187   multiplicative_expression -> multiplicative_expression TIMES logical_not_expression
Rule 188   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 189   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 190   additive-expression -> multiplicative-expression
Rule 191   additive-expression -> additive-expression PLUS multiplicative-expression
Rule 192   additive-expression -> additive-expression LESS multiplicative-expression
Rule 193   additive-expression -> additive-expression CONCAT multiplicative-expression
Rule 194   shift-expression -> additive-expression
Rule 195   shift-expression -> shift-expression SL additive-expression
Rule 196   shift-expression -> shift-expression SR additive-expression
Rule 197   relational-expression -> shift-expression
Rule 198   relational-expression -> relational-expression LESS_THAN shift-expression
Rule 199   relational-expression -> relational-expression IS_SMALLER_OR_EQUAL shift-expression
Rule 200   relational-expression -> relational-expression IS_GREATER_OR_EQUAL shift-expression
Rule 201   relational-expression -> relational-expression GREATER_THAN_OR_EQUAL shift-expression
Rule 202   relational-expression -> relational-expression SPACESHIP shift-expression
Rule 203   equality-expression -> relational-expression
Rule 204   equality-expression -> equality-expression EQUAL relational-expression
Rule 205   equality-expression -> equality-expression IS_NOT_EQUAL relational-expression
Rule 206   equality-expression -> equality-expression IS_IDENTICAL relational-expression
Rule 207   equality-expression -> equality-expression IS_NOT_IDENTICAL relational-expression
Rule 208   bitwise-AND-expression -> equality-expression
Rule 209   bitwise-AND-expression -> bitwise-AND-expression AMPERSAND equality-expression
Rule 210   bitwise-exc-OR-expression -> bitwise-AND-expression
Rule 211   bitwise-exc-OR-expression -> bitwise-exc-OR-expression BITWISE_XOR bitwise-AND-expression
Rule 212   bitwise-inc-OR-expression -> bitwise-exc-OR-expression
Rule 213   bitwise-inc-OR-expression -> bitwise-inc-OR-expression BITWISE_OR bitwise-exc-OR-expression
Rule 214   logical-AND-expression-1 -> bitwise-inc-OR-expression
Rule 215   logical-AND-expression-1 -> logical-AND-expression-1 AMPERSAND AMPERSAND bitwise-inc-OR-expression
Rule 216   logical-inc-OR-expression-1 -> logical-AND-expression-1
Rule 217   logical-inc-OR-expression-1 -> logical-inc-OR-expression-1 BITWISE_OR BITWISE_OR logical-AND-expression-1
Rule 218   coalesce-expression -> logical-inc-OR-expression-1
Rule 219   coalesce-expression -> logical-inc-OR-expression-1 COALESCE coalesce-expression
Rule 220   conditional-expression -> coalesce-expression
Rule 221   conditional-expression -> conditional-expression TERNARY_OPERATION expression DOUBLE_POINT coalesce-expression
Rule 222   conditional-expression -> conditional-expression TERNARY_OPERATION DOUBLE_POINT coalesce-expression
Rule 223   assignment-expression -> conditional-expression
Rule 224   assignment-expression -> simple-assignment-expression
Rule 225   assignment-expression -> compound-assignment-expression
Rule 226   simple-assignment-expression -> variable EQUAL assignment-expression
Rule 227   simple-assignment-expression -> list-intrinsic EQUAL assignment-expression
Rule 228   list-intrinsic -> LIST LEFT_PARENTHESIS list-expression-list RIGHT_PARENTHESIS
Rule 229   list-expression-list -> unkeyed-list-expression-list
Rule 230   list-expression-list -> keyed-list-expression-list COLON
Rule 231   list-expression-list -> keyed-list-expression-list
Rule 232   unkeyed-list-expression-list -> list-or-variable
Rule 233   unkeyed-list-expression-list -> COLON
Rule 234   unkeyed-list-expression-list -> unkeyed-list-expression-list COLON list-or-variable COLON
Rule 235   unkeyed-list-expression-list -> unkeyed-list-expression-list COLON list-or-variable
Rule 236   keyed-list-expression-list -> expression DOUBLE_ARROW list-or-variable
Rule 237   keyed-list-expression-list -> keyed-list-expression-list COLON expression DOUBLE_ARROW list-or-variable
Rule 238   list-or-variable -> list-intrinsic
Rule 239   list-or-variable -> AMPERSAND variable
Rule 240   list-or-variable -> variable
Rule 241   byref-assignment-expression -> variable EQUAL AMPERSAND variable
Rule 242   compound-assignment-expression -> variable compound-assignment-operator assignment-expression
Rule 243   compound-assignment-operator -> POW_EQUAL
Rule 244   compound-assignment-operator -> MUL_EQUAL
Rule 245   compound-assignment-operator -> DIV_EQUAL
Rule 246   compound-assignment-operator -> MOD_EQUAL
Rule 247   compound-assignment-operator -> PLUS_EQUAL
Rule 248   compound-assignment-operator -> MINUS_EQUAL
Rule 249   compound-assignment-operator -> CONCAT_EQUAL
Rule 250   compound-assignment-operator -> SL_EQUAL
Rule 251   compound-assignment-operator -> SR_EQUAL
Rule 252   compound-assignment-operator -> AND_EQUAL
Rule 253   compound-assignment-operator -> XOR_EQUAL
Rule 254   compound-assignment-operator -> OR_EQUAL
Rule 255   yield-from-expression -> YIELD_FROM assignment-expression
Rule 256   yield-expression -> yield-from-expression
Rule 257   yield-expression -> YIELD
Rule 258   yield-expression -> YIELD yield-expression
Rule 259   yield-expression -> YIELD yield-from-expression DOUBLE_ARROW yield-expression
Rule 260   print-expression -> yield-expression
Rule 261   print-expression -> PRINT print-expression
Rule 262   logical-AND-expression-2 -> print-expression
Rule 263   logical-AND-expression-2 -> logical-AND-expression-2 AND yield-expression
Rule 264   logical-exc-OR-expression -> logical-AND-expression-2
Rule 265   logical-exc-OR-expression -> logical-exc-OR-expression XOR logical-AND-expression-2
Rule 266   logical-inc-OR-expression-2 -> logical-exc-OR-expression
Rule 267   logical-inc-OR-expression-2 -> logical-inc-OR-expression-2 OR logical-exc-OR-expression
Rule 268   expression -> logical-inc-OR-expression-2
Rule 269   expression -> include-expression
Rule 270   expression -> include-once-expression
Rule 271   expression -> require-expression
Rule 272   expression -> require-once-expression
Rule 273   include-expression -> INCLUDE expression
Rule 274   include-once-expression -> INCLUDE_ONCE expression
Rule 275   require-expression -> REQUIRE expression
Rule 276   require-once-expression -> REQUIRE_ONCE expression
Rule 277   constant-expression -> expression
Rule 278   statement -> compound-statement
Rule 279   statement -> named-label-statement
Rule 280   statement -> expression-statement
Rule 281   statement -> selection-statement
Rule 282   statement -> iteration-statement
Rule 283   statement -> jump-statement
Rule 284   statement -> try-statement
Rule 285   statement -> declare-statement
Rule 286   statement -> echo-statement
Rule 287   statement -> unset-statement
Rule 288   statement -> const-declaration
Rule 289   statement -> function-definition
Rule 290   statement -> class-declaration
Rule 291   statement -> interface-declaration
Rule 292   statement -> trait-declaration
Rule 293   statement -> namespace-definition
Rule 294   statement -> namespace-use-declaration
Rule 295   statement -> global-declaration
Rule 296   statement -> function-static-declaration
Rule 297   compound-statement -> LEFT_CBRAC statement-list RIGHT_CBRAC
Rule 298   compound-statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 299   statement-list -> statement
Rule 300   statement-list -> statement-list statement
Rule 301   named-label-statement -> name DOUBLE_POINT
Rule 302   expression-statement -> expression SEMICOLON
Rule 303   expression-statement -> SEMICOLON
Rule 304   selection-statement -> if-statement
Rule 305   selection-statement -> switch-statement
Rule 306   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif-clauses-1 else-clause-1
Rule 307   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif-clauses-1
Rule 308   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else-clause-1
Rule 309   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 310   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list elseif-clauses-2 else-clause-2 ENDIF SEMICOLON
Rule 311   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list elseif-clauses-2 ENDIF SEMICOLON
Rule 312   if-statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list else-clause-2 ENDIF SEMICOLON
Rule 313   elseif-clauses-1 -> elseif-clause-1
Rule 314   elseif-clauses-1 -> elseif-clauses-1 elseif-clause-1
Rule 315   elseif-clause-1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 316   else-clause-1 -> ELSE statement
Rule 317   elseif-clauses-2 -> elseif-clause-2
Rule 318   elseif-clauses-2 -> elseif-clauses-2 elseif-clause-2
Rule 319   elseif-clause-2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list
Rule 320   else-clause-2 -> ELSE DOUBLE_POINT statement-list
Rule 321   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case-statements RIGHT_CBRAC
Rule 322   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 323   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case-statements ENDSWITCH SEMICOLON
Rule 324   switch-statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 325   case-statements -> case-statement case-statements
Rule 326   case-statements -> case-statement
Rule 327   case-statements -> default-statement case-statements
Rule 328   case-statements -> default-statement
Rule 329   case-statement -> CASE expression case-default-label-terminator statement-list
Rule 330   case-statement -> CASE expression case-default-label-terminator
Rule 331   default-statement -> DEFAULT case-default-label-terminator statement-list
Rule 332   default-statement -> DEFAULT case-default-label-terminator
Rule 333   case-default-label-terminator -> DOUBLE_POINT
Rule 334   case-default-label-terminator -> SEMICOLON
Rule 335   iteration-statement -> while-statement
Rule 336   iteration-statement -> do-statement
Rule 337   iteration-statement -> for-statement
Rule 338   iteration-statement -> foreach-statement
Rule 339   while-statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 340   while-statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDWHILE SEMICOLON
Rule 341   do-statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 342   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 343   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS statement
Rule 344   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 345   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 346   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 347   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS statement
Rule 348   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS statement
Rule 349   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 350   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 351   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 352   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 353   for-statement -> FOR LEFT_PARENTHESIS for-initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 354   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 355   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON for-control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 356   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for-end-of-loop RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 357   for-statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOR SEMICOLON
Rule 358   for-initializer -> for-expression-group
Rule 359   for-control -> for-expression-group
Rule 360   for-end-of-loop -> for-expression-group
Rule 361   for-expression-group -> expression
Rule 362   for-expression-group -> for-expression-group COLON expression
Rule 363   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-key foreach-value RIGHT_PARENTHESIS statement
Rule 364   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-value RIGHT_PARENTHESIS statement
Rule 365   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-key foreach-value RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOREACH SEMICOLON
Rule 366   foreach-statement -> FOREACH LEFT_PARENTHESIS foreach-collection-name AS foreach-value RIGHT_PARENTHESIS DOUBLE_POINT statement-list ENDFOREACH SEMICOLON
Rule 367   foreach-collection-name -> expression
Rule 368   foreach-key -> expression DOUBLE_ARROW
Rule 369   foreach-value -> foreach-value_expression
Rule 370   foreach-value -> AMPERSAND expression
Rule 371   foreach-value -> list-intrinsic
Rule 372   jump-statement -> goto-statement
Rule 373   jump-statement -> continue-statement
Rule 374   jump-statement -> break-statement
Rule 375   jump-statement -> return-statement
Rule 376   jump-statement -> throw-statement
Rule 377   goto-statement -> GOTO name SEMICOLON
Rule 378   continue-statement -> CONTINUE breakout-level SEMICOLON
Rule 379   continue-statement -> CONTINUE SEMICOLON
Rule 380   breakout-level -> INTEGER_LITERAL
Rule 381   breakout-level -> LEFT_PARENTHESIS breakout-level RIGHT_PARENTHESIS
Rule 382   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 383   breakout_levelopt -> breakout_level
Rule 384   breakout_levelopt -> <empty>
Rule 385   breakout_level -> expression
Rule 386   return_statement -> RETURN expressionopt SEMICOLON
Rule 387   expressionopt -> expression
Rule 388   expressionopt -> <empty>
Rule 389   throw_statement -> THROW expression SEMICOLON
Rule 390   try_statement -> TRY compound_statement catch_clauses
Rule 391   try_statement -> TRY compound_statement finally_clause
Rule 392   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 393   catch_clauses -> catch_clause
Rule 394   catch_clauses -> catch_clauses catch_clause
Rule 395   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 396   catch_name_list -> qualified_name
Rule 397   catch_name_list -> catch_name_list
Rule 398   finally_clause -> FINALLY compound_statement
Rule 399   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 400   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 401   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 402   declare_directive -> TICKS EQUALS literal
Rule 403   declare_directive -> ENCODING EQUALS literal
Rule 404   declare_directive -> STRICT_TYPES EQUALS literal
Rule 405   echo_statement -> ECHO expression_list SEMICOLON
Rule 406   expression_list -> expression
Rule 407   expression_list -> expression_list COMMA expression
Rule 408   unset_statement -> UNSET LEFT_PARENTHESIS variable_list commaopt RIGHT_PARENTHESIS SEMICOLON
Rule 409   commaopt -> COMMA
Rule 410   commaopt -> <empty>
Rule 411   function_definition -> function_definition_header compound_statement
Rule 412   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_typeopt
Rule 413   ampersandopt -> AMPERSAND
Rule 414   ampersandopt -> <empty>
Rule 415   parameter_declaration_list -> simple_parameter_declaration_list
Rule 416   parameter_declaration_list -> variadic_declaration_list
Rule 417   simple_parameter_declaration_list -> parameter_declaration
Rule 418   simple_parameter_declaration_list -> parameter_declaration_list COMMA parameter_declaration
Rule 419   variadic_declaration_list -> simple_parameter_declaration_list COMMA variadic_parameter
Rule 420   variadic_declaration_list -> variadic_parameter
Rule 421   parameter_declaration -> type_declarationopt ampersandopt variable_name default_argument_specifieropt
Rule 422   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS variable_name
Rule 423   return_type -> DOUBLE_POINT type_declaration
Rule 424   return_type -> DOUBLE_POINT VOID
Rule 425   type_declarationopt -> type_declaration
Rule 426   type_declarationopt -> <empty>
Rule 427   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 428   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 429   TERNARY_OPERATIONopt -> <empty>
Rule 430   base_type_declaration -> array
Rule 431   base_type_declaration -> callable
Rule 432   base_type_declaration -> iterable
Rule 433   base_type_declaration -> scalar_type
Rule 434   base_type_declaration -> qualified_name
Rule 435   scalar_type -> BOOL
Rule 436   scalar_type -> FLOAT
Rule 437   scalar_type -> INT
Rule 438   scalar_type -> STRING
Rule 439   default_argument_specifieropt -> default_argument_specifier
Rule 440   default_argument_specifieropt -> <empty>
Rule 441   default_argument_specifier -> EQUAL constant_expression
Rule 442   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 443   class_modifieropt -> class_modifier
Rule 444   class_modifieropt -> <empty>
Rule 445   class_base_clauseopt -> class_base_clause
Rule 446   class_base_clauseopt -> <empty>
Rule 447   class_interface_clauseopt -> class_interface_clause
Rule 448   class_interface_clauseopt -> <empty>
Rule 449   class_member_declarationsopt -> class_member_declarations
Rule 450   class_member_declarationsopt -> <empty>
Rule 451   class_modifier -> ABSTRACT
Rule 452   class_modifier -> FINAL
Rule 453   class_base_clause -> EXTENDS qualified_name
Rule 454   class_interface_clause -> IMPLEMENTS qualified_name
Rule 455   class_interface_clause -> class_interface_clause COMMA qualified_name
Rule 456   class_member_declarations -> class_member_declaration
Rule 457   class_member_declarations -> class_member_declarations class_member_declaration
Rule 458   class_member_declaration -> class_const_declaration
Rule 459   class_member_declaration -> property_declaration
Rule 460   class_member_declaration -> method_declaration
Rule 461   class_member_declaration -> constructor_declaration
Rule 462   class_member_declaration -> destructor_declaration
Rule 463   class_member_declaration -> trait_use_clause
Rule 464   const_declaration -> CONST const_elements SEMICOLON
Rule 465   class_const_declaration -> visibility_modifieropt CONST const_elements SEMICOLON
Rule 466   const_elements -> const_element
Rule 467   const_elements -> const_elements COMMA const_element
Rule 468   const_element -> name EQUAL constant_expression
Rule 469   property_declaration -> property_modifier property_elements SEMICOLON
Rule 470   property_modifier -> VAR
Rule 471   property_modifier -> visibility_modifier static_modifieropt
Rule 472   property_modifier -> static_modifier visibility_modifieropt
Rule 473   static_modifieropt -> static_modifier
Rule 474   static_modifieropt -> <empty>
Rule 475   visibility_modifier -> PUBLIC
Rule 476   visibility_modifier -> PROTECTED
Rule 477   visibility_modifier -> PRIVATE
Rule 478   static_modifier -> STATIC
Rule 479   property_elements -> property_element
Rule 480   property_elements -> property_elements property_element
Rule 481   property_element -> variable_name property_initializeropt SEMICOLON
Rule 482   property_initializeropt -> property_initializer
Rule 483   property_initializeropt -> <empty>
Rule 484   property_initializer -> EQUAL constant_expression
Rule 485   method_declaration -> method_modifiersopt function_definition
Rule 486   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 487   method_modifiersopt -> method_modifiers
Rule 488   method_modifiersopt -> <empty>
Rule 489   method_modifiers -> method_modifier
Rule 490   method_modifiers -> method_modifiers method_modifier
Rule 491   method_modifier -> visibility_modifier
Rule 492   method_modifier -> static_modifier
Rule 493   method_modifier -> class_modifier
Rule 494   constructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __construct LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 495   destructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __destruct LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 496   parameter_declaration_listopt -> parameter_declaration_list
Rule 497   parameter_declaration_listopt -> <empty>
Rule 498   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 499   interface_base_clauseopt -> interface_base_clause
Rule 500   interface_base_clauseopt -> <empty>
Rule 501   interface_member_declarationsopt -> interface_member_declarations
Rule 502   interface_member_declarationsopt -> <empty>
Rule 503   interface_base_clause -> EXTENDS qualified_name
Rule 504   interface_base_clause -> interface_base_clause COMMA qualified_name
Rule 505   interface_member_declarations -> interface_member_declaration
Rule 506   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 507   interface_member_declaration -> class_const_declaration
Rule 508   interface_member_declaration -> method_declaration
Rule 509   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 510   trait_member_declarationsopt -> trait_member_declarations
Rule 511   trait_member_declarationsopt -> <empty>
Rule 512   trait_member_declarations -> trait_member_declaration
Rule 513   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 514   trait_member_declaration -> property_declaration
Rule 515   trait_member_declaration -> method_declaration
Rule 516   trait_member_declaration -> constructor_declaration
Rule 517   trait_member_declaration -> destructor_declaration
Rule 518   trait_member_declaration -> trait_use_clauses
Rule 519   trait_use_clauses -> trait_use_clause
Rule 520   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 521   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 522   trait_name_list -> qualified_name
Rule 523   trait_name_list -> trait_name_list COMMA qualified_name
Rule 524   trait_use_specification -> SEMICOLON
Rule 525   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 526   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 527   trait_select_and_alias_clausesopt -> <empty>
Rule 528   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 529   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 530   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 531   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 532   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 533   trait_alias_as_clause -> name AS visibility_modifieropt name
Rule 534   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 535   visibility_modifieropt -> visibility_modifier
Rule 536   visibility_modifieropt -> <empty>
Rule 537   nameopt -> name
Rule 538   nameopt -> <empty>
Rule 539   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 540   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 541   namespace_nameopt -> namespace_name
Rule 542   namespace_nameopt -> <empty>
Rule 543   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 544   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 545   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 546   namespace_function_or_constopt -> namespace_function_or_const
Rule 547   namespace_function_or_constopt -> <empty>
Rule 548   NS_SEPARATORopt -> NS_SEPARATOR
Rule 549   NS_SEPARATORopt -> <empty>
Rule 550   namespace_use_clauses -> namespace_use_clause
Rule 551   namespace_use_clauses -> namespace_use_clauses COMMA namespace_use_clause
Rule 552   namespace_use_clause -> qualified_name namespace_aliasing_clauseopt
Rule 553   namespace_aliasing_clause -> AS name
Rule 554   namespace_function_or_const -> FUNCTION
Rule 555   namespace_function_or_const -> CONST
Rule 556   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 557   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 COMMA namespace_use_group_clause_1
Rule 558   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clauseopt
Rule 559   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 560   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 COMMA namespace_use_group_clause_2
Rule 561   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clauseopt

Terminals, with rules where they appear

ABSTRACT             : 451
AMPERSAND            : 76 209 215 215 239 241 370 413
AND                  : 263
AND_EQUAL            : 252
ARRAY                : 111 169
AS                   : 363 364 365 366 533 534 553
ASTERISK             : 
ATTRIBUTE            : 
BACKTICK             : 142 142
BAD_CARACTER         : 
BITWISE_NOT          : 
BITWISE_OR           : 213 217 217
BITWISE_XOR          : 211
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 382
CALLABLE             : 
CASE                 : 329 330
CATCH                : 395
CLASS                : 90 91 442
CLONE                : 156
CLOSE_TAG            : 7
COALESCE             : 219
COALESCE_EQUAL       : 
COLON                : 230 233 234 234 235 237 362
COMMENT              : 
CONCAT               : 193
CONCAT_EQUAL         : 249
CONST                : 464 465 555
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 378 379
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 399 400 401
DEFAULT              : 331 332
DIE                  : 66 67
DIVIDE               : 188
DIV_EQUAL            : 245
DNUMBER              : 
DO                   : 341
DOC_COMMENT          : 
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLE_ARROW         : 236 237 259 368
DOUBLE_COLON         : 106 107 108 145 146 147 148 532
DOUBLE_POINT         : 221 222 301 310 311 312 319 320 323 324 333 340 350 351 352 353 354 355 356 357 365 366 400 423 424
DQUOTATION_MARK      : 
ECHO                 : 405
ELLIPSIS             : 131 422
ELSE                 : 316 320
ELSEIF               : 315 319
EMPTY                : 62
ENDDECLARE           : 400
ENDFOR               : 350 351 352 353 354 355 356 357
ENDFOREACH           : 365 366
ENDIF                : 310 311 312
ENDSWITCH            : 323 324
ENDWHILE             : 340
EQUAL                : 16 204 226 227 241 441 468 484
EQUALS               : 402 403 404
EVAL                 : 63
EXIT                 : 64 65
EXPONENT_DNUMBER     : 
EXTENDS              : 453 503
FINAL                : 452
FINALLY              : 398
FN                   : 
FOR                  : 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357
FOREACH              : 363 364 365 366
FUNCTION             : 73 412 494 495 554
GLOBAL               : 17
GOTO                 : 377
IF                   : 306 307 308 309 310 311 312
IMPLEMENTS           : 454
INC                  : 
INCLUDE              : 273
INCLUDE_ONCE         : 274
INSTANCEOF           : 
INSTEADOF            : 532
INTERFACE            : 498
ISSET                : 68
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 200
IS_IDENTICAL         : 206
IS_NOT_EQUAL         : 205
IS_NOT_IDENTICAL     : 207
IS_SMALLER_OR_EQUAL  : 199
LEFT_CBRAC           : 297 298 321 322 442 498 509 525 544 545
LEFT_PARENTHESIS     : 34 39 43 62 63 65 67 68 73 84 87 88 90 111 123 124 125 126 136 137 146 147 168 228 306 307 308 309 310 311 312 315 319 321 322 323 324 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 363 364 365 366 381 395 399 400 401 408 412 494 495
LEFT_SQRBRAC         : 
LESS                 : 192
LESS_THAN            : 198
LIST                 : 228
LNUMBER              : 
MINUS_EQUAL          : 248
MOD_EQUAL            : 246
MORE_THAN            : 
MUL_EQUAL            : 244
NAMESPACE            : 539 540
NEGATION             : 
NEW                  : 87 88 89 90 91
NS_SEPARATOR         : 544 545 548
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 5
OPEN_TAG_WITH_ECHO   : 6
OR                   : 267
OR_EQUAL             : 254
PLUS                 : 164 191
PLUS_EQUAL           : 247
POW                  : 
POW_EQUAL            : 243
PRINT                : 261
PRIVATE              : 477
PROTECTED            : 476
PUBLIC               : 475
REQUIRE              : 275
REQUIRE_ONCE         : 276
RETURN               : 386
RIGHT_CBRAC          : 297 298 321 322 442 498 509 525 544 545
RIGHT_PARENTHESIS    : 34 37 39 43 62 63 65 67 68 73 84 87 88 90 111 123 124 125 126 136 137 146 147 168 228 306 307 308 309 310 311 312 315 319 321 322 323 324 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 363 364 365 366 381 395 399 400 401 408 412 494 495
RIGHT_SQRBRAC        : 
SEMICOLON            : 10 17 302 303 310 311 312 323 324 334 340 341 342 342 343 343 344 344 345 345 346 346 347 347 348 348 349 349 350 350 350 351 351 351 352 352 352 353 353 353 354 354 354 355 355 355 356 356 356 357 357 357 365 366 377 378 379 382 386 389 400 401 405 408 464 465 469 481 486 524 530 531 539 543 544 545
SL                   : 195
SL_EQUAL             : 250
SPACESHIP            : 202
SR                   : 196
SR_EQUAL             : 251
START_HEREDOC        : 
STATIC               : 10 154 478
STRING               : 179 438
SWITCH               : 321 322 323 324
TERNARY_OPERATION    : 221 222 428
THROW                : 389
TRAIT                : 509
TRY                  : 390 391 392
UNSET                : 180 408
USE                  : 84 521 543 544 545
VAR                  : 470
VARIABLE             : 395
WHILE                : 339 340 341
WHITESPACE           : 
XOR                  : 265
XOR_EQUAL            : 253
YIELD                : 257 258 259
YIELD_FROM           : 255
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 73 85 86 117 118
AMPERSANDopt         : 494 495
ARBITRARY_TEXT       : 9
ARROW                : 105 118 132 136 137
AT                   : 167
BINARY               : 170
BOOL                 : 171 435
BOOLEAN              : 172
COMMA                : 12 19 69 72 86 124 126 128 137 147 407 409 418 419 455 467 504 523 551 557 560
COMMA_opt            : 68 88 115 116
DECREMENT            : 139 141
DOLLAR               : 36 37
DOUBLE               : 173
ENCODING             : 403
EXPONENTIATION       : 158
FLOAT                : 176 436
GREATER_THAN_OR_EQUAL : 201
INCREMENT            : 138 140
INT                  : 174 437
INTEGER              : 175
INTEGER_LITERAL      : 380
LBRACE               : 37 90 91 104 122 135
LBRACKET             : 103 112 121
MINUS                : 165
MODULO               : 189
NAME                 : 133 148
NOT                  : 185
NS_SEPARATORopt      : 544 545
OBJECT               : 177
PARENT               : 153
RBRACE               : 90 91 104 122 135
RBRACKET             : 103 112 121
REAL                 : 178
SELF                 : 152
STRICT_TYPES         : 404
TERNARY_OPERATIONopt : 427
TICKS                : 402
TILDE                : 166
TIMES                : 187
VOID                 : 424
__construct          : 494
__destruct           : 495
additive-expression  : 191 192 193 194 195 196
ampersandopt         : 412 421 422
anonymous_function_creation_expression : 26
anonymous_function_use_clause : 80
anonymous_function_use_clause_opt : 73
argument_expression  : 127 128
argument_expression_list : 88 92 124 126 128 137 147
argument_expression_list_opt : 87 90 123 125 136 146
array                : 430
array_creation_expression : 24 40 44
array_element_initializer : 116
array_initializer    : 113
array_initializer_list : 115
array_initializer_opt : 111 112
assignment-expression : 226 227 242 255
base_type_declaration : 427
bitwise-AND-expression : 209 210 211
bitwise-exc-OR-expression : 211 212 213
bitwise-inc-OR-expression : 213 214 215
break-statement      : 374
break_statement      : 
breakout-level       : 378 381
breakout_level       : 383
breakout_levelopt    : 382
byref-assignment-expression : 
byref_assignment_expression : 32
callable             : 431
callable_expression  : 125 126
callable_variable    : 42 51
case-default-label-terminator : 329 330 331 332
case-statement       : 325 326
case-statements      : 321 323 325 327
cast_expression      : 162
cast_type            : 168
catch_clause         : 393 394
catch_clauses        : 390 392 394
catch_name_list      : 395 397
class-declaration    : 290
class_base_clause    : 94 445
class_base_clause_opt : 90 91
class_base_clauseopt : 442
class_const_declaration : 458 507
class_constant_access_expression : 21
class_declaration    : 
class_interface_clause : 96 447 455
class_interface_clause_opt : 90 91
class_interface_clauseopt : 442
class_member_declaration : 456 457
class_member_declarations : 98 449 457
class_member_declarations_opt : 90 91
class_member_declarationsopt : 442
class_modifier       : 443 493
class_modifieropt    : 442
class_type_designator : 87 88 89 182
clone_expression     : 157 158
coalesce-expression  : 219 220 221 222
commaopt             : 408
compound-assignment-expression : 225
compound-assignment-operator : 242
compound-statement   : 278
compound_statement   : 73 390 391 392 395 398 411 494 495 540
conditional-expression : 221 222 223
const-declaration    : 288
const_declaration    : 
const_element        : 466 467
const_elements       : 464 465 467
constant-expression  : 
constant_access_expression : 22
constant_expression  : 16 441 468 484
constructor_declaration : 461 516
continue-statement   : 373
declare-statement    : 285
declare_directive    : 399 400 401
declare_statement    : 
default-statement    : 327 328
default_argument_specifier : 439
default_argument_specifieropt : 421
dereferencable_expression : 121 122 132 136 137 151
destructor_declaration : 462 517
do-statement         : 336
dq_char_sequence     : 143
dq_char_sequence_opt : 142
echo-statement       : 286
echo_statement       : 
element_key          : 118
element_value        : 117 118
else-clause-1        : 306 308
else-clause-2        : 310 312
elseif-clause-1      : 313 314
elseif-clause-2      : 317 318
elseif-clauses-1     : 306 307 314
elseif-clauses-2     : 310 311 318
empty_intrinsic      : 58
end_tag              : 
equality-expression  : 204 205 206 207 208 209
error_control_expression : 161
eval_intrinsic       : 59
exit_intrinsic       : 60
exponentiation_expression : 158 159
expression           : 34 37 39 43 62 63 104 109 119 120 122 130 131 135 221 236 237 273 274 275 276 277 302 306 307 308 309 310 311 312 315 319 321 322 323 324 329 330 339 340 341 361 362 367 368 370 385 387 389 406 407
expression-statement : 280
expression_list      : 405 407
expression_opt       : 65 67 103 121
expressionopt        : 386
finally_clause       : 391 392
floating_literal     : 56
for-control          : 342 343 346 347 350 351 354 355
for-end-of-loop      : 342 344 346 348 350 352 354 356
for-expression-group : 358 359 360 362
for-initializer      : 342 343 344 345 350 351 352 353
for-statement        : 337
foreach-collection-name : 363 364 365 366
foreach-key          : 363 365
foreach-statement    : 338
foreach-value        : 363 364 365 366
foreach-value_expression : 369
function-definition  : 289
function-static-declaration : 296
function_call_expression : 50
function_definition  : 485
function_definition_header : 411 486
function_static_declaration : 
function_static_initializer : 14
function_static_initializer_opt : 13
global-declaration   : 295
global_declaration   : 
goto-statement       : 372
if-statement         : 304
include-expression   : 269
include-once-expression : 270
instanceof           : 182
instanceof_expression : 183 184 185
instanceof_subj      : 182
integer_literal      : 55
interface-declaration : 291
interface_base_clause : 499 504
interface_base_clauseopt : 498
interface_declaration : 
interface_member_declaration : 505 506
interface_member_declarations : 501 506
interface_member_declarationsopt : 498
intrinsic            : 25
isset_intrinsic      : 61
iterable             : 432
iteration-statement  : 282
jump-statement       : 283
keyed-list-expression-list : 230 231 237
list-expression-list : 228
list-intrinsic       : 227 238 371
list-or-variable     : 232 234 235 236 237
literal              : 23 402 403 404
logical-AND-expression-1 : 215 216 217
logical-AND-expression-2 : 263 264 265
logical-exc-OR-expression : 265 266 267
logical-inc-OR-expression-1 : 217 218 219
logical-inc-OR-expression-2 : 267 268
logical_not_expression : 186 187 188 189
member_access_expression : 53
member_call_expression : 48
member_name          : 105 132 136 137 146 147
method_declaration   : 460 508 515
method_modifier      : 489 490
method_modifiers     : 486 487 490 494 495
method_modifiersopt  : 485
multiplicative-expression : 190 191 192 193
multiplicative_expression : 187 188 189
name                 : 301 377 412 442 468 494 495 498 509 532 533 533 534 537 553
named-label-statement : 279
nameopt              : 534
namespace-definition : 293
namespace-use-declaration : 294
namespace_aliasing_clause : 
namespace_aliasing_clauseopt : 552 558 561
namespace_definition : 
namespace_function_or_const : 544 546
namespace_function_or_constopt : 543 561
namespace_name       : 539 541 544 545 558 561
namespace_nameopt    : 540
namespace_use_clause : 550 551
namespace_use_clauses : 543 551
namespace_use_declaration : 
namespace_use_group_clause_1 : 556 557
namespace_use_group_clause_2 : 559 560
namespace_use_group_clauses_1 : 544 557
namespace_use_group_clauses_2 : 545 560
new_variable         : 101 103 104 105 108
object_creation_expression : 27
parameter_declaration : 417 418
parameter_declaration_list : 78 418 496
parameter_declaration_list_opt : 73
parameter_declaration_listopt : 412 494
postfix_decrement_expression : 29
postfix_increment_expression : 28
prefix_decrement_expression : 31
prefix_increment_expression : 30
primary_expression   : 155 156
print-expression     : 261 262
property_declaration : 459 514
property_element     : 479 480
property_elements    : 469 480
property_initializer : 482
property_initializeropt : 481
property_modifier    : 469
qualified_name       : 54 100 106 123 124 150 396 434 453 454 455 503 504 522 523 532 552
relational-expression : 198 199 200 201 202 203 204 205 206 207
relative_scope       : 107 149
require-expression   : 271
require-once-expression : 272
return-statement     : 375
return_statement     : 
return_type          : 82
return_type_opt      : 73
return_typeopt       : 412
scalar_type          : 433
scope_resolution_qualifier : 145 146 147 148
scoped_call_expression : 49
scoped_property_access_expression : 52
script               : 2 0
script_section       : 1 2
selection-statement  : 281
shell_command_expression : 33
shift-expression     : 195 196 197 198 199 200 201 202
simple-assignment-expression : 224
simple_parameter_declaration_list : 415 419
simple_variable      : 18 19 36 46 102 106 107 108 134 145
start_tag            : 
statement            : 299 300 306 307 308 309 315 316 339 341 342 343 344 345 346 347 348 349 363 364 399
statement-list       : 297 300 310 311 312 319 320 329 331 340 350 351 352 353 354 355 356 357 365 366
statement_list       : 3 400
statement_list_opt   : 
static               : 74
static_modifier      : 472 473 492
static_modifieropt   : 471
static_opt           : 73
static_variable_declaration : 11 12
static_variable_name_list : 10 12
string_literal       : 41 45 57
subscript_expression : 47
switch-statement     : 305
text                 : 
throw-statement      : 376
throw_statement      : 
trait-declaration    : 292
trait_alias_as_clause : 531
trait_declaration    : 
trait_member_declaration : 512 513
trait_member_declarations : 510 513
trait_member_declarationsopt : 509
trait_name_list      : 521 523 532
trait_select_and_alias_clause : 528 529
trait_select_and_alias_clauses : 526 529
trait_select_and_alias_clausesopt : 525
trait_select_insteadof_clause : 530
trait_use_clause     : 463 519 520
trait_use_clauses    : 518 520
trait_use_specification : 521
try-statement        : 284
try_statement        : 
type_declaration     : 423 425
type_declarationopt  : 421 422
unary_expression     : 163 167 168 181
unary_op_expression  : 160
unary_operator       : 163
unkeyed-list-expression-list : 229 234 235
unset-statement      : 287
unset_statement      : 
use_variable_name_list : 84 86
variable             : 20 38 71 72 138 139 140 141 226 239 240 241 241 242
variable_list        : 68 72 408
variable_name        : 13 35 85 86 421 422 481
variable_name_list   : 17 19
variadic_declaration_list : 416
variadic_parameter   : 419 420
variadic_unpacking   : 129
visibility_modifier  : 471 491 534 535
visibility_modifieropt : 465 472 533
while-statement      : 335
yield-expression     : 258 259 260 263
yield-from-expression : 256 259

