Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTRIBUTE
    BAD_CARACTER
    BOOLEAN_AND
    BOOLEAN_OR
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    IS_EQUAL
    LEFT_SQRBRAC
    MORE_THAN
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> script
Rule 1     script -> script_section
Rule 2     script -> script script_section
Rule 3     script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt
Rule 4     script_section -> WHITESPACE
Rule 5     text_opt -> STRING
Rule 6     text_opt -> <empty>
Rule 7     end_tag_opt -> CLOSE_TAG
Rule 8     end_tag_opt -> <empty>
Rule 9     statement_list_opt -> statement_list
Rule 10    statement_list_opt -> <empty>
Rule 11    start_tag -> OPEN_TAG
Rule 12    start_tag -> OPEN_TAG_WITH_ECHO
Rule 13    end_tag -> CLOSE_TAG
Rule 14    end_tag -> <empty>
Rule 15    namespace_name -> NAME
Rule 16    namespace_name -> namespace_name NS_SEPARATOR NAME
Rule 17    function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 18    static_variable_name_list -> static_variable_declaration
Rule 19    static_variable_name_list -> static_variable_name_list static_variable_declaration
Rule 20    static_variable_declaration -> VARIABLE function_static_initializer_opt
Rule 21    function_static_initializer -> EQUAL constant_expression
Rule 22    function_static_initializer_opt -> function_static_initializer
Rule 23    function_static_initializer_opt -> <empty>
Rule 24    function_static_initializer_opt -> EQUAL constant_expression
Rule 25    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 26    variable_name_list -> simple_variable
Rule 27    variable_name_list -> variable_name_list simple_variable
Rule 28    primary_expression -> variable
Rule 29    primary_expression -> class_constant_access_expression
Rule 30    primary_expression -> constant_access_expression
Rule 31    primary_expression -> literal
Rule 32    primary_expression -> array_creation_expression
Rule 33    primary_expression -> intrinsic
Rule 34    primary_expression -> anonymous_function_creation_expression
Rule 35    primary_expression -> object_creation_expression
Rule 36    primary_expression -> postfix_increment_expression
Rule 37    primary_expression -> postfix_decrement_expression
Rule 38    primary_expression -> prefix_increment_expression
Rule 39    primary_expression -> prefix_decrement_expression
Rule 40    primary_expression -> byref_assignment_expression
Rule 41    primary_expression -> shell_command_expression
Rule 42    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 43    simple_variable -> VARIABLE
Rule 44    simple_variable -> DOLLAR simple_variable
Rule 45    simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
Rule 46    dereferencable_expression -> variable
Rule 47    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 48    dereferencable_expression -> array_creation_expression
Rule 49    dereferencable_expression -> string_literal
Rule 50    callable_expression -> callable_variable
Rule 51    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 52    callable_expression -> array_creation_expression
Rule 53    callable_expression -> string_literal
Rule 54    callable_variable -> simple_variable
Rule 55    callable_variable -> subscript_expression
Rule 56    callable_variable -> member_call_expression
Rule 57    callable_variable -> scoped_call_expression
Rule 58    callable_variable -> function_call_expression
Rule 59    variable -> callable_variable
Rule 60    variable -> scoped_property_access_expression
Rule 61    variable -> member_access_expression
Rule 62    constant_access_expression -> qualified_name
Rule 63    literal -> integer_literal
Rule 64    literal -> floating_literal
Rule 65    literal -> string_literal
Rule 66    integer_literal -> LNUMBER
Rule 67    floating_literal -> DNUMBER
Rule 68    string_literal -> STRING
Rule 69    intrinsic -> empty_intrinsic
Rule 70    intrinsic -> eval_intrinsic
Rule 71    intrinsic -> exit_intrinsic
Rule 72    intrinsic -> isset_intrinsic
Rule 73    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 74    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 75    exit_intrinsic -> EXIT
Rule 76    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 77    exit_intrinsic -> DIE
Rule 78    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 79    isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
Rule 80    variable_list_opt -> variable_list
Rule 81    variable_list -> variable
Rule 82    variable_list -> variable_list variable
Rule 83    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 84    static_opt -> STATIC
Rule 85    static_opt -> <empty>
Rule 86    AMPERSAND_opt -> AMPERSAND
Rule 87    AMPERSAND_opt -> <empty>
Rule 88    parameter_declaration_list_opt -> parameter_declaration_list
Rule 89    parameter_declaration_list_opt -> <empty>
Rule 90    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 91    anonymous_function_use_clause_opt -> <empty>
Rule 92    return_type_opt -> return_type
Rule 93    return_type_opt -> <empty>
Rule 94    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 95    use_variable_name_list -> AMPERSAND_opt VARIABLE
Rule 96    use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE
Rule 97    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 98    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
Rule 99    object_creation_expression -> NEW class_type_designator
Rule 100   object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
Rule 101   object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
Rule 102   argument_expression_list_opt -> argument_expression_list
Rule 103   argument_expression_list_opt -> <empty>
Rule 104   class_base_clause_opt -> class_base_clause
Rule 105   class_base_clause_opt -> <empty>
Rule 106   class_interface_clause_opt -> class_interface_clause
Rule 107   class_interface_clause_opt -> <empty>
Rule 108   class_member_declarations_opt -> class_member_declarations
Rule 109   class_member_declarations_opt -> <empty>
Rule 110   class_type_designator -> qualified_name
Rule 111   class_type_designator -> new_variable
Rule 112   new_variable -> simple_variable
Rule 113   new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 114   new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 115   new_variable -> new_variable ARROW member_name
Rule 116   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 117   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 118   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 119   expression_opt -> expression
Rule 120   expression_opt -> <empty>
Rule 121   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 122   array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
Rule 123   array_initializer_opt -> array_initializer
Rule 124   array_initializer_opt -> <empty>
Rule 125   array_initializer -> array_initializer_list
Rule 126   array_initializer -> array_initializer_list COLON
Rule 127   array_initializer_list -> array_element_initializer
Rule 128   array_initializer_list -> array_element_initializer COLON array_element_initializer
Rule 129   array_element_initializer -> AMPERSAND_opt element_value
Rule 130   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 131   element_key -> expression
Rule 132   element_value -> expression
Rule 133   subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 134   subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 135   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 136   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 137   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 138   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 139   argument_expression_list -> argument_expression
Rule 140   argument_expression_list -> argument_expression_list argument_expression
Rule 141   argument_expression -> variadic_unpacking
Rule 142   argument_expression -> expression
Rule 143   variadic_unpacking -> ELLIPSIS expression
Rule 144   member_access_expression -> dereferencable_expression ARROW member_name
Rule 145   member_name -> NAME
Rule 146   member_name -> simple_variable
Rule 147   member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 148   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 149   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 150   postfix_increment_expression -> variable DOUBLEPLUS
Rule 151   postfix_decrement_expression -> variable DOUBLELESS
Rule 152   prefix_increment_expression -> DOUBLEPLUS variable
Rule 153   prefix_decrement_expression -> DOUBLELESS variable
Rule 154   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 155   dq_char_sequence_opt -> DQ_CHAR_SEQUENCE
Rule 156   dq_char_sequence_opt -> <empty>
Rule 157   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 158   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 159   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 160   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 161   scope_resolution_qualifier -> relative_scope
Rule 162   scope_resolution_qualifier -> qualified_name
Rule 163   scope_resolution_qualifier -> dereferencable_expression
Rule 164   relative_scope -> SELF
Rule 165   relative_scope -> PARENT
Rule 166   relative_scope -> STATIC
Rule 167   clone_expression -> primary_expression
Rule 168   clone_expression -> CLONE primary_expression
Rule 169   exponentiation_expression -> clone_expression
Rule 170   exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression
Rule 171   unary_expression -> exponentiation_expression
Rule 172   unary_expression -> unary_op_expression
Rule 173   unary_expression -> error_control_expression
Rule 174   unary_expression -> cast_expression
Rule 175   unary_op_expression -> unary_operator unary_expression
Rule 176   unary_operator -> PLUS
Rule 177   unary_operator -> LESS
Rule 178   unary_operator -> BITWISE_NOT
Rule 179   error_control_expression -> AT unary_expression
Rule 180   cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
Rule 181   instanceof_expression -> unary_expression
Rule 182   instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator
Rule 183   instanceof_subj -> instanceof_expression
Rule 184   logical_not_expression -> instanceof_expression
Rule 185   logical_not_expression -> NEGATION instanceof_expression
Rule 186   multiplicative_expression -> logical_not_expression
Rule 187   multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression
Rule 188   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 189   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 190   additive_expression -> multiplicative_expression
Rule 191   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 192   additive_expression -> additive_expression LESS multiplicative_expression
Rule 193   additive_expression -> additive_expression CONCAT multiplicative_expression
Rule 194   shift_expression -> additive_expression
Rule 195   shift_expression -> shift_expression SL additive_expression
Rule 196   shift_expression -> shift_expression SR additive_expression
Rule 197   relational_expression -> shift_expression
Rule 198   relational_expression -> relational_expression LESS_THAN shift_expression
Rule 199   relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression
Rule 200   relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression
Rule 201   relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression
Rule 202   relational_expression -> relational_expression SPACESHIP shift_expression
Rule 203   equality_expression -> relational_expression
Rule 204   equality_expression -> equality_expression EQUAL relational_expression
Rule 205   equality_expression -> equality_expression IS_NOT_EQUAL relational_expression
Rule 206   equality_expression -> equality_expression IS_IDENTICAL relational_expression
Rule 207   equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression
Rule 208   bitwise_AND_expression -> equality_expression
Rule 209   bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression
Rule 210   bitwise_exc_OR_expression -> bitwise_AND_expression
Rule 211   bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
Rule 212   bitwise_inc_OR_expression -> bitwise_exc_OR_expression
Rule 213   bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
Rule 214   logical_AND_expression_1 -> bitwise_inc_OR_expression
Rule 215   logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
Rule 216   logical_inc_OR_expression_1 -> logical_AND_expression_1
Rule 217   logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
Rule 218   coalesce_expression -> logical_inc_OR_expression_1
Rule 219   coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression
Rule 220   conditional_expression -> coalesce_expression
Rule 221   conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
Rule 222   conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
Rule 223   assignment_expression -> conditional_expression
Rule 224   assignment_expression -> simple_assignment_expression
Rule 225   assignment_expression -> compound_assignment_expression
Rule 226   simple_assignment_expression -> variable EQUAL assignment_expression
Rule 227   simple_assignment_expression -> list_intrinsic EQUAL assignment_expression
Rule 228   list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
Rule 229   list_expression_list -> unkeyed_list_expression_list
Rule 230   list_expression_list -> keyed_list_expression_list COLON
Rule 231   list_expression_list -> keyed_list_expression_list
Rule 232   unkeyed_list_expression_list -> list_or_variable
Rule 233   unkeyed_list_expression_list -> COLON
Rule 234   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON
Rule 235   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable
Rule 236   keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable
Rule 237   keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
Rule 238   list_or_variable -> list_intrinsic
Rule 239   list_or_variable -> AMPERSAND variable
Rule 240   list_or_variable -> variable
Rule 241   byref_assignment_expression -> variable EQUAL AMPERSAND variable
Rule 242   compound_assignment_expression -> variable compound_assignment_operator assignment_expression
Rule 243   compound_assignment_operator -> POW_EQUAL
Rule 244   compound_assignment_operator -> MUL_EQUAL
Rule 245   compound_assignment_operator -> DIV_EQUAL
Rule 246   compound_assignment_operator -> MOD_EQUAL
Rule 247   compound_assignment_operator -> PLUS_EQUAL
Rule 248   compound_assignment_operator -> MINUS_EQUAL
Rule 249   compound_assignment_operator -> CONCAT_EQUAL
Rule 250   compound_assignment_operator -> SL_EQUAL
Rule 251   compound_assignment_operator -> SR_EQUAL
Rule 252   compound_assignment_operator -> AND_EQUAL
Rule 253   compound_assignment_operator -> XOR_EQUAL
Rule 254   compound_assignment_operator -> OR_EQUAL
Rule 255   yield_from_expression -> YIELD_FROM assignment_expression
Rule 256   yield_expression -> yield_from_expression
Rule 257   yield_expression -> YIELD
Rule 258   yield_expression -> YIELD yield_expression
Rule 259   yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression
Rule 260   print_expression -> yield_expression
Rule 261   print_expression -> PRINT print_expression
Rule 262   logical_AND_expression_2 -> print_expression
Rule 263   logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression
Rule 264   logical_exc_OR_expression -> logical_AND_expression_2
Rule 265   logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2
Rule 266   logical_inc_OR_expression_2 -> logical_exc_OR_expression
Rule 267   logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression
Rule 268   expression -> logical_inc_OR_expression_2
Rule 269   expression -> include_expression
Rule 270   expression -> STRING
Rule 271   expression -> include_once_expression
Rule 272   expression -> require_expression
Rule 273   expression -> require_once_expression
Rule 274   include_expression -> INCLUDE expression
Rule 275   include_once_expression -> INCLUDE_ONCE expression
Rule 276   require_expression -> REQUIRE expression
Rule 277   require_once_expression -> REQUIRE_ONCE expression
Rule 278   constant_expression -> expression
Rule 279   statement -> compound_statement
Rule 280   statement -> named_label_statement
Rule 281   statement -> expression_statement
Rule 282   statement -> selection_statement
Rule 283   statement -> iteration_statement
Rule 284   statement -> jump_statement
Rule 285   statement -> try_statement
Rule 286   statement -> declare_statement
Rule 287   statement -> echo_statement
Rule 288   statement -> unset_statement
Rule 289   statement -> const_declaration
Rule 290   statement -> function_definition
Rule 291   statement -> class_declaration
Rule 292   statement -> interface_declaration
Rule 293   statement -> trait_declaration
Rule 294   statement -> namespace_definition
Rule 295   statement -> namespace_use_declaration
Rule 296   statement -> global_declaration
Rule 297   statement -> function_static_declaration
Rule 298   compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC
Rule 299   compound_statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 300   statement_list -> statement
Rule 301   statement_list -> statement_list statement
Rule 302   named_label_statement -> name DOUBLE_POINT
Rule 303   expression_statement -> expression SEMICOLON
Rule 304   expression_statement -> SEMICOLON
Rule 305   selection_statement -> if_statement
Rule 306   selection_statement -> switch_statement
Rule 307   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
Rule 308   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
Rule 309   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
Rule 310   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 311   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
Rule 312   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
Rule 313   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
Rule 314   elseif_clauses_1 -> elseif_clause_1
Rule 315   elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1
Rule 316   elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 317   else_clause_1 -> ELSE statement
Rule 318   elseif_clauses_2 -> elseif_clause_2
Rule 319   elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2
Rule 320   elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
Rule 321   else_clause_2 -> ELSE DOUBLE_POINT statement_list
Rule 322   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
Rule 323   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 324   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
Rule 325   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 326   case_statements -> case_statement case_statements
Rule 327   case_statements -> case_statement
Rule 328   case_statements -> default_statement case_statements
Rule 329   case_statements -> default_statement
Rule 330   case_statement -> CASE expression case_default_label_terminator statement_list
Rule 331   case_statement -> CASE expression case_default_label_terminator
Rule 332   default_statement -> DEFAULT case_default_label_terminator statement_list
Rule 333   default_statement -> DEFAULT case_default_label_terminator
Rule 334   case_default_label_terminator -> DOUBLE_POINT
Rule 335   case_default_label_terminator -> SEMICOLON
Rule 336   iteration_statement -> while_statement
Rule 337   iteration_statement -> do_statement
Rule 338   iteration_statement -> for_statement
Rule 339   iteration_statement -> foreach_statement
Rule 340   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 341   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
Rule 342   do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 343   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 344   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 345   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 346   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 347   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 348   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 349   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 350   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 351   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 352   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 353   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 354   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 355   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 356   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 357   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 358   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 359   for_initializer -> for_expression_group
Rule 360   for_control -> for_expression_group
Rule 361   for_end_of_loop -> for_expression_group
Rule 362   for_expression_group -> expression
Rule 363   for_expression_group -> for_expression_group COLON expression
Rule 364   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
Rule 365   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
Rule 366   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 367   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 368   foreach_collection_name -> expression
Rule 369   foreach_key -> expression DOUBLE_ARROW
Rule 370   foreach_value -> AMPERSAND_opt expression
Rule 371   foreach_value -> AMPERSAND expression
Rule 372   foreach_value -> list_intrinsic
Rule 373   jump_statement -> goto_statement
Rule 374   jump_statement -> continue_statement
Rule 375   jump_statement -> break_statement
Rule 376   jump_statement -> return_statement
Rule 377   jump_statement -> throw_statement
Rule 378   goto_statement -> GOTO name SEMICOLON
Rule 379   continue_statement -> CONTINUE breakout_level SEMICOLON
Rule 380   continue_statement -> CONTINUE SEMICOLON
Rule 381   breakout_level -> INTEGER_LITERAL
Rule 382   breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
Rule 383   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 384   breakout_levelopt -> breakout_level
Rule 385   breakout_levelopt -> <empty>
Rule 386   breakout_level -> expression
Rule 387   return_statement -> RETURN expressionopt SEMICOLON
Rule 388   expressionopt -> expression
Rule 389   expressionopt -> <empty>
Rule 390   throw_statement -> THROW expression SEMICOLON
Rule 391   try_statement -> TRY compound_statement catch_clauses
Rule 392   try_statement -> TRY compound_statement finally_clause
Rule 393   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 394   catch_clauses -> catch_clause
Rule 395   catch_clauses -> catch_clauses catch_clause
Rule 396   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 397   catch_name_list -> qualified_name
Rule 398   catch_name_list -> catch_name_list
Rule 399   finally_clause -> FINALLY compound_statement
Rule 400   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 401   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 402   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 403   declare_directive -> TICKS EQUALS literal
Rule 404   declare_directive -> ENCODING EQUALS literal
Rule 405   declare_directive -> STRICT_TYPES EQUALS literal
Rule 406   echo_statement -> ECHO expression_list SEMICOLON
Rule 407   expression_list -> expression
Rule 408   expression_list -> expression_list expression
Rule 409   unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
Rule 410   unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
Rule 411   function_definition -> function_definition_header compound_statement
Rule 412   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
Rule 413   ampersandopt -> AMPERSAND
Rule 414   ampersandopt -> <empty>
Rule 415   parameter_declaration_list -> simple_parameter_declaration_list
Rule 416   parameter_declaration_list -> variadic_declaration_list
Rule 417   simple_parameter_declaration_list -> parameter_declaration
Rule 418   simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration
Rule 419   variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter
Rule 420   variadic_declaration_list -> variadic_parameter
Rule 421   parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
Rule 422   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE
Rule 423   return_type -> DOUBLE_POINT type_declaration
Rule 424   return_type -> DOUBLE_POINT VOID
Rule 425   type_declarationopt -> type_declaration
Rule 426   type_declarationopt -> <empty>
Rule 427   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 428   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 429   TERNARY_OPERATIONopt -> <empty>
Rule 430   base_type_declaration -> ARRAY
Rule 431   base_type_declaration -> CALLABLE
Rule 432   base_type_declaration -> ITERABLE
Rule 433   base_type_declaration -> scalar_type
Rule 434   base_type_declaration -> qualified_name
Rule 435   scalar_type -> BOOL
Rule 436   scalar_type -> FLOAT
Rule 437   scalar_type -> INT
Rule 438   scalar_type -> STRING
Rule 439   default_argument_specifieropt -> default_argument_specifier
Rule 440   default_argument_specifieropt -> <empty>
Rule 441   default_argument_specifier -> EQUAL constant_expression
Rule 442   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 443   class_modifieropt -> class_modifier
Rule 444   class_modifieropt -> <empty>
Rule 445   class_base_clauseopt -> class_base_clause
Rule 446   class_base_clauseopt -> <empty>
Rule 447   class_interface_clauseopt -> class_interface_clause
Rule 448   class_interface_clauseopt -> <empty>
Rule 449   class_member_declarationsopt -> class_member_declarations
Rule 450   class_member_declarationsopt -> <empty>
Rule 451   class_modifier -> ABSTRACT
Rule 452   class_modifier -> FINAL
Rule 453   class_base_clause -> EXTENDS qualified_name
Rule 454   class_interface_clause -> IMPLEMENTS qualified_name
Rule 455   class_interface_clause -> class_interface_clause qualified_name
Rule 456   class_member_declarations -> class_member_declaration
Rule 457   class_member_declarations -> class_member_declarations class_member_declaration
Rule 458   class_member_declaration -> class_const_declaration
Rule 459   class_member_declaration -> property_declaration
Rule 460   class_member_declaration -> method_declaration
Rule 461   class_member_declaration -> constructor_declaration
Rule 462   class_member_declaration -> destructor_declaration
Rule 463   class_member_declaration -> trait_use_clause
Rule 464   const_declaration -> CONST const_elements SEMICOLON
Rule 465   class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON
Rule 466   const_elements -> const_element
Rule 467   const_elements -> const_elements const_element
Rule 468   const_element -> name EQUAL constant_expression
Rule 469   property_declaration -> property_modifier property_elements SEMICOLON
Rule 470   property_modifier -> VAR
Rule 471   property_modifier -> visibility_modifier static_modifieropt
Rule 472   property_modifier -> static_modifier visibility_modifier_opt
Rule 473   static_modifieropt -> static_modifier
Rule 474   static_modifieropt -> <empty>
Rule 475   visibility_modifier -> PUBLIC
Rule 476   visibility_modifier -> PROTECTED
Rule 477   visibility_modifier -> PRIVATE
Rule 478   static_modifier -> STATIC
Rule 479   property_elements -> property_element
Rule 480   property_elements -> property_elements property_element
Rule 481   property_element -> VARIABLE property_initializeropt SEMICOLON
Rule 482   property_initializeropt -> property_initializer
Rule 483   property_initializeropt -> <empty>
Rule 484   property_initializer -> EQUAL constant_expression
Rule 485   method_declaration -> method_modifiersopt function_definition
Rule 486   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 487   method_modifiersopt -> method_modifiers
Rule 488   method_modifiersopt -> <empty>
Rule 489   method_modifiers -> method_modifier
Rule 490   method_modifiers -> method_modifiers method_modifier
Rule 491   method_modifier -> visibility_modifier
Rule 492   method_modifier -> static_modifier
Rule 493   method_modifier -> class_modifier
Rule 494   constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 495   destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 496   parameter_declaration_listopt -> parameter_declaration_list
Rule 497   parameter_declaration_listopt -> <empty>
Rule 498   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 499   interface_base_clauseopt -> interface_base_clause
Rule 500   interface_base_clauseopt -> <empty>
Rule 501   interface_member_declarationsopt -> interface_member_declarations
Rule 502   interface_member_declarationsopt -> <empty>
Rule 503   interface_base_clause -> EXTENDS qualified_name
Rule 504   interface_base_clause -> interface_base_clause qualified_name
Rule 505   interface_member_declarations -> interface_member_declaration
Rule 506   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 507   interface_member_declaration -> class_const_declaration
Rule 508   interface_member_declaration -> method_declaration
Rule 509   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 510   trait_member_declarationsopt -> trait_member_declarations
Rule 511   trait_member_declarationsopt -> <empty>
Rule 512   trait_member_declarations -> trait_member_declaration
Rule 513   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 514   trait_member_declaration -> property_declaration
Rule 515   trait_member_declaration -> method_declaration
Rule 516   trait_member_declaration -> constructor_declaration
Rule 517   trait_member_declaration -> destructor_declaration
Rule 518   trait_member_declaration -> trait_use_clauses
Rule 519   trait_use_clauses -> trait_use_clause
Rule 520   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 521   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 522   trait_name_list -> qualified_name
Rule 523   trait_name_list -> trait_name_list qualified_name
Rule 524   trait_use_specification -> SEMICOLON
Rule 525   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 526   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 527   trait_select_and_alias_clausesopt -> <empty>
Rule 528   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 529   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 530   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 531   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 532   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 533   trait_alias_as_clause -> name AS visibility_modifier_opt name
Rule 534   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 535   visibility_modifier_opt -> visibility_modifier
Rule 536   visibility_modifier_opt -> <empty>
Rule 537   nameopt -> name
Rule 538   nameopt -> <empty>
Rule 539   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 540   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 541   namespace_nameopt -> namespace_name
Rule 542   namespace_nameopt -> <empty>
Rule 543   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 544   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 545   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 546   namespace_function_or_constopt -> namespace_function_or_const
Rule 547   namespace_function_or_constopt -> <empty>
Rule 548   NS_SEPARATORopt -> NS_SEPARATOR
Rule 549   NS_SEPARATORopt -> <empty>
Rule 550   namespace_use_clauses -> namespace_use_clause
Rule 551   namespace_use_clauses -> namespace_use_clauses namespace_use_clause
Rule 552   namespace_use_clause -> qualified_name namespace_aliasing_clause_opt
Rule 553   namespace_aliasing_clause_opt -> namespace_aliasing_clause
Rule 554   qualified_name -> name
Rule 555   namespace_aliasing_clause -> AS name
Rule 556   namespace_function_or_const -> FUNCTION
Rule 557   namespace_function_or_const -> CONST
Rule 558   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 559   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1
Rule 560   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt
Rule 561   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 562   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2
Rule 563   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt
Rule 564   name -> STRING

Terminals, with rules where they appear

ABSTRACT             : 451
AMPERSAND            : 86 209 215 215 239 241 371 413
AND                  : 263
AND_EQUAL            : 252
ARRAY                : 121 430
ARROW                : 115 130 144 148 149
AS                   : 364 365 366 367 533 534 555
ASTERISK             : 187
AT                   : 179
ATTRIBUTE            : 
BACKTICK             : 154 154
BAD_CARACTER         : 
BITWISE_NOT          : 178
BITWISE_OR           : 213 217 217
BITWISE_XOR          : 211
BOOL                 : 435
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 383
CALLABLE             : 431
CASE                 : 330 331
CATCH                : 396
CLASS                : 100 101 442
CLONE                : 168
CLOSE_TAG            : 7 13
COALESCE             : 219
COALESCE_EQUAL       : 
COLON                : 98 126 128 230 233 234 234 235 237 363 409
COMMENT              : 
CONCAT               : 193
CONCAT_EQUAL         : 249
CONST                : 464 465 557
CONSTANT_ENCAPSED_STRING : 
CONSTRUCT            : 494
CONTINUE             : 379 380
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 400 401 402
DEFAULT              : 332 333
DESTRUCT             : 495
DIE                  : 77 78
DIVIDE               : 188
DIV_EQUAL            : 245
DNUMBER              : 67
DO                   : 342
DOC_COMMENT          : 
DOLLAR               : 44 45
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLEASTERISK       : 170
DOUBLELESS           : 151 153
DOUBLEPLUS           : 150 152
DOUBLE_ARROW         : 236 237 259 369
DOUBLE_COLON         : 116 117 118 157 158 159 160 532
DOUBLE_POINT         : 221 222 302 311 312 313 320 321 324 325 334 341 351 352 353 354 355 356 357 358 366 367 401 423 424
DQUOTATION_MARK      : 
DQ_CHAR_SEQUENCE     : 155
ECHO                 : 406
ELLIPSIS             : 143 422
ELSE                 : 317 321
ELSEIF               : 316 320
EMPTY                : 73
ENCODING             : 404
ENDDECLARE           : 401
ENDFOR               : 351 352 353 354 355 356 357 358
ENDFOREACH           : 366 367
ENDIF                : 311 312 313
ENDSWITCH            : 324 325
ENDWHILE             : 341
EQUAL                : 21 24 204 226 227 241 441 468 484
EQUALS               : 403 404 405
EVAL                 : 74
EXIT                 : 75 76
EXPONENT_DNUMBER     : 
EXTENDS              : 453 503
FINAL                : 452
FINALLY              : 399
FLOAT                : 436
FN                   : 
FOR                  : 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358
FOREACH              : 364 365 366 367
FUNCTION             : 83 412 494 495 556
GLOBAL               : 25
GOTO                 : 378
GREATER_THAN_OR_EQUAL : 201
IF                   : 307 308 309 310 311 312 313
IMPLEMENTS           : 454
INC                  : 
INCLUDE              : 274
INCLUDE_ONCE         : 275
INSTANCEOF           : 182
INSTEADOF            : 532
INT                  : 437
INTEGER_LITERAL      : 381
INTERFACE            : 498
ISSET                : 79
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 200
IS_IDENTICAL         : 206
IS_NOT_EQUAL         : 205
IS_NOT_IDENTICAL     : 207
IS_SMALLER_OR_EQUAL  : 199
ITERABLE             : 432
LEFT_CBRAC           : 45 100 101 113 114 122 133 134 147 298 299 322 323 442 498 509 525 544 545
LEFT_PARENTHESIS     : 42 47 51 73 74 76 78 79 83 94 97 98 100 121 135 136 137 138 148 149 158 159 180 228 307 308 309 310 311 312 313 316 320 322 323 324 325 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 364 365 366 367 382 396 400 401 402 409 410 412 494 495
LEFT_SQRBRAC         : 
LESS                 : 177 192
LESS_THAN            : 198
LIST                 : 228
LNUMBER              : 66
MINUS_EQUAL          : 248
MODULO               : 189
MOD_EQUAL            : 246
MORE_THAN            : 
MUL_EQUAL            : 244
NAMESPACE            : 539 540
NEGATION             : 185
NEW                  : 97 98 99 100 101
NS_SEPARATOR         : 16 544 545 548
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 11
OPEN_TAG_WITH_ECHO   : 12
OR                   : 267
OR_EQUAL             : 254
PARENT               : 165
PLUS                 : 176 191
PLUS_EQUAL           : 247
POW                  : 
POW_EQUAL            : 243
PRINT                : 261
PRIVATE              : 477
PROTECTED            : 476
PUBLIC               : 475
REQUIRE              : 276
REQUIRE_ONCE         : 277
RETURN               : 387
RIGHT_CBRAC          : 45 113 122 133 298 299 322 323 442 498 509 525 544 545
RIGHT_PARENTHESIS    : 42 47 51 73 74 76 78 79 83 94 97 98 100 100 101 114 121 134 135 136 137 138 147 148 149 158 159 180 228 307 308 309 310 311 312 313 316 320 322 323 324 325 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 364 365 366 367 382 396 400 401 402 409 410 412 494 495
RIGHT_SQRBRAC        : 
SELF                 : 164
SEMICOLON            : 17 25 303 304 311 312 313 324 325 335 341 342 343 343 344 344 345 345 346 346 347 347 348 348 349 349 350 350 351 351 351 352 352 352 353 353 353 354 354 354 355 355 355 356 356 356 357 357 357 358 358 358 366 367 378 379 380 383 387 390 401 402 406 409 410 464 465 469 481 486 524 530 531 539 543 544 545
SL                   : 195
SL_EQUAL             : 250
SPACESHIP            : 202
SR                   : 196
SR_EQUAL             : 251
START_HEREDOC        : 
STATIC               : 17 84 166 478
STRICT_TYPES         : 405
STRING               : 5 68 270 438 564
SWITCH               : 322 323 324 325
TERNARY_OPERATION    : 221 222 428
THROW                : 390
TICKS                : 403
TRAIT                : 509
TRY                  : 391 392 393
UNSET                : 409 410
USE                  : 94 521 543 544 545
VAR                  : 470
VARIABLE             : 20 43 95 96 396 421 422 481
VOID                 : 424
WHILE                : 340 341 342
WHITESPACE           : 4
XOR                  : 265
XOR_EQUAL            : 253
YIELD                : 257 258 259
YIELD_FROM           : 255
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 83 95 96 129 130 370 494 495
NAME                 : 15 16 145 160
NS_SEPARATORopt      : 544 545
TERNARY_OPERATIONopt : 427
additive_expression  : 191 192 193 194 195 196
ampersandopt         : 412 421 422
anonymous_function_creation_expression : 34
anonymous_function_use_clause : 90
anonymous_function_use_clause_opt : 83
argument_expression  : 139 140
argument_expression_list : 98 102 136 138 140 149 159
argument_expression_list_opt : 97 100 135 137 148 158
array_creation_expression : 32 48 52
array_element_initializer : 127 128 128
array_initializer    : 123
array_initializer_list : 125 126
array_initializer_opt : 121 122
assignment_expression : 226 227 242 255
base_type_declaration : 427
bitwise_AND_expression : 209 210 211
bitwise_exc_OR_expression : 211 212 213
bitwise_inc_OR_expression : 213 214 215
break_statement      : 375
breakout_level       : 379 382 384
breakout_levelopt    : 383
byref_assignment_expression : 40
callable_expression  : 137 138
callable_variable    : 50 59
case_default_label_terminator : 330 331 332 333
case_statement       : 326 327
case_statements      : 322 324 326 328
cast_expression      : 174
catch_clause         : 394 395
catch_clauses        : 391 393 395
catch_name_list      : 396 398
class_base_clause    : 104 445
class_base_clause_opt : 100 101
class_base_clauseopt : 442
class_const_declaration : 458 507
class_constant_access_expression : 29
class_declaration    : 291
class_interface_clause : 106 447 455
class_interface_clause_opt : 100 101
class_interface_clauseopt : 442
class_member_declaration : 456 457
class_member_declarations : 108 449 457
class_member_declarations_opt : 100 101
class_member_declarationsopt : 442
class_modifier       : 443 493
class_modifieropt    : 442
class_type_designator : 97 98 99 182
clone_expression     : 169 170
coalesce_expression  : 219 220 221 222
compound_assignment_expression : 225
compound_assignment_operator : 242
compound_statement   : 83 279 391 392 393 396 399 411 494 495 540
conditional_expression : 221 222 223
const_declaration    : 289
const_element        : 466 467
const_elements       : 464 465 467
constant_access_expression : 30
constant_expression  : 21 24 441 468 484
constructor_declaration : 461 516
continue_statement   : 374
declare_directive    : 400 401 402
declare_statement    : 286
default_argument_specifier : 439
default_argument_specifieropt : 421
default_statement    : 328 329
dereferencable_expression : 133 134 144 148 149 163
destructor_declaration : 462 517
do_statement         : 337
dq_char_sequence_opt : 154
echo_statement       : 287
element_key          : 130
element_value        : 129 130
else_clause_1        : 307 309
else_clause_2        : 311 313
elseif_clause_1      : 314 315
elseif_clause_2      : 318 319
elseif_clauses_1     : 307 308 315
elseif_clauses_2     : 311 312 319
empty_intrinsic      : 69
end_tag              : 
end_tag_opt          : 3
equality_expression  : 204 205 206 207 208 209
error_control_expression : 173
eval_intrinsic       : 70
exit_intrinsic       : 71
exponentiation_expression : 170 171
expression           : 42 45 47 51 73 74 114 119 131 132 134 142 143 147 221 236 237 274 275 276 277 278 303 307 308 309 310 311 312 313 316 320 322 323 324 325 330 331 340 341 342 362 363 368 369 370 371 386 388 390 407 408
expression_list      : 406 408
expression_opt       : 76 78 113 133
expression_statement : 281
expressionopt        : 387
finally_clause       : 392 393
floating_literal     : 64
for_control          : 343 344 347 348 351 352 355 356
for_end_of_loop      : 343 345 347 349 351 353 355 357
for_expression_group : 359 360 361 363
for_initializer      : 343 344 345 346 351 352 353 354
for_statement        : 338
foreach_collection_name : 364 365 366 367
foreach_key          : 364 366
foreach_statement    : 339
foreach_value        : 364 365 366 367
function_call_expression : 58
function_definition  : 290 485
function_definition_header : 411 486
function_static_declaration : 297
function_static_initializer : 22
function_static_initializer_opt : 20
global_declaration   : 296
goto_statement       : 373
if_statement         : 305
include_expression   : 269
include_once_expression : 271
instanceof_expression : 183 184 185
instanceof_subj      : 182
integer_literal      : 63
interface_base_clause : 499 504
interface_base_clauseopt : 498
interface_declaration : 292
interface_member_declaration : 505 506
interface_member_declarations : 501 506
interface_member_declarationsopt : 498
intrinsic            : 33
isset_intrinsic      : 72
iteration_statement  : 283
jump_statement       : 284
keyed_list_expression_list : 230 231 237
list_expression_list : 228
list_intrinsic       : 227 238 372
list_or_variable     : 232 234 235 236 237
literal              : 31 403 404 405
logical_AND_expression_1 : 215 216 217
logical_AND_expression_2 : 263 264 265
logical_exc_OR_expression : 265 266 267
logical_inc_OR_expression_1 : 217 218 219
logical_inc_OR_expression_2 : 267 268
logical_not_expression : 186 187 188 189
member_access_expression : 61
member_call_expression : 56
member_name          : 115 144 148 149 158 159
method_declaration   : 460 508 515
method_modifier      : 489 490
method_modifiers     : 486 487 490 494 495
method_modifiersopt  : 485
multiplicative_expression : 187 188 189 190 191 192 193
name                 : 302 378 412 442 468 494 495 498 509 532 533 533 534 537 554 555
named_label_statement : 280
nameopt              : 534
namespace_aliasing_clause : 553
namespace_aliasing_clause_opt : 552 560 563
namespace_definition : 294
namespace_function_or_const : 544 546
namespace_function_or_constopt : 543 563
namespace_name       : 16 539 541 544 545 560 563
namespace_nameopt    : 540
namespace_use_clause : 550 551
namespace_use_clauses : 543 551
namespace_use_declaration : 295
namespace_use_group_clause_1 : 558 559
namespace_use_group_clause_2 : 561 562
namespace_use_group_clauses_1 : 544 559
namespace_use_group_clauses_2 : 545 562
new_variable         : 111 113 114 115 118
object_creation_expression : 35
parameter_declaration : 417 418
parameter_declaration_list : 88 418 496
parameter_declaration_list_opt : 83
parameter_declaration_listopt : 412 494
postfix_decrement_expression : 37
postfix_increment_expression : 36
prefix_decrement_expression : 39
prefix_increment_expression : 38
primary_expression   : 167 168
print_expression     : 261 262
property_declaration : 459 514
property_element     : 479 480
property_elements    : 469 480
property_initializer : 482
property_initializeropt : 481
property_modifier    : 469
qualified_name       : 62 110 116 135 136 162 397 434 453 454 455 503 504 522 523 532 552
relational_expression : 198 199 200 201 202 203 204 205 206 207
relative_scope       : 117 161
require_expression   : 272
require_once_expression : 273
return_statement     : 376
return_type          : 92
return_type_opt      : 83 412
scalar_type          : 433
scope_resolution_qualifier : 157 158 159 160
scoped_call_expression : 57
scoped_property_access_expression : 60
script               : 2 0
script_section       : 1 2
selection_statement  : 282
shell_command_expression : 41
shift_expression     : 195 196 197 198 199 200 201 202
simple_assignment_expression : 224
simple_parameter_declaration_list : 415 419
simple_variable      : 26 27 44 54 112 116 117 118 146 157
start_tag            : 3
statement            : 300 301 307 308 309 310 316 317 340 342 343 344 345 346 347 348 349 350 364 365 400
statement_list       : 9 298 301 311 312 313 320 321 330 332 341 351 352 353 354 355 356 357 358 366 367 401
statement_list_opt   : 3
static_modifier      : 472 473 492
static_modifieropt   : 471
static_opt           : 83
static_variable_declaration : 18 19
static_variable_name_list : 17 19
string_literal       : 49 53 65
subscript_expression : 55
switch_statement     : 306
text_opt             : 3 3
throw_statement      : 377
trait_alias_as_clause : 531
trait_declaration    : 293
trait_member_declaration : 512 513
trait_member_declarations : 510 513
trait_member_declarationsopt : 509
trait_name_list      : 521 523 532
trait_select_and_alias_clause : 528 529
trait_select_and_alias_clauses : 526 529
trait_select_and_alias_clausesopt : 525
trait_select_insteadof_clause : 530
trait_use_clause     : 463 519 520
trait_use_clauses    : 518 520
trait_use_specification : 521
try_statement        : 285
type_declaration     : 423 425
type_declarationopt  : 421 422
unary_expression     : 175 179 180 181
unary_op_expression  : 172
unary_operator       : 175
unkeyed_list_expression_list : 229 234 235
unset_statement      : 288
use_variable_name_list : 94 96
variable             : 28 46 81 82 150 151 152 153 226 239 240 241 241 242
variable_list        : 80 82 409 410
variable_list_opt    : 79
variable_name_list   : 25 27
variadic_declaration_list : 416
variadic_parameter   : 419 420
variadic_unpacking   : 141
visibility_modifier  : 471 491 534 535
visibility_modifier_opt : 465 472 533
while_statement      : 336
yield_expression     : 258 259 260 263
yield_from_expression : 256 259

