Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASTERISK
    ATTRIBUTE
    BAD_CARACTER
    BITWISE_NOT
    BOOLEAN_AND
    BOOLEAN_OR
    CALLABLE
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DNUMBER
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    INSTANCEOF
    IS_EQUAL
    LEFT_SQRBRAC
    LNUMBER
    MORE_THAN
    NEGATION
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    WHITESPACE
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> statement_list_opt
Rule 1     statement_list_opt -> statement_list
Rule 2     statement_list_opt -> <empty>
Rule 3     start_tag -> OPEN_TAG
Rule 4     start_tag -> OPEN_TAG_WITH_ECHO
Rule 5     end_tag -> CLOSE_TAG
Rule 6     end_tag -> <empty>
Rule 7     function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 8     static_variable_name_list -> static_variable_declaration
Rule 9     static_variable_name_list -> static_variable_name_list static_variable_declaration
Rule 10    static_variable_declaration -> VARIABLE function_static_initializer_opt
Rule 11    function_static_initializer -> EQUAL constant_expression
Rule 12    function_static_initializer_opt -> function_static_initializer
Rule 13    function_static_initializer_opt -> <empty>
Rule 14    function_static_initializer_opt -> EQUAL constant_expression
Rule 15    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 16    variable_name_list -> simple_variable
Rule 17    variable_name_list -> variable_name_list simple_variable
Rule 18    primary_expression -> variable
Rule 19    primary_expression -> class_constant_access_expression
Rule 20    primary_expression -> constant_access_expression
Rule 21    primary_expression -> literal
Rule 22    primary_expression -> array_creation_expression
Rule 23    primary_expression -> intrinsic
Rule 24    primary_expression -> anonymous_function_creation_expression
Rule 25    primary_expression -> object_creation_expression
Rule 26    primary_expression -> postfix_increment_expression
Rule 27    primary_expression -> postfix_decrement_expression
Rule 28    primary_expression -> prefix_increment_expression
Rule 29    primary_expression -> prefix_decrement_expression
Rule 30    primary_expression -> byref_assignment_expression
Rule 31    primary_expression -> shell_command_expression
Rule 32    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 33    simple_variable -> VARIABLE
Rule 34    simple_variable -> DOLLAR simple_variable
Rule 35    simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
Rule 36    dereferencable_expression -> variable
Rule 37    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 38    dereferencable_expression -> array_creation_expression
Rule 39    dereferencable_expression -> string_literal
Rule 40    callable_expression -> callable_variable
Rule 41    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 42    callable_expression -> array_creation_expression
Rule 43    callable_expression -> string_literal
Rule 44    callable_variable -> simple_variable
Rule 45    callable_variable -> subscript_expression
Rule 46    callable_variable -> member_call_expression
Rule 47    callable_variable -> scoped_call_expression
Rule 48    callable_variable -> function_call_expression
Rule 49    variable -> callable_variable
Rule 50    variable -> scoped_property_access_expression
Rule 51    variable -> member_access_expression
Rule 52    constant_access_expression -> qualified_name
Rule 53    literal -> integer_literal
Rule 54    literal -> floating_literal
Rule 55    literal -> string_literal
Rule 56    string_literal -> STRING
Rule 57    intrinsic -> empty_intrinsic
Rule 58    intrinsic -> eval_intrinsic
Rule 59    intrinsic -> exit_intrinsic
Rule 60    intrinsic -> isset_intrinsic
Rule 61    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 62    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 63    exit_intrinsic -> EXIT
Rule 64    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 65    exit_intrinsic -> DIE
Rule 66    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 67    intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
Rule 68    variable_list -> variable
Rule 69    variable_list -> variable_list variable
Rule 70    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 71    static_opt -> static
Rule 72    static_opt -> <empty>
Rule 73    AMPERSAND_opt -> AMPERSAND
Rule 74    AMPERSAND_opt -> <empty>
Rule 75    parameter_declaration_list_opt -> parameter_declaration_list
Rule 76    parameter_declaration_list_opt -> <empty>
Rule 77    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 78    anonymous_function_use_clause_opt -> <empty>
Rule 79    return_type_opt -> return_type
Rule 80    return_type_opt -> <empty>
Rule 81    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 82    use_variable_name_list -> AMPERSAND_opt VARIABLE
Rule 83    use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE
Rule 84    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 85    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list _opt RIGHT_PARENTHESIS
Rule 86    object_creation_expression -> NEW class_type_designator
Rule 87    object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RBRACE
Rule 88    object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RBRACE
Rule 89    argument_expression_list_opt -> argument_expression_list
Rule 90    argument_expression_list_opt -> <empty>
Rule 91    class_base_clause_opt -> class_base_clause
Rule 92    class_base_clause_opt -> <empty>
Rule 93    class_interface_clause_opt -> class_interface_clause
Rule 94    class_interface_clause_opt -> <empty>
Rule 95    class_member_declarations_opt -> class_member_declarations
Rule 96    class_member_declarations_opt -> <empty>
Rule 97    class_type_designator -> qualified_name
Rule 98    class_type_designator -> new_variable
Rule 99    new_variable -> simple_variable
Rule 100   new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 101   new_variable -> new_variable LEFT_CBRAC expression RBRACE
Rule 102   new_variable -> new_variable ARROW member_name
Rule 103   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 104   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 105   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 106   expression_opt -> expression
Rule 107   expression_opt -> <empty>
Rule 108   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 109   array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
Rule 110   array_initializer_opt -> array_initializer
Rule 111   array_initializer_opt -> <empty>
Rule 112   array_initializer -> array_initializer_list _opt
Rule 113   array_initializer_list -> array_element_initializer _opt
Rule 114   array_element_initializer -> AMPERSAND_opt element_value
Rule 115   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 116   element_key -> expression
Rule 117   element_value -> expression
Rule 118   subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 119   subscript_expression -> dereferencable_expression LEFT_CBRAC expression RBRACE
Rule 120   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 121   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 122   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 123   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 124   argument_expression_list -> argument_expression
Rule 125   argument_expression_list -> argument_expression_list argument_expression
Rule 126   argument_expression -> variadic_unpacking
Rule 127   argument_expression -> expression
Rule 128   variadic_unpacking -> ELLIPSIS expression
Rule 129   member_access_expression -> dereferencable_expression ARROW member_name
Rule 130   member_name -> NAME
Rule 131   member_name -> simple_variable
Rule 132   member_name -> LEFT_CBRAC expression RBRACE
Rule 133   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 134   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 135   postfix_increment_expression -> variable INCREMENT
Rule 136   postfix_decrement_expression -> variable DECREMENT
Rule 137   prefix_increment_expression -> INCREMENT variable
Rule 138   prefix_decrement_expression -> DECREMENT variable
Rule 139   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 140   dq_char_sequence_opt -> dq_char_sequence
Rule 141   dq_char_sequence_opt -> <empty>
Rule 142   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 143   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 144   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 145   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 146   scope_resolution_qualifier -> relative_scope
Rule 147   scope_resolution_qualifier -> qualified_name
Rule 148   scope_resolution_qualifier -> dereferencable_expression
Rule 149   relative_scope -> SELF
Rule 150   relative_scope -> PARENT
Rule 151   relative_scope -> STATIC
Rule 152   clone_expression -> primary_expression
Rule 153   clone_expression -> CLONE primary_expression
Rule 154   exponentiation_expression -> clone_expression
Rule 155   exponentiation_expression -> clone_expression EXPONENTIATION exponentiation_expression
Rule 156   unary_expression -> exponentiation_expression
Rule 157   unary_expression -> unary_op_expression
Rule 158   unary_expression -> error_control_expression
Rule 159   unary_expression -> cast_expression
Rule 160   unary_op_expression -> unary_operator unary_expression
Rule 161   unary_operator -> PLUS
Rule 162   unary_operator -> MINUS
Rule 163   unary_operator -> TILDE
Rule 164   error_control_expression -> AT unary_expression
Rule 165   cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
Rule 166   instanceof_expression -> unary_expression
Rule 167   instanceof_expression -> instanceof_subj instanceof class_type_designator
Rule 168   instanceof_subj -> instanceof_expression
Rule 169   logical_not_expression -> instanceof_expression
Rule 170   logical_not_expression -> NOT instanceof_expression
Rule 171   multiplicative_expression -> logical_not_expression
Rule 172   multiplicative_expression -> multiplicative_expression TIMES logical_not_expression
Rule 173   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 174   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 175   additive_expression -> multiplicative_expression
Rule 176   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 177   additive_expression -> additive_expression LESS multiplicative_expression
Rule 178   additive_expression -> additive_expression CONCAT multiplicative_expression
Rule 179   shift_expression -> additive_expression
Rule 180   shift_expression -> shift_expression SL additive_expression
Rule 181   shift_expression -> shift_expression SR additive_expression
Rule 182   relational_expression -> shift_expression
Rule 183   relational_expression -> relational_expression LESS_THAN shift_expression
Rule 184   relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression
Rule 185   relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression
Rule 186   relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression
Rule 187   relational_expression -> relational_expression SPACESHIP shift_expression
Rule 188   equality_expression -> relational_expression
Rule 189   equality_expression -> equality_expression EQUAL relational_expression
Rule 190   equality_expression -> equality_expression IS_NOT_EQUAL relational_expression
Rule 191   equality_expression -> equality_expression IS_IDENTICAL relational_expression
Rule 192   equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression
Rule 193   bitwise_AND_expression -> equality_expression
Rule 194   bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression
Rule 195   bitwise_exc_OR_expression -> bitwise_AND_expression
Rule 196   bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
Rule 197   bitwise_inc_OR_expression -> bitwise_exc_OR_expression
Rule 198   bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
Rule 199   logical_AND_expression_1 -> bitwise_inc_OR_expression
Rule 200   logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
Rule 201   logical_inc_OR_expression_1 -> logical_AND_expression_1
Rule 202   logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
Rule 203   coalesce_expression -> logical_inc_OR_expression_1
Rule 204   coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression
Rule 205   conditional_expression -> coalesce_expression
Rule 206   conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
Rule 207   conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
Rule 208   assignment_expression -> conditional_expression
Rule 209   assignment_expression -> simple_assignment_expression
Rule 210   assignment_expression -> compound_assignment_expression
Rule 211   simple_assignment_expression -> variable EQUAL assignment_expression
Rule 212   simple_assignment_expression -> list_intrinsic EQUAL assignment_expression
Rule 213   list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
Rule 214   list_expression_list -> unkeyed_list_expression_list
Rule 215   list_expression_list -> keyed_list_expression_list COLON
Rule 216   list_expression_list -> keyed_list_expression_list
Rule 217   unkeyed_list_expression_list -> list_or_variable
Rule 218   unkeyed_list_expression_list -> COLON
Rule 219   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON
Rule 220   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable
Rule 221   keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable
Rule 222   keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
Rule 223   list_or_variable -> list_intrinsic
Rule 224   list_or_variable -> AMPERSAND variable
Rule 225   list_or_variable -> variable
Rule 226   byref_assignment_expression -> variable EQUAL AMPERSAND variable
Rule 227   compound_assignment_expression -> variable compound_assignment_operator assignment_expression
Rule 228   compound_assignment_operator -> POW_EQUAL
Rule 229   compound_assignment_operator -> MUL_EQUAL
Rule 230   compound_assignment_operator -> DIV_EQUAL
Rule 231   compound_assignment_operator -> MOD_EQUAL
Rule 232   compound_assignment_operator -> PLUS_EQUAL
Rule 233   compound_assignment_operator -> MINUS_EQUAL
Rule 234   compound_assignment_operator -> CONCAT_EQUAL
Rule 235   compound_assignment_operator -> SL_EQUAL
Rule 236   compound_assignment_operator -> SR_EQUAL
Rule 237   compound_assignment_operator -> AND_EQUAL
Rule 238   compound_assignment_operator -> XOR_EQUAL
Rule 239   compound_assignment_operator -> OR_EQUAL
Rule 240   yield_from_expression -> YIELD_FROM assignment_expression
Rule 241   yield_expression -> yield_from_expression
Rule 242   yield_expression -> YIELD
Rule 243   yield_expression -> YIELD yield_expression
Rule 244   yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression
Rule 245   print_expression -> yield_expression
Rule 246   print_expression -> PRINT print_expression
Rule 247   logical_AND_expression_2 -> print_expression
Rule 248   logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression
Rule 249   logical_exc_OR_expression -> logical_AND_expression_2
Rule 250   logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2
Rule 251   logical_inc_OR_expression_2 -> logical_exc_OR_expression
Rule 252   logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression
Rule 253   expression -> logical_inc_OR_expression_2
Rule 254   expression -> include_expression
Rule 255   expression -> include_once_expression
Rule 256   expression -> require_expression
Rule 257   expression -> require_once_expression
Rule 258   include_expression -> INCLUDE expression
Rule 259   include_once_expression -> INCLUDE_ONCE expression
Rule 260   require_expression -> REQUIRE expression
Rule 261   require_once_expression -> REQUIRE_ONCE expression
Rule 262   constant_expression -> expression
Rule 263   statement -> compound_statement
Rule 264   statement -> named_label_statement
Rule 265   statement -> expression_statement
Rule 266   statement -> selection_statement
Rule 267   statement -> iteration_statement
Rule 268   statement -> jump_statement
Rule 269   statement -> try_statement
Rule 270   statement -> declare_statement
Rule 271   statement -> echo_statement
Rule 272   statement -> unset_statement
Rule 273   statement -> const_declaration
Rule 274   statement -> function_definition
Rule 275   statement -> class_declaration
Rule 276   statement -> interface_declaration
Rule 277   statement -> trait_declaration
Rule 278   statement -> namespace_definition
Rule 279   statement -> namespace_use_declaration
Rule 280   statement -> global_declaration
Rule 281   statement -> function_static_declaration
Rule 282   compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC
Rule 283   compound_statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 284   statement_list -> statement
Rule 285   statement_list -> statement_list statement
Rule 286   named_label_statement -> name DOUBLE_POINT
Rule 287   expression_statement -> expression SEMICOLON
Rule 288   expression_statement -> SEMICOLON
Rule 289   selection_statement -> if_statement
Rule 290   selection_statement -> switch_statement
Rule 291   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
Rule 292   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
Rule 293   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
Rule 294   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 295   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
Rule 296   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
Rule 297   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
Rule 298   elseif_clauses_1 -> elseif_clause_1
Rule 299   elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1
Rule 300   elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 301   else_clause_1 -> ELSE statement
Rule 302   elseif_clauses_2 -> elseif_clause_2
Rule 303   elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2
Rule 304   elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
Rule 305   else_clause_2 -> ELSE DOUBLE_POINT statement_list
Rule 306   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
Rule 307   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 308   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
Rule 309   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 310   case_statements -> case_statement case_statements
Rule 311   case_statements -> case_statement
Rule 312   case_statements -> default_statement case_statements
Rule 313   case_statements -> default_statement
Rule 314   case_statement -> CASE expression case_default_label_terminator statement_list
Rule 315   case_statement -> CASE expression case_default_label_terminator
Rule 316   default_statement -> DEFAULT case_default_label_terminator statement_list
Rule 317   default_statement -> DEFAULT case_default_label_terminator
Rule 318   case_default_label_terminator -> DOUBLE_POINT
Rule 319   case_default_label_terminator -> SEMICOLON
Rule 320   iteration_statement -> while_statement
Rule 321   iteration_statement -> do_statement
Rule 322   iteration_statement -> for_statement
Rule 323   iteration_statement -> foreach_statement
Rule 324   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 325   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
Rule 326   do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 327   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 328   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 329   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 330   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 331   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 332   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 333   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 334   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 335   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 336   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 337   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 338   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 339   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 340   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 341   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 342   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 343   for_initializer -> for_expression_group
Rule 344   for_control -> for_expression_group
Rule 345   for_end_of_loop -> for_expression_group
Rule 346   for_expression_group -> expression
Rule 347   for_expression_group -> for_expression_group COLON expression
Rule 348   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
Rule 349   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
Rule 350   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 351   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 352   foreach_collection_name -> expression
Rule 353   foreach_key -> expression DOUBLE_ARROW
Rule 354   foreach_value -> foreach_value_expression
Rule 355   foreach_value -> AMPERSAND expression
Rule 356   foreach_value -> list_intrinsic
Rule 357   jump_statement -> goto_statement
Rule 358   jump_statement -> continue_statement
Rule 359   jump_statement -> break_statement
Rule 360   jump_statement -> return_statement
Rule 361   jump_statement -> throw_statement
Rule 362   goto_statement -> GOTO name SEMICOLON
Rule 363   continue_statement -> CONTINUE breakout_level SEMICOLON
Rule 364   continue_statement -> CONTINUE SEMICOLON
Rule 365   breakout_level -> INTEGER_LITERAL
Rule 366   breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
Rule 367   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 368   breakout_levelopt -> breakout_level
Rule 369   breakout_levelopt -> <empty>
Rule 370   breakout_level -> expression
Rule 371   return_statement -> RETURN expressionopt SEMICOLON
Rule 372   expressionopt -> expression
Rule 373   expressionopt -> <empty>
Rule 374   throw_statement -> THROW expression SEMICOLON
Rule 375   try_statement -> TRY compound_statement catch_clauses
Rule 376   try_statement -> TRY compound_statement finally_clause
Rule 377   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 378   catch_clauses -> catch_clause
Rule 379   catch_clauses -> catch_clauses catch_clause
Rule 380   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 381   catch_name_list -> qualified_name
Rule 382   catch_name_list -> catch_name_list
Rule 383   finally_clause -> FINALLY compound_statement
Rule 384   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 385   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 386   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 387   declare_directive -> TICKS EQUALS literal
Rule 388   declare_directive -> ENCODING EQUALS literal
Rule 389   declare_directive -> STRICT_TYPES EQUALS literal
Rule 390   echo_statement -> ECHO expression_list SEMICOLON
Rule 391   expression_list -> expression
Rule 392   expression_list -> expression_list expression
Rule 393   unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
Rule 394   unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
Rule 395   function_definition -> function_definition_header compound_statement
Rule 396   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_typeopt
Rule 397   ampersandopt -> AMPERSAND
Rule 398   ampersandopt -> <empty>
Rule 399   parameter_declaration_list -> simple_parameter_declaration_list
Rule 400   parameter_declaration_list -> variadic_declaration_list
Rule 401   simple_parameter_declaration_list -> parameter_declaration
Rule 402   simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration
Rule 403   variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter
Rule 404   variadic_declaration_list -> variadic_parameter
Rule 405   parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
Rule 406   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE
Rule 407   return_type -> DOUBLE_POINT type_declaration
Rule 408   return_type -> DOUBLE_POINT VOID
Rule 409   type_declarationopt -> type_declaration
Rule 410   type_declarationopt -> <empty>
Rule 411   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 412   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 413   TERNARY_OPERATIONopt -> <empty>
Rule 414   base_type_declaration -> array
Rule 415   base_type_declaration -> callable
Rule 416   base_type_declaration -> iterable
Rule 417   base_type_declaration -> scalar_type
Rule 418   base_type_declaration -> qualified_name
Rule 419   scalar_type -> BOOL
Rule 420   scalar_type -> FLOAT
Rule 421   scalar_type -> INT
Rule 422   scalar_type -> STRING
Rule 423   default_argument_specifieropt -> default_argument_specifier
Rule 424   default_argument_specifieropt -> <empty>
Rule 425   default_argument_specifier -> EQUAL constant_expression
Rule 426   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 427   class_modifieropt -> class_modifier
Rule 428   class_modifieropt -> <empty>
Rule 429   class_base_clauseopt -> class_base_clause
Rule 430   class_base_clauseopt -> <empty>
Rule 431   class_interface_clauseopt -> class_interface_clause
Rule 432   class_interface_clauseopt -> <empty>
Rule 433   class_member_declarationsopt -> class_member_declarations
Rule 434   class_member_declarationsopt -> <empty>
Rule 435   class_modifier -> ABSTRACT
Rule 436   class_modifier -> FINAL
Rule 437   class_base_clause -> EXTENDS qualified_name
Rule 438   class_interface_clause -> IMPLEMENTS qualified_name
Rule 439   class_interface_clause -> class_interface_clause qualified_name
Rule 440   class_member_declarations -> class_member_declaration
Rule 441   class_member_declarations -> class_member_declarations class_member_declaration
Rule 442   class_member_declaration -> class_const_declaration
Rule 443   class_member_declaration -> property_declaration
Rule 444   class_member_declaration -> method_declaration
Rule 445   class_member_declaration -> constructor_declaration
Rule 446   class_member_declaration -> destructor_declaration
Rule 447   class_member_declaration -> trait_use_clause
Rule 448   const_declaration -> CONST const_elements SEMICOLON
Rule 449   class_const_declaration -> visibility_modifieropt CONST const_elements SEMICOLON
Rule 450   const_elements -> const_element
Rule 451   const_elements -> const_elements const_element
Rule 452   const_element -> name EQUAL constant_expression
Rule 453   property_declaration -> property_modifier property_elements SEMICOLON
Rule 454   property_modifier -> VAR
Rule 455   property_modifier -> visibility_modifier static_modifieropt
Rule 456   property_modifier -> static_modifier visibility_modifieropt
Rule 457   static_modifieropt -> static_modifier
Rule 458   static_modifieropt -> <empty>
Rule 459   visibility_modifier -> PUBLIC
Rule 460   visibility_modifier -> PROTECTED
Rule 461   visibility_modifier -> PRIVATE
Rule 462   static_modifier -> STATIC
Rule 463   property_elements -> property_element
Rule 464   property_elements -> property_elements property_element
Rule 465   property_element -> VARIABLE property_initializeropt SEMICOLON
Rule 466   property_initializeropt -> property_initializer
Rule 467   property_initializeropt -> <empty>
Rule 468   property_initializer -> EQUAL constant_expression
Rule 469   method_declaration -> method_modifiersopt function_definition
Rule 470   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 471   method_modifiersopt -> method_modifiers
Rule 472   method_modifiersopt -> <empty>
Rule 473   method_modifiers -> method_modifier
Rule 474   method_modifiers -> method_modifiers method_modifier
Rule 475   method_modifier -> visibility_modifier
Rule 476   method_modifier -> static_modifier
Rule 477   method_modifier -> class_modifier
Rule 478   constructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __construct LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 479   destructor_declaration -> method_modifiers FUNCTION name AMPERSANDopt __destruct LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 480   parameter_declaration_listopt -> parameter_declaration_list
Rule 481   parameter_declaration_listopt -> <empty>
Rule 482   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 483   interface_base_clauseopt -> interface_base_clause
Rule 484   interface_base_clauseopt -> <empty>
Rule 485   interface_member_declarationsopt -> interface_member_declarations
Rule 486   interface_member_declarationsopt -> <empty>
Rule 487   interface_base_clause -> EXTENDS qualified_name
Rule 488   interface_base_clause -> interface_base_clause qualified_name
Rule 489   interface_member_declarations -> interface_member_declaration
Rule 490   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 491   interface_member_declaration -> class_const_declaration
Rule 492   interface_member_declaration -> method_declaration
Rule 493   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 494   trait_member_declarationsopt -> trait_member_declarations
Rule 495   trait_member_declarationsopt -> <empty>
Rule 496   trait_member_declarations -> trait_member_declaration
Rule 497   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 498   trait_member_declaration -> property_declaration
Rule 499   trait_member_declaration -> method_declaration
Rule 500   trait_member_declaration -> constructor_declaration
Rule 501   trait_member_declaration -> destructor_declaration
Rule 502   trait_member_declaration -> trait_use_clauses
Rule 503   trait_use_clauses -> trait_use_clause
Rule 504   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 505   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 506   trait_name_list -> qualified_name
Rule 507   trait_name_list -> trait_name_list qualified_name
Rule 508   trait_use_specification -> SEMICOLON
Rule 509   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 510   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 511   trait_select_and_alias_clausesopt -> <empty>
Rule 512   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 513   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 514   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 515   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 516   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 517   trait_alias_as_clause -> name AS visibility_modifieropt name
Rule 518   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 519   nameopt -> name
Rule 520   nameopt -> <empty>
Rule 521   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 522   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 523   namespace_nameopt -> namespace_name
Rule 524   namespace_nameopt -> <empty>
Rule 525   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 526   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 527   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 528   namespace_function_or_constopt -> namespace_function_or_const
Rule 529   namespace_function_or_constopt -> <empty>
Rule 530   NS_SEPARATORopt -> NS_SEPARATOR
Rule 531   NS_SEPARATORopt -> <empty>
Rule 532   namespace_use_clauses -> namespace_use_clause
Rule 533   namespace_use_clauses -> namespace_use_clauses namespace_use_clause
Rule 534   namespace_use_clause -> qualified_name namespace_aliasing_clauseopt
Rule 535   namespace_aliasing_clause -> AS name
Rule 536   namespace_function_or_const -> FUNCTION
Rule 537   namespace_function_or_const -> CONST
Rule 538   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 539   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1
Rule 540   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clauseopt
Rule 541   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 542   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2
Rule 543   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clauseopt

Terminals, with rules where they appear

ABSTRACT             : 435
AMPERSAND            : 73 194 200 200 224 226 355 397
AND                  : 248
AND_EQUAL            : 237
ARRAY                : 108
AS                   : 348 349 350 351 517 518 535
ASTERISK             : 
ATTRIBUTE            : 
BACKTICK             : 139 139
BAD_CARACTER         : 
BITWISE_NOT          : 
BITWISE_OR           : 198 202 202
BITWISE_XOR          : 196
BOOL                 : 419
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 367
CALLABLE             : 
CASE                 : 314 315
CATCH                : 380
CLASS                : 87 88 426
CLONE                : 153
CLOSE_TAG            : 5
COALESCE             : 204
COALESCE_EQUAL       : 
COLON                : 215 218 219 219 220 222 347 393
COMMENT              : 
CONCAT               : 178
CONCAT_EQUAL         : 234
CONST                : 448 449 537
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 363 364
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 384 385 386
DEFAULT              : 316 317
DIE                  : 65 66
DIVIDE               : 173
DIV_EQUAL            : 230
DNUMBER              : 
DO                   : 326
DOC_COMMENT          : 
DOLLAR               : 34 35
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLE_ARROW         : 221 222 244 353
DOUBLE_COLON         : 103 104 105 142 143 144 145 516
DOUBLE_POINT         : 206 207 286 295 296 297 304 305 308 309 318 325 335 336 337 338 339 340 341 342 350 351 385 407 408
DQUOTATION_MARK      : 
ECHO                 : 390
ELLIPSIS             : 128 406
ELSE                 : 301 305
ELSEIF               : 300 304
EMPTY                : 61
ENDDECLARE           : 385
ENDFOR               : 335 336 337 338 339 340 341 342
ENDFOREACH           : 350 351
ENDIF                : 295 296 297
ENDSWITCH            : 308 309
ENDWHILE             : 325
EQUAL                : 11 14 189 211 212 226 425 452 468
EQUALS               : 387 388 389
EVAL                 : 62
EXIT                 : 63 64
EXPONENT_DNUMBER     : 
EXTENDS              : 437 487
FINAL                : 436
FINALLY              : 383
FLOAT                : 420
FN                   : 
FOR                  : 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342
FOREACH              : 348 349 350 351
FUNCTION             : 70 396 478 479 536
GLOBAL               : 15
GOTO                 : 362
IF                   : 291 292 293 294 295 296 297
IMPLEMENTS           : 438
INC                  : 
INCLUDE              : 258
INCLUDE_ONCE         : 259
INSTANCEOF           : 
INSTEADOF            : 516
INT                  : 421
INTERFACE            : 482
ISSET                : 67
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 185
IS_IDENTICAL         : 191
IS_NOT_EQUAL         : 190
IS_NOT_IDENTICAL     : 192
IS_SMALLER_OR_EQUAL  : 184
LEFT_CBRAC           : 35 87 88 100 101 109 118 119 132 282 283 306 307 426 482 493 509 526 527
LEFT_PARENTHESIS     : 32 37 41 61 62 64 66 67 70 81 84 85 87 108 120 121 122 123 133 134 143 144 165 213 291 292 293 294 295 296 297 300 304 306 307 308 309 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 348 349 350 351 366 380 384 385 386 393 394 396 478 479
LEFT_SQRBRAC         : 
LESS                 : 177
LESS_THAN            : 183
LIST                 : 213
LNUMBER              : 
MINUS_EQUAL          : 233
MOD_EQUAL            : 231
MORE_THAN            : 
MUL_EQUAL            : 229
NAMESPACE            : 521 522
NEGATION             : 
NEW                  : 84 85 86 87 88
NS_SEPARATOR         : 526 527 530
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 3
OPEN_TAG_WITH_ECHO   : 4
OR                   : 252
OR_EQUAL             : 239
PLUS                 : 161 176
PLUS_EQUAL           : 232
POW                  : 
POW_EQUAL            : 228
PRINT                : 246
PRIVATE              : 461
PROTECTED            : 460
PUBLIC               : 459
REQUIRE              : 260
REQUIRE_ONCE         : 261
RETURN               : 371
RIGHT_CBRAC          : 35 100 109 118 282 283 306 307 426 482 493 509 526 527
RIGHT_PARENTHESIS    : 32 37 41 61 62 64 66 67 70 81 84 85 87 108 120 121 122 123 133 134 143 144 165 213 291 292 293 294 295 296 297 300 304 306 307 308 309 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 348 349 350 351 366 380 384 385 386 393 394 396 478 479
RIGHT_SQRBRAC        : 
SEMICOLON            : 7 15 287 288 295 296 297 308 309 319 325 326 327 327 328 328 329 329 330 330 331 331 332 332 333 333 334 334 335 335 335 336 336 336 337 337 337 338 338 338 339 339 339 340 340 340 341 341 341 342 342 342 350 351 362 363 364 367 371 374 385 386 390 393 394 448 449 453 465 470 508 514 515 521 525 526 527
SL                   : 180
SL_EQUAL             : 235
SPACESHIP            : 187
SR                   : 181
SR_EQUAL             : 236
START_HEREDOC        : 
STATIC               : 7 151 462
STRING               : 56 422
SWITCH               : 306 307 308 309
TERNARY_OPERATION    : 206 207 412
THROW                : 374
TRAIT                : 493
TRY                  : 375 376 377
UNSET                : 393 394
USE                  : 81 505 525 526 527
VAR                  : 454
VARIABLE             : 10 33 82 83 380 405 406 465
WHILE                : 324 325 326
WHITESPACE           : 
XOR                  : 250
XOR_EQUAL            : 238
YIELD                : 242 243 244
YIELD_FROM           : 240
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 70 82 83 114 115
AMPERSANDopt         : 478 479
ARROW                : 102 115 129 133 134
AT                   : 164
DECREMENT            : 136 138
ENCODING             : 388
EXPONENTIATION       : 155
GREATER_THAN_OR_EQUAL : 186
INCREMENT            : 135 137
INTEGER_LITERAL      : 365
MINUS                : 162
MODULO               : 174
NAME                 : 130 145
NOT                  : 170
NS_SEPARATORopt      : 526 527
PARENT               : 150
RBRACE               : 87 88 101 119 132
SELF                 : 149
STRICT_TYPES         : 389
TERNARY_OPERATIONopt : 411
TICKS                : 387
TILDE                : 163
TIMES                : 172
VOID                 : 408
__construct          : 478
__destruct           : 479
_opt                 : 85 112 113
additive_expression  : 176 177 178 179 180 181
ampersandopt         : 396 405 406
anonymous_function_creation_expression : 24
anonymous_function_use_clause : 77
anonymous_function_use_clause_opt : 70
argument_expression  : 124 125
argument_expression_list : 85 89 121 123 125 134 144
argument_expression_list_opt : 84 87 120 122 133 143
array                : 414
array_creation_expression : 22 38 42
array_element_initializer : 113
array_initializer    : 110
array_initializer_list : 112
array_initializer_opt : 108 109
assignment_expression : 211 212 227 240
base_type_declaration : 411
bitwise_AND_expression : 194 195 196
bitwise_exc_OR_expression : 196 197 198
bitwise_inc_OR_expression : 198 199 200
break_statement      : 359
breakout_level       : 363 366 368
breakout_levelopt    : 367
byref_assignment_expression : 30
callable             : 415
callable_expression  : 122 123
callable_variable    : 40 49
case_default_label_terminator : 314 315 316 317
case_statement       : 310 311
case_statements      : 306 308 310 312
cast_expression      : 159
catch_clause         : 378 379
catch_clauses        : 375 377 379
catch_name_list      : 380 382
class_base_clause    : 91 429
class_base_clause_opt : 87 88
class_base_clauseopt : 426
class_const_declaration : 442 491
class_constant_access_expression : 19
class_declaration    : 275
class_interface_clause : 93 431 439
class_interface_clause_opt : 87 88
class_interface_clauseopt : 426
class_member_declaration : 440 441
class_member_declarations : 95 433 441
class_member_declarations_opt : 87 88
class_member_declarationsopt : 426
class_modifier       : 427 477
class_modifieropt    : 426
class_type_designator : 84 85 86 167
clone_expression     : 154 155
coalesce_expression  : 204 205 206 207
compound_assignment_expression : 210
compound_assignment_operator : 227
compound_statement   : 70 263 375 376 377 380 383 395 478 479 522
conditional_expression : 206 207 208
const_declaration    : 273
const_element        : 450 451
const_elements       : 448 449 451
constant_access_expression : 20
constant_expression  : 11 14 425 452 468
constructor_declaration : 445 500
continue_statement   : 358
declare_directive    : 384 385 386
declare_statement    : 270
default_argument_specifier : 423
default_argument_specifieropt : 405
default_statement    : 312 313
dereferencable_expression : 118 119 129 133 134 148
destructor_declaration : 446 501
do_statement         : 321
dq_char_sequence     : 140
dq_char_sequence_opt : 139
echo_statement       : 271
element_key          : 115
element_value        : 114 115
else_clause_1        : 291 293
else_clause_2        : 295 297
elseif_clause_1      : 298 299
elseif_clause_2      : 302 303
elseif_clauses_1     : 291 292 299
elseif_clauses_2     : 295 296 303
empty_intrinsic      : 57
end_tag              : 
equality_expression  : 189 190 191 192 193 194
error_control_expression : 158
eval_intrinsic       : 58
exit_intrinsic       : 59
exponentiation_expression : 155 156
expression           : 32 35 37 41 61 62 101 106 116 117 119 127 128 132 206 221 222 258 259 260 261 262 287 291 292 293 294 295 296 297 300 304 306 307 308 309 314 315 324 325 326 346 347 352 353 355 370 372 374 391 392
expression_list      : 390 392
expression_opt       : 64 66 100 118
expression_statement : 265
expressionopt        : 371
finally_clause       : 376 377
floating_literal     : 54
for_control          : 327 328 331 332 335 336 339 340
for_end_of_loop      : 327 329 331 333 335 337 339 341
for_expression_group : 343 344 345 347
for_initializer      : 327 328 329 330 335 336 337 338
for_statement        : 322
foreach_collection_name : 348 349 350 351
foreach_key          : 348 350
foreach_statement    : 323
foreach_value        : 348 349 350 351
foreach_value_expression : 354
function_call_expression : 48
function_definition  : 274 469
function_definition_header : 395 470
function_static_declaration : 281
function_static_initializer : 12
function_static_initializer_opt : 10
global_declaration   : 280
goto_statement       : 357
if_statement         : 289
include_expression   : 254
include_once_expression : 255
instanceof           : 167
instanceof_expression : 168 169 170
instanceof_subj      : 167
integer_literal      : 53
interface_base_clause : 483 488
interface_base_clauseopt : 482
interface_declaration : 276
interface_member_declaration : 489 490
interface_member_declarations : 485 490
interface_member_declarationsopt : 482
intrinsic            : 23
isset_intrinsic      : 60
iterable             : 416
iteration_statement  : 267
jump_statement       : 268
keyed_list_expression_list : 215 216 222
list_expression_list : 213
list_intrinsic       : 212 223 356
list_or_variable     : 217 219 220 221 222
literal              : 21 387 388 389
logical_AND_expression_1 : 200 201 202
logical_AND_expression_2 : 248 249 250
logical_exc_OR_expression : 250 251 252
logical_inc_OR_expression_1 : 202 203 204
logical_inc_OR_expression_2 : 252 253
logical_not_expression : 171 172 173 174
member_access_expression : 51
member_call_expression : 46
member_name          : 102 129 133 134 143 144
method_declaration   : 444 492 499
method_modifier      : 473 474
method_modifiers     : 470 471 474 478 479
method_modifiersopt  : 469
multiplicative_expression : 172 173 174 175 176 177 178
name                 : 286 362 396 426 452 478 479 482 493 516 517 517 518 519 535
named_label_statement : 264
nameopt              : 518
namespace_aliasing_clause : 
namespace_aliasing_clauseopt : 534 540 543
namespace_definition : 278
namespace_function_or_const : 526 528
namespace_function_or_constopt : 525 543
namespace_name       : 521 523 526 527 540 543
namespace_nameopt    : 522
namespace_use_clause : 532 533
namespace_use_clauses : 525 533
namespace_use_declaration : 279
namespace_use_group_clause_1 : 538 539
namespace_use_group_clause_2 : 541 542
namespace_use_group_clauses_1 : 526 539
namespace_use_group_clauses_2 : 527 542
new_variable         : 98 100 101 102 105
object_creation_expression : 25
parameter_declaration : 401 402
parameter_declaration_list : 75 402 480
parameter_declaration_list_opt : 70
parameter_declaration_listopt : 396 478
postfix_decrement_expression : 27
postfix_increment_expression : 26
prefix_decrement_expression : 29
prefix_increment_expression : 28
primary_expression   : 152 153
print_expression     : 246 247
property_declaration : 443 498
property_element     : 463 464
property_elements    : 453 464
property_initializer : 466
property_initializeropt : 465
property_modifier    : 453
qualified_name       : 52 97 103 120 121 147 381 418 437 438 439 487 488 506 507 516 534
relational_expression : 183 184 185 186 187 188 189 190 191 192
relative_scope       : 104 146
require_expression   : 256
require_once_expression : 257
return_statement     : 360
return_type          : 79
return_type_opt      : 70
return_typeopt       : 396
scalar_type          : 417
scope_resolution_qualifier : 142 143 144 145
scoped_call_expression : 47
scoped_property_access_expression : 50
selection_statement  : 266
shell_command_expression : 31
shift_expression     : 180 181 182 183 184 185 186 187
simple_assignment_expression : 209
simple_parameter_declaration_list : 399 403
simple_variable      : 16 17 34 44 99 103 104 105 131 142
start_tag            : 
statement            : 284 285 291 292 293 294 300 301 324 326 327 328 329 330 331 332 333 334 348 349 384
statement_list       : 1 282 285 295 296 297 304 305 314 316 325 335 336 337 338 339 340 341 342 350 351 385
statement_list_opt   : 0
static               : 71
static_modifier      : 456 457 476
static_modifieropt   : 455
static_opt           : 70
static_variable_declaration : 8 9
static_variable_name_list : 7 9
string_literal       : 39 43 55
subscript_expression : 45
switch_statement     : 290
throw_statement      : 361
trait_alias_as_clause : 515
trait_declaration    : 277
trait_member_declaration : 496 497
trait_member_declarations : 494 497
trait_member_declarationsopt : 493
trait_name_list      : 505 507 516
trait_select_and_alias_clause : 512 513
trait_select_and_alias_clauses : 510 513
trait_select_and_alias_clausesopt : 509
trait_select_insteadof_clause : 514
trait_use_clause     : 447 503 504
trait_use_clauses    : 502 504
trait_use_specification : 505
try_statement        : 269
type_declaration     : 407 409
type_declarationopt  : 405 406
unary_expression     : 160 164 165 166
unary_op_expression  : 157
unary_operator       : 160
unkeyed_list_expression_list : 214 219 220
unset_statement      : 272
use_variable_name_list : 81 83
variable             : 18 36 68 69 135 136 137 138 211 224 225 226 226 227
variable_list        : 69 393 394
variable_list_opt    : 67
variable_name_list   : 15 17
variadic_declaration_list : 400
variadic_parameter   : 403 404
variadic_unpacking   : 126
visibility_modifier  : 455 475 518
visibility_modifieropt : 449 456 517
while_statement      : 320
yield_expression     : 243 244 245 248
yield_from_expression : 241 244

