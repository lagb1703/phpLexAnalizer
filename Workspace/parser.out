Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ATTRIBUTE
    BAD_CARACTER
    BOOLEAN_AND
    BOOLEAN_OR
    COALESCE_EQUAL
    COMMENT
    CONSTANT_ENCAPSED_STRING
    CURLY_OPEN
    DEC
    DOC_COMMENT
    DOLLAR_OPEN_CURLY_BRACES
    DQUOTATION_MARK
    EXPONENT_DNUMBER
    FN
    INC
    IS_EQUAL
    LEFT_SQRBRAC
    MORE_THAN
    NULLSAFE_OBJECT_OPERATOR
    OBJECT_OPERATOR
    POW
    RIGHT_SQRBRAC
    START_HEREDOC
    __CLASS__
    __DIR__
    __FILE__
    __FUNCTION__
    __HALT_COMPILER
    __LINE__
    __METHOD__
    __NAMESPACE__
    __TRAIT__

Grammar

Rule 0     S' -> script
Rule 1     script -> script_section
Rule 2     script -> script script_section
Rule 3     script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt
Rule 4     script_section -> WHITESPACE
Rule 5     text_opt -> STRING
Rule 6     text_opt -> <empty>
Rule 7     end_tag_opt -> CLOSE_TAG
Rule 8     end_tag_opt -> <empty>
Rule 9     statement_list_opt -> statement_list
Rule 10    statement_list_opt -> <empty>
Rule 11    start_tag -> OPEN_TAG
Rule 12    start_tag -> OPEN_TAG_WITH_ECHO
Rule 13    end_tag -> CLOSE_TAG
Rule 14    end_tag -> <empty>
Rule 15    namespace_name -> NAME
Rule 16    namespace_name -> namespace_name NS_SEPARATOR NAME
Rule 17    function_static_declaration -> STATIC static_variable_name_list SEMICOLON
Rule 18    static_variable_name_list -> static_variable_declaration
Rule 19    static_variable_name_list -> static_variable_name_list static_variable_declaration
Rule 20    static_variable_declaration -> VARIABLE function_static_initializer_opt
Rule 21    function_static_initializer -> EQUAL constant_expression
Rule 22    function_static_initializer_opt -> function_static_initializer
Rule 23    function_static_initializer_opt -> <empty>
Rule 24    function_static_initializer_opt -> EQUAL constant_expression
Rule 25    global_declaration -> GLOBAL variable_name_list SEMICOLON
Rule 26    variable_name_list -> simple_variable
Rule 27    variable_name_list -> variable_name_list simple_variable
Rule 28    primary_expression -> variable
Rule 29    primary_expression -> class_constant_access_expression
Rule 30    primary_expression -> constant_access_expression
Rule 31    primary_expression -> literal
Rule 32    primary_expression -> array_creation_expression
Rule 33    primary_expression -> intrinsic
Rule 34    primary_expression -> anonymous_function_creation_expression
Rule 35    primary_expression -> object_creation_expression
Rule 36    primary_expression -> postfix_increment_expression
Rule 37    primary_expression -> postfix_decrement_expression
Rule 38    primary_expression -> prefix_increment_expression
Rule 39    primary_expression -> prefix_decrement_expression
Rule 40    primary_expression -> byref_assignment_expression
Rule 41    primary_expression -> shell_command_expression
Rule 42    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 43    simple_variable -> VARIABLE
Rule 44    simple_variable -> DOLLAR simple_variable
Rule 45    simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
Rule 46    dereferencable_expression -> variable
Rule 47    dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 48    dereferencable_expression -> array_creation_expression
Rule 49    dereferencable_expression -> string_literal
Rule 50    callable_expression -> callable_variable
Rule 51    callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 52    callable_expression -> array_creation_expression
Rule 53    callable_expression -> string_literal
Rule 54    callable_variable -> simple_variable
Rule 55    callable_variable -> subscript_expression
Rule 56    callable_variable -> member_call_expression
Rule 57    callable_variable -> scoped_call_expression
Rule 58    callable_variable -> function_call_expression
Rule 59    variable -> callable_variable
Rule 60    variable -> scoped_property_access_expression
Rule 61    variable -> member_access_expression
Rule 62    constant_access_expression -> qualified_name
Rule 63    literal -> integer_literal
Rule 64    literal -> floating_literal
Rule 65    literal -> string_literal
Rule 66    integer_literal -> LNUMBER
Rule 67    floating_literal -> DNUMBER
Rule 68    string_literal -> STRING
Rule 69    intrinsic -> empty_intrinsic
Rule 70    intrinsic -> eval_intrinsic
Rule 71    intrinsic -> exit_intrinsic
Rule 72    intrinsic -> isset_intrinsic
Rule 73    empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 74    eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 75    exit_intrinsic -> EXIT
Rule 76    exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 77    exit_intrinsic -> DIE
Rule 78    exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
Rule 79    isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
Rule 80    variable_list_opt -> variable_list
Rule 81    variable_list -> variable
Rule 82    variable_list -> variable_list variable
Rule 83    anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
Rule 84    static_opt -> STATIC
Rule 85    static_opt -> <empty>
Rule 86    AMPERSAND_opt -> AMPERSAND
Rule 87    AMPERSAND_opt -> <empty>
Rule 88    parameter_declaration_list_opt -> parameter_declaration_list
Rule 89    parameter_declaration_list_opt -> <empty>
Rule 90    anonymous_function_use_clause_opt -> anonymous_function_use_clause
Rule 91    anonymous_function_use_clause_opt -> <empty>
Rule 92    return_type_opt -> return_type
Rule 93    return_type_opt -> <empty>
Rule 94    anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS
Rule 95    use_variable_name_list -> AMPERSAND_opt VARIABLE
Rule 96    use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE
Rule 97    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 98    object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
Rule 99    object_creation_expression -> NEW class_type_designator
Rule 100   object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
Rule 101   object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
Rule 102   argument_expression_list_opt -> argument_expression_list
Rule 103   argument_expression_list_opt -> <empty>
Rule 104   class_base_clause_opt -> class_base_clause
Rule 105   class_base_clause_opt -> <empty>
Rule 106   class_interface_clause_opt -> class_interface_clause
Rule 107   class_interface_clause_opt -> <empty>
Rule 108   class_member_declarations_opt -> class_member_declarations
Rule 109   class_member_declarations_opt -> <empty>
Rule 110   class_type_designator -> qualified_name
Rule 111   class_type_designator -> new_variable
Rule 112   new_variable -> simple_variable
Rule 113   new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 114   new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 115   new_variable -> new_variable ARROW member_name
Rule 116   new_variable -> qualified_name DOUBLE_COLON simple_variable
Rule 117   new_variable -> relative_scope DOUBLE_COLON simple_variable
Rule 118   new_variable -> new_variable DOUBLE_COLON simple_variable
Rule 119   expression_opt -> expression
Rule 120   expression_opt -> <empty>
Rule 121   array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
Rule 122   array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
Rule 123   array_initializer_opt -> array_initializer
Rule 124   array_initializer_opt -> <empty>
Rule 125   array_initializer -> array_initializer_list
Rule 126   array_initializer -> array_initializer_list COLON
Rule 127   array_initializer_list -> array_element_initializer
Rule 128   array_initializer_list -> array_element_initializer COLON array_element_initializer
Rule 129   array_element_initializer -> AMPERSAND_opt element_value
Rule 130   array_element_initializer -> element_key ARROW AMPERSAND_opt element_value
Rule 131   element_key -> expression
Rule 132   element_value -> expression
Rule 133   subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
Rule 134   subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 135   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 136   function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 137   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 138   function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 139   argument_expression_list -> argument_expression
Rule 140   argument_expression_list -> argument_expression_list argument_expression
Rule 141   argument_expression -> variadic_unpacking
Rule 142   argument_expression -> expression
Rule 143   variadic_unpacking -> ELLIPSIS expression
Rule 144   member_access_expression -> dereferencable_expression ARROW member_name
Rule 145   member_name -> NAME
Rule 146   member_name -> simple_variable
Rule 147   member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS
Rule 148   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 149   member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 150   postfix_increment_expression -> variable DOUBLEPLUS
Rule 151   postfix_decrement_expression -> variable DOUBLELESS
Rule 152   prefix_increment_expression -> DOUBLEPLUS variable
Rule 153   prefix_decrement_expression -> DOUBLELESS variable
Rule 154   shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK
Rule 155   dq_char_sequence_opt -> DQ_CHAR_SEQUENCE
Rule 156   dq_char_sequence_opt -> <empty>
Rule 157   scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable
Rule 158   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
Rule 159   scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 160   class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME
Rule 161   scope_resolution_qualifier -> relative_scope
Rule 162   scope_resolution_qualifier -> qualified_name
Rule 163   scope_resolution_qualifier -> dereferencable_expression
Rule 164   relative_scope -> SELF
Rule 165   relative_scope -> PARENT
Rule 166   relative_scope -> STATIC
Rule 167   clone_expression -> primary_expression
Rule 168   clone_expression -> CLONE primary_expression
Rule 169   exponentiation_expression -> clone_expression
Rule 170   exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression
Rule 171   unary_expression -> exponentiation_expression
Rule 172   unary_expression -> unary_op_expression
Rule 173   unary_expression -> error_control_expression
Rule 174   unary_expression -> cast_expression
Rule 175   unary_op_expression -> unary_operator unary_expression
Rule 176   unary_operator -> PLUS
Rule 177   unary_operator -> LESS
Rule 178   unary_operator -> BITWISE_NOT
Rule 179   error_control_expression -> AT unary_expression
Rule 180   cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
Rule 181   instanceof_expression -> unary_expression
Rule 182   instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator
Rule 183   instanceof_subj -> instanceof_expression
Rule 184   logical_not_expression -> instanceof_expression
Rule 185   logical_not_expression -> NEGATION instanceof_expression
Rule 186   multiplicative_expression -> logical_not_expression
Rule 187   multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression
Rule 188   multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression
Rule 189   multiplicative_expression -> multiplicative_expression MODULO logical_not_expression
Rule 190   additive_expression -> multiplicative_expression
Rule 191   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 192   additive_expression -> additive_expression LESS multiplicative_expression
Rule 193   additive_expression -> additive_expression CONCAT multiplicative_expression
Rule 194   shift_expression -> additive_expression
Rule 195   shift_expression -> shift_expression SL additive_expression
Rule 196   shift_expression -> shift_expression SR additive_expression
Rule 197   relational_expression -> shift_expression
Rule 198   relational_expression -> relational_expression LESS_THAN shift_expression
Rule 199   relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression
Rule 200   relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression
Rule 201   relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression
Rule 202   relational_expression -> relational_expression SPACESHIP shift_expression
Rule 203   equality_expression -> relational_expression
Rule 204   equality_expression -> equality_expression EQUAL relational_expression
Rule 205   equality_expression -> equality_expression IS_NOT_EQUAL relational_expression
Rule 206   equality_expression -> equality_expression IS_IDENTICAL relational_expression
Rule 207   equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression
Rule 208   bitwise_AND_expression -> equality_expression
Rule 209   bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression
Rule 210   bitwise_exc_OR_expression -> bitwise_AND_expression
Rule 211   bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
Rule 212   bitwise_inc_OR_expression -> bitwise_exc_OR_expression
Rule 213   bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
Rule 214   logical_AND_expression_1 -> bitwise_inc_OR_expression
Rule 215   logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
Rule 216   logical_inc_OR_expression_1 -> logical_AND_expression_1
Rule 217   logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
Rule 218   coalesce_expression -> logical_inc_OR_expression_1
Rule 219   coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression
Rule 220   conditional_expression -> coalesce_expression
Rule 221   conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
Rule 222   conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
Rule 223   assignment_expression -> conditional_expression
Rule 224   assignment_expression -> simple_assignment_expression
Rule 225   assignment_expression -> compound_assignment_expression
Rule 226   simple_assignment_expression -> variable EQUAL assignment_expression
Rule 227   simple_assignment_expression -> list_intrinsic EQUAL assignment_expression
Rule 228   list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
Rule 229   list_expression_list -> unkeyed_list_expression_list
Rule 230   list_expression_list -> keyed_list_expression_list COLON
Rule 231   list_expression_list -> keyed_list_expression_list
Rule 232   unkeyed_list_expression_list -> list_or_variable
Rule 233   unkeyed_list_expression_list -> COLON
Rule 234   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON
Rule 235   unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable
Rule 236   keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable
Rule 237   keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
Rule 238   list_or_variable -> list_intrinsic
Rule 239   list_or_variable -> AMPERSAND variable
Rule 240   list_or_variable -> variable
Rule 241   byref_assignment_expression -> variable EQUAL AMPERSAND variable
Rule 242   compound_assignment_expression -> variable compound_assignment_operator assignment_expression
Rule 243   compound_assignment_operator -> POW_EQUAL
Rule 244   compound_assignment_operator -> MUL_EQUAL
Rule 245   compound_assignment_operator -> DIV_EQUAL
Rule 246   compound_assignment_operator -> MOD_EQUAL
Rule 247   compound_assignment_operator -> PLUS_EQUAL
Rule 248   compound_assignment_operator -> MINUS_EQUAL
Rule 249   compound_assignment_operator -> CONCAT_EQUAL
Rule 250   compound_assignment_operator -> SL_EQUAL
Rule 251   compound_assignment_operator -> SR_EQUAL
Rule 252   compound_assignment_operator -> AND_EQUAL
Rule 253   compound_assignment_operator -> XOR_EQUAL
Rule 254   compound_assignment_operator -> OR_EQUAL
Rule 255   yield_from_expression -> YIELD_FROM assignment_expression
Rule 256   yield_expression -> yield_from_expression
Rule 257   yield_expression -> YIELD
Rule 258   yield_expression -> YIELD yield_expression
Rule 259   yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression
Rule 260   print_expression -> yield_expression
Rule 261   print_expression -> PRINT print_expression
Rule 262   logical_AND_expression_2 -> print_expression
Rule 263   logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression
Rule 264   logical_exc_OR_expression -> logical_AND_expression_2
Rule 265   logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2
Rule 266   logical_inc_OR_expression_2 -> logical_exc_OR_expression
Rule 267   logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression
Rule 268   expression -> logical_inc_OR_expression_2
Rule 269   expression -> include_expression
Rule 270   expression -> STRING
Rule 271   expression -> include_once_expression
Rule 272   expression -> require_expression
Rule 273   expression -> require_once_expression
Rule 274   include_expression -> INCLUDE expression
Rule 275   include_once_expression -> INCLUDE_ONCE expression
Rule 276   require_expression -> REQUIRE expression
Rule 277   require_once_expression -> REQUIRE_ONCE expression
Rule 278   constant_expression -> expression
Rule 279   statement -> compound_statement
Rule 280   statement -> named_label_statement
Rule 281   statement -> expression_statement
Rule 282   statement -> selection_statement
Rule 283   statement -> iteration_statement
Rule 284   statement -> jump_statement
Rule 285   statement -> try_statement
Rule 286   statement -> declare_statement
Rule 287   statement -> echo_statement
Rule 288   statement -> unset_statement
Rule 289   statement -> const_declaration
Rule 290   statement -> function_definition
Rule 291   statement -> class_declaration
Rule 292   statement -> interface_declaration
Rule 293   statement -> trait_declaration
Rule 294   statement -> namespace_definition
Rule 295   statement -> namespace_use_declaration
Rule 296   statement -> global_declaration
Rule 297   statement -> function_static_declaration
Rule 298   compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC
Rule 299   compound_statement -> LEFT_CBRAC RIGHT_CBRAC
Rule 300   statement_list -> statement
Rule 301   statement_list -> statement_list statement
Rule 302   named_label_statement -> name DOUBLE_POINT
Rule 303   expression_statement -> expression SEMICOLON
Rule 304   expression_statement -> SEMICOLON
Rule 305   selection_statement -> if_statement
Rule 306   selection_statement -> switch_statement
Rule 307   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
Rule 308   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
Rule 309   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
Rule 310   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 311   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
Rule 312   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
Rule 313   if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
Rule 314   elseif_clauses_1 -> elseif_clause_1
Rule 315   elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1
Rule 316   elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 317   else_clause_1 -> ELSE statement
Rule 318   elseif_clauses_2 -> elseif_clause_2
Rule 319   elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2
Rule 320   elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
Rule 321   else_clause_2 -> ELSE DOUBLE_POINT statement_list
Rule 322   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
Rule 323   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
Rule 324   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
Rule 325   switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
Rule 326   case_statements -> case_statement case_statements
Rule 327   case_statements -> case_statement
Rule 328   case_statements -> default_statement case_statements
Rule 329   case_statements -> default_statement
Rule 330   case_statement -> CASE expression case_default_label_terminator statement_list
Rule 331   case_statement -> CASE expression case_default_label_terminator
Rule 332   default_statement -> DEFAULT case_default_label_terminator statement_list
Rule 333   default_statement -> DEFAULT case_default_label_terminator
Rule 334   case_default_label_terminator -> DOUBLE_POINT
Rule 335   case_default_label_terminator -> SEMICOLON
Rule 336   iteration_statement -> while_statement
Rule 337   iteration_statement -> do_statement
Rule 338   iteration_statement -> for_statement
Rule 339   iteration_statement -> foreach_statement
Rule 340   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 341   while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
Rule 342   do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 343   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 344   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 345   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 346   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 347   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 348   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
Rule 349   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
Rule 350   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
Rule 351   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 352   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 353   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 354   for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 355   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 356   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 357   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 358   for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
Rule 359   for_initializer -> for_expression_group
Rule 360   for_control -> for_expression_group
Rule 361   for_end_of_loop -> for_expression_group
Rule 362   for_expression_group -> expression
Rule 363   for_expression_group -> for_expression_group COLON expression
Rule 364   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
Rule 365   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
Rule 366   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 367   foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
Rule 368   foreach_collection_name -> expression
Rule 369   foreach_key -> expression DOUBLE_ARROW
Rule 370   foreach_value -> AMPERSAND_opt expression
Rule 371   foreach_value -> AMPERSAND expression
Rule 372   foreach_value -> list_intrinsic
Rule 373   jump_statement -> goto_statement
Rule 374   jump_statement -> continue_statement
Rule 375   jump_statement -> break_statement
Rule 376   jump_statement -> return_statement
Rule 377   jump_statement -> throw_statement
Rule 378   goto_statement -> GOTO name SEMICOLON
Rule 379   continue_statement -> CONTINUE breakout_level SEMICOLON
Rule 380   continue_statement -> CONTINUE SEMICOLON
Rule 381   breakout_level -> INTEGER_LITERAL
Rule 382   breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
Rule 383   break_statement -> BREAK breakout_levelopt SEMICOLON
Rule 384   breakout_levelopt -> breakout_level
Rule 385   breakout_levelopt -> <empty>
Rule 386   breakout_level -> expression
Rule 387   return_statement -> RETURN expressionopt SEMICOLON
Rule 388   expressionopt -> expression
Rule 389   expressionopt -> <empty>
Rule 390   throw_statement -> THROW expression SEMICOLON
Rule 391   try_statement -> TRY compound_statement catch_clauses
Rule 392   try_statement -> TRY compound_statement finally_clause
Rule 393   try_statement -> TRY compound_statement catch_clauses finally_clause
Rule 394   catch_clauses -> catch_clause
Rule 395   catch_clauses -> catch_clauses catch_clause
Rule 396   catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
Rule 397   catch_name_list -> qualified_name
Rule 398   catch_name_list -> catch_name_list
Rule 399   finally_clause -> FINALLY compound_statement
Rule 400   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
Rule 401   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
Rule 402   declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
Rule 403   declare_directive -> TICKS EQUALS literal
Rule 404   declare_directive -> ENCODING EQUALS literal
Rule 405   declare_directive -> STRICT_TYPES EQUALS literal
Rule 406   echo_statement -> ECHO expression_list SEMICOLON
Rule 407   expression_list -> expression
Rule 408   expression_list -> expression_list expression
Rule 409   unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
Rule 410   unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
Rule 411   function_definition -> function_definition_header compound_statement
Rule 412   function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
Rule 413   ampersandopt -> AMPERSAND
Rule 414   ampersandopt -> <empty>
Rule 415   parameter_declaration_list -> simple_parameter_declaration_list
Rule 416   parameter_declaration_list -> variadic_declaration_list
Rule 417   simple_parameter_declaration_list -> parameter_declaration
Rule 418   simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration
Rule 419   variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter
Rule 420   variadic_declaration_list -> variadic_parameter
Rule 421   parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
Rule 422   variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE
Rule 423   return_type -> DOUBLE_POINT type_declaration
Rule 424   return_type -> DOUBLE_POINT VOID
Rule 425   type_declarationopt -> type_declaration
Rule 426   type_declarationopt -> <empty>
Rule 427   type_declaration -> TERNARY_OPERATIONopt base_type_declaration
Rule 428   TERNARY_OPERATIONopt -> TERNARY_OPERATION
Rule 429   TERNARY_OPERATIONopt -> <empty>
Rule 430   base_type_declaration -> ARRAY
Rule 431   base_type_declaration -> CALLABLE
Rule 432   base_type_declaration -> ITERABLE
Rule 433   base_type_declaration -> scalar_type
Rule 434   base_type_declaration -> qualified_name
Rule 435   scalar_type -> BOOL
Rule 436   scalar_type -> FLOAT
Rule 437   scalar_type -> INT
Rule 438   scalar_type -> STRING
Rule 439   default_argument_specifieropt -> default_argument_specifier
Rule 440   default_argument_specifieropt -> <empty>
Rule 441   default_argument_specifier -> EQUAL constant_expression
Rule 442   class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
Rule 443   class_modifieropt -> class_modifier
Rule 444   class_modifieropt -> <empty>
Rule 445   class_base_clauseopt -> class_base_clause
Rule 446   class_base_clauseopt -> <empty>
Rule 447   class_interface_clauseopt -> class_interface_clause
Rule 448   class_interface_clauseopt -> <empty>
Rule 449   class_member_declarationsopt -> class_member_declarations
Rule 450   class_member_declarationsopt -> <empty>
Rule 451   class_modifier -> ABSTRACT
Rule 452   class_modifier -> FINAL
Rule 453   class_base_clause -> EXTENDS qualified_name
Rule 454   class_interface_clause -> IMPLEMENTS qualified_name
Rule 455   class_interface_clause -> class_interface_clause qualified_name
Rule 456   class_member_declarations -> class_member_declaration
Rule 457   class_member_declarations -> class_member_declarations class_member_declaration
Rule 458   class_member_declaration -> class_const_declaration
Rule 459   class_member_declaration -> property_declaration
Rule 460   class_member_declaration -> method_declaration
Rule 461   class_member_declaration -> constructor_declaration
Rule 462   class_member_declaration -> destructor_declaration
Rule 463   class_member_declaration -> trait_use_clause
Rule 464   const_declaration -> CONST const_elements SEMICOLON
Rule 465   class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON
Rule 466   const_elements -> const_element
Rule 467   const_elements -> const_elements const_element
Rule 468   const_element -> name EQUAL constant_expression
Rule 469   property_declaration -> property_modifier property_elements SEMICOLON
Rule 470   property_modifier -> VAR
Rule 471   property_modifier -> visibility_modifier static_modifieropt
Rule 472   property_modifier -> static_modifier visibility_modifier_opt
Rule 473   static_modifieropt -> static_modifier
Rule 474   static_modifieropt -> <empty>
Rule 475   visibility_modifier -> PUBLIC
Rule 476   visibility_modifier -> PROTECTED
Rule 477   visibility_modifier -> PRIVATE
Rule 478   static_modifier -> STATIC
Rule 479   property_elements -> property_element
Rule 480   property_elements -> property_elements property_element
Rule 481   property_element -> VARIABLE property_initializeropt SEMICOLON
Rule 482   property_initializeropt -> property_initializer
Rule 483   property_initializeropt -> <empty>
Rule 484   property_initializer -> EQUAL constant_expression
Rule 485   method_declaration -> method_modifiersopt function_definition
Rule 486   method_declaration -> method_modifiers function_definition_header SEMICOLON
Rule 487   method_modifiersopt -> method_modifiers
Rule 488   method_modifiersopt -> <empty>
Rule 489   method_modifiers -> method_modifier
Rule 490   method_modifiers -> method_modifiers method_modifier
Rule 491   method_modifier -> visibility_modifier
Rule 492   method_modifier -> static_modifier
Rule 493   method_modifier -> class_modifier
Rule 494   constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
Rule 495   destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
Rule 496   parameter_declaration_listopt -> parameter_declaration_list
Rule 497   parameter_declaration_listopt -> <empty>
Rule 498   interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
Rule 499   interface_base_clauseopt -> interface_base_clause
Rule 500   interface_base_clauseopt -> <empty>
Rule 501   interface_member_declarationsopt -> interface_member_declarations
Rule 502   interface_member_declarationsopt -> <empty>
Rule 503   interface_base_clause -> EXTENDS qualified_name
Rule 504   interface_base_clause -> interface_base_clause qualified_name
Rule 505   interface_member_declarations -> interface_member_declaration
Rule 506   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 507   interface_member_declaration -> class_const_declaration
Rule 508   interface_member_declaration -> method_declaration
Rule 509   trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
Rule 510   trait_member_declarationsopt -> trait_member_declarations
Rule 511   trait_member_declarationsopt -> <empty>
Rule 512   trait_member_declarations -> trait_member_declaration
Rule 513   trait_member_declarations -> trait_member_declarations trait_member_declaration
Rule 514   trait_member_declaration -> property_declaration
Rule 515   trait_member_declaration -> method_declaration
Rule 516   trait_member_declaration -> constructor_declaration
Rule 517   trait_member_declaration -> destructor_declaration
Rule 518   trait_member_declaration -> trait_use_clauses
Rule 519   trait_use_clauses -> trait_use_clause
Rule 520   trait_use_clauses -> trait_use_clauses trait_use_clause
Rule 521   trait_use_clause -> USE trait_name_list trait_use_specification
Rule 522   trait_name_list -> qualified_name
Rule 523   trait_name_list -> trait_name_list qualified_name
Rule 524   trait_use_specification -> SEMICOLON
Rule 525   trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
Rule 526   trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses
Rule 527   trait_select_and_alias_clausesopt -> <empty>
Rule 528   trait_select_and_alias_clauses -> trait_select_and_alias_clause
Rule 529   trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause
Rule 530   trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON
Rule 531   trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON
Rule 532   trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
Rule 533   trait_alias_as_clause -> name AS visibility_modifier_opt name
Rule 534   trait_alias_as_clause -> name AS visibility_modifier nameopt
Rule 535   visibility_modifier_opt -> visibility_modifier
Rule 536   visibility_modifier_opt -> <empty>
Rule 537   nameopt -> name
Rule 538   nameopt -> <empty>
Rule 539   namespace_definition -> NAMESPACE namespace_name SEMICOLON
Rule 540   namespace_definition -> NAMESPACE namespace_nameopt compound_statement
Rule 541   namespace_nameopt -> namespace_name
Rule 542   namespace_nameopt -> <empty>
Rule 543   namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
Rule 544   namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
Rule 545   namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
Rule 546   namespace_function_or_constopt -> namespace_function_or_const
Rule 547   namespace_function_or_constopt -> <empty>
Rule 548   NS_SEPARATORopt -> NS_SEPARATOR
Rule 549   NS_SEPARATORopt -> <empty>
Rule 550   namespace_use_clauses -> namespace_use_clause
Rule 551   namespace_use_clauses -> namespace_use_clauses namespace_use_clause
Rule 552   namespace_use_clause -> qualified_name namespace_aliasing_clause_opt
Rule 553   namespace_aliasing_clause_opt -> namespace_aliasing_clause
Rule 554   qualified_name -> name
Rule 555   namespace_aliasing_clause -> AS name
Rule 556   namespace_function_or_const -> FUNCTION
Rule 557   namespace_function_or_const -> CONST
Rule 558   namespace_use_group_clauses_1 -> namespace_use_group_clause_1
Rule 559   namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1
Rule 560   namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt
Rule 561   namespace_use_group_clauses_2 -> namespace_use_group_clause_2
Rule 562   namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2
Rule 563   namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt
Rule 564   name -> STRING

Terminals, with rules where they appear

ABSTRACT             : 451
AMPERSAND            : 86 209 215 215 239 241 371 413
AND                  : 263
AND_EQUAL            : 252
ARRAY                : 121 430
ARROW                : 115 130 144 148 149
AS                   : 364 365 366 367 533 534 555
ASTERISK             : 187
AT                   : 179
ATTRIBUTE            : 
BACKTICK             : 154 154
BAD_CARACTER         : 
BITWISE_NOT          : 178
BITWISE_OR           : 213 217 217
BITWISE_XOR          : 211
BOOL                 : 435
BOOLEAN_AND          : 
BOOLEAN_OR           : 
BREAK                : 383
CALLABLE             : 431
CASE                 : 330 331
CATCH                : 396
CLASS                : 100 101 442
CLONE                : 168
CLOSE_TAG            : 7 13
COALESCE             : 219
COALESCE_EQUAL       : 
COLON                : 98 126 128 230 233 234 234 235 237 363 409
COMMENT              : 
CONCAT               : 193
CONCAT_EQUAL         : 249
CONST                : 464 465 557
CONSTANT_ENCAPSED_STRING : 
CONSTRUCT            : 494
CONTINUE             : 379 380
CURLY_OPEN           : 
DEC                  : 
DECLARE              : 400 401 402
DEFAULT              : 332 333
DESTRUCT             : 495
DIE                  : 77 78
DIVIDE               : 188
DIV_EQUAL            : 245
DNUMBER              : 67
DO                   : 342
DOC_COMMENT          : 
DOLLAR               : 44 45
DOLLAR_OPEN_CURLY_BRACES : 
DOUBLEASTERISK       : 170
DOUBLELESS           : 151 153
DOUBLEPLUS           : 150 152
DOUBLE_ARROW         : 236 237 259 369
DOUBLE_COLON         : 116 117 118 157 158 159 160 532
DOUBLE_POINT         : 221 222 302 311 312 313 320 321 324 325 334 341 351 352 353 354 355 356 357 358 366 367 401 423 424
DQUOTATION_MARK      : 
DQ_CHAR_SEQUENCE     : 155
ECHO                 : 406
ELLIPSIS             : 143 422
ELSE                 : 317 321
ELSEIF               : 316 320
EMPTY                : 73
ENCODING             : 404
ENDDECLARE           : 401
ENDFOR               : 351 352 353 354 355 356 357 358
ENDFOREACH           : 366 367
ENDIF                : 311 312 313
ENDSWITCH            : 324 325
ENDWHILE             : 341
EQUAL                : 21 24 204 226 227 241 441 468 484
EQUALS               : 403 404 405
EVAL                 : 74
EXIT                 : 75 76
EXPONENT_DNUMBER     : 
EXTENDS              : 453 503
FINAL                : 452
FINALLY              : 399
FLOAT                : 436
FN                   : 
FOR                  : 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358
FOREACH              : 364 365 366 367
FUNCTION             : 83 412 494 495 556
GLOBAL               : 25
GOTO                 : 378
GREATER_THAN_OR_EQUAL : 201
IF                   : 307 308 309 310 311 312 313
IMPLEMENTS           : 454
INC                  : 
INCLUDE              : 274
INCLUDE_ONCE         : 275
INSTANCEOF           : 182
INSTEADOF            : 532
INT                  : 437
INTEGER_LITERAL      : 381
INTERFACE            : 498
ISSET                : 79
IS_EQUAL             : 
IS_GREATER_OR_EQUAL  : 200
IS_IDENTICAL         : 206
IS_NOT_EQUAL         : 205
IS_NOT_IDENTICAL     : 207
IS_SMALLER_OR_EQUAL  : 199
ITERABLE             : 432
LEFT_CBRAC           : 45 100 101 113 114 122 133 134 147 298 299 322 323 442 498 509 525 544 545
LEFT_PARENTHESIS     : 42 47 51 73 74 76 78 79 83 94 97 98 100 121 135 136 137 138 148 149 158 159 180 228 307 308 309 310 311 312 313 316 320 322 323 324 325 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 364 365 366 367 382 396 400 401 402 409 410 412 494 495
LEFT_SQRBRAC         : 
LESS                 : 177 192
LESS_THAN            : 198
LIST                 : 228
LNUMBER              : 66
MINUS_EQUAL          : 248
MODULO               : 189
MOD_EQUAL            : 246
MORE_THAN            : 
MUL_EQUAL            : 244
NAME                 : 15 16 145 160
NAMESPACE            : 539 540
NEGATION             : 185
NEW                  : 97 98 99 100 101
NS_SEPARATOR         : 16 544 545 548
NULLSAFE_OBJECT_OPERATOR : 
OBJECT_OPERATOR      : 
OPEN_TAG             : 11
OPEN_TAG_WITH_ECHO   : 12
OR                   : 267
OR_EQUAL             : 254
PARENT               : 165
PLUS                 : 176 191
PLUS_EQUAL           : 247
POW                  : 
POW_EQUAL            : 243
PRINT                : 261
PRIVATE              : 477
PROTECTED            : 476
PUBLIC               : 475
REQUIRE              : 276
REQUIRE_ONCE         : 277
RETURN               : 387
RIGHT_CBRAC          : 45 113 122 133 298 299 322 323 442 498 509 525 544 545
RIGHT_PARENTHESIS    : 42 47 51 73 74 76 78 79 83 94 97 98 100 100 101 114 121 134 135 136 137 138 147 148 149 158 159 180 228 307 308 309 310 311 312 313 316 320 322 323 324 325 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 364 365 366 367 382 396 400 401 402 409 410 412 494 495
RIGHT_SQRBRAC        : 
SELF                 : 164
SEMICOLON            : 17 25 303 304 311 312 313 324 325 335 341 342 343 343 344 344 345 345 346 346 347 347 348 348 349 349 350 350 351 351 351 352 352 352 353 353 353 354 354 354 355 355 355 356 356 356 357 357 357 358 358 358 366 367 378 379 380 383 387 390 401 402 406 409 410 464 465 469 481 486 524 530 531 539 543 544 545
SL                   : 195
SL_EQUAL             : 250
SPACESHIP            : 202
SR                   : 196
SR_EQUAL             : 251
START_HEREDOC        : 
STATIC               : 17 84 166 478
STRICT_TYPES         : 405
STRING               : 5 68 270 438 564
SWITCH               : 322 323 324 325
TERNARY_OPERATION    : 221 222 428
THROW                : 390
TICKS                : 403
TRAIT                : 509
TRY                  : 391 392 393
UNSET                : 409 410
USE                  : 94 521 543 544 545
VAR                  : 470
VARIABLE             : 20 43 95 96 396 421 422 481
VOID                 : 424
WHILE                : 340 341 342
WHITESPACE           : 4
XOR                  : 265
XOR_EQUAL            : 253
YIELD                : 257 258 259
YIELD_FROM           : 255
__CLASS__            : 
__DIR__              : 
__FILE__             : 
__FUNCTION__         : 
__HALT_COMPILER      : 
__LINE__             : 
__METHOD__           : 
__NAMESPACE__        : 
__TRAIT__            : 
error                : 

Nonterminals, with rules where they appear

AMPERSAND_opt        : 83 95 96 129 130 370 494 495
NS_SEPARATORopt      : 544 545
TERNARY_OPERATIONopt : 427
additive_expression  : 191 192 193 194 195 196
ampersandopt         : 412 421 422
anonymous_function_creation_expression : 34
anonymous_function_use_clause : 90
anonymous_function_use_clause_opt : 83
argument_expression  : 139 140
argument_expression_list : 98 102 136 138 140 149 159
argument_expression_list_opt : 97 100 135 137 148 158
array_creation_expression : 32 48 52
array_element_initializer : 127 128 128
array_initializer    : 123
array_initializer_list : 125 126
array_initializer_opt : 121 122
assignment_expression : 226 227 242 255
base_type_declaration : 427
bitwise_AND_expression : 209 210 211
bitwise_exc_OR_expression : 211 212 213
bitwise_inc_OR_expression : 213 214 215
break_statement      : 375
breakout_level       : 379 382 384
breakout_levelopt    : 383
byref_assignment_expression : 40
callable_expression  : 137 138
callable_variable    : 50 59
case_default_label_terminator : 330 331 332 333
case_statement       : 326 327
case_statements      : 322 324 326 328
cast_expression      : 174
catch_clause         : 394 395
catch_clauses        : 391 393 395
catch_name_list      : 396 398
class_base_clause    : 104 445
class_base_clause_opt : 100 101
class_base_clauseopt : 442
class_const_declaration : 458 507
class_constant_access_expression : 29
class_declaration    : 291
class_interface_clause : 106 447 455
class_interface_clause_opt : 100 101
class_interface_clauseopt : 442
class_member_declaration : 456 457
class_member_declarations : 108 449 457
class_member_declarations_opt : 100 101
class_member_declarationsopt : 442
class_modifier       : 443 493
class_modifieropt    : 442
class_type_designator : 97 98 99 182
clone_expression     : 169 170
coalesce_expression  : 219 220 221 222
compound_assignment_expression : 225
compound_assignment_operator : 242
compound_statement   : 83 279 391 392 393 396 399 411 494 495 540
conditional_expression : 221 222 223
const_declaration    : 289
const_element        : 466 467
const_elements       : 464 465 467
constant_access_expression : 30
constant_expression  : 21 24 441 468 484
constructor_declaration : 461 516
continue_statement   : 374
declare_directive    : 400 401 402
declare_statement    : 286
default_argument_specifier : 439
default_argument_specifieropt : 421
default_statement    : 328 329
dereferencable_expression : 133 134 144 148 149 163
destructor_declaration : 462 517
do_statement         : 337
dq_char_sequence_opt : 154
echo_statement       : 287
element_key          : 130
element_value        : 129 130
else_clause_1        : 307 309
else_clause_2        : 311 313
elseif_clause_1      : 314 315
elseif_clause_2      : 318 319
elseif_clauses_1     : 307 308 315
elseif_clauses_2     : 311 312 319
empty_intrinsic      : 69
end_tag              : 
end_tag_opt          : 3
equality_expression  : 204 205 206 207 208 209
error_control_expression : 173
eval_intrinsic       : 70
exit_intrinsic       : 71
exponentiation_expression : 170 171
expression           : 42 45 47 51 73 74 114 119 131 132 134 142 143 147 221 236 237 274 275 276 277 278 303 307 308 309 310 311 312 313 316 320 322 323 324 325 330 331 340 341 342 362 363 368 369 370 371 386 388 390 407 408
expression_list      : 406 408
expression_opt       : 76 78 113 133
expression_statement : 281
expressionopt        : 387
finally_clause       : 392 393
floating_literal     : 64
for_control          : 343 344 347 348 351 352 355 356
for_end_of_loop      : 343 345 347 349 351 353 355 357
for_expression_group : 359 360 361 363
for_initializer      : 343 344 345 346 351 352 353 354
for_statement        : 338
foreach_collection_name : 364 365 366 367
foreach_key          : 364 366
foreach_statement    : 339
foreach_value        : 364 365 366 367
function_call_expression : 58
function_definition  : 290 485
function_definition_header : 411 486
function_static_declaration : 297
function_static_initializer : 22
function_static_initializer_opt : 20
global_declaration   : 296
goto_statement       : 373
if_statement         : 305
include_expression   : 269
include_once_expression : 271
instanceof_expression : 183 184 185
instanceof_subj      : 182
integer_literal      : 63
interface_base_clause : 499 504
interface_base_clauseopt : 498
interface_declaration : 292
interface_member_declaration : 505 506
interface_member_declarations : 501 506
interface_member_declarationsopt : 498
intrinsic            : 33
isset_intrinsic      : 72
iteration_statement  : 283
jump_statement       : 284
keyed_list_expression_list : 230 231 237
list_expression_list : 228
list_intrinsic       : 227 238 372
list_or_variable     : 232 234 235 236 237
literal              : 31 403 404 405
logical_AND_expression_1 : 215 216 217
logical_AND_expression_2 : 263 264 265
logical_exc_OR_expression : 265 266 267
logical_inc_OR_expression_1 : 217 218 219
logical_inc_OR_expression_2 : 267 268
logical_not_expression : 186 187 188 189
member_access_expression : 61
member_call_expression : 56
member_name          : 115 144 148 149 158 159
method_declaration   : 460 508 515
method_modifier      : 489 490
method_modifiers     : 486 487 490 494 495
method_modifiersopt  : 485
multiplicative_expression : 187 188 189 190 191 192 193
name                 : 302 378 412 442 468 494 495 498 509 532 533 533 534 537 554 555
named_label_statement : 280
nameopt              : 534
namespace_aliasing_clause : 553
namespace_aliasing_clause_opt : 552 560 563
namespace_definition : 294
namespace_function_or_const : 544 546
namespace_function_or_constopt : 543 563
namespace_name       : 16 539 541 544 545 560 563
namespace_nameopt    : 540
namespace_use_clause : 550 551
namespace_use_clauses : 543 551
namespace_use_declaration : 295
namespace_use_group_clause_1 : 558 559
namespace_use_group_clause_2 : 561 562
namespace_use_group_clauses_1 : 544 559
namespace_use_group_clauses_2 : 545 562
new_variable         : 111 113 114 115 118
object_creation_expression : 35
parameter_declaration : 417 418
parameter_declaration_list : 88 418 496
parameter_declaration_list_opt : 83
parameter_declaration_listopt : 412 494
postfix_decrement_expression : 37
postfix_increment_expression : 36
prefix_decrement_expression : 39
prefix_increment_expression : 38
primary_expression   : 167 168
print_expression     : 261 262
property_declaration : 459 514
property_element     : 479 480
property_elements    : 469 480
property_initializer : 482
property_initializeropt : 481
property_modifier    : 469
qualified_name       : 62 110 116 135 136 162 397 434 453 454 455 503 504 522 523 532 552
relational_expression : 198 199 200 201 202 203 204 205 206 207
relative_scope       : 117 161
require_expression   : 272
require_once_expression : 273
return_statement     : 376
return_type          : 92
return_type_opt      : 83 412
scalar_type          : 433
scope_resolution_qualifier : 157 158 159 160
scoped_call_expression : 57
scoped_property_access_expression : 60
script               : 2 0
script_section       : 1 2
selection_statement  : 282
shell_command_expression : 41
shift_expression     : 195 196 197 198 199 200 201 202
simple_assignment_expression : 224
simple_parameter_declaration_list : 415 419
simple_variable      : 26 27 44 54 112 116 117 118 146 157
start_tag            : 3
statement            : 300 301 307 308 309 310 316 317 340 342 343 344 345 346 347 348 349 350 364 365 400
statement_list       : 9 298 301 311 312 313 320 321 330 332 341 351 352 353 354 355 356 357 358 366 367 401
statement_list_opt   : 3
static_modifier      : 472 473 492
static_modifieropt   : 471
static_opt           : 83
static_variable_declaration : 18 19
static_variable_name_list : 17 19
string_literal       : 49 53 65
subscript_expression : 55
switch_statement     : 306
text_opt             : 3 3
throw_statement      : 377
trait_alias_as_clause : 531
trait_declaration    : 293
trait_member_declaration : 512 513
trait_member_declarations : 510 513
trait_member_declarationsopt : 509
trait_name_list      : 521 523 532
trait_select_and_alias_clause : 528 529
trait_select_and_alias_clauses : 526 529
trait_select_and_alias_clausesopt : 525
trait_select_insteadof_clause : 530
trait_use_clause     : 463 519 520
trait_use_clauses    : 518 520
trait_use_specification : 521
try_statement        : 285
type_declaration     : 423 425
type_declarationopt  : 421 422
unary_expression     : 175 179 180 181
unary_op_expression  : 172
unary_operator       : 175
unkeyed_list_expression_list : 229 234 235
unset_statement      : 288
use_variable_name_list : 94 96
variable             : 28 46 81 82 150 151 152 153 226 239 240 241 241 242
variable_list        : 80 82 409 410
variable_list_opt    : 79
variable_name_list   : 25 27
variadic_declaration_list : 416
variadic_parameter   : 419 420
variadic_unpacking   : 141
visibility_modifier  : 471 491 534 535
visibility_modifier_opt : 465 472 533
while_statement      : 336
yield_expression     : 258 259 260 263
yield_from_expression : 256 259

Parsing method: LALR

state 0

    (0) S' -> . script
    (1) script -> . script_section
    (2) script -> . script script_section
    (3) script_section -> . text_opt start_tag statement_list_opt end_tag_opt text_opt
    (4) script_section -> . WHITESPACE
    (5) text_opt -> . STRING
    (6) text_opt -> .

    WHITESPACE      shift and go to state 4
    STRING          shift and go to state 5
    OPEN_TAG        reduce using rule 6 (text_opt -> .)
    OPEN_TAG_WITH_ECHO reduce using rule 6 (text_opt -> .)

    script                         shift and go to state 1
    script_section                 shift and go to state 2
    text_opt                       shift and go to state 3

state 1

    (0) S' -> script .
    (2) script -> script . script_section
    (3) script_section -> . text_opt start_tag statement_list_opt end_tag_opt text_opt
    (4) script_section -> . WHITESPACE
    (5) text_opt -> . STRING
    (6) text_opt -> .

    WHITESPACE      shift and go to state 4
    STRING          shift and go to state 5
    OPEN_TAG        reduce using rule 6 (text_opt -> .)
    OPEN_TAG_WITH_ECHO reduce using rule 6 (text_opt -> .)

    script_section                 shift and go to state 6
    text_opt                       shift and go to state 3

state 2

    (1) script -> script_section .

    WHITESPACE      reduce using rule 1 (script -> script_section .)
    STRING          reduce using rule 1 (script -> script_section .)
    $end            reduce using rule 1 (script -> script_section .)
    OPEN_TAG        reduce using rule 1 (script -> script_section .)
    OPEN_TAG_WITH_ECHO reduce using rule 1 (script -> script_section .)


state 3

    (3) script_section -> text_opt . start_tag statement_list_opt end_tag_opt text_opt
    (11) start_tag -> . OPEN_TAG
    (12) start_tag -> . OPEN_TAG_WITH_ECHO

    OPEN_TAG        shift and go to state 8
    OPEN_TAG_WITH_ECHO shift and go to state 9

    start_tag                      shift and go to state 7

state 4

    (4) script_section -> WHITESPACE .

    WHITESPACE      reduce using rule 4 (script_section -> WHITESPACE .)
    STRING          reduce using rule 4 (script_section -> WHITESPACE .)
    $end            reduce using rule 4 (script_section -> WHITESPACE .)
    OPEN_TAG        reduce using rule 4 (script_section -> WHITESPACE .)
    OPEN_TAG_WITH_ECHO reduce using rule 4 (script_section -> WHITESPACE .)


state 5

    (5) text_opt -> STRING .

    OPEN_TAG        reduce using rule 5 (text_opt -> STRING .)
    OPEN_TAG_WITH_ECHO reduce using rule 5 (text_opt -> STRING .)
    WHITESPACE      reduce using rule 5 (text_opt -> STRING .)
    STRING          reduce using rule 5 (text_opt -> STRING .)
    $end            reduce using rule 5 (text_opt -> STRING .)


state 6

    (2) script -> script script_section .

    WHITESPACE      reduce using rule 2 (script -> script script_section .)
    STRING          reduce using rule 2 (script -> script script_section .)
    $end            reduce using rule 2 (script -> script script_section .)
    OPEN_TAG        reduce using rule 2 (script -> script script_section .)
    OPEN_TAG_WITH_ECHO reduce using rule 2 (script -> script script_section .)


state 7

    (3) script_section -> text_opt start_tag . statement_list_opt end_tag_opt text_opt
    (9) statement_list_opt -> . statement_list
    (10) statement_list_opt -> .
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for STRING resolved as shift
    CLOSE_TAG       reduce using rule 10 (statement_list_opt -> .)
    WHITESPACE      reduce using rule 10 (statement_list_opt -> .)
    $end            reduce using rule 10 (statement_list_opt -> .)
    OPEN_TAG        reduce using rule 10 (statement_list_opt -> .)
    OPEN_TAG_WITH_ECHO reduce using rule 10 (statement_list_opt -> .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! STRING          [ reduce using rule 10 (statement_list_opt -> .) ]

    statement_list_opt             shift and go to state 10
    statement_list                 shift and go to state 11
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 8

    (11) start_tag -> OPEN_TAG .

    LEFT_CBRAC      reduce using rule 11 (start_tag -> OPEN_TAG .)
    SEMICOLON       reduce using rule 11 (start_tag -> OPEN_TAG .)
    TRY             reduce using rule 11 (start_tag -> OPEN_TAG .)
    DECLARE         reduce using rule 11 (start_tag -> OPEN_TAG .)
    ECHO            reduce using rule 11 (start_tag -> OPEN_TAG .)
    UNSET           reduce using rule 11 (start_tag -> OPEN_TAG .)
    CONST           reduce using rule 11 (start_tag -> OPEN_TAG .)
    INTERFACE       reduce using rule 11 (start_tag -> OPEN_TAG .)
    TRAIT           reduce using rule 11 (start_tag -> OPEN_TAG .)
    NAMESPACE       reduce using rule 11 (start_tag -> OPEN_TAG .)
    USE             reduce using rule 11 (start_tag -> OPEN_TAG .)
    GLOBAL          reduce using rule 11 (start_tag -> OPEN_TAG .)
    STATIC          reduce using rule 11 (start_tag -> OPEN_TAG .)
    STRING          reduce using rule 11 (start_tag -> OPEN_TAG .)
    IF              reduce using rule 11 (start_tag -> OPEN_TAG .)
    SWITCH          reduce using rule 11 (start_tag -> OPEN_TAG .)
    WHILE           reduce using rule 11 (start_tag -> OPEN_TAG .)
    DO              reduce using rule 11 (start_tag -> OPEN_TAG .)
    FOR             reduce using rule 11 (start_tag -> OPEN_TAG .)
    FOREACH         reduce using rule 11 (start_tag -> OPEN_TAG .)
    GOTO            reduce using rule 11 (start_tag -> OPEN_TAG .)
    CONTINUE        reduce using rule 11 (start_tag -> OPEN_TAG .)
    BREAK           reduce using rule 11 (start_tag -> OPEN_TAG .)
    RETURN          reduce using rule 11 (start_tag -> OPEN_TAG .)
    THROW           reduce using rule 11 (start_tag -> OPEN_TAG .)
    FUNCTION        reduce using rule 11 (start_tag -> OPEN_TAG .)
    INCLUDE         reduce using rule 11 (start_tag -> OPEN_TAG .)
    INCLUDE_ONCE    reduce using rule 11 (start_tag -> OPEN_TAG .)
    REQUIRE         reduce using rule 11 (start_tag -> OPEN_TAG .)
    REQUIRE_ONCE    reduce using rule 11 (start_tag -> OPEN_TAG .)
    ABSTRACT        reduce using rule 11 (start_tag -> OPEN_TAG .)
    FINAL           reduce using rule 11 (start_tag -> OPEN_TAG .)
    PRINT           reduce using rule 11 (start_tag -> OPEN_TAG .)
    YIELD           reduce using rule 11 (start_tag -> OPEN_TAG .)
    YIELD_FROM      reduce using rule 11 (start_tag -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 11 (start_tag -> OPEN_TAG .)
    CLASS           reduce using rule 11 (start_tag -> OPEN_TAG .)
    WHITESPACE      reduce using rule 11 (start_tag -> OPEN_TAG .)
    $end            reduce using rule 11 (start_tag -> OPEN_TAG .)
    OPEN_TAG        reduce using rule 11 (start_tag -> OPEN_TAG .)
    OPEN_TAG_WITH_ECHO reduce using rule 11 (start_tag -> OPEN_TAG .)


state 9

    (12) start_tag -> OPEN_TAG_WITH_ECHO .

    LEFT_CBRAC      reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    SEMICOLON       reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    TRY             reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    DECLARE         reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    ECHO            reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    UNSET           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    CONST           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    INTERFACE       reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    TRAIT           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    NAMESPACE       reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    USE             reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    GLOBAL          reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    STATIC          reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    STRING          reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    IF              reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    SWITCH          reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    WHILE           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    DO              reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    FOR             reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    FOREACH         reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    GOTO            reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    CONTINUE        reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    BREAK           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    RETURN          reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    THROW           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    FUNCTION        reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    INCLUDE         reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    INCLUDE_ONCE    reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    REQUIRE         reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    REQUIRE_ONCE    reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    ABSTRACT        reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    FINAL           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    PRINT           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    YIELD           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    YIELD_FROM      reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    CLOSE_TAG       reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    CLASS           reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    WHITESPACE      reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    $end            reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    OPEN_TAG        reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)
    OPEN_TAG_WITH_ECHO reduce using rule 12 (start_tag -> OPEN_TAG_WITH_ECHO .)


state 10

    (3) script_section -> text_opt start_tag statement_list_opt . end_tag_opt text_opt
    (7) end_tag_opt -> . CLOSE_TAG
    (8) end_tag_opt -> .

    CLOSE_TAG       shift and go to state 94
    STRING          reduce using rule 8 (end_tag_opt -> .)
    WHITESPACE      reduce using rule 8 (end_tag_opt -> .)
    $end            reduce using rule 8 (end_tag_opt -> .)
    OPEN_TAG        reduce using rule 8 (end_tag_opt -> .)
    OPEN_TAG_WITH_ECHO reduce using rule 8 (end_tag_opt -> .)

    end_tag_opt                    shift and go to state 93

state 11

    (9) statement_list_opt -> statement_list .
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for STRING resolved as shift
    CLOSE_TAG       reduce using rule 9 (statement_list_opt -> statement_list .)
    WHITESPACE      reduce using rule 9 (statement_list_opt -> statement_list .)
    $end            reduce using rule 9 (statement_list_opt -> statement_list .)
    OPEN_TAG        reduce using rule 9 (statement_list_opt -> statement_list .)
    OPEN_TAG_WITH_ECHO reduce using rule 9 (statement_list_opt -> statement_list .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! STRING          [ reduce using rule 9 (statement_list_opt -> statement_list .) ]

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 12

    (300) statement_list -> statement .

    LEFT_CBRAC      reduce using rule 300 (statement_list -> statement .)
    SEMICOLON       reduce using rule 300 (statement_list -> statement .)
    TRY             reduce using rule 300 (statement_list -> statement .)
    DECLARE         reduce using rule 300 (statement_list -> statement .)
    ECHO            reduce using rule 300 (statement_list -> statement .)
    UNSET           reduce using rule 300 (statement_list -> statement .)
    CONST           reduce using rule 300 (statement_list -> statement .)
    INTERFACE       reduce using rule 300 (statement_list -> statement .)
    TRAIT           reduce using rule 300 (statement_list -> statement .)
    NAMESPACE       reduce using rule 300 (statement_list -> statement .)
    USE             reduce using rule 300 (statement_list -> statement .)
    GLOBAL          reduce using rule 300 (statement_list -> statement .)
    STATIC          reduce using rule 300 (statement_list -> statement .)
    STRING          reduce using rule 300 (statement_list -> statement .)
    IF              reduce using rule 300 (statement_list -> statement .)
    SWITCH          reduce using rule 300 (statement_list -> statement .)
    WHILE           reduce using rule 300 (statement_list -> statement .)
    DO              reduce using rule 300 (statement_list -> statement .)
    FOR             reduce using rule 300 (statement_list -> statement .)
    FOREACH         reduce using rule 300 (statement_list -> statement .)
    GOTO            reduce using rule 300 (statement_list -> statement .)
    CONTINUE        reduce using rule 300 (statement_list -> statement .)
    BREAK           reduce using rule 300 (statement_list -> statement .)
    RETURN          reduce using rule 300 (statement_list -> statement .)
    THROW           reduce using rule 300 (statement_list -> statement .)
    FUNCTION        reduce using rule 300 (statement_list -> statement .)
    INCLUDE         reduce using rule 300 (statement_list -> statement .)
    INCLUDE_ONCE    reduce using rule 300 (statement_list -> statement .)
    REQUIRE         reduce using rule 300 (statement_list -> statement .)
    REQUIRE_ONCE    reduce using rule 300 (statement_list -> statement .)
    ABSTRACT        reduce using rule 300 (statement_list -> statement .)
    FINAL           reduce using rule 300 (statement_list -> statement .)
    PRINT           reduce using rule 300 (statement_list -> statement .)
    YIELD           reduce using rule 300 (statement_list -> statement .)
    YIELD_FROM      reduce using rule 300 (statement_list -> statement .)
    CLASS           reduce using rule 300 (statement_list -> statement .)
    CLOSE_TAG       reduce using rule 300 (statement_list -> statement .)
    WHITESPACE      reduce using rule 300 (statement_list -> statement .)
    $end            reduce using rule 300 (statement_list -> statement .)
    OPEN_TAG        reduce using rule 300 (statement_list -> statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 300 (statement_list -> statement .)
    RIGHT_CBRAC     reduce using rule 300 (statement_list -> statement .)
    ENDDECLARE      reduce using rule 300 (statement_list -> statement .)
    ELSE            reduce using rule 300 (statement_list -> statement .)
    ELSEIF          reduce using rule 300 (statement_list -> statement .)
    ENDWHILE        reduce using rule 300 (statement_list -> statement .)
    ENDFOR          reduce using rule 300 (statement_list -> statement .)
    CASE            reduce using rule 300 (statement_list -> statement .)
    DEFAULT         reduce using rule 300 (statement_list -> statement .)
    ENDSWITCH       reduce using rule 300 (statement_list -> statement .)
    ENDFOREACH      reduce using rule 300 (statement_list -> statement .)
    ENDIF           reduce using rule 300 (statement_list -> statement .)


state 13

    (279) statement -> compound_statement .

    LEFT_CBRAC      reduce using rule 279 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 279 (statement -> compound_statement .)
    TRY             reduce using rule 279 (statement -> compound_statement .)
    DECLARE         reduce using rule 279 (statement -> compound_statement .)
    ECHO            reduce using rule 279 (statement -> compound_statement .)
    UNSET           reduce using rule 279 (statement -> compound_statement .)
    CONST           reduce using rule 279 (statement -> compound_statement .)
    INTERFACE       reduce using rule 279 (statement -> compound_statement .)
    TRAIT           reduce using rule 279 (statement -> compound_statement .)
    NAMESPACE       reduce using rule 279 (statement -> compound_statement .)
    USE             reduce using rule 279 (statement -> compound_statement .)
    GLOBAL          reduce using rule 279 (statement -> compound_statement .)
    STATIC          reduce using rule 279 (statement -> compound_statement .)
    STRING          reduce using rule 279 (statement -> compound_statement .)
    IF              reduce using rule 279 (statement -> compound_statement .)
    SWITCH          reduce using rule 279 (statement -> compound_statement .)
    WHILE           reduce using rule 279 (statement -> compound_statement .)
    DO              reduce using rule 279 (statement -> compound_statement .)
    FOR             reduce using rule 279 (statement -> compound_statement .)
    FOREACH         reduce using rule 279 (statement -> compound_statement .)
    GOTO            reduce using rule 279 (statement -> compound_statement .)
    CONTINUE        reduce using rule 279 (statement -> compound_statement .)
    BREAK           reduce using rule 279 (statement -> compound_statement .)
    RETURN          reduce using rule 279 (statement -> compound_statement .)
    THROW           reduce using rule 279 (statement -> compound_statement .)
    FUNCTION        reduce using rule 279 (statement -> compound_statement .)
    INCLUDE         reduce using rule 279 (statement -> compound_statement .)
    INCLUDE_ONCE    reduce using rule 279 (statement -> compound_statement .)
    REQUIRE         reduce using rule 279 (statement -> compound_statement .)
    REQUIRE_ONCE    reduce using rule 279 (statement -> compound_statement .)
    ABSTRACT        reduce using rule 279 (statement -> compound_statement .)
    FINAL           reduce using rule 279 (statement -> compound_statement .)
    PRINT           reduce using rule 279 (statement -> compound_statement .)
    YIELD           reduce using rule 279 (statement -> compound_statement .)
    YIELD_FROM      reduce using rule 279 (statement -> compound_statement .)
    CLASS           reduce using rule 279 (statement -> compound_statement .)
    CLOSE_TAG       reduce using rule 279 (statement -> compound_statement .)
    WHITESPACE      reduce using rule 279 (statement -> compound_statement .)
    $end            reduce using rule 279 (statement -> compound_statement .)
    OPEN_TAG        reduce using rule 279 (statement -> compound_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 279 (statement -> compound_statement .)
    RIGHT_CBRAC     reduce using rule 279 (statement -> compound_statement .)
    ELSE            reduce using rule 279 (statement -> compound_statement .)
    ELSEIF          reduce using rule 279 (statement -> compound_statement .)
    ENDDECLARE      reduce using rule 279 (statement -> compound_statement .)
    ENDWHILE        reduce using rule 279 (statement -> compound_statement .)
    ENDFOR          reduce using rule 279 (statement -> compound_statement .)
    CASE            reduce using rule 279 (statement -> compound_statement .)
    DEFAULT         reduce using rule 279 (statement -> compound_statement .)
    ENDSWITCH       reduce using rule 279 (statement -> compound_statement .)
    ENDFOREACH      reduce using rule 279 (statement -> compound_statement .)
    ENDIF           reduce using rule 279 (statement -> compound_statement .)


state 14

    (280) statement -> named_label_statement .

    LEFT_CBRAC      reduce using rule 280 (statement -> named_label_statement .)
    SEMICOLON       reduce using rule 280 (statement -> named_label_statement .)
    TRY             reduce using rule 280 (statement -> named_label_statement .)
    DECLARE         reduce using rule 280 (statement -> named_label_statement .)
    ECHO            reduce using rule 280 (statement -> named_label_statement .)
    UNSET           reduce using rule 280 (statement -> named_label_statement .)
    CONST           reduce using rule 280 (statement -> named_label_statement .)
    INTERFACE       reduce using rule 280 (statement -> named_label_statement .)
    TRAIT           reduce using rule 280 (statement -> named_label_statement .)
    NAMESPACE       reduce using rule 280 (statement -> named_label_statement .)
    USE             reduce using rule 280 (statement -> named_label_statement .)
    GLOBAL          reduce using rule 280 (statement -> named_label_statement .)
    STATIC          reduce using rule 280 (statement -> named_label_statement .)
    STRING          reduce using rule 280 (statement -> named_label_statement .)
    IF              reduce using rule 280 (statement -> named_label_statement .)
    SWITCH          reduce using rule 280 (statement -> named_label_statement .)
    WHILE           reduce using rule 280 (statement -> named_label_statement .)
    DO              reduce using rule 280 (statement -> named_label_statement .)
    FOR             reduce using rule 280 (statement -> named_label_statement .)
    FOREACH         reduce using rule 280 (statement -> named_label_statement .)
    GOTO            reduce using rule 280 (statement -> named_label_statement .)
    CONTINUE        reduce using rule 280 (statement -> named_label_statement .)
    BREAK           reduce using rule 280 (statement -> named_label_statement .)
    RETURN          reduce using rule 280 (statement -> named_label_statement .)
    THROW           reduce using rule 280 (statement -> named_label_statement .)
    FUNCTION        reduce using rule 280 (statement -> named_label_statement .)
    INCLUDE         reduce using rule 280 (statement -> named_label_statement .)
    INCLUDE_ONCE    reduce using rule 280 (statement -> named_label_statement .)
    REQUIRE         reduce using rule 280 (statement -> named_label_statement .)
    REQUIRE_ONCE    reduce using rule 280 (statement -> named_label_statement .)
    ABSTRACT        reduce using rule 280 (statement -> named_label_statement .)
    FINAL           reduce using rule 280 (statement -> named_label_statement .)
    PRINT           reduce using rule 280 (statement -> named_label_statement .)
    YIELD           reduce using rule 280 (statement -> named_label_statement .)
    YIELD_FROM      reduce using rule 280 (statement -> named_label_statement .)
    CLASS           reduce using rule 280 (statement -> named_label_statement .)
    CLOSE_TAG       reduce using rule 280 (statement -> named_label_statement .)
    WHITESPACE      reduce using rule 280 (statement -> named_label_statement .)
    $end            reduce using rule 280 (statement -> named_label_statement .)
    OPEN_TAG        reduce using rule 280 (statement -> named_label_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 280 (statement -> named_label_statement .)
    RIGHT_CBRAC     reduce using rule 280 (statement -> named_label_statement .)
    ELSE            reduce using rule 280 (statement -> named_label_statement .)
    ELSEIF          reduce using rule 280 (statement -> named_label_statement .)
    ENDDECLARE      reduce using rule 280 (statement -> named_label_statement .)
    ENDWHILE        reduce using rule 280 (statement -> named_label_statement .)
    ENDFOR          reduce using rule 280 (statement -> named_label_statement .)
    CASE            reduce using rule 280 (statement -> named_label_statement .)
    DEFAULT         reduce using rule 280 (statement -> named_label_statement .)
    ENDSWITCH       reduce using rule 280 (statement -> named_label_statement .)
    ENDFOREACH      reduce using rule 280 (statement -> named_label_statement .)
    ENDIF           reduce using rule 280 (statement -> named_label_statement .)


state 15

    (281) statement -> expression_statement .

    LEFT_CBRAC      reduce using rule 281 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 281 (statement -> expression_statement .)
    TRY             reduce using rule 281 (statement -> expression_statement .)
    DECLARE         reduce using rule 281 (statement -> expression_statement .)
    ECHO            reduce using rule 281 (statement -> expression_statement .)
    UNSET           reduce using rule 281 (statement -> expression_statement .)
    CONST           reduce using rule 281 (statement -> expression_statement .)
    INTERFACE       reduce using rule 281 (statement -> expression_statement .)
    TRAIT           reduce using rule 281 (statement -> expression_statement .)
    NAMESPACE       reduce using rule 281 (statement -> expression_statement .)
    USE             reduce using rule 281 (statement -> expression_statement .)
    GLOBAL          reduce using rule 281 (statement -> expression_statement .)
    STATIC          reduce using rule 281 (statement -> expression_statement .)
    STRING          reduce using rule 281 (statement -> expression_statement .)
    IF              reduce using rule 281 (statement -> expression_statement .)
    SWITCH          reduce using rule 281 (statement -> expression_statement .)
    WHILE           reduce using rule 281 (statement -> expression_statement .)
    DO              reduce using rule 281 (statement -> expression_statement .)
    FOR             reduce using rule 281 (statement -> expression_statement .)
    FOREACH         reduce using rule 281 (statement -> expression_statement .)
    GOTO            reduce using rule 281 (statement -> expression_statement .)
    CONTINUE        reduce using rule 281 (statement -> expression_statement .)
    BREAK           reduce using rule 281 (statement -> expression_statement .)
    RETURN          reduce using rule 281 (statement -> expression_statement .)
    THROW           reduce using rule 281 (statement -> expression_statement .)
    FUNCTION        reduce using rule 281 (statement -> expression_statement .)
    INCLUDE         reduce using rule 281 (statement -> expression_statement .)
    INCLUDE_ONCE    reduce using rule 281 (statement -> expression_statement .)
    REQUIRE         reduce using rule 281 (statement -> expression_statement .)
    REQUIRE_ONCE    reduce using rule 281 (statement -> expression_statement .)
    ABSTRACT        reduce using rule 281 (statement -> expression_statement .)
    FINAL           reduce using rule 281 (statement -> expression_statement .)
    PRINT           reduce using rule 281 (statement -> expression_statement .)
    YIELD           reduce using rule 281 (statement -> expression_statement .)
    YIELD_FROM      reduce using rule 281 (statement -> expression_statement .)
    CLASS           reduce using rule 281 (statement -> expression_statement .)
    CLOSE_TAG       reduce using rule 281 (statement -> expression_statement .)
    WHITESPACE      reduce using rule 281 (statement -> expression_statement .)
    $end            reduce using rule 281 (statement -> expression_statement .)
    OPEN_TAG        reduce using rule 281 (statement -> expression_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 281 (statement -> expression_statement .)
    RIGHT_CBRAC     reduce using rule 281 (statement -> expression_statement .)
    ELSE            reduce using rule 281 (statement -> expression_statement .)
    ELSEIF          reduce using rule 281 (statement -> expression_statement .)
    ENDDECLARE      reduce using rule 281 (statement -> expression_statement .)
    ENDWHILE        reduce using rule 281 (statement -> expression_statement .)
    ENDFOR          reduce using rule 281 (statement -> expression_statement .)
    CASE            reduce using rule 281 (statement -> expression_statement .)
    DEFAULT         reduce using rule 281 (statement -> expression_statement .)
    ENDSWITCH       reduce using rule 281 (statement -> expression_statement .)
    ENDFOREACH      reduce using rule 281 (statement -> expression_statement .)
    ENDIF           reduce using rule 281 (statement -> expression_statement .)


state 16

    (282) statement -> selection_statement .

    LEFT_CBRAC      reduce using rule 282 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 282 (statement -> selection_statement .)
    TRY             reduce using rule 282 (statement -> selection_statement .)
    DECLARE         reduce using rule 282 (statement -> selection_statement .)
    ECHO            reduce using rule 282 (statement -> selection_statement .)
    UNSET           reduce using rule 282 (statement -> selection_statement .)
    CONST           reduce using rule 282 (statement -> selection_statement .)
    INTERFACE       reduce using rule 282 (statement -> selection_statement .)
    TRAIT           reduce using rule 282 (statement -> selection_statement .)
    NAMESPACE       reduce using rule 282 (statement -> selection_statement .)
    USE             reduce using rule 282 (statement -> selection_statement .)
    GLOBAL          reduce using rule 282 (statement -> selection_statement .)
    STATIC          reduce using rule 282 (statement -> selection_statement .)
    STRING          reduce using rule 282 (statement -> selection_statement .)
    IF              reduce using rule 282 (statement -> selection_statement .)
    SWITCH          reduce using rule 282 (statement -> selection_statement .)
    WHILE           reduce using rule 282 (statement -> selection_statement .)
    DO              reduce using rule 282 (statement -> selection_statement .)
    FOR             reduce using rule 282 (statement -> selection_statement .)
    FOREACH         reduce using rule 282 (statement -> selection_statement .)
    GOTO            reduce using rule 282 (statement -> selection_statement .)
    CONTINUE        reduce using rule 282 (statement -> selection_statement .)
    BREAK           reduce using rule 282 (statement -> selection_statement .)
    RETURN          reduce using rule 282 (statement -> selection_statement .)
    THROW           reduce using rule 282 (statement -> selection_statement .)
    FUNCTION        reduce using rule 282 (statement -> selection_statement .)
    INCLUDE         reduce using rule 282 (statement -> selection_statement .)
    INCLUDE_ONCE    reduce using rule 282 (statement -> selection_statement .)
    REQUIRE         reduce using rule 282 (statement -> selection_statement .)
    REQUIRE_ONCE    reduce using rule 282 (statement -> selection_statement .)
    ABSTRACT        reduce using rule 282 (statement -> selection_statement .)
    FINAL           reduce using rule 282 (statement -> selection_statement .)
    PRINT           reduce using rule 282 (statement -> selection_statement .)
    YIELD           reduce using rule 282 (statement -> selection_statement .)
    YIELD_FROM      reduce using rule 282 (statement -> selection_statement .)
    CLASS           reduce using rule 282 (statement -> selection_statement .)
    CLOSE_TAG       reduce using rule 282 (statement -> selection_statement .)
    WHITESPACE      reduce using rule 282 (statement -> selection_statement .)
    $end            reduce using rule 282 (statement -> selection_statement .)
    OPEN_TAG        reduce using rule 282 (statement -> selection_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 282 (statement -> selection_statement .)
    RIGHT_CBRAC     reduce using rule 282 (statement -> selection_statement .)
    ELSE            reduce using rule 282 (statement -> selection_statement .)
    ELSEIF          reduce using rule 282 (statement -> selection_statement .)
    ENDDECLARE      reduce using rule 282 (statement -> selection_statement .)
    ENDWHILE        reduce using rule 282 (statement -> selection_statement .)
    ENDFOR          reduce using rule 282 (statement -> selection_statement .)
    CASE            reduce using rule 282 (statement -> selection_statement .)
    DEFAULT         reduce using rule 282 (statement -> selection_statement .)
    ENDSWITCH       reduce using rule 282 (statement -> selection_statement .)
    ENDFOREACH      reduce using rule 282 (statement -> selection_statement .)
    ENDIF           reduce using rule 282 (statement -> selection_statement .)


state 17

    (283) statement -> iteration_statement .

    LEFT_CBRAC      reduce using rule 283 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 283 (statement -> iteration_statement .)
    TRY             reduce using rule 283 (statement -> iteration_statement .)
    DECLARE         reduce using rule 283 (statement -> iteration_statement .)
    ECHO            reduce using rule 283 (statement -> iteration_statement .)
    UNSET           reduce using rule 283 (statement -> iteration_statement .)
    CONST           reduce using rule 283 (statement -> iteration_statement .)
    INTERFACE       reduce using rule 283 (statement -> iteration_statement .)
    TRAIT           reduce using rule 283 (statement -> iteration_statement .)
    NAMESPACE       reduce using rule 283 (statement -> iteration_statement .)
    USE             reduce using rule 283 (statement -> iteration_statement .)
    GLOBAL          reduce using rule 283 (statement -> iteration_statement .)
    STATIC          reduce using rule 283 (statement -> iteration_statement .)
    STRING          reduce using rule 283 (statement -> iteration_statement .)
    IF              reduce using rule 283 (statement -> iteration_statement .)
    SWITCH          reduce using rule 283 (statement -> iteration_statement .)
    WHILE           reduce using rule 283 (statement -> iteration_statement .)
    DO              reduce using rule 283 (statement -> iteration_statement .)
    FOR             reduce using rule 283 (statement -> iteration_statement .)
    FOREACH         reduce using rule 283 (statement -> iteration_statement .)
    GOTO            reduce using rule 283 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 283 (statement -> iteration_statement .)
    BREAK           reduce using rule 283 (statement -> iteration_statement .)
    RETURN          reduce using rule 283 (statement -> iteration_statement .)
    THROW           reduce using rule 283 (statement -> iteration_statement .)
    FUNCTION        reduce using rule 283 (statement -> iteration_statement .)
    INCLUDE         reduce using rule 283 (statement -> iteration_statement .)
    INCLUDE_ONCE    reduce using rule 283 (statement -> iteration_statement .)
    REQUIRE         reduce using rule 283 (statement -> iteration_statement .)
    REQUIRE_ONCE    reduce using rule 283 (statement -> iteration_statement .)
    ABSTRACT        reduce using rule 283 (statement -> iteration_statement .)
    FINAL           reduce using rule 283 (statement -> iteration_statement .)
    PRINT           reduce using rule 283 (statement -> iteration_statement .)
    YIELD           reduce using rule 283 (statement -> iteration_statement .)
    YIELD_FROM      reduce using rule 283 (statement -> iteration_statement .)
    CLASS           reduce using rule 283 (statement -> iteration_statement .)
    CLOSE_TAG       reduce using rule 283 (statement -> iteration_statement .)
    WHITESPACE      reduce using rule 283 (statement -> iteration_statement .)
    $end            reduce using rule 283 (statement -> iteration_statement .)
    OPEN_TAG        reduce using rule 283 (statement -> iteration_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 283 (statement -> iteration_statement .)
    RIGHT_CBRAC     reduce using rule 283 (statement -> iteration_statement .)
    ELSE            reduce using rule 283 (statement -> iteration_statement .)
    ELSEIF          reduce using rule 283 (statement -> iteration_statement .)
    ENDDECLARE      reduce using rule 283 (statement -> iteration_statement .)
    ENDWHILE        reduce using rule 283 (statement -> iteration_statement .)
    ENDFOR          reduce using rule 283 (statement -> iteration_statement .)
    CASE            reduce using rule 283 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 283 (statement -> iteration_statement .)
    ENDSWITCH       reduce using rule 283 (statement -> iteration_statement .)
    ENDFOREACH      reduce using rule 283 (statement -> iteration_statement .)
    ENDIF           reduce using rule 283 (statement -> iteration_statement .)


state 18

    (284) statement -> jump_statement .

    LEFT_CBRAC      reduce using rule 284 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 284 (statement -> jump_statement .)
    TRY             reduce using rule 284 (statement -> jump_statement .)
    DECLARE         reduce using rule 284 (statement -> jump_statement .)
    ECHO            reduce using rule 284 (statement -> jump_statement .)
    UNSET           reduce using rule 284 (statement -> jump_statement .)
    CONST           reduce using rule 284 (statement -> jump_statement .)
    INTERFACE       reduce using rule 284 (statement -> jump_statement .)
    TRAIT           reduce using rule 284 (statement -> jump_statement .)
    NAMESPACE       reduce using rule 284 (statement -> jump_statement .)
    USE             reduce using rule 284 (statement -> jump_statement .)
    GLOBAL          reduce using rule 284 (statement -> jump_statement .)
    STATIC          reduce using rule 284 (statement -> jump_statement .)
    STRING          reduce using rule 284 (statement -> jump_statement .)
    IF              reduce using rule 284 (statement -> jump_statement .)
    SWITCH          reduce using rule 284 (statement -> jump_statement .)
    WHILE           reduce using rule 284 (statement -> jump_statement .)
    DO              reduce using rule 284 (statement -> jump_statement .)
    FOR             reduce using rule 284 (statement -> jump_statement .)
    FOREACH         reduce using rule 284 (statement -> jump_statement .)
    GOTO            reduce using rule 284 (statement -> jump_statement .)
    CONTINUE        reduce using rule 284 (statement -> jump_statement .)
    BREAK           reduce using rule 284 (statement -> jump_statement .)
    RETURN          reduce using rule 284 (statement -> jump_statement .)
    THROW           reduce using rule 284 (statement -> jump_statement .)
    FUNCTION        reduce using rule 284 (statement -> jump_statement .)
    INCLUDE         reduce using rule 284 (statement -> jump_statement .)
    INCLUDE_ONCE    reduce using rule 284 (statement -> jump_statement .)
    REQUIRE         reduce using rule 284 (statement -> jump_statement .)
    REQUIRE_ONCE    reduce using rule 284 (statement -> jump_statement .)
    ABSTRACT        reduce using rule 284 (statement -> jump_statement .)
    FINAL           reduce using rule 284 (statement -> jump_statement .)
    PRINT           reduce using rule 284 (statement -> jump_statement .)
    YIELD           reduce using rule 284 (statement -> jump_statement .)
    YIELD_FROM      reduce using rule 284 (statement -> jump_statement .)
    CLASS           reduce using rule 284 (statement -> jump_statement .)
    CLOSE_TAG       reduce using rule 284 (statement -> jump_statement .)
    WHITESPACE      reduce using rule 284 (statement -> jump_statement .)
    $end            reduce using rule 284 (statement -> jump_statement .)
    OPEN_TAG        reduce using rule 284 (statement -> jump_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 284 (statement -> jump_statement .)
    RIGHT_CBRAC     reduce using rule 284 (statement -> jump_statement .)
    ELSE            reduce using rule 284 (statement -> jump_statement .)
    ELSEIF          reduce using rule 284 (statement -> jump_statement .)
    ENDDECLARE      reduce using rule 284 (statement -> jump_statement .)
    ENDWHILE        reduce using rule 284 (statement -> jump_statement .)
    ENDFOR          reduce using rule 284 (statement -> jump_statement .)
    CASE            reduce using rule 284 (statement -> jump_statement .)
    DEFAULT         reduce using rule 284 (statement -> jump_statement .)
    ENDSWITCH       reduce using rule 284 (statement -> jump_statement .)
    ENDFOREACH      reduce using rule 284 (statement -> jump_statement .)
    ENDIF           reduce using rule 284 (statement -> jump_statement .)


state 19

    (285) statement -> try_statement .

    LEFT_CBRAC      reduce using rule 285 (statement -> try_statement .)
    SEMICOLON       reduce using rule 285 (statement -> try_statement .)
    TRY             reduce using rule 285 (statement -> try_statement .)
    DECLARE         reduce using rule 285 (statement -> try_statement .)
    ECHO            reduce using rule 285 (statement -> try_statement .)
    UNSET           reduce using rule 285 (statement -> try_statement .)
    CONST           reduce using rule 285 (statement -> try_statement .)
    INTERFACE       reduce using rule 285 (statement -> try_statement .)
    TRAIT           reduce using rule 285 (statement -> try_statement .)
    NAMESPACE       reduce using rule 285 (statement -> try_statement .)
    USE             reduce using rule 285 (statement -> try_statement .)
    GLOBAL          reduce using rule 285 (statement -> try_statement .)
    STATIC          reduce using rule 285 (statement -> try_statement .)
    STRING          reduce using rule 285 (statement -> try_statement .)
    IF              reduce using rule 285 (statement -> try_statement .)
    SWITCH          reduce using rule 285 (statement -> try_statement .)
    WHILE           reduce using rule 285 (statement -> try_statement .)
    DO              reduce using rule 285 (statement -> try_statement .)
    FOR             reduce using rule 285 (statement -> try_statement .)
    FOREACH         reduce using rule 285 (statement -> try_statement .)
    GOTO            reduce using rule 285 (statement -> try_statement .)
    CONTINUE        reduce using rule 285 (statement -> try_statement .)
    BREAK           reduce using rule 285 (statement -> try_statement .)
    RETURN          reduce using rule 285 (statement -> try_statement .)
    THROW           reduce using rule 285 (statement -> try_statement .)
    FUNCTION        reduce using rule 285 (statement -> try_statement .)
    INCLUDE         reduce using rule 285 (statement -> try_statement .)
    INCLUDE_ONCE    reduce using rule 285 (statement -> try_statement .)
    REQUIRE         reduce using rule 285 (statement -> try_statement .)
    REQUIRE_ONCE    reduce using rule 285 (statement -> try_statement .)
    ABSTRACT        reduce using rule 285 (statement -> try_statement .)
    FINAL           reduce using rule 285 (statement -> try_statement .)
    PRINT           reduce using rule 285 (statement -> try_statement .)
    YIELD           reduce using rule 285 (statement -> try_statement .)
    YIELD_FROM      reduce using rule 285 (statement -> try_statement .)
    CLASS           reduce using rule 285 (statement -> try_statement .)
    CLOSE_TAG       reduce using rule 285 (statement -> try_statement .)
    WHITESPACE      reduce using rule 285 (statement -> try_statement .)
    $end            reduce using rule 285 (statement -> try_statement .)
    OPEN_TAG        reduce using rule 285 (statement -> try_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 285 (statement -> try_statement .)
    RIGHT_CBRAC     reduce using rule 285 (statement -> try_statement .)
    ELSE            reduce using rule 285 (statement -> try_statement .)
    ELSEIF          reduce using rule 285 (statement -> try_statement .)
    ENDDECLARE      reduce using rule 285 (statement -> try_statement .)
    ENDWHILE        reduce using rule 285 (statement -> try_statement .)
    ENDFOR          reduce using rule 285 (statement -> try_statement .)
    CASE            reduce using rule 285 (statement -> try_statement .)
    DEFAULT         reduce using rule 285 (statement -> try_statement .)
    ENDSWITCH       reduce using rule 285 (statement -> try_statement .)
    ENDFOREACH      reduce using rule 285 (statement -> try_statement .)
    ENDIF           reduce using rule 285 (statement -> try_statement .)


state 20

    (286) statement -> declare_statement .

    LEFT_CBRAC      reduce using rule 286 (statement -> declare_statement .)
    SEMICOLON       reduce using rule 286 (statement -> declare_statement .)
    TRY             reduce using rule 286 (statement -> declare_statement .)
    DECLARE         reduce using rule 286 (statement -> declare_statement .)
    ECHO            reduce using rule 286 (statement -> declare_statement .)
    UNSET           reduce using rule 286 (statement -> declare_statement .)
    CONST           reduce using rule 286 (statement -> declare_statement .)
    INTERFACE       reduce using rule 286 (statement -> declare_statement .)
    TRAIT           reduce using rule 286 (statement -> declare_statement .)
    NAMESPACE       reduce using rule 286 (statement -> declare_statement .)
    USE             reduce using rule 286 (statement -> declare_statement .)
    GLOBAL          reduce using rule 286 (statement -> declare_statement .)
    STATIC          reduce using rule 286 (statement -> declare_statement .)
    STRING          reduce using rule 286 (statement -> declare_statement .)
    IF              reduce using rule 286 (statement -> declare_statement .)
    SWITCH          reduce using rule 286 (statement -> declare_statement .)
    WHILE           reduce using rule 286 (statement -> declare_statement .)
    DO              reduce using rule 286 (statement -> declare_statement .)
    FOR             reduce using rule 286 (statement -> declare_statement .)
    FOREACH         reduce using rule 286 (statement -> declare_statement .)
    GOTO            reduce using rule 286 (statement -> declare_statement .)
    CONTINUE        reduce using rule 286 (statement -> declare_statement .)
    BREAK           reduce using rule 286 (statement -> declare_statement .)
    RETURN          reduce using rule 286 (statement -> declare_statement .)
    THROW           reduce using rule 286 (statement -> declare_statement .)
    FUNCTION        reduce using rule 286 (statement -> declare_statement .)
    INCLUDE         reduce using rule 286 (statement -> declare_statement .)
    INCLUDE_ONCE    reduce using rule 286 (statement -> declare_statement .)
    REQUIRE         reduce using rule 286 (statement -> declare_statement .)
    REQUIRE_ONCE    reduce using rule 286 (statement -> declare_statement .)
    ABSTRACT        reduce using rule 286 (statement -> declare_statement .)
    FINAL           reduce using rule 286 (statement -> declare_statement .)
    PRINT           reduce using rule 286 (statement -> declare_statement .)
    YIELD           reduce using rule 286 (statement -> declare_statement .)
    YIELD_FROM      reduce using rule 286 (statement -> declare_statement .)
    CLASS           reduce using rule 286 (statement -> declare_statement .)
    CLOSE_TAG       reduce using rule 286 (statement -> declare_statement .)
    WHITESPACE      reduce using rule 286 (statement -> declare_statement .)
    $end            reduce using rule 286 (statement -> declare_statement .)
    OPEN_TAG        reduce using rule 286 (statement -> declare_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 286 (statement -> declare_statement .)
    RIGHT_CBRAC     reduce using rule 286 (statement -> declare_statement .)
    ELSE            reduce using rule 286 (statement -> declare_statement .)
    ELSEIF          reduce using rule 286 (statement -> declare_statement .)
    ENDDECLARE      reduce using rule 286 (statement -> declare_statement .)
    ENDWHILE        reduce using rule 286 (statement -> declare_statement .)
    ENDFOR          reduce using rule 286 (statement -> declare_statement .)
    CASE            reduce using rule 286 (statement -> declare_statement .)
    DEFAULT         reduce using rule 286 (statement -> declare_statement .)
    ENDSWITCH       reduce using rule 286 (statement -> declare_statement .)
    ENDFOREACH      reduce using rule 286 (statement -> declare_statement .)
    ENDIF           reduce using rule 286 (statement -> declare_statement .)


state 21

    (287) statement -> echo_statement .

    LEFT_CBRAC      reduce using rule 287 (statement -> echo_statement .)
    SEMICOLON       reduce using rule 287 (statement -> echo_statement .)
    TRY             reduce using rule 287 (statement -> echo_statement .)
    DECLARE         reduce using rule 287 (statement -> echo_statement .)
    ECHO            reduce using rule 287 (statement -> echo_statement .)
    UNSET           reduce using rule 287 (statement -> echo_statement .)
    CONST           reduce using rule 287 (statement -> echo_statement .)
    INTERFACE       reduce using rule 287 (statement -> echo_statement .)
    TRAIT           reduce using rule 287 (statement -> echo_statement .)
    NAMESPACE       reduce using rule 287 (statement -> echo_statement .)
    USE             reduce using rule 287 (statement -> echo_statement .)
    GLOBAL          reduce using rule 287 (statement -> echo_statement .)
    STATIC          reduce using rule 287 (statement -> echo_statement .)
    STRING          reduce using rule 287 (statement -> echo_statement .)
    IF              reduce using rule 287 (statement -> echo_statement .)
    SWITCH          reduce using rule 287 (statement -> echo_statement .)
    WHILE           reduce using rule 287 (statement -> echo_statement .)
    DO              reduce using rule 287 (statement -> echo_statement .)
    FOR             reduce using rule 287 (statement -> echo_statement .)
    FOREACH         reduce using rule 287 (statement -> echo_statement .)
    GOTO            reduce using rule 287 (statement -> echo_statement .)
    CONTINUE        reduce using rule 287 (statement -> echo_statement .)
    BREAK           reduce using rule 287 (statement -> echo_statement .)
    RETURN          reduce using rule 287 (statement -> echo_statement .)
    THROW           reduce using rule 287 (statement -> echo_statement .)
    FUNCTION        reduce using rule 287 (statement -> echo_statement .)
    INCLUDE         reduce using rule 287 (statement -> echo_statement .)
    INCLUDE_ONCE    reduce using rule 287 (statement -> echo_statement .)
    REQUIRE         reduce using rule 287 (statement -> echo_statement .)
    REQUIRE_ONCE    reduce using rule 287 (statement -> echo_statement .)
    ABSTRACT        reduce using rule 287 (statement -> echo_statement .)
    FINAL           reduce using rule 287 (statement -> echo_statement .)
    PRINT           reduce using rule 287 (statement -> echo_statement .)
    YIELD           reduce using rule 287 (statement -> echo_statement .)
    YIELD_FROM      reduce using rule 287 (statement -> echo_statement .)
    CLASS           reduce using rule 287 (statement -> echo_statement .)
    CLOSE_TAG       reduce using rule 287 (statement -> echo_statement .)
    WHITESPACE      reduce using rule 287 (statement -> echo_statement .)
    $end            reduce using rule 287 (statement -> echo_statement .)
    OPEN_TAG        reduce using rule 287 (statement -> echo_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 287 (statement -> echo_statement .)
    RIGHT_CBRAC     reduce using rule 287 (statement -> echo_statement .)
    ELSE            reduce using rule 287 (statement -> echo_statement .)
    ELSEIF          reduce using rule 287 (statement -> echo_statement .)
    ENDDECLARE      reduce using rule 287 (statement -> echo_statement .)
    ENDWHILE        reduce using rule 287 (statement -> echo_statement .)
    ENDFOR          reduce using rule 287 (statement -> echo_statement .)
    CASE            reduce using rule 287 (statement -> echo_statement .)
    DEFAULT         reduce using rule 287 (statement -> echo_statement .)
    ENDSWITCH       reduce using rule 287 (statement -> echo_statement .)
    ENDFOREACH      reduce using rule 287 (statement -> echo_statement .)
    ENDIF           reduce using rule 287 (statement -> echo_statement .)


state 22

    (288) statement -> unset_statement .

    LEFT_CBRAC      reduce using rule 288 (statement -> unset_statement .)
    SEMICOLON       reduce using rule 288 (statement -> unset_statement .)
    TRY             reduce using rule 288 (statement -> unset_statement .)
    DECLARE         reduce using rule 288 (statement -> unset_statement .)
    ECHO            reduce using rule 288 (statement -> unset_statement .)
    UNSET           reduce using rule 288 (statement -> unset_statement .)
    CONST           reduce using rule 288 (statement -> unset_statement .)
    INTERFACE       reduce using rule 288 (statement -> unset_statement .)
    TRAIT           reduce using rule 288 (statement -> unset_statement .)
    NAMESPACE       reduce using rule 288 (statement -> unset_statement .)
    USE             reduce using rule 288 (statement -> unset_statement .)
    GLOBAL          reduce using rule 288 (statement -> unset_statement .)
    STATIC          reduce using rule 288 (statement -> unset_statement .)
    STRING          reduce using rule 288 (statement -> unset_statement .)
    IF              reduce using rule 288 (statement -> unset_statement .)
    SWITCH          reduce using rule 288 (statement -> unset_statement .)
    WHILE           reduce using rule 288 (statement -> unset_statement .)
    DO              reduce using rule 288 (statement -> unset_statement .)
    FOR             reduce using rule 288 (statement -> unset_statement .)
    FOREACH         reduce using rule 288 (statement -> unset_statement .)
    GOTO            reduce using rule 288 (statement -> unset_statement .)
    CONTINUE        reduce using rule 288 (statement -> unset_statement .)
    BREAK           reduce using rule 288 (statement -> unset_statement .)
    RETURN          reduce using rule 288 (statement -> unset_statement .)
    THROW           reduce using rule 288 (statement -> unset_statement .)
    FUNCTION        reduce using rule 288 (statement -> unset_statement .)
    INCLUDE         reduce using rule 288 (statement -> unset_statement .)
    INCLUDE_ONCE    reduce using rule 288 (statement -> unset_statement .)
    REQUIRE         reduce using rule 288 (statement -> unset_statement .)
    REQUIRE_ONCE    reduce using rule 288 (statement -> unset_statement .)
    ABSTRACT        reduce using rule 288 (statement -> unset_statement .)
    FINAL           reduce using rule 288 (statement -> unset_statement .)
    PRINT           reduce using rule 288 (statement -> unset_statement .)
    YIELD           reduce using rule 288 (statement -> unset_statement .)
    YIELD_FROM      reduce using rule 288 (statement -> unset_statement .)
    CLASS           reduce using rule 288 (statement -> unset_statement .)
    CLOSE_TAG       reduce using rule 288 (statement -> unset_statement .)
    WHITESPACE      reduce using rule 288 (statement -> unset_statement .)
    $end            reduce using rule 288 (statement -> unset_statement .)
    OPEN_TAG        reduce using rule 288 (statement -> unset_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 288 (statement -> unset_statement .)
    RIGHT_CBRAC     reduce using rule 288 (statement -> unset_statement .)
    ELSE            reduce using rule 288 (statement -> unset_statement .)
    ELSEIF          reduce using rule 288 (statement -> unset_statement .)
    ENDDECLARE      reduce using rule 288 (statement -> unset_statement .)
    ENDWHILE        reduce using rule 288 (statement -> unset_statement .)
    ENDFOR          reduce using rule 288 (statement -> unset_statement .)
    CASE            reduce using rule 288 (statement -> unset_statement .)
    DEFAULT         reduce using rule 288 (statement -> unset_statement .)
    ENDSWITCH       reduce using rule 288 (statement -> unset_statement .)
    ENDFOREACH      reduce using rule 288 (statement -> unset_statement .)
    ENDIF           reduce using rule 288 (statement -> unset_statement .)


state 23

    (289) statement -> const_declaration .

    LEFT_CBRAC      reduce using rule 289 (statement -> const_declaration .)
    SEMICOLON       reduce using rule 289 (statement -> const_declaration .)
    TRY             reduce using rule 289 (statement -> const_declaration .)
    DECLARE         reduce using rule 289 (statement -> const_declaration .)
    ECHO            reduce using rule 289 (statement -> const_declaration .)
    UNSET           reduce using rule 289 (statement -> const_declaration .)
    CONST           reduce using rule 289 (statement -> const_declaration .)
    INTERFACE       reduce using rule 289 (statement -> const_declaration .)
    TRAIT           reduce using rule 289 (statement -> const_declaration .)
    NAMESPACE       reduce using rule 289 (statement -> const_declaration .)
    USE             reduce using rule 289 (statement -> const_declaration .)
    GLOBAL          reduce using rule 289 (statement -> const_declaration .)
    STATIC          reduce using rule 289 (statement -> const_declaration .)
    STRING          reduce using rule 289 (statement -> const_declaration .)
    IF              reduce using rule 289 (statement -> const_declaration .)
    SWITCH          reduce using rule 289 (statement -> const_declaration .)
    WHILE           reduce using rule 289 (statement -> const_declaration .)
    DO              reduce using rule 289 (statement -> const_declaration .)
    FOR             reduce using rule 289 (statement -> const_declaration .)
    FOREACH         reduce using rule 289 (statement -> const_declaration .)
    GOTO            reduce using rule 289 (statement -> const_declaration .)
    CONTINUE        reduce using rule 289 (statement -> const_declaration .)
    BREAK           reduce using rule 289 (statement -> const_declaration .)
    RETURN          reduce using rule 289 (statement -> const_declaration .)
    THROW           reduce using rule 289 (statement -> const_declaration .)
    FUNCTION        reduce using rule 289 (statement -> const_declaration .)
    INCLUDE         reduce using rule 289 (statement -> const_declaration .)
    INCLUDE_ONCE    reduce using rule 289 (statement -> const_declaration .)
    REQUIRE         reduce using rule 289 (statement -> const_declaration .)
    REQUIRE_ONCE    reduce using rule 289 (statement -> const_declaration .)
    ABSTRACT        reduce using rule 289 (statement -> const_declaration .)
    FINAL           reduce using rule 289 (statement -> const_declaration .)
    PRINT           reduce using rule 289 (statement -> const_declaration .)
    YIELD           reduce using rule 289 (statement -> const_declaration .)
    YIELD_FROM      reduce using rule 289 (statement -> const_declaration .)
    CLASS           reduce using rule 289 (statement -> const_declaration .)
    CLOSE_TAG       reduce using rule 289 (statement -> const_declaration .)
    WHITESPACE      reduce using rule 289 (statement -> const_declaration .)
    $end            reduce using rule 289 (statement -> const_declaration .)
    OPEN_TAG        reduce using rule 289 (statement -> const_declaration .)
    OPEN_TAG_WITH_ECHO reduce using rule 289 (statement -> const_declaration .)
    RIGHT_CBRAC     reduce using rule 289 (statement -> const_declaration .)
    ELSE            reduce using rule 289 (statement -> const_declaration .)
    ELSEIF          reduce using rule 289 (statement -> const_declaration .)
    ENDDECLARE      reduce using rule 289 (statement -> const_declaration .)
    ENDWHILE        reduce using rule 289 (statement -> const_declaration .)
    ENDFOR          reduce using rule 289 (statement -> const_declaration .)
    CASE            reduce using rule 289 (statement -> const_declaration .)
    DEFAULT         reduce using rule 289 (statement -> const_declaration .)
    ENDSWITCH       reduce using rule 289 (statement -> const_declaration .)
    ENDFOREACH      reduce using rule 289 (statement -> const_declaration .)
    ENDIF           reduce using rule 289 (statement -> const_declaration .)


state 24

    (290) statement -> function_definition .

    LEFT_CBRAC      reduce using rule 290 (statement -> function_definition .)
    SEMICOLON       reduce using rule 290 (statement -> function_definition .)
    TRY             reduce using rule 290 (statement -> function_definition .)
    DECLARE         reduce using rule 290 (statement -> function_definition .)
    ECHO            reduce using rule 290 (statement -> function_definition .)
    UNSET           reduce using rule 290 (statement -> function_definition .)
    CONST           reduce using rule 290 (statement -> function_definition .)
    INTERFACE       reduce using rule 290 (statement -> function_definition .)
    TRAIT           reduce using rule 290 (statement -> function_definition .)
    NAMESPACE       reduce using rule 290 (statement -> function_definition .)
    USE             reduce using rule 290 (statement -> function_definition .)
    GLOBAL          reduce using rule 290 (statement -> function_definition .)
    STATIC          reduce using rule 290 (statement -> function_definition .)
    STRING          reduce using rule 290 (statement -> function_definition .)
    IF              reduce using rule 290 (statement -> function_definition .)
    SWITCH          reduce using rule 290 (statement -> function_definition .)
    WHILE           reduce using rule 290 (statement -> function_definition .)
    DO              reduce using rule 290 (statement -> function_definition .)
    FOR             reduce using rule 290 (statement -> function_definition .)
    FOREACH         reduce using rule 290 (statement -> function_definition .)
    GOTO            reduce using rule 290 (statement -> function_definition .)
    CONTINUE        reduce using rule 290 (statement -> function_definition .)
    BREAK           reduce using rule 290 (statement -> function_definition .)
    RETURN          reduce using rule 290 (statement -> function_definition .)
    THROW           reduce using rule 290 (statement -> function_definition .)
    FUNCTION        reduce using rule 290 (statement -> function_definition .)
    INCLUDE         reduce using rule 290 (statement -> function_definition .)
    INCLUDE_ONCE    reduce using rule 290 (statement -> function_definition .)
    REQUIRE         reduce using rule 290 (statement -> function_definition .)
    REQUIRE_ONCE    reduce using rule 290 (statement -> function_definition .)
    ABSTRACT        reduce using rule 290 (statement -> function_definition .)
    FINAL           reduce using rule 290 (statement -> function_definition .)
    PRINT           reduce using rule 290 (statement -> function_definition .)
    YIELD           reduce using rule 290 (statement -> function_definition .)
    YIELD_FROM      reduce using rule 290 (statement -> function_definition .)
    CLASS           reduce using rule 290 (statement -> function_definition .)
    CLOSE_TAG       reduce using rule 290 (statement -> function_definition .)
    WHITESPACE      reduce using rule 290 (statement -> function_definition .)
    $end            reduce using rule 290 (statement -> function_definition .)
    OPEN_TAG        reduce using rule 290 (statement -> function_definition .)
    OPEN_TAG_WITH_ECHO reduce using rule 290 (statement -> function_definition .)
    RIGHT_CBRAC     reduce using rule 290 (statement -> function_definition .)
    ELSE            reduce using rule 290 (statement -> function_definition .)
    ELSEIF          reduce using rule 290 (statement -> function_definition .)
    ENDDECLARE      reduce using rule 290 (statement -> function_definition .)
    ENDWHILE        reduce using rule 290 (statement -> function_definition .)
    ENDFOR          reduce using rule 290 (statement -> function_definition .)
    CASE            reduce using rule 290 (statement -> function_definition .)
    DEFAULT         reduce using rule 290 (statement -> function_definition .)
    ENDSWITCH       reduce using rule 290 (statement -> function_definition .)
    ENDFOREACH      reduce using rule 290 (statement -> function_definition .)
    ENDIF           reduce using rule 290 (statement -> function_definition .)


state 25

    (291) statement -> class_declaration .

    LEFT_CBRAC      reduce using rule 291 (statement -> class_declaration .)
    SEMICOLON       reduce using rule 291 (statement -> class_declaration .)
    TRY             reduce using rule 291 (statement -> class_declaration .)
    DECLARE         reduce using rule 291 (statement -> class_declaration .)
    ECHO            reduce using rule 291 (statement -> class_declaration .)
    UNSET           reduce using rule 291 (statement -> class_declaration .)
    CONST           reduce using rule 291 (statement -> class_declaration .)
    INTERFACE       reduce using rule 291 (statement -> class_declaration .)
    TRAIT           reduce using rule 291 (statement -> class_declaration .)
    NAMESPACE       reduce using rule 291 (statement -> class_declaration .)
    USE             reduce using rule 291 (statement -> class_declaration .)
    GLOBAL          reduce using rule 291 (statement -> class_declaration .)
    STATIC          reduce using rule 291 (statement -> class_declaration .)
    STRING          reduce using rule 291 (statement -> class_declaration .)
    IF              reduce using rule 291 (statement -> class_declaration .)
    SWITCH          reduce using rule 291 (statement -> class_declaration .)
    WHILE           reduce using rule 291 (statement -> class_declaration .)
    DO              reduce using rule 291 (statement -> class_declaration .)
    FOR             reduce using rule 291 (statement -> class_declaration .)
    FOREACH         reduce using rule 291 (statement -> class_declaration .)
    GOTO            reduce using rule 291 (statement -> class_declaration .)
    CONTINUE        reduce using rule 291 (statement -> class_declaration .)
    BREAK           reduce using rule 291 (statement -> class_declaration .)
    RETURN          reduce using rule 291 (statement -> class_declaration .)
    THROW           reduce using rule 291 (statement -> class_declaration .)
    FUNCTION        reduce using rule 291 (statement -> class_declaration .)
    INCLUDE         reduce using rule 291 (statement -> class_declaration .)
    INCLUDE_ONCE    reduce using rule 291 (statement -> class_declaration .)
    REQUIRE         reduce using rule 291 (statement -> class_declaration .)
    REQUIRE_ONCE    reduce using rule 291 (statement -> class_declaration .)
    ABSTRACT        reduce using rule 291 (statement -> class_declaration .)
    FINAL           reduce using rule 291 (statement -> class_declaration .)
    PRINT           reduce using rule 291 (statement -> class_declaration .)
    YIELD           reduce using rule 291 (statement -> class_declaration .)
    YIELD_FROM      reduce using rule 291 (statement -> class_declaration .)
    CLASS           reduce using rule 291 (statement -> class_declaration .)
    CLOSE_TAG       reduce using rule 291 (statement -> class_declaration .)
    WHITESPACE      reduce using rule 291 (statement -> class_declaration .)
    $end            reduce using rule 291 (statement -> class_declaration .)
    OPEN_TAG        reduce using rule 291 (statement -> class_declaration .)
    OPEN_TAG_WITH_ECHO reduce using rule 291 (statement -> class_declaration .)
    RIGHT_CBRAC     reduce using rule 291 (statement -> class_declaration .)
    ELSE            reduce using rule 291 (statement -> class_declaration .)
    ELSEIF          reduce using rule 291 (statement -> class_declaration .)
    ENDDECLARE      reduce using rule 291 (statement -> class_declaration .)
    ENDWHILE        reduce using rule 291 (statement -> class_declaration .)
    ENDFOR          reduce using rule 291 (statement -> class_declaration .)
    CASE            reduce using rule 291 (statement -> class_declaration .)
    DEFAULT         reduce using rule 291 (statement -> class_declaration .)
    ENDSWITCH       reduce using rule 291 (statement -> class_declaration .)
    ENDFOREACH      reduce using rule 291 (statement -> class_declaration .)
    ENDIF           reduce using rule 291 (statement -> class_declaration .)


state 26

    (292) statement -> interface_declaration .

    LEFT_CBRAC      reduce using rule 292 (statement -> interface_declaration .)
    SEMICOLON       reduce using rule 292 (statement -> interface_declaration .)
    TRY             reduce using rule 292 (statement -> interface_declaration .)
    DECLARE         reduce using rule 292 (statement -> interface_declaration .)
    ECHO            reduce using rule 292 (statement -> interface_declaration .)
    UNSET           reduce using rule 292 (statement -> interface_declaration .)
    CONST           reduce using rule 292 (statement -> interface_declaration .)
    INTERFACE       reduce using rule 292 (statement -> interface_declaration .)
    TRAIT           reduce using rule 292 (statement -> interface_declaration .)
    NAMESPACE       reduce using rule 292 (statement -> interface_declaration .)
    USE             reduce using rule 292 (statement -> interface_declaration .)
    GLOBAL          reduce using rule 292 (statement -> interface_declaration .)
    STATIC          reduce using rule 292 (statement -> interface_declaration .)
    STRING          reduce using rule 292 (statement -> interface_declaration .)
    IF              reduce using rule 292 (statement -> interface_declaration .)
    SWITCH          reduce using rule 292 (statement -> interface_declaration .)
    WHILE           reduce using rule 292 (statement -> interface_declaration .)
    DO              reduce using rule 292 (statement -> interface_declaration .)
    FOR             reduce using rule 292 (statement -> interface_declaration .)
    FOREACH         reduce using rule 292 (statement -> interface_declaration .)
    GOTO            reduce using rule 292 (statement -> interface_declaration .)
    CONTINUE        reduce using rule 292 (statement -> interface_declaration .)
    BREAK           reduce using rule 292 (statement -> interface_declaration .)
    RETURN          reduce using rule 292 (statement -> interface_declaration .)
    THROW           reduce using rule 292 (statement -> interface_declaration .)
    FUNCTION        reduce using rule 292 (statement -> interface_declaration .)
    INCLUDE         reduce using rule 292 (statement -> interface_declaration .)
    INCLUDE_ONCE    reduce using rule 292 (statement -> interface_declaration .)
    REQUIRE         reduce using rule 292 (statement -> interface_declaration .)
    REQUIRE_ONCE    reduce using rule 292 (statement -> interface_declaration .)
    ABSTRACT        reduce using rule 292 (statement -> interface_declaration .)
    FINAL           reduce using rule 292 (statement -> interface_declaration .)
    PRINT           reduce using rule 292 (statement -> interface_declaration .)
    YIELD           reduce using rule 292 (statement -> interface_declaration .)
    YIELD_FROM      reduce using rule 292 (statement -> interface_declaration .)
    CLASS           reduce using rule 292 (statement -> interface_declaration .)
    CLOSE_TAG       reduce using rule 292 (statement -> interface_declaration .)
    WHITESPACE      reduce using rule 292 (statement -> interface_declaration .)
    $end            reduce using rule 292 (statement -> interface_declaration .)
    OPEN_TAG        reduce using rule 292 (statement -> interface_declaration .)
    OPEN_TAG_WITH_ECHO reduce using rule 292 (statement -> interface_declaration .)
    RIGHT_CBRAC     reduce using rule 292 (statement -> interface_declaration .)
    ELSE            reduce using rule 292 (statement -> interface_declaration .)
    ELSEIF          reduce using rule 292 (statement -> interface_declaration .)
    ENDDECLARE      reduce using rule 292 (statement -> interface_declaration .)
    ENDWHILE        reduce using rule 292 (statement -> interface_declaration .)
    ENDFOR          reduce using rule 292 (statement -> interface_declaration .)
    CASE            reduce using rule 292 (statement -> interface_declaration .)
    DEFAULT         reduce using rule 292 (statement -> interface_declaration .)
    ENDSWITCH       reduce using rule 292 (statement -> interface_declaration .)
    ENDFOREACH      reduce using rule 292 (statement -> interface_declaration .)
    ENDIF           reduce using rule 292 (statement -> interface_declaration .)


state 27

    (293) statement -> trait_declaration .

    LEFT_CBRAC      reduce using rule 293 (statement -> trait_declaration .)
    SEMICOLON       reduce using rule 293 (statement -> trait_declaration .)
    TRY             reduce using rule 293 (statement -> trait_declaration .)
    DECLARE         reduce using rule 293 (statement -> trait_declaration .)
    ECHO            reduce using rule 293 (statement -> trait_declaration .)
    UNSET           reduce using rule 293 (statement -> trait_declaration .)
    CONST           reduce using rule 293 (statement -> trait_declaration .)
    INTERFACE       reduce using rule 293 (statement -> trait_declaration .)
    TRAIT           reduce using rule 293 (statement -> trait_declaration .)
    NAMESPACE       reduce using rule 293 (statement -> trait_declaration .)
    USE             reduce using rule 293 (statement -> trait_declaration .)
    GLOBAL          reduce using rule 293 (statement -> trait_declaration .)
    STATIC          reduce using rule 293 (statement -> trait_declaration .)
    STRING          reduce using rule 293 (statement -> trait_declaration .)
    IF              reduce using rule 293 (statement -> trait_declaration .)
    SWITCH          reduce using rule 293 (statement -> trait_declaration .)
    WHILE           reduce using rule 293 (statement -> trait_declaration .)
    DO              reduce using rule 293 (statement -> trait_declaration .)
    FOR             reduce using rule 293 (statement -> trait_declaration .)
    FOREACH         reduce using rule 293 (statement -> trait_declaration .)
    GOTO            reduce using rule 293 (statement -> trait_declaration .)
    CONTINUE        reduce using rule 293 (statement -> trait_declaration .)
    BREAK           reduce using rule 293 (statement -> trait_declaration .)
    RETURN          reduce using rule 293 (statement -> trait_declaration .)
    THROW           reduce using rule 293 (statement -> trait_declaration .)
    FUNCTION        reduce using rule 293 (statement -> trait_declaration .)
    INCLUDE         reduce using rule 293 (statement -> trait_declaration .)
    INCLUDE_ONCE    reduce using rule 293 (statement -> trait_declaration .)
    REQUIRE         reduce using rule 293 (statement -> trait_declaration .)
    REQUIRE_ONCE    reduce using rule 293 (statement -> trait_declaration .)
    ABSTRACT        reduce using rule 293 (statement -> trait_declaration .)
    FINAL           reduce using rule 293 (statement -> trait_declaration .)
    PRINT           reduce using rule 293 (statement -> trait_declaration .)
    YIELD           reduce using rule 293 (statement -> trait_declaration .)
    YIELD_FROM      reduce using rule 293 (statement -> trait_declaration .)
    CLASS           reduce using rule 293 (statement -> trait_declaration .)
    CLOSE_TAG       reduce using rule 293 (statement -> trait_declaration .)
    WHITESPACE      reduce using rule 293 (statement -> trait_declaration .)
    $end            reduce using rule 293 (statement -> trait_declaration .)
    OPEN_TAG        reduce using rule 293 (statement -> trait_declaration .)
    OPEN_TAG_WITH_ECHO reduce using rule 293 (statement -> trait_declaration .)
    RIGHT_CBRAC     reduce using rule 293 (statement -> trait_declaration .)
    ELSE            reduce using rule 293 (statement -> trait_declaration .)
    ELSEIF          reduce using rule 293 (statement -> trait_declaration .)
    ENDDECLARE      reduce using rule 293 (statement -> trait_declaration .)
    ENDWHILE        reduce using rule 293 (statement -> trait_declaration .)
    ENDFOR          reduce using rule 293 (statement -> trait_declaration .)
    CASE            reduce using rule 293 (statement -> trait_declaration .)
    DEFAULT         reduce using rule 293 (statement -> trait_declaration .)
    ENDSWITCH       reduce using rule 293 (statement -> trait_declaration .)
    ENDFOREACH      reduce using rule 293 (statement -> trait_declaration .)
    ENDIF           reduce using rule 293 (statement -> trait_declaration .)


state 28

    (294) statement -> namespace_definition .

    LEFT_CBRAC      reduce using rule 294 (statement -> namespace_definition .)
    SEMICOLON       reduce using rule 294 (statement -> namespace_definition .)
    TRY             reduce using rule 294 (statement -> namespace_definition .)
    DECLARE         reduce using rule 294 (statement -> namespace_definition .)
    ECHO            reduce using rule 294 (statement -> namespace_definition .)
    UNSET           reduce using rule 294 (statement -> namespace_definition .)
    CONST           reduce using rule 294 (statement -> namespace_definition .)
    INTERFACE       reduce using rule 294 (statement -> namespace_definition .)
    TRAIT           reduce using rule 294 (statement -> namespace_definition .)
    NAMESPACE       reduce using rule 294 (statement -> namespace_definition .)
    USE             reduce using rule 294 (statement -> namespace_definition .)
    GLOBAL          reduce using rule 294 (statement -> namespace_definition .)
    STATIC          reduce using rule 294 (statement -> namespace_definition .)
    STRING          reduce using rule 294 (statement -> namespace_definition .)
    IF              reduce using rule 294 (statement -> namespace_definition .)
    SWITCH          reduce using rule 294 (statement -> namespace_definition .)
    WHILE           reduce using rule 294 (statement -> namespace_definition .)
    DO              reduce using rule 294 (statement -> namespace_definition .)
    FOR             reduce using rule 294 (statement -> namespace_definition .)
    FOREACH         reduce using rule 294 (statement -> namespace_definition .)
    GOTO            reduce using rule 294 (statement -> namespace_definition .)
    CONTINUE        reduce using rule 294 (statement -> namespace_definition .)
    BREAK           reduce using rule 294 (statement -> namespace_definition .)
    RETURN          reduce using rule 294 (statement -> namespace_definition .)
    THROW           reduce using rule 294 (statement -> namespace_definition .)
    FUNCTION        reduce using rule 294 (statement -> namespace_definition .)
    INCLUDE         reduce using rule 294 (statement -> namespace_definition .)
    INCLUDE_ONCE    reduce using rule 294 (statement -> namespace_definition .)
    REQUIRE         reduce using rule 294 (statement -> namespace_definition .)
    REQUIRE_ONCE    reduce using rule 294 (statement -> namespace_definition .)
    ABSTRACT        reduce using rule 294 (statement -> namespace_definition .)
    FINAL           reduce using rule 294 (statement -> namespace_definition .)
    PRINT           reduce using rule 294 (statement -> namespace_definition .)
    YIELD           reduce using rule 294 (statement -> namespace_definition .)
    YIELD_FROM      reduce using rule 294 (statement -> namespace_definition .)
    CLASS           reduce using rule 294 (statement -> namespace_definition .)
    CLOSE_TAG       reduce using rule 294 (statement -> namespace_definition .)
    WHITESPACE      reduce using rule 294 (statement -> namespace_definition .)
    $end            reduce using rule 294 (statement -> namespace_definition .)
    OPEN_TAG        reduce using rule 294 (statement -> namespace_definition .)
    OPEN_TAG_WITH_ECHO reduce using rule 294 (statement -> namespace_definition .)
    RIGHT_CBRAC     reduce using rule 294 (statement -> namespace_definition .)
    ELSE            reduce using rule 294 (statement -> namespace_definition .)
    ELSEIF          reduce using rule 294 (statement -> namespace_definition .)
    ENDDECLARE      reduce using rule 294 (statement -> namespace_definition .)
    ENDWHILE        reduce using rule 294 (statement -> namespace_definition .)
    ENDFOR          reduce using rule 294 (statement -> namespace_definition .)
    CASE            reduce using rule 294 (statement -> namespace_definition .)
    DEFAULT         reduce using rule 294 (statement -> namespace_definition .)
    ENDSWITCH       reduce using rule 294 (statement -> namespace_definition .)
    ENDFOREACH      reduce using rule 294 (statement -> namespace_definition .)
    ENDIF           reduce using rule 294 (statement -> namespace_definition .)


state 29

    (295) statement -> namespace_use_declaration .

    LEFT_CBRAC      reduce using rule 295 (statement -> namespace_use_declaration .)
    SEMICOLON       reduce using rule 295 (statement -> namespace_use_declaration .)
    TRY             reduce using rule 295 (statement -> namespace_use_declaration .)
    DECLARE         reduce using rule 295 (statement -> namespace_use_declaration .)
    ECHO            reduce using rule 295 (statement -> namespace_use_declaration .)
    UNSET           reduce using rule 295 (statement -> namespace_use_declaration .)
    CONST           reduce using rule 295 (statement -> namespace_use_declaration .)
    INTERFACE       reduce using rule 295 (statement -> namespace_use_declaration .)
    TRAIT           reduce using rule 295 (statement -> namespace_use_declaration .)
    NAMESPACE       reduce using rule 295 (statement -> namespace_use_declaration .)
    USE             reduce using rule 295 (statement -> namespace_use_declaration .)
    GLOBAL          reduce using rule 295 (statement -> namespace_use_declaration .)
    STATIC          reduce using rule 295 (statement -> namespace_use_declaration .)
    STRING          reduce using rule 295 (statement -> namespace_use_declaration .)
    IF              reduce using rule 295 (statement -> namespace_use_declaration .)
    SWITCH          reduce using rule 295 (statement -> namespace_use_declaration .)
    WHILE           reduce using rule 295 (statement -> namespace_use_declaration .)
    DO              reduce using rule 295 (statement -> namespace_use_declaration .)
    FOR             reduce using rule 295 (statement -> namespace_use_declaration .)
    FOREACH         reduce using rule 295 (statement -> namespace_use_declaration .)
    GOTO            reduce using rule 295 (statement -> namespace_use_declaration .)
    CONTINUE        reduce using rule 295 (statement -> namespace_use_declaration .)
    BREAK           reduce using rule 295 (statement -> namespace_use_declaration .)
    RETURN          reduce using rule 295 (statement -> namespace_use_declaration .)
    THROW           reduce using rule 295 (statement -> namespace_use_declaration .)
    FUNCTION        reduce using rule 295 (statement -> namespace_use_declaration .)
    INCLUDE         reduce using rule 295 (statement -> namespace_use_declaration .)
    INCLUDE_ONCE    reduce using rule 295 (statement -> namespace_use_declaration .)
    REQUIRE         reduce using rule 295 (statement -> namespace_use_declaration .)
    REQUIRE_ONCE    reduce using rule 295 (statement -> namespace_use_declaration .)
    ABSTRACT        reduce using rule 295 (statement -> namespace_use_declaration .)
    FINAL           reduce using rule 295 (statement -> namespace_use_declaration .)
    PRINT           reduce using rule 295 (statement -> namespace_use_declaration .)
    YIELD           reduce using rule 295 (statement -> namespace_use_declaration .)
    YIELD_FROM      reduce using rule 295 (statement -> namespace_use_declaration .)
    CLASS           reduce using rule 295 (statement -> namespace_use_declaration .)
    CLOSE_TAG       reduce using rule 295 (statement -> namespace_use_declaration .)
    WHITESPACE      reduce using rule 295 (statement -> namespace_use_declaration .)
    $end            reduce using rule 295 (statement -> namespace_use_declaration .)
    OPEN_TAG        reduce using rule 295 (statement -> namespace_use_declaration .)
    OPEN_TAG_WITH_ECHO reduce using rule 295 (statement -> namespace_use_declaration .)
    RIGHT_CBRAC     reduce using rule 295 (statement -> namespace_use_declaration .)
    ELSE            reduce using rule 295 (statement -> namespace_use_declaration .)
    ELSEIF          reduce using rule 295 (statement -> namespace_use_declaration .)
    ENDDECLARE      reduce using rule 295 (statement -> namespace_use_declaration .)
    ENDWHILE        reduce using rule 295 (statement -> namespace_use_declaration .)
    ENDFOR          reduce using rule 295 (statement -> namespace_use_declaration .)
    CASE            reduce using rule 295 (statement -> namespace_use_declaration .)
    DEFAULT         reduce using rule 295 (statement -> namespace_use_declaration .)
    ENDSWITCH       reduce using rule 295 (statement -> namespace_use_declaration .)
    ENDFOREACH      reduce using rule 295 (statement -> namespace_use_declaration .)
    ENDIF           reduce using rule 295 (statement -> namespace_use_declaration .)


state 30

    (296) statement -> global_declaration .

    LEFT_CBRAC      reduce using rule 296 (statement -> global_declaration .)
    SEMICOLON       reduce using rule 296 (statement -> global_declaration .)
    TRY             reduce using rule 296 (statement -> global_declaration .)
    DECLARE         reduce using rule 296 (statement -> global_declaration .)
    ECHO            reduce using rule 296 (statement -> global_declaration .)
    UNSET           reduce using rule 296 (statement -> global_declaration .)
    CONST           reduce using rule 296 (statement -> global_declaration .)
    INTERFACE       reduce using rule 296 (statement -> global_declaration .)
    TRAIT           reduce using rule 296 (statement -> global_declaration .)
    NAMESPACE       reduce using rule 296 (statement -> global_declaration .)
    USE             reduce using rule 296 (statement -> global_declaration .)
    GLOBAL          reduce using rule 296 (statement -> global_declaration .)
    STATIC          reduce using rule 296 (statement -> global_declaration .)
    STRING          reduce using rule 296 (statement -> global_declaration .)
    IF              reduce using rule 296 (statement -> global_declaration .)
    SWITCH          reduce using rule 296 (statement -> global_declaration .)
    WHILE           reduce using rule 296 (statement -> global_declaration .)
    DO              reduce using rule 296 (statement -> global_declaration .)
    FOR             reduce using rule 296 (statement -> global_declaration .)
    FOREACH         reduce using rule 296 (statement -> global_declaration .)
    GOTO            reduce using rule 296 (statement -> global_declaration .)
    CONTINUE        reduce using rule 296 (statement -> global_declaration .)
    BREAK           reduce using rule 296 (statement -> global_declaration .)
    RETURN          reduce using rule 296 (statement -> global_declaration .)
    THROW           reduce using rule 296 (statement -> global_declaration .)
    FUNCTION        reduce using rule 296 (statement -> global_declaration .)
    INCLUDE         reduce using rule 296 (statement -> global_declaration .)
    INCLUDE_ONCE    reduce using rule 296 (statement -> global_declaration .)
    REQUIRE         reduce using rule 296 (statement -> global_declaration .)
    REQUIRE_ONCE    reduce using rule 296 (statement -> global_declaration .)
    ABSTRACT        reduce using rule 296 (statement -> global_declaration .)
    FINAL           reduce using rule 296 (statement -> global_declaration .)
    PRINT           reduce using rule 296 (statement -> global_declaration .)
    YIELD           reduce using rule 296 (statement -> global_declaration .)
    YIELD_FROM      reduce using rule 296 (statement -> global_declaration .)
    CLASS           reduce using rule 296 (statement -> global_declaration .)
    CLOSE_TAG       reduce using rule 296 (statement -> global_declaration .)
    WHITESPACE      reduce using rule 296 (statement -> global_declaration .)
    $end            reduce using rule 296 (statement -> global_declaration .)
    OPEN_TAG        reduce using rule 296 (statement -> global_declaration .)
    OPEN_TAG_WITH_ECHO reduce using rule 296 (statement -> global_declaration .)
    RIGHT_CBRAC     reduce using rule 296 (statement -> global_declaration .)
    ELSE            reduce using rule 296 (statement -> global_declaration .)
    ELSEIF          reduce using rule 296 (statement -> global_declaration .)
    ENDDECLARE      reduce using rule 296 (statement -> global_declaration .)
    ENDWHILE        reduce using rule 296 (statement -> global_declaration .)
    ENDFOR          reduce using rule 296 (statement -> global_declaration .)
    CASE            reduce using rule 296 (statement -> global_declaration .)
    DEFAULT         reduce using rule 296 (statement -> global_declaration .)
    ENDSWITCH       reduce using rule 296 (statement -> global_declaration .)
    ENDFOREACH      reduce using rule 296 (statement -> global_declaration .)
    ENDIF           reduce using rule 296 (statement -> global_declaration .)


state 31

    (297) statement -> function_static_declaration .

    LEFT_CBRAC      reduce using rule 297 (statement -> function_static_declaration .)
    SEMICOLON       reduce using rule 297 (statement -> function_static_declaration .)
    TRY             reduce using rule 297 (statement -> function_static_declaration .)
    DECLARE         reduce using rule 297 (statement -> function_static_declaration .)
    ECHO            reduce using rule 297 (statement -> function_static_declaration .)
    UNSET           reduce using rule 297 (statement -> function_static_declaration .)
    CONST           reduce using rule 297 (statement -> function_static_declaration .)
    INTERFACE       reduce using rule 297 (statement -> function_static_declaration .)
    TRAIT           reduce using rule 297 (statement -> function_static_declaration .)
    NAMESPACE       reduce using rule 297 (statement -> function_static_declaration .)
    USE             reduce using rule 297 (statement -> function_static_declaration .)
    GLOBAL          reduce using rule 297 (statement -> function_static_declaration .)
    STATIC          reduce using rule 297 (statement -> function_static_declaration .)
    STRING          reduce using rule 297 (statement -> function_static_declaration .)
    IF              reduce using rule 297 (statement -> function_static_declaration .)
    SWITCH          reduce using rule 297 (statement -> function_static_declaration .)
    WHILE           reduce using rule 297 (statement -> function_static_declaration .)
    DO              reduce using rule 297 (statement -> function_static_declaration .)
    FOR             reduce using rule 297 (statement -> function_static_declaration .)
    FOREACH         reduce using rule 297 (statement -> function_static_declaration .)
    GOTO            reduce using rule 297 (statement -> function_static_declaration .)
    CONTINUE        reduce using rule 297 (statement -> function_static_declaration .)
    BREAK           reduce using rule 297 (statement -> function_static_declaration .)
    RETURN          reduce using rule 297 (statement -> function_static_declaration .)
    THROW           reduce using rule 297 (statement -> function_static_declaration .)
    FUNCTION        reduce using rule 297 (statement -> function_static_declaration .)
    INCLUDE         reduce using rule 297 (statement -> function_static_declaration .)
    INCLUDE_ONCE    reduce using rule 297 (statement -> function_static_declaration .)
    REQUIRE         reduce using rule 297 (statement -> function_static_declaration .)
    REQUIRE_ONCE    reduce using rule 297 (statement -> function_static_declaration .)
    ABSTRACT        reduce using rule 297 (statement -> function_static_declaration .)
    FINAL           reduce using rule 297 (statement -> function_static_declaration .)
    PRINT           reduce using rule 297 (statement -> function_static_declaration .)
    YIELD           reduce using rule 297 (statement -> function_static_declaration .)
    YIELD_FROM      reduce using rule 297 (statement -> function_static_declaration .)
    CLASS           reduce using rule 297 (statement -> function_static_declaration .)
    CLOSE_TAG       reduce using rule 297 (statement -> function_static_declaration .)
    WHITESPACE      reduce using rule 297 (statement -> function_static_declaration .)
    $end            reduce using rule 297 (statement -> function_static_declaration .)
    OPEN_TAG        reduce using rule 297 (statement -> function_static_declaration .)
    OPEN_TAG_WITH_ECHO reduce using rule 297 (statement -> function_static_declaration .)
    RIGHT_CBRAC     reduce using rule 297 (statement -> function_static_declaration .)
    ELSE            reduce using rule 297 (statement -> function_static_declaration .)
    ELSEIF          reduce using rule 297 (statement -> function_static_declaration .)
    ENDDECLARE      reduce using rule 297 (statement -> function_static_declaration .)
    ENDWHILE        reduce using rule 297 (statement -> function_static_declaration .)
    ENDFOR          reduce using rule 297 (statement -> function_static_declaration .)
    CASE            reduce using rule 297 (statement -> function_static_declaration .)
    DEFAULT         reduce using rule 297 (statement -> function_static_declaration .)
    ENDSWITCH       reduce using rule 297 (statement -> function_static_declaration .)
    ENDFOREACH      reduce using rule 297 (statement -> function_static_declaration .)
    ENDIF           reduce using rule 297 (statement -> function_static_declaration .)


state 32

    (298) compound_statement -> LEFT_CBRAC . statement_list RIGHT_CBRAC
    (299) compound_statement -> LEFT_CBRAC . RIGHT_CBRAC
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     shift and go to state 97
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 96
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 33

    (302) named_label_statement -> name . DOUBLE_POINT

    DOUBLE_POINT    shift and go to state 98


state 34

    (303) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 99


state 35

    (304) expression_statement -> SEMICOLON .

    LEFT_CBRAC      reduce using rule 304 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 304 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 304 (expression_statement -> SEMICOLON .)
    DECLARE         reduce using rule 304 (expression_statement -> SEMICOLON .)
    ECHO            reduce using rule 304 (expression_statement -> SEMICOLON .)
    UNSET           reduce using rule 304 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 304 (expression_statement -> SEMICOLON .)
    INTERFACE       reduce using rule 304 (expression_statement -> SEMICOLON .)
    TRAIT           reduce using rule 304 (expression_statement -> SEMICOLON .)
    NAMESPACE       reduce using rule 304 (expression_statement -> SEMICOLON .)
    USE             reduce using rule 304 (expression_statement -> SEMICOLON .)
    GLOBAL          reduce using rule 304 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 304 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 304 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 304 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 304 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 304 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 304 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 304 (expression_statement -> SEMICOLON .)
    FOREACH         reduce using rule 304 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 304 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 304 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 304 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 304 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 304 (expression_statement -> SEMICOLON .)
    FUNCTION        reduce using rule 304 (expression_statement -> SEMICOLON .)
    INCLUDE         reduce using rule 304 (expression_statement -> SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 304 (expression_statement -> SEMICOLON .)
    REQUIRE         reduce using rule 304 (expression_statement -> SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 304 (expression_statement -> SEMICOLON .)
    ABSTRACT        reduce using rule 304 (expression_statement -> SEMICOLON .)
    FINAL           reduce using rule 304 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 304 (expression_statement -> SEMICOLON .)
    YIELD           reduce using rule 304 (expression_statement -> SEMICOLON .)
    YIELD_FROM      reduce using rule 304 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 304 (expression_statement -> SEMICOLON .)
    CLOSE_TAG       reduce using rule 304 (expression_statement -> SEMICOLON .)
    WHITESPACE      reduce using rule 304 (expression_statement -> SEMICOLON .)
    $end            reduce using rule 304 (expression_statement -> SEMICOLON .)
    OPEN_TAG        reduce using rule 304 (expression_statement -> SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 304 (expression_statement -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 304 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 304 (expression_statement -> SEMICOLON .)
    ELSEIF          reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDDECLARE      reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDWHILE        reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDFOR          reduce using rule 304 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 304 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDSWITCH       reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDFOREACH      reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDIF           reduce using rule 304 (expression_statement -> SEMICOLON .)


state 36

    (305) selection_statement -> if_statement .

    LEFT_CBRAC      reduce using rule 305 (selection_statement -> if_statement .)
    SEMICOLON       reduce using rule 305 (selection_statement -> if_statement .)
    TRY             reduce using rule 305 (selection_statement -> if_statement .)
    DECLARE         reduce using rule 305 (selection_statement -> if_statement .)
    ECHO            reduce using rule 305 (selection_statement -> if_statement .)
    UNSET           reduce using rule 305 (selection_statement -> if_statement .)
    CONST           reduce using rule 305 (selection_statement -> if_statement .)
    INTERFACE       reduce using rule 305 (selection_statement -> if_statement .)
    TRAIT           reduce using rule 305 (selection_statement -> if_statement .)
    NAMESPACE       reduce using rule 305 (selection_statement -> if_statement .)
    USE             reduce using rule 305 (selection_statement -> if_statement .)
    GLOBAL          reduce using rule 305 (selection_statement -> if_statement .)
    STATIC          reduce using rule 305 (selection_statement -> if_statement .)
    STRING          reduce using rule 305 (selection_statement -> if_statement .)
    IF              reduce using rule 305 (selection_statement -> if_statement .)
    SWITCH          reduce using rule 305 (selection_statement -> if_statement .)
    WHILE           reduce using rule 305 (selection_statement -> if_statement .)
    DO              reduce using rule 305 (selection_statement -> if_statement .)
    FOR             reduce using rule 305 (selection_statement -> if_statement .)
    FOREACH         reduce using rule 305 (selection_statement -> if_statement .)
    GOTO            reduce using rule 305 (selection_statement -> if_statement .)
    CONTINUE        reduce using rule 305 (selection_statement -> if_statement .)
    BREAK           reduce using rule 305 (selection_statement -> if_statement .)
    RETURN          reduce using rule 305 (selection_statement -> if_statement .)
    THROW           reduce using rule 305 (selection_statement -> if_statement .)
    FUNCTION        reduce using rule 305 (selection_statement -> if_statement .)
    INCLUDE         reduce using rule 305 (selection_statement -> if_statement .)
    INCLUDE_ONCE    reduce using rule 305 (selection_statement -> if_statement .)
    REQUIRE         reduce using rule 305 (selection_statement -> if_statement .)
    REQUIRE_ONCE    reduce using rule 305 (selection_statement -> if_statement .)
    ABSTRACT        reduce using rule 305 (selection_statement -> if_statement .)
    FINAL           reduce using rule 305 (selection_statement -> if_statement .)
    PRINT           reduce using rule 305 (selection_statement -> if_statement .)
    YIELD           reduce using rule 305 (selection_statement -> if_statement .)
    YIELD_FROM      reduce using rule 305 (selection_statement -> if_statement .)
    CLASS           reduce using rule 305 (selection_statement -> if_statement .)
    CLOSE_TAG       reduce using rule 305 (selection_statement -> if_statement .)
    WHITESPACE      reduce using rule 305 (selection_statement -> if_statement .)
    $end            reduce using rule 305 (selection_statement -> if_statement .)
    OPEN_TAG        reduce using rule 305 (selection_statement -> if_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 305 (selection_statement -> if_statement .)
    RIGHT_CBRAC     reduce using rule 305 (selection_statement -> if_statement .)
    ELSE            reduce using rule 305 (selection_statement -> if_statement .)
    ELSEIF          reduce using rule 305 (selection_statement -> if_statement .)
    ENDDECLARE      reduce using rule 305 (selection_statement -> if_statement .)
    ENDWHILE        reduce using rule 305 (selection_statement -> if_statement .)
    ENDFOR          reduce using rule 305 (selection_statement -> if_statement .)
    CASE            reduce using rule 305 (selection_statement -> if_statement .)
    DEFAULT         reduce using rule 305 (selection_statement -> if_statement .)
    ENDSWITCH       reduce using rule 305 (selection_statement -> if_statement .)
    ENDFOREACH      reduce using rule 305 (selection_statement -> if_statement .)
    ENDIF           reduce using rule 305 (selection_statement -> if_statement .)


state 37

    (306) selection_statement -> switch_statement .

    LEFT_CBRAC      reduce using rule 306 (selection_statement -> switch_statement .)
    SEMICOLON       reduce using rule 306 (selection_statement -> switch_statement .)
    TRY             reduce using rule 306 (selection_statement -> switch_statement .)
    DECLARE         reduce using rule 306 (selection_statement -> switch_statement .)
    ECHO            reduce using rule 306 (selection_statement -> switch_statement .)
    UNSET           reduce using rule 306 (selection_statement -> switch_statement .)
    CONST           reduce using rule 306 (selection_statement -> switch_statement .)
    INTERFACE       reduce using rule 306 (selection_statement -> switch_statement .)
    TRAIT           reduce using rule 306 (selection_statement -> switch_statement .)
    NAMESPACE       reduce using rule 306 (selection_statement -> switch_statement .)
    USE             reduce using rule 306 (selection_statement -> switch_statement .)
    GLOBAL          reduce using rule 306 (selection_statement -> switch_statement .)
    STATIC          reduce using rule 306 (selection_statement -> switch_statement .)
    STRING          reduce using rule 306 (selection_statement -> switch_statement .)
    IF              reduce using rule 306 (selection_statement -> switch_statement .)
    SWITCH          reduce using rule 306 (selection_statement -> switch_statement .)
    WHILE           reduce using rule 306 (selection_statement -> switch_statement .)
    DO              reduce using rule 306 (selection_statement -> switch_statement .)
    FOR             reduce using rule 306 (selection_statement -> switch_statement .)
    FOREACH         reduce using rule 306 (selection_statement -> switch_statement .)
    GOTO            reduce using rule 306 (selection_statement -> switch_statement .)
    CONTINUE        reduce using rule 306 (selection_statement -> switch_statement .)
    BREAK           reduce using rule 306 (selection_statement -> switch_statement .)
    RETURN          reduce using rule 306 (selection_statement -> switch_statement .)
    THROW           reduce using rule 306 (selection_statement -> switch_statement .)
    FUNCTION        reduce using rule 306 (selection_statement -> switch_statement .)
    INCLUDE         reduce using rule 306 (selection_statement -> switch_statement .)
    INCLUDE_ONCE    reduce using rule 306 (selection_statement -> switch_statement .)
    REQUIRE         reduce using rule 306 (selection_statement -> switch_statement .)
    REQUIRE_ONCE    reduce using rule 306 (selection_statement -> switch_statement .)
    ABSTRACT        reduce using rule 306 (selection_statement -> switch_statement .)
    FINAL           reduce using rule 306 (selection_statement -> switch_statement .)
    PRINT           reduce using rule 306 (selection_statement -> switch_statement .)
    YIELD           reduce using rule 306 (selection_statement -> switch_statement .)
    YIELD_FROM      reduce using rule 306 (selection_statement -> switch_statement .)
    CLASS           reduce using rule 306 (selection_statement -> switch_statement .)
    CLOSE_TAG       reduce using rule 306 (selection_statement -> switch_statement .)
    WHITESPACE      reduce using rule 306 (selection_statement -> switch_statement .)
    $end            reduce using rule 306 (selection_statement -> switch_statement .)
    OPEN_TAG        reduce using rule 306 (selection_statement -> switch_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 306 (selection_statement -> switch_statement .)
    RIGHT_CBRAC     reduce using rule 306 (selection_statement -> switch_statement .)
    ELSE            reduce using rule 306 (selection_statement -> switch_statement .)
    ELSEIF          reduce using rule 306 (selection_statement -> switch_statement .)
    ENDDECLARE      reduce using rule 306 (selection_statement -> switch_statement .)
    ENDWHILE        reduce using rule 306 (selection_statement -> switch_statement .)
    ENDFOR          reduce using rule 306 (selection_statement -> switch_statement .)
    CASE            reduce using rule 306 (selection_statement -> switch_statement .)
    DEFAULT         reduce using rule 306 (selection_statement -> switch_statement .)
    ENDSWITCH       reduce using rule 306 (selection_statement -> switch_statement .)
    ENDFOREACH      reduce using rule 306 (selection_statement -> switch_statement .)
    ENDIF           reduce using rule 306 (selection_statement -> switch_statement .)


state 38

    (336) iteration_statement -> while_statement .

    LEFT_CBRAC      reduce using rule 336 (iteration_statement -> while_statement .)
    SEMICOLON       reduce using rule 336 (iteration_statement -> while_statement .)
    TRY             reduce using rule 336 (iteration_statement -> while_statement .)
    DECLARE         reduce using rule 336 (iteration_statement -> while_statement .)
    ECHO            reduce using rule 336 (iteration_statement -> while_statement .)
    UNSET           reduce using rule 336 (iteration_statement -> while_statement .)
    CONST           reduce using rule 336 (iteration_statement -> while_statement .)
    INTERFACE       reduce using rule 336 (iteration_statement -> while_statement .)
    TRAIT           reduce using rule 336 (iteration_statement -> while_statement .)
    NAMESPACE       reduce using rule 336 (iteration_statement -> while_statement .)
    USE             reduce using rule 336 (iteration_statement -> while_statement .)
    GLOBAL          reduce using rule 336 (iteration_statement -> while_statement .)
    STATIC          reduce using rule 336 (iteration_statement -> while_statement .)
    STRING          reduce using rule 336 (iteration_statement -> while_statement .)
    IF              reduce using rule 336 (iteration_statement -> while_statement .)
    SWITCH          reduce using rule 336 (iteration_statement -> while_statement .)
    WHILE           reduce using rule 336 (iteration_statement -> while_statement .)
    DO              reduce using rule 336 (iteration_statement -> while_statement .)
    FOR             reduce using rule 336 (iteration_statement -> while_statement .)
    FOREACH         reduce using rule 336 (iteration_statement -> while_statement .)
    GOTO            reduce using rule 336 (iteration_statement -> while_statement .)
    CONTINUE        reduce using rule 336 (iteration_statement -> while_statement .)
    BREAK           reduce using rule 336 (iteration_statement -> while_statement .)
    RETURN          reduce using rule 336 (iteration_statement -> while_statement .)
    THROW           reduce using rule 336 (iteration_statement -> while_statement .)
    FUNCTION        reduce using rule 336 (iteration_statement -> while_statement .)
    INCLUDE         reduce using rule 336 (iteration_statement -> while_statement .)
    INCLUDE_ONCE    reduce using rule 336 (iteration_statement -> while_statement .)
    REQUIRE         reduce using rule 336 (iteration_statement -> while_statement .)
    REQUIRE_ONCE    reduce using rule 336 (iteration_statement -> while_statement .)
    ABSTRACT        reduce using rule 336 (iteration_statement -> while_statement .)
    FINAL           reduce using rule 336 (iteration_statement -> while_statement .)
    PRINT           reduce using rule 336 (iteration_statement -> while_statement .)
    YIELD           reduce using rule 336 (iteration_statement -> while_statement .)
    YIELD_FROM      reduce using rule 336 (iteration_statement -> while_statement .)
    CLASS           reduce using rule 336 (iteration_statement -> while_statement .)
    CLOSE_TAG       reduce using rule 336 (iteration_statement -> while_statement .)
    WHITESPACE      reduce using rule 336 (iteration_statement -> while_statement .)
    $end            reduce using rule 336 (iteration_statement -> while_statement .)
    OPEN_TAG        reduce using rule 336 (iteration_statement -> while_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 336 (iteration_statement -> while_statement .)
    RIGHT_CBRAC     reduce using rule 336 (iteration_statement -> while_statement .)
    ELSE            reduce using rule 336 (iteration_statement -> while_statement .)
    ELSEIF          reduce using rule 336 (iteration_statement -> while_statement .)
    ENDDECLARE      reduce using rule 336 (iteration_statement -> while_statement .)
    ENDWHILE        reduce using rule 336 (iteration_statement -> while_statement .)
    ENDFOR          reduce using rule 336 (iteration_statement -> while_statement .)
    CASE            reduce using rule 336 (iteration_statement -> while_statement .)
    DEFAULT         reduce using rule 336 (iteration_statement -> while_statement .)
    ENDSWITCH       reduce using rule 336 (iteration_statement -> while_statement .)
    ENDFOREACH      reduce using rule 336 (iteration_statement -> while_statement .)
    ENDIF           reduce using rule 336 (iteration_statement -> while_statement .)


state 39

    (337) iteration_statement -> do_statement .

    LEFT_CBRAC      reduce using rule 337 (iteration_statement -> do_statement .)
    SEMICOLON       reduce using rule 337 (iteration_statement -> do_statement .)
    TRY             reduce using rule 337 (iteration_statement -> do_statement .)
    DECLARE         reduce using rule 337 (iteration_statement -> do_statement .)
    ECHO            reduce using rule 337 (iteration_statement -> do_statement .)
    UNSET           reduce using rule 337 (iteration_statement -> do_statement .)
    CONST           reduce using rule 337 (iteration_statement -> do_statement .)
    INTERFACE       reduce using rule 337 (iteration_statement -> do_statement .)
    TRAIT           reduce using rule 337 (iteration_statement -> do_statement .)
    NAMESPACE       reduce using rule 337 (iteration_statement -> do_statement .)
    USE             reduce using rule 337 (iteration_statement -> do_statement .)
    GLOBAL          reduce using rule 337 (iteration_statement -> do_statement .)
    STATIC          reduce using rule 337 (iteration_statement -> do_statement .)
    STRING          reduce using rule 337 (iteration_statement -> do_statement .)
    IF              reduce using rule 337 (iteration_statement -> do_statement .)
    SWITCH          reduce using rule 337 (iteration_statement -> do_statement .)
    WHILE           reduce using rule 337 (iteration_statement -> do_statement .)
    DO              reduce using rule 337 (iteration_statement -> do_statement .)
    FOR             reduce using rule 337 (iteration_statement -> do_statement .)
    FOREACH         reduce using rule 337 (iteration_statement -> do_statement .)
    GOTO            reduce using rule 337 (iteration_statement -> do_statement .)
    CONTINUE        reduce using rule 337 (iteration_statement -> do_statement .)
    BREAK           reduce using rule 337 (iteration_statement -> do_statement .)
    RETURN          reduce using rule 337 (iteration_statement -> do_statement .)
    THROW           reduce using rule 337 (iteration_statement -> do_statement .)
    FUNCTION        reduce using rule 337 (iteration_statement -> do_statement .)
    INCLUDE         reduce using rule 337 (iteration_statement -> do_statement .)
    INCLUDE_ONCE    reduce using rule 337 (iteration_statement -> do_statement .)
    REQUIRE         reduce using rule 337 (iteration_statement -> do_statement .)
    REQUIRE_ONCE    reduce using rule 337 (iteration_statement -> do_statement .)
    ABSTRACT        reduce using rule 337 (iteration_statement -> do_statement .)
    FINAL           reduce using rule 337 (iteration_statement -> do_statement .)
    PRINT           reduce using rule 337 (iteration_statement -> do_statement .)
    YIELD           reduce using rule 337 (iteration_statement -> do_statement .)
    YIELD_FROM      reduce using rule 337 (iteration_statement -> do_statement .)
    CLASS           reduce using rule 337 (iteration_statement -> do_statement .)
    CLOSE_TAG       reduce using rule 337 (iteration_statement -> do_statement .)
    WHITESPACE      reduce using rule 337 (iteration_statement -> do_statement .)
    $end            reduce using rule 337 (iteration_statement -> do_statement .)
    OPEN_TAG        reduce using rule 337 (iteration_statement -> do_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 337 (iteration_statement -> do_statement .)
    RIGHT_CBRAC     reduce using rule 337 (iteration_statement -> do_statement .)
    ELSE            reduce using rule 337 (iteration_statement -> do_statement .)
    ELSEIF          reduce using rule 337 (iteration_statement -> do_statement .)
    ENDDECLARE      reduce using rule 337 (iteration_statement -> do_statement .)
    ENDWHILE        reduce using rule 337 (iteration_statement -> do_statement .)
    ENDFOR          reduce using rule 337 (iteration_statement -> do_statement .)
    CASE            reduce using rule 337 (iteration_statement -> do_statement .)
    DEFAULT         reduce using rule 337 (iteration_statement -> do_statement .)
    ENDSWITCH       reduce using rule 337 (iteration_statement -> do_statement .)
    ENDFOREACH      reduce using rule 337 (iteration_statement -> do_statement .)
    ENDIF           reduce using rule 337 (iteration_statement -> do_statement .)


state 40

    (338) iteration_statement -> for_statement .

    LEFT_CBRAC      reduce using rule 338 (iteration_statement -> for_statement .)
    SEMICOLON       reduce using rule 338 (iteration_statement -> for_statement .)
    TRY             reduce using rule 338 (iteration_statement -> for_statement .)
    DECLARE         reduce using rule 338 (iteration_statement -> for_statement .)
    ECHO            reduce using rule 338 (iteration_statement -> for_statement .)
    UNSET           reduce using rule 338 (iteration_statement -> for_statement .)
    CONST           reduce using rule 338 (iteration_statement -> for_statement .)
    INTERFACE       reduce using rule 338 (iteration_statement -> for_statement .)
    TRAIT           reduce using rule 338 (iteration_statement -> for_statement .)
    NAMESPACE       reduce using rule 338 (iteration_statement -> for_statement .)
    USE             reduce using rule 338 (iteration_statement -> for_statement .)
    GLOBAL          reduce using rule 338 (iteration_statement -> for_statement .)
    STATIC          reduce using rule 338 (iteration_statement -> for_statement .)
    STRING          reduce using rule 338 (iteration_statement -> for_statement .)
    IF              reduce using rule 338 (iteration_statement -> for_statement .)
    SWITCH          reduce using rule 338 (iteration_statement -> for_statement .)
    WHILE           reduce using rule 338 (iteration_statement -> for_statement .)
    DO              reduce using rule 338 (iteration_statement -> for_statement .)
    FOR             reduce using rule 338 (iteration_statement -> for_statement .)
    FOREACH         reduce using rule 338 (iteration_statement -> for_statement .)
    GOTO            reduce using rule 338 (iteration_statement -> for_statement .)
    CONTINUE        reduce using rule 338 (iteration_statement -> for_statement .)
    BREAK           reduce using rule 338 (iteration_statement -> for_statement .)
    RETURN          reduce using rule 338 (iteration_statement -> for_statement .)
    THROW           reduce using rule 338 (iteration_statement -> for_statement .)
    FUNCTION        reduce using rule 338 (iteration_statement -> for_statement .)
    INCLUDE         reduce using rule 338 (iteration_statement -> for_statement .)
    INCLUDE_ONCE    reduce using rule 338 (iteration_statement -> for_statement .)
    REQUIRE         reduce using rule 338 (iteration_statement -> for_statement .)
    REQUIRE_ONCE    reduce using rule 338 (iteration_statement -> for_statement .)
    ABSTRACT        reduce using rule 338 (iteration_statement -> for_statement .)
    FINAL           reduce using rule 338 (iteration_statement -> for_statement .)
    PRINT           reduce using rule 338 (iteration_statement -> for_statement .)
    YIELD           reduce using rule 338 (iteration_statement -> for_statement .)
    YIELD_FROM      reduce using rule 338 (iteration_statement -> for_statement .)
    CLASS           reduce using rule 338 (iteration_statement -> for_statement .)
    CLOSE_TAG       reduce using rule 338 (iteration_statement -> for_statement .)
    WHITESPACE      reduce using rule 338 (iteration_statement -> for_statement .)
    $end            reduce using rule 338 (iteration_statement -> for_statement .)
    OPEN_TAG        reduce using rule 338 (iteration_statement -> for_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 338 (iteration_statement -> for_statement .)
    RIGHT_CBRAC     reduce using rule 338 (iteration_statement -> for_statement .)
    ELSE            reduce using rule 338 (iteration_statement -> for_statement .)
    ELSEIF          reduce using rule 338 (iteration_statement -> for_statement .)
    ENDDECLARE      reduce using rule 338 (iteration_statement -> for_statement .)
    ENDWHILE        reduce using rule 338 (iteration_statement -> for_statement .)
    ENDFOR          reduce using rule 338 (iteration_statement -> for_statement .)
    CASE            reduce using rule 338 (iteration_statement -> for_statement .)
    DEFAULT         reduce using rule 338 (iteration_statement -> for_statement .)
    ENDSWITCH       reduce using rule 338 (iteration_statement -> for_statement .)
    ENDFOREACH      reduce using rule 338 (iteration_statement -> for_statement .)
    ENDIF           reduce using rule 338 (iteration_statement -> for_statement .)


state 41

    (339) iteration_statement -> foreach_statement .

    LEFT_CBRAC      reduce using rule 339 (iteration_statement -> foreach_statement .)
    SEMICOLON       reduce using rule 339 (iteration_statement -> foreach_statement .)
    TRY             reduce using rule 339 (iteration_statement -> foreach_statement .)
    DECLARE         reduce using rule 339 (iteration_statement -> foreach_statement .)
    ECHO            reduce using rule 339 (iteration_statement -> foreach_statement .)
    UNSET           reduce using rule 339 (iteration_statement -> foreach_statement .)
    CONST           reduce using rule 339 (iteration_statement -> foreach_statement .)
    INTERFACE       reduce using rule 339 (iteration_statement -> foreach_statement .)
    TRAIT           reduce using rule 339 (iteration_statement -> foreach_statement .)
    NAMESPACE       reduce using rule 339 (iteration_statement -> foreach_statement .)
    USE             reduce using rule 339 (iteration_statement -> foreach_statement .)
    GLOBAL          reduce using rule 339 (iteration_statement -> foreach_statement .)
    STATIC          reduce using rule 339 (iteration_statement -> foreach_statement .)
    STRING          reduce using rule 339 (iteration_statement -> foreach_statement .)
    IF              reduce using rule 339 (iteration_statement -> foreach_statement .)
    SWITCH          reduce using rule 339 (iteration_statement -> foreach_statement .)
    WHILE           reduce using rule 339 (iteration_statement -> foreach_statement .)
    DO              reduce using rule 339 (iteration_statement -> foreach_statement .)
    FOR             reduce using rule 339 (iteration_statement -> foreach_statement .)
    FOREACH         reduce using rule 339 (iteration_statement -> foreach_statement .)
    GOTO            reduce using rule 339 (iteration_statement -> foreach_statement .)
    CONTINUE        reduce using rule 339 (iteration_statement -> foreach_statement .)
    BREAK           reduce using rule 339 (iteration_statement -> foreach_statement .)
    RETURN          reduce using rule 339 (iteration_statement -> foreach_statement .)
    THROW           reduce using rule 339 (iteration_statement -> foreach_statement .)
    FUNCTION        reduce using rule 339 (iteration_statement -> foreach_statement .)
    INCLUDE         reduce using rule 339 (iteration_statement -> foreach_statement .)
    INCLUDE_ONCE    reduce using rule 339 (iteration_statement -> foreach_statement .)
    REQUIRE         reduce using rule 339 (iteration_statement -> foreach_statement .)
    REQUIRE_ONCE    reduce using rule 339 (iteration_statement -> foreach_statement .)
    ABSTRACT        reduce using rule 339 (iteration_statement -> foreach_statement .)
    FINAL           reduce using rule 339 (iteration_statement -> foreach_statement .)
    PRINT           reduce using rule 339 (iteration_statement -> foreach_statement .)
    YIELD           reduce using rule 339 (iteration_statement -> foreach_statement .)
    YIELD_FROM      reduce using rule 339 (iteration_statement -> foreach_statement .)
    CLASS           reduce using rule 339 (iteration_statement -> foreach_statement .)
    CLOSE_TAG       reduce using rule 339 (iteration_statement -> foreach_statement .)
    WHITESPACE      reduce using rule 339 (iteration_statement -> foreach_statement .)
    $end            reduce using rule 339 (iteration_statement -> foreach_statement .)
    OPEN_TAG        reduce using rule 339 (iteration_statement -> foreach_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 339 (iteration_statement -> foreach_statement .)
    RIGHT_CBRAC     reduce using rule 339 (iteration_statement -> foreach_statement .)
    ELSE            reduce using rule 339 (iteration_statement -> foreach_statement .)
    ELSEIF          reduce using rule 339 (iteration_statement -> foreach_statement .)
    ENDDECLARE      reduce using rule 339 (iteration_statement -> foreach_statement .)
    ENDWHILE        reduce using rule 339 (iteration_statement -> foreach_statement .)
    ENDFOR          reduce using rule 339 (iteration_statement -> foreach_statement .)
    CASE            reduce using rule 339 (iteration_statement -> foreach_statement .)
    DEFAULT         reduce using rule 339 (iteration_statement -> foreach_statement .)
    ENDSWITCH       reduce using rule 339 (iteration_statement -> foreach_statement .)
    ENDFOREACH      reduce using rule 339 (iteration_statement -> foreach_statement .)
    ENDIF           reduce using rule 339 (iteration_statement -> foreach_statement .)


state 42

    (373) jump_statement -> goto_statement .

    LEFT_CBRAC      reduce using rule 373 (jump_statement -> goto_statement .)
    SEMICOLON       reduce using rule 373 (jump_statement -> goto_statement .)
    TRY             reduce using rule 373 (jump_statement -> goto_statement .)
    DECLARE         reduce using rule 373 (jump_statement -> goto_statement .)
    ECHO            reduce using rule 373 (jump_statement -> goto_statement .)
    UNSET           reduce using rule 373 (jump_statement -> goto_statement .)
    CONST           reduce using rule 373 (jump_statement -> goto_statement .)
    INTERFACE       reduce using rule 373 (jump_statement -> goto_statement .)
    TRAIT           reduce using rule 373 (jump_statement -> goto_statement .)
    NAMESPACE       reduce using rule 373 (jump_statement -> goto_statement .)
    USE             reduce using rule 373 (jump_statement -> goto_statement .)
    GLOBAL          reduce using rule 373 (jump_statement -> goto_statement .)
    STATIC          reduce using rule 373 (jump_statement -> goto_statement .)
    STRING          reduce using rule 373 (jump_statement -> goto_statement .)
    IF              reduce using rule 373 (jump_statement -> goto_statement .)
    SWITCH          reduce using rule 373 (jump_statement -> goto_statement .)
    WHILE           reduce using rule 373 (jump_statement -> goto_statement .)
    DO              reduce using rule 373 (jump_statement -> goto_statement .)
    FOR             reduce using rule 373 (jump_statement -> goto_statement .)
    FOREACH         reduce using rule 373 (jump_statement -> goto_statement .)
    GOTO            reduce using rule 373 (jump_statement -> goto_statement .)
    CONTINUE        reduce using rule 373 (jump_statement -> goto_statement .)
    BREAK           reduce using rule 373 (jump_statement -> goto_statement .)
    RETURN          reduce using rule 373 (jump_statement -> goto_statement .)
    THROW           reduce using rule 373 (jump_statement -> goto_statement .)
    FUNCTION        reduce using rule 373 (jump_statement -> goto_statement .)
    INCLUDE         reduce using rule 373 (jump_statement -> goto_statement .)
    INCLUDE_ONCE    reduce using rule 373 (jump_statement -> goto_statement .)
    REQUIRE         reduce using rule 373 (jump_statement -> goto_statement .)
    REQUIRE_ONCE    reduce using rule 373 (jump_statement -> goto_statement .)
    ABSTRACT        reduce using rule 373 (jump_statement -> goto_statement .)
    FINAL           reduce using rule 373 (jump_statement -> goto_statement .)
    PRINT           reduce using rule 373 (jump_statement -> goto_statement .)
    YIELD           reduce using rule 373 (jump_statement -> goto_statement .)
    YIELD_FROM      reduce using rule 373 (jump_statement -> goto_statement .)
    CLASS           reduce using rule 373 (jump_statement -> goto_statement .)
    CLOSE_TAG       reduce using rule 373 (jump_statement -> goto_statement .)
    WHITESPACE      reduce using rule 373 (jump_statement -> goto_statement .)
    $end            reduce using rule 373 (jump_statement -> goto_statement .)
    OPEN_TAG        reduce using rule 373 (jump_statement -> goto_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 373 (jump_statement -> goto_statement .)
    RIGHT_CBRAC     reduce using rule 373 (jump_statement -> goto_statement .)
    ELSE            reduce using rule 373 (jump_statement -> goto_statement .)
    ELSEIF          reduce using rule 373 (jump_statement -> goto_statement .)
    ENDDECLARE      reduce using rule 373 (jump_statement -> goto_statement .)
    ENDWHILE        reduce using rule 373 (jump_statement -> goto_statement .)
    ENDFOR          reduce using rule 373 (jump_statement -> goto_statement .)
    CASE            reduce using rule 373 (jump_statement -> goto_statement .)
    DEFAULT         reduce using rule 373 (jump_statement -> goto_statement .)
    ENDSWITCH       reduce using rule 373 (jump_statement -> goto_statement .)
    ENDFOREACH      reduce using rule 373 (jump_statement -> goto_statement .)
    ENDIF           reduce using rule 373 (jump_statement -> goto_statement .)


state 43

    (374) jump_statement -> continue_statement .

    LEFT_CBRAC      reduce using rule 374 (jump_statement -> continue_statement .)
    SEMICOLON       reduce using rule 374 (jump_statement -> continue_statement .)
    TRY             reduce using rule 374 (jump_statement -> continue_statement .)
    DECLARE         reduce using rule 374 (jump_statement -> continue_statement .)
    ECHO            reduce using rule 374 (jump_statement -> continue_statement .)
    UNSET           reduce using rule 374 (jump_statement -> continue_statement .)
    CONST           reduce using rule 374 (jump_statement -> continue_statement .)
    INTERFACE       reduce using rule 374 (jump_statement -> continue_statement .)
    TRAIT           reduce using rule 374 (jump_statement -> continue_statement .)
    NAMESPACE       reduce using rule 374 (jump_statement -> continue_statement .)
    USE             reduce using rule 374 (jump_statement -> continue_statement .)
    GLOBAL          reduce using rule 374 (jump_statement -> continue_statement .)
    STATIC          reduce using rule 374 (jump_statement -> continue_statement .)
    STRING          reduce using rule 374 (jump_statement -> continue_statement .)
    IF              reduce using rule 374 (jump_statement -> continue_statement .)
    SWITCH          reduce using rule 374 (jump_statement -> continue_statement .)
    WHILE           reduce using rule 374 (jump_statement -> continue_statement .)
    DO              reduce using rule 374 (jump_statement -> continue_statement .)
    FOR             reduce using rule 374 (jump_statement -> continue_statement .)
    FOREACH         reduce using rule 374 (jump_statement -> continue_statement .)
    GOTO            reduce using rule 374 (jump_statement -> continue_statement .)
    CONTINUE        reduce using rule 374 (jump_statement -> continue_statement .)
    BREAK           reduce using rule 374 (jump_statement -> continue_statement .)
    RETURN          reduce using rule 374 (jump_statement -> continue_statement .)
    THROW           reduce using rule 374 (jump_statement -> continue_statement .)
    FUNCTION        reduce using rule 374 (jump_statement -> continue_statement .)
    INCLUDE         reduce using rule 374 (jump_statement -> continue_statement .)
    INCLUDE_ONCE    reduce using rule 374 (jump_statement -> continue_statement .)
    REQUIRE         reduce using rule 374 (jump_statement -> continue_statement .)
    REQUIRE_ONCE    reduce using rule 374 (jump_statement -> continue_statement .)
    ABSTRACT        reduce using rule 374 (jump_statement -> continue_statement .)
    FINAL           reduce using rule 374 (jump_statement -> continue_statement .)
    PRINT           reduce using rule 374 (jump_statement -> continue_statement .)
    YIELD           reduce using rule 374 (jump_statement -> continue_statement .)
    YIELD_FROM      reduce using rule 374 (jump_statement -> continue_statement .)
    CLASS           reduce using rule 374 (jump_statement -> continue_statement .)
    CLOSE_TAG       reduce using rule 374 (jump_statement -> continue_statement .)
    WHITESPACE      reduce using rule 374 (jump_statement -> continue_statement .)
    $end            reduce using rule 374 (jump_statement -> continue_statement .)
    OPEN_TAG        reduce using rule 374 (jump_statement -> continue_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 374 (jump_statement -> continue_statement .)
    RIGHT_CBRAC     reduce using rule 374 (jump_statement -> continue_statement .)
    ELSE            reduce using rule 374 (jump_statement -> continue_statement .)
    ELSEIF          reduce using rule 374 (jump_statement -> continue_statement .)
    ENDDECLARE      reduce using rule 374 (jump_statement -> continue_statement .)
    ENDWHILE        reduce using rule 374 (jump_statement -> continue_statement .)
    ENDFOR          reduce using rule 374 (jump_statement -> continue_statement .)
    CASE            reduce using rule 374 (jump_statement -> continue_statement .)
    DEFAULT         reduce using rule 374 (jump_statement -> continue_statement .)
    ENDSWITCH       reduce using rule 374 (jump_statement -> continue_statement .)
    ENDFOREACH      reduce using rule 374 (jump_statement -> continue_statement .)
    ENDIF           reduce using rule 374 (jump_statement -> continue_statement .)


state 44

    (375) jump_statement -> break_statement .

    LEFT_CBRAC      reduce using rule 375 (jump_statement -> break_statement .)
    SEMICOLON       reduce using rule 375 (jump_statement -> break_statement .)
    TRY             reduce using rule 375 (jump_statement -> break_statement .)
    DECLARE         reduce using rule 375 (jump_statement -> break_statement .)
    ECHO            reduce using rule 375 (jump_statement -> break_statement .)
    UNSET           reduce using rule 375 (jump_statement -> break_statement .)
    CONST           reduce using rule 375 (jump_statement -> break_statement .)
    INTERFACE       reduce using rule 375 (jump_statement -> break_statement .)
    TRAIT           reduce using rule 375 (jump_statement -> break_statement .)
    NAMESPACE       reduce using rule 375 (jump_statement -> break_statement .)
    USE             reduce using rule 375 (jump_statement -> break_statement .)
    GLOBAL          reduce using rule 375 (jump_statement -> break_statement .)
    STATIC          reduce using rule 375 (jump_statement -> break_statement .)
    STRING          reduce using rule 375 (jump_statement -> break_statement .)
    IF              reduce using rule 375 (jump_statement -> break_statement .)
    SWITCH          reduce using rule 375 (jump_statement -> break_statement .)
    WHILE           reduce using rule 375 (jump_statement -> break_statement .)
    DO              reduce using rule 375 (jump_statement -> break_statement .)
    FOR             reduce using rule 375 (jump_statement -> break_statement .)
    FOREACH         reduce using rule 375 (jump_statement -> break_statement .)
    GOTO            reduce using rule 375 (jump_statement -> break_statement .)
    CONTINUE        reduce using rule 375 (jump_statement -> break_statement .)
    BREAK           reduce using rule 375 (jump_statement -> break_statement .)
    RETURN          reduce using rule 375 (jump_statement -> break_statement .)
    THROW           reduce using rule 375 (jump_statement -> break_statement .)
    FUNCTION        reduce using rule 375 (jump_statement -> break_statement .)
    INCLUDE         reduce using rule 375 (jump_statement -> break_statement .)
    INCLUDE_ONCE    reduce using rule 375 (jump_statement -> break_statement .)
    REQUIRE         reduce using rule 375 (jump_statement -> break_statement .)
    REQUIRE_ONCE    reduce using rule 375 (jump_statement -> break_statement .)
    ABSTRACT        reduce using rule 375 (jump_statement -> break_statement .)
    FINAL           reduce using rule 375 (jump_statement -> break_statement .)
    PRINT           reduce using rule 375 (jump_statement -> break_statement .)
    YIELD           reduce using rule 375 (jump_statement -> break_statement .)
    YIELD_FROM      reduce using rule 375 (jump_statement -> break_statement .)
    CLASS           reduce using rule 375 (jump_statement -> break_statement .)
    CLOSE_TAG       reduce using rule 375 (jump_statement -> break_statement .)
    WHITESPACE      reduce using rule 375 (jump_statement -> break_statement .)
    $end            reduce using rule 375 (jump_statement -> break_statement .)
    OPEN_TAG        reduce using rule 375 (jump_statement -> break_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 375 (jump_statement -> break_statement .)
    RIGHT_CBRAC     reduce using rule 375 (jump_statement -> break_statement .)
    ELSE            reduce using rule 375 (jump_statement -> break_statement .)
    ELSEIF          reduce using rule 375 (jump_statement -> break_statement .)
    ENDDECLARE      reduce using rule 375 (jump_statement -> break_statement .)
    ENDWHILE        reduce using rule 375 (jump_statement -> break_statement .)
    ENDFOR          reduce using rule 375 (jump_statement -> break_statement .)
    CASE            reduce using rule 375 (jump_statement -> break_statement .)
    DEFAULT         reduce using rule 375 (jump_statement -> break_statement .)
    ENDSWITCH       reduce using rule 375 (jump_statement -> break_statement .)
    ENDFOREACH      reduce using rule 375 (jump_statement -> break_statement .)
    ENDIF           reduce using rule 375 (jump_statement -> break_statement .)


state 45

    (376) jump_statement -> return_statement .

    LEFT_CBRAC      reduce using rule 376 (jump_statement -> return_statement .)
    SEMICOLON       reduce using rule 376 (jump_statement -> return_statement .)
    TRY             reduce using rule 376 (jump_statement -> return_statement .)
    DECLARE         reduce using rule 376 (jump_statement -> return_statement .)
    ECHO            reduce using rule 376 (jump_statement -> return_statement .)
    UNSET           reduce using rule 376 (jump_statement -> return_statement .)
    CONST           reduce using rule 376 (jump_statement -> return_statement .)
    INTERFACE       reduce using rule 376 (jump_statement -> return_statement .)
    TRAIT           reduce using rule 376 (jump_statement -> return_statement .)
    NAMESPACE       reduce using rule 376 (jump_statement -> return_statement .)
    USE             reduce using rule 376 (jump_statement -> return_statement .)
    GLOBAL          reduce using rule 376 (jump_statement -> return_statement .)
    STATIC          reduce using rule 376 (jump_statement -> return_statement .)
    STRING          reduce using rule 376 (jump_statement -> return_statement .)
    IF              reduce using rule 376 (jump_statement -> return_statement .)
    SWITCH          reduce using rule 376 (jump_statement -> return_statement .)
    WHILE           reduce using rule 376 (jump_statement -> return_statement .)
    DO              reduce using rule 376 (jump_statement -> return_statement .)
    FOR             reduce using rule 376 (jump_statement -> return_statement .)
    FOREACH         reduce using rule 376 (jump_statement -> return_statement .)
    GOTO            reduce using rule 376 (jump_statement -> return_statement .)
    CONTINUE        reduce using rule 376 (jump_statement -> return_statement .)
    BREAK           reduce using rule 376 (jump_statement -> return_statement .)
    RETURN          reduce using rule 376 (jump_statement -> return_statement .)
    THROW           reduce using rule 376 (jump_statement -> return_statement .)
    FUNCTION        reduce using rule 376 (jump_statement -> return_statement .)
    INCLUDE         reduce using rule 376 (jump_statement -> return_statement .)
    INCLUDE_ONCE    reduce using rule 376 (jump_statement -> return_statement .)
    REQUIRE         reduce using rule 376 (jump_statement -> return_statement .)
    REQUIRE_ONCE    reduce using rule 376 (jump_statement -> return_statement .)
    ABSTRACT        reduce using rule 376 (jump_statement -> return_statement .)
    FINAL           reduce using rule 376 (jump_statement -> return_statement .)
    PRINT           reduce using rule 376 (jump_statement -> return_statement .)
    YIELD           reduce using rule 376 (jump_statement -> return_statement .)
    YIELD_FROM      reduce using rule 376 (jump_statement -> return_statement .)
    CLASS           reduce using rule 376 (jump_statement -> return_statement .)
    CLOSE_TAG       reduce using rule 376 (jump_statement -> return_statement .)
    WHITESPACE      reduce using rule 376 (jump_statement -> return_statement .)
    $end            reduce using rule 376 (jump_statement -> return_statement .)
    OPEN_TAG        reduce using rule 376 (jump_statement -> return_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 376 (jump_statement -> return_statement .)
    RIGHT_CBRAC     reduce using rule 376 (jump_statement -> return_statement .)
    ELSE            reduce using rule 376 (jump_statement -> return_statement .)
    ELSEIF          reduce using rule 376 (jump_statement -> return_statement .)
    ENDDECLARE      reduce using rule 376 (jump_statement -> return_statement .)
    ENDWHILE        reduce using rule 376 (jump_statement -> return_statement .)
    ENDFOR          reduce using rule 376 (jump_statement -> return_statement .)
    CASE            reduce using rule 376 (jump_statement -> return_statement .)
    DEFAULT         reduce using rule 376 (jump_statement -> return_statement .)
    ENDSWITCH       reduce using rule 376 (jump_statement -> return_statement .)
    ENDFOREACH      reduce using rule 376 (jump_statement -> return_statement .)
    ENDIF           reduce using rule 376 (jump_statement -> return_statement .)


state 46

    (377) jump_statement -> throw_statement .

    LEFT_CBRAC      reduce using rule 377 (jump_statement -> throw_statement .)
    SEMICOLON       reduce using rule 377 (jump_statement -> throw_statement .)
    TRY             reduce using rule 377 (jump_statement -> throw_statement .)
    DECLARE         reduce using rule 377 (jump_statement -> throw_statement .)
    ECHO            reduce using rule 377 (jump_statement -> throw_statement .)
    UNSET           reduce using rule 377 (jump_statement -> throw_statement .)
    CONST           reduce using rule 377 (jump_statement -> throw_statement .)
    INTERFACE       reduce using rule 377 (jump_statement -> throw_statement .)
    TRAIT           reduce using rule 377 (jump_statement -> throw_statement .)
    NAMESPACE       reduce using rule 377 (jump_statement -> throw_statement .)
    USE             reduce using rule 377 (jump_statement -> throw_statement .)
    GLOBAL          reduce using rule 377 (jump_statement -> throw_statement .)
    STATIC          reduce using rule 377 (jump_statement -> throw_statement .)
    STRING          reduce using rule 377 (jump_statement -> throw_statement .)
    IF              reduce using rule 377 (jump_statement -> throw_statement .)
    SWITCH          reduce using rule 377 (jump_statement -> throw_statement .)
    WHILE           reduce using rule 377 (jump_statement -> throw_statement .)
    DO              reduce using rule 377 (jump_statement -> throw_statement .)
    FOR             reduce using rule 377 (jump_statement -> throw_statement .)
    FOREACH         reduce using rule 377 (jump_statement -> throw_statement .)
    GOTO            reduce using rule 377 (jump_statement -> throw_statement .)
    CONTINUE        reduce using rule 377 (jump_statement -> throw_statement .)
    BREAK           reduce using rule 377 (jump_statement -> throw_statement .)
    RETURN          reduce using rule 377 (jump_statement -> throw_statement .)
    THROW           reduce using rule 377 (jump_statement -> throw_statement .)
    FUNCTION        reduce using rule 377 (jump_statement -> throw_statement .)
    INCLUDE         reduce using rule 377 (jump_statement -> throw_statement .)
    INCLUDE_ONCE    reduce using rule 377 (jump_statement -> throw_statement .)
    REQUIRE         reduce using rule 377 (jump_statement -> throw_statement .)
    REQUIRE_ONCE    reduce using rule 377 (jump_statement -> throw_statement .)
    ABSTRACT        reduce using rule 377 (jump_statement -> throw_statement .)
    FINAL           reduce using rule 377 (jump_statement -> throw_statement .)
    PRINT           reduce using rule 377 (jump_statement -> throw_statement .)
    YIELD           reduce using rule 377 (jump_statement -> throw_statement .)
    YIELD_FROM      reduce using rule 377 (jump_statement -> throw_statement .)
    CLASS           reduce using rule 377 (jump_statement -> throw_statement .)
    CLOSE_TAG       reduce using rule 377 (jump_statement -> throw_statement .)
    WHITESPACE      reduce using rule 377 (jump_statement -> throw_statement .)
    $end            reduce using rule 377 (jump_statement -> throw_statement .)
    OPEN_TAG        reduce using rule 377 (jump_statement -> throw_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 377 (jump_statement -> throw_statement .)
    RIGHT_CBRAC     reduce using rule 377 (jump_statement -> throw_statement .)
    ELSE            reduce using rule 377 (jump_statement -> throw_statement .)
    ELSEIF          reduce using rule 377 (jump_statement -> throw_statement .)
    ENDDECLARE      reduce using rule 377 (jump_statement -> throw_statement .)
    ENDWHILE        reduce using rule 377 (jump_statement -> throw_statement .)
    ENDFOR          reduce using rule 377 (jump_statement -> throw_statement .)
    CASE            reduce using rule 377 (jump_statement -> throw_statement .)
    DEFAULT         reduce using rule 377 (jump_statement -> throw_statement .)
    ENDSWITCH       reduce using rule 377 (jump_statement -> throw_statement .)
    ENDFOREACH      reduce using rule 377 (jump_statement -> throw_statement .)
    ENDIF           reduce using rule 377 (jump_statement -> throw_statement .)


state 47

    (391) try_statement -> TRY . compound_statement catch_clauses
    (392) try_statement -> TRY . compound_statement finally_clause
    (393) try_statement -> TRY . compound_statement catch_clauses finally_clause
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 100

state 48

    (400) declare_statement -> DECLARE . LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> DECLARE . LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> DECLARE . LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 101


state 49

    (406) echo_statement -> ECHO . expression_list SEMICOLON
    (407) expression_list -> . expression
    (408) expression_list -> . expression_list expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression_list                shift and go to state 102
    expression                     shift and go to state 103
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 50

    (409) unset_statement -> UNSET . LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> UNSET . LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 105


state 51

    (464) const_declaration -> CONST . const_elements SEMICOLON
    (466) const_elements -> . const_element
    (467) const_elements -> . const_elements const_element
    (468) const_element -> . name EQUAL constant_expression
    (564) name -> . STRING

    STRING          shift and go to state 109

    const_elements                 shift and go to state 106
    const_element                  shift and go to state 107
    name                           shift and go to state 108

state 52

    (411) function_definition -> function_definition_header . compound_statement
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 110

state 53

    (442) class_declaration -> class_modifieropt . CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC

    CLASS           shift and go to state 111


state 54

    (498) interface_declaration -> INTERFACE . name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 112

state 55

    (509) trait_declaration -> TRAIT . name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 113

state 56

    (539) namespace_definition -> NAMESPACE . namespace_name SEMICOLON
    (540) namespace_definition -> NAMESPACE . namespace_nameopt compound_statement
    (15) namespace_name -> . NAME
    (16) namespace_name -> . namespace_name NS_SEPARATOR NAME
    (541) namespace_nameopt -> . namespace_name
    (542) namespace_nameopt -> .

    NAME            shift and go to state 116
    LEFT_CBRAC      reduce using rule 542 (namespace_nameopt -> .)

    namespace_name                 shift and go to state 114
    namespace_nameopt              shift and go to state 115

state 57

    (543) namespace_use_declaration -> USE . namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> USE . namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> USE . NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (546) namespace_function_or_constopt -> . namespace_function_or_const
    (547) namespace_function_or_constopt -> .
    (556) namespace_function_or_const -> . FUNCTION
    (557) namespace_function_or_const -> . CONST
    (548) NS_SEPARATORopt -> . NS_SEPARATOR
    (549) NS_SEPARATORopt -> .

    STRING          reduce using rule 547 (namespace_function_or_constopt -> .)
    FUNCTION        shift and go to state 121
    CONST           shift and go to state 122
    NS_SEPARATOR    shift and go to state 120
    NAME            reduce using rule 549 (NS_SEPARATORopt -> .)

    namespace_function_or_constopt shift and go to state 117
    namespace_function_or_const    shift and go to state 118
    NS_SEPARATORopt                shift and go to state 119

state 58

    (25) global_declaration -> GLOBAL . variable_name_list SEMICOLON
    (26) variable_name_list -> . simple_variable
    (27) variable_name_list -> . variable_name_list simple_variable
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    variable_name_list             shift and go to state 123
    simple_variable                shift and go to state 124

state 59

    (17) function_static_declaration -> STATIC . static_variable_name_list SEMICOLON
    (18) static_variable_name_list -> . static_variable_declaration
    (19) static_variable_name_list -> . static_variable_name_list static_variable_declaration
    (20) static_variable_declaration -> . VARIABLE function_static_initializer_opt

    VARIABLE        shift and go to state 129

    static_variable_name_list      shift and go to state 127
    static_variable_declaration    shift and go to state 128

state 60

    (564) name -> STRING .
    (270) expression -> STRING .

    DOUBLE_POINT    reduce using rule 564 (name -> STRING .)
    SEMICOLON       reduce using rule 270 (expression -> STRING .)


state 61

    (268) expression -> logical_inc_OR_expression_2 .
    (267) logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 . OR logical_exc_OR_expression

    SEMICOLON       reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    STRING          reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    INCLUDE         reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    INCLUDE_ONCE    reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    REQUIRE         reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    REQUIRE_ONCE    reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    PRINT           reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    YIELD           reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    YIELD_FROM      reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    RIGHT_PARENTHESIS reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    COLON           reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    AS              reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    ARROW           reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    RIGHT_CBRAC     reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    VARIABLE        reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    DOUBLE_POINT    reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    DOUBLE_ARROW    reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    ELLIPSIS        reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    TERNARY_OPERATION reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    AMPERSAND       reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    ARRAY           reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    CALLABLE        reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    ITERABLE        reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    BOOL            reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    FLOAT           reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    INT             reduce using rule 268 (expression -> logical_inc_OR_expression_2 .)
    OR              shift and go to state 130


state 62

    (269) expression -> include_expression .

    SEMICOLON       reduce using rule 269 (expression -> include_expression .)
    STRING          reduce using rule 269 (expression -> include_expression .)
    INCLUDE         reduce using rule 269 (expression -> include_expression .)
    INCLUDE_ONCE    reduce using rule 269 (expression -> include_expression .)
    REQUIRE         reduce using rule 269 (expression -> include_expression .)
    REQUIRE_ONCE    reduce using rule 269 (expression -> include_expression .)
    PRINT           reduce using rule 269 (expression -> include_expression .)
    YIELD           reduce using rule 269 (expression -> include_expression .)
    YIELD_FROM      reduce using rule 269 (expression -> include_expression .)
    RIGHT_PARENTHESIS reduce using rule 269 (expression -> include_expression .)
    COLON           reduce using rule 269 (expression -> include_expression .)
    AS              reduce using rule 269 (expression -> include_expression .)
    ARROW           reduce using rule 269 (expression -> include_expression .)
    RIGHT_CBRAC     reduce using rule 269 (expression -> include_expression .)
    VARIABLE        reduce using rule 269 (expression -> include_expression .)
    DOUBLE_POINT    reduce using rule 269 (expression -> include_expression .)
    DOUBLE_ARROW    reduce using rule 269 (expression -> include_expression .)
    ELLIPSIS        reduce using rule 269 (expression -> include_expression .)
    TERNARY_OPERATION reduce using rule 269 (expression -> include_expression .)
    AMPERSAND       reduce using rule 269 (expression -> include_expression .)
    ARRAY           reduce using rule 269 (expression -> include_expression .)
    CALLABLE        reduce using rule 269 (expression -> include_expression .)
    ITERABLE        reduce using rule 269 (expression -> include_expression .)
    BOOL            reduce using rule 269 (expression -> include_expression .)
    FLOAT           reduce using rule 269 (expression -> include_expression .)
    INT             reduce using rule 269 (expression -> include_expression .)


state 63

    (271) expression -> include_once_expression .

    SEMICOLON       reduce using rule 271 (expression -> include_once_expression .)
    STRING          reduce using rule 271 (expression -> include_once_expression .)
    INCLUDE         reduce using rule 271 (expression -> include_once_expression .)
    INCLUDE_ONCE    reduce using rule 271 (expression -> include_once_expression .)
    REQUIRE         reduce using rule 271 (expression -> include_once_expression .)
    REQUIRE_ONCE    reduce using rule 271 (expression -> include_once_expression .)
    PRINT           reduce using rule 271 (expression -> include_once_expression .)
    YIELD           reduce using rule 271 (expression -> include_once_expression .)
    YIELD_FROM      reduce using rule 271 (expression -> include_once_expression .)
    RIGHT_PARENTHESIS reduce using rule 271 (expression -> include_once_expression .)
    COLON           reduce using rule 271 (expression -> include_once_expression .)
    AS              reduce using rule 271 (expression -> include_once_expression .)
    ARROW           reduce using rule 271 (expression -> include_once_expression .)
    RIGHT_CBRAC     reduce using rule 271 (expression -> include_once_expression .)
    VARIABLE        reduce using rule 271 (expression -> include_once_expression .)
    DOUBLE_POINT    reduce using rule 271 (expression -> include_once_expression .)
    DOUBLE_ARROW    reduce using rule 271 (expression -> include_once_expression .)
    ELLIPSIS        reduce using rule 271 (expression -> include_once_expression .)
    TERNARY_OPERATION reduce using rule 271 (expression -> include_once_expression .)
    AMPERSAND       reduce using rule 271 (expression -> include_once_expression .)
    ARRAY           reduce using rule 271 (expression -> include_once_expression .)
    CALLABLE        reduce using rule 271 (expression -> include_once_expression .)
    ITERABLE        reduce using rule 271 (expression -> include_once_expression .)
    BOOL            reduce using rule 271 (expression -> include_once_expression .)
    FLOAT           reduce using rule 271 (expression -> include_once_expression .)
    INT             reduce using rule 271 (expression -> include_once_expression .)


state 64

    (272) expression -> require_expression .

    SEMICOLON       reduce using rule 272 (expression -> require_expression .)
    STRING          reduce using rule 272 (expression -> require_expression .)
    INCLUDE         reduce using rule 272 (expression -> require_expression .)
    INCLUDE_ONCE    reduce using rule 272 (expression -> require_expression .)
    REQUIRE         reduce using rule 272 (expression -> require_expression .)
    REQUIRE_ONCE    reduce using rule 272 (expression -> require_expression .)
    PRINT           reduce using rule 272 (expression -> require_expression .)
    YIELD           reduce using rule 272 (expression -> require_expression .)
    YIELD_FROM      reduce using rule 272 (expression -> require_expression .)
    RIGHT_PARENTHESIS reduce using rule 272 (expression -> require_expression .)
    COLON           reduce using rule 272 (expression -> require_expression .)
    AS              reduce using rule 272 (expression -> require_expression .)
    ARROW           reduce using rule 272 (expression -> require_expression .)
    RIGHT_CBRAC     reduce using rule 272 (expression -> require_expression .)
    VARIABLE        reduce using rule 272 (expression -> require_expression .)
    DOUBLE_POINT    reduce using rule 272 (expression -> require_expression .)
    DOUBLE_ARROW    reduce using rule 272 (expression -> require_expression .)
    ELLIPSIS        reduce using rule 272 (expression -> require_expression .)
    TERNARY_OPERATION reduce using rule 272 (expression -> require_expression .)
    AMPERSAND       reduce using rule 272 (expression -> require_expression .)
    ARRAY           reduce using rule 272 (expression -> require_expression .)
    CALLABLE        reduce using rule 272 (expression -> require_expression .)
    ITERABLE        reduce using rule 272 (expression -> require_expression .)
    BOOL            reduce using rule 272 (expression -> require_expression .)
    FLOAT           reduce using rule 272 (expression -> require_expression .)
    INT             reduce using rule 272 (expression -> require_expression .)


state 65

    (273) expression -> require_once_expression .

    SEMICOLON       reduce using rule 273 (expression -> require_once_expression .)
    STRING          reduce using rule 273 (expression -> require_once_expression .)
    INCLUDE         reduce using rule 273 (expression -> require_once_expression .)
    INCLUDE_ONCE    reduce using rule 273 (expression -> require_once_expression .)
    REQUIRE         reduce using rule 273 (expression -> require_once_expression .)
    REQUIRE_ONCE    reduce using rule 273 (expression -> require_once_expression .)
    PRINT           reduce using rule 273 (expression -> require_once_expression .)
    YIELD           reduce using rule 273 (expression -> require_once_expression .)
    YIELD_FROM      reduce using rule 273 (expression -> require_once_expression .)
    RIGHT_PARENTHESIS reduce using rule 273 (expression -> require_once_expression .)
    COLON           reduce using rule 273 (expression -> require_once_expression .)
    AS              reduce using rule 273 (expression -> require_once_expression .)
    ARROW           reduce using rule 273 (expression -> require_once_expression .)
    RIGHT_CBRAC     reduce using rule 273 (expression -> require_once_expression .)
    VARIABLE        reduce using rule 273 (expression -> require_once_expression .)
    DOUBLE_POINT    reduce using rule 273 (expression -> require_once_expression .)
    DOUBLE_ARROW    reduce using rule 273 (expression -> require_once_expression .)
    ELLIPSIS        reduce using rule 273 (expression -> require_once_expression .)
    TERNARY_OPERATION reduce using rule 273 (expression -> require_once_expression .)
    AMPERSAND       reduce using rule 273 (expression -> require_once_expression .)
    ARRAY           reduce using rule 273 (expression -> require_once_expression .)
    CALLABLE        reduce using rule 273 (expression -> require_once_expression .)
    ITERABLE        reduce using rule 273 (expression -> require_once_expression .)
    BOOL            reduce using rule 273 (expression -> require_once_expression .)
    FLOAT           reduce using rule 273 (expression -> require_once_expression .)
    INT             reduce using rule 273 (expression -> require_once_expression .)


state 66

    (307) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON

    LEFT_PARENTHESIS shift and go to state 131


state 67

    (322) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> SWITCH . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON

    LEFT_PARENTHESIS shift and go to state 132


state 68

    (340) while_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON

    LEFT_PARENTHESIS shift and go to state 133


state 69

    (342) do_statement -> DO . statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 134
    expression                     shift and go to state 34
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 70

    (343) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> FOR . LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> FOR . LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    LEFT_PARENTHESIS shift and go to state 135


state 71

    (364) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> FOREACH . LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    LEFT_PARENTHESIS shift and go to state 136


state 72

    (378) goto_statement -> GOTO . name SEMICOLON
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 137

state 73

    (379) continue_statement -> CONTINUE . breakout_level SEMICOLON
    (380) continue_statement -> CONTINUE . SEMICOLON
    (381) breakout_level -> . INTEGER_LITERAL
    (382) breakout_level -> . LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
    (386) breakout_level -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 139
    INTEGER_LITERAL shift and go to state 140
    LEFT_PARENTHESIS shift and go to state 141
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    breakout_level                 shift and go to state 138
    expression                     shift and go to state 142
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 74

    (383) break_statement -> BREAK . breakout_levelopt SEMICOLON
    (384) breakout_levelopt -> . breakout_level
    (385) breakout_levelopt -> .
    (381) breakout_level -> . INTEGER_LITERAL
    (382) breakout_level -> . LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
    (386) breakout_level -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       reduce using rule 385 (breakout_levelopt -> .)
    INTEGER_LITERAL shift and go to state 140
    LEFT_PARENTHESIS shift and go to state 141
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    breakout_levelopt              shift and go to state 143
    breakout_level                 shift and go to state 144
    expression                     shift and go to state 142
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 75

    (387) return_statement -> RETURN . expressionopt SEMICOLON
    (388) expressionopt -> . expression
    (389) expressionopt -> .
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       reduce using rule 389 (expressionopt -> .)
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expressionopt                  shift and go to state 145
    expression                     shift and go to state 146
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 76

    (390) throw_statement -> THROW . expression SEMICOLON
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 147
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 77

    (412) function_definition_header -> FUNCTION . ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (413) ampersandopt -> . AMPERSAND
    (414) ampersandopt -> .

    AMPERSAND       shift and go to state 149
    STRING          reduce using rule 414 (ampersandopt -> .)

    ampersandopt                   shift and go to state 148

state 78

    (443) class_modifieropt -> class_modifier .

    CLASS           reduce using rule 443 (class_modifieropt -> class_modifier .)


state 79

    (266) logical_inc_OR_expression_2 -> logical_exc_OR_expression .
    (265) logical_exc_OR_expression -> logical_exc_OR_expression . XOR logical_AND_expression_2

    OR              reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    SEMICOLON       reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    STRING          reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    INCLUDE         reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    REQUIRE         reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    PRINT           reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    YIELD           reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    YIELD_FROM      reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    COLON           reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    AS              reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ARROW           reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    VARIABLE        reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ELLIPSIS        reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    AMPERSAND       reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ARRAY           reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    CALLABLE        reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    ITERABLE        reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    BOOL            reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    FLOAT           reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    INT             reduce using rule 266 (logical_inc_OR_expression_2 -> logical_exc_OR_expression .)
    XOR             shift and go to state 150


state 80

    (274) include_expression -> INCLUDE . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 151
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 81

    (275) include_once_expression -> INCLUDE_ONCE . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 152
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 82

    (276) require_expression -> REQUIRE . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 153
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 83

    (277) require_once_expression -> REQUIRE_ONCE . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 154
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 84

    (451) class_modifier -> ABSTRACT .

    CLASS           reduce using rule 451 (class_modifier -> ABSTRACT .)
    FUNCTION        reduce using rule 451 (class_modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 451 (class_modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 451 (class_modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 451 (class_modifier -> ABSTRACT .)
    STATIC          reduce using rule 451 (class_modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 451 (class_modifier -> ABSTRACT .)
    FINAL           reduce using rule 451 (class_modifier -> ABSTRACT .)


state 85

    (452) class_modifier -> FINAL .

    CLASS           reduce using rule 452 (class_modifier -> FINAL .)
    FUNCTION        reduce using rule 452 (class_modifier -> FINAL .)
    PUBLIC          reduce using rule 452 (class_modifier -> FINAL .)
    PROTECTED       reduce using rule 452 (class_modifier -> FINAL .)
    PRIVATE         reduce using rule 452 (class_modifier -> FINAL .)
    STATIC          reduce using rule 452 (class_modifier -> FINAL .)
    ABSTRACT        reduce using rule 452 (class_modifier -> FINAL .)
    FINAL           reduce using rule 452 (class_modifier -> FINAL .)


state 86

    (264) logical_exc_OR_expression -> logical_AND_expression_2 .
    (263) logical_AND_expression_2 -> logical_AND_expression_2 . AND yield_expression

    XOR             reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    OR              reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    SEMICOLON       reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    STRING          reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    INCLUDE         reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    INCLUDE_ONCE    reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    REQUIRE         reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    REQUIRE_ONCE    reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    PRINT           reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    YIELD           reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    YIELD_FROM      reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    RIGHT_PARENTHESIS reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    COLON           reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    AS              reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ARROW           reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    RIGHT_CBRAC     reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    VARIABLE        reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    DOUBLE_POINT    reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    DOUBLE_ARROW    reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ELLIPSIS        reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    TERNARY_OPERATION reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    AMPERSAND       reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ARRAY           reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    CALLABLE        reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    ITERABLE        reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    BOOL            reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    FLOAT           reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    INT             reduce using rule 264 (logical_exc_OR_expression -> logical_AND_expression_2 .)
    AND             shift and go to state 155


state 87

    (262) logical_AND_expression_2 -> print_expression .

    AND             reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    XOR             reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    OR              reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    SEMICOLON       reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    STRING          reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    INCLUDE         reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    INCLUDE_ONCE    reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    REQUIRE         reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    REQUIRE_ONCE    reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    PRINT           reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    YIELD           reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    YIELD_FROM      reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    RIGHT_PARENTHESIS reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    COLON           reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    AS              reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    ARROW           reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    RIGHT_CBRAC     reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    VARIABLE        reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    DOUBLE_POINT    reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    DOUBLE_ARROW    reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    ELLIPSIS        reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    TERNARY_OPERATION reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    AMPERSAND       reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    ARRAY           reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    CALLABLE        reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    ITERABLE        reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    BOOL            reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    FLOAT           reduce using rule 262 (logical_AND_expression_2 -> print_expression .)
    INT             reduce using rule 262 (logical_AND_expression_2 -> print_expression .)


state 88

    (260) print_expression -> yield_expression .

    AND             reduce using rule 260 (print_expression -> yield_expression .)
    XOR             reduce using rule 260 (print_expression -> yield_expression .)
    OR              reduce using rule 260 (print_expression -> yield_expression .)
    SEMICOLON       reduce using rule 260 (print_expression -> yield_expression .)
    STRING          reduce using rule 260 (print_expression -> yield_expression .)
    INCLUDE         reduce using rule 260 (print_expression -> yield_expression .)
    INCLUDE_ONCE    reduce using rule 260 (print_expression -> yield_expression .)
    REQUIRE         reduce using rule 260 (print_expression -> yield_expression .)
    REQUIRE_ONCE    reduce using rule 260 (print_expression -> yield_expression .)
    PRINT           reduce using rule 260 (print_expression -> yield_expression .)
    YIELD           reduce using rule 260 (print_expression -> yield_expression .)
    YIELD_FROM      reduce using rule 260 (print_expression -> yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 260 (print_expression -> yield_expression .)
    COLON           reduce using rule 260 (print_expression -> yield_expression .)
    AS              reduce using rule 260 (print_expression -> yield_expression .)
    ARROW           reduce using rule 260 (print_expression -> yield_expression .)
    RIGHT_CBRAC     reduce using rule 260 (print_expression -> yield_expression .)
    VARIABLE        reduce using rule 260 (print_expression -> yield_expression .)
    DOUBLE_POINT    reduce using rule 260 (print_expression -> yield_expression .)
    DOUBLE_ARROW    reduce using rule 260 (print_expression -> yield_expression .)
    ELLIPSIS        reduce using rule 260 (print_expression -> yield_expression .)
    TERNARY_OPERATION reduce using rule 260 (print_expression -> yield_expression .)
    AMPERSAND       reduce using rule 260 (print_expression -> yield_expression .)
    ARRAY           reduce using rule 260 (print_expression -> yield_expression .)
    CALLABLE        reduce using rule 260 (print_expression -> yield_expression .)
    ITERABLE        reduce using rule 260 (print_expression -> yield_expression .)
    BOOL            reduce using rule 260 (print_expression -> yield_expression .)
    FLOAT           reduce using rule 260 (print_expression -> yield_expression .)
    INT             reduce using rule 260 (print_expression -> yield_expression .)


state 89

    (261) print_expression -> PRINT . print_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    print_expression               shift and go to state 156
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 90

    (256) yield_expression -> yield_from_expression .

    AND             reduce using rule 256 (yield_expression -> yield_from_expression .)
    XOR             reduce using rule 256 (yield_expression -> yield_from_expression .)
    OR              reduce using rule 256 (yield_expression -> yield_from_expression .)
    SEMICOLON       reduce using rule 256 (yield_expression -> yield_from_expression .)
    STRING          reduce using rule 256 (yield_expression -> yield_from_expression .)
    INCLUDE         reduce using rule 256 (yield_expression -> yield_from_expression .)
    INCLUDE_ONCE    reduce using rule 256 (yield_expression -> yield_from_expression .)
    REQUIRE         reduce using rule 256 (yield_expression -> yield_from_expression .)
    REQUIRE_ONCE    reduce using rule 256 (yield_expression -> yield_from_expression .)
    PRINT           reduce using rule 256 (yield_expression -> yield_from_expression .)
    YIELD           reduce using rule 256 (yield_expression -> yield_from_expression .)
    YIELD_FROM      reduce using rule 256 (yield_expression -> yield_from_expression .)
    RIGHT_PARENTHESIS reduce using rule 256 (yield_expression -> yield_from_expression .)
    COLON           reduce using rule 256 (yield_expression -> yield_from_expression .)
    AS              reduce using rule 256 (yield_expression -> yield_from_expression .)
    ARROW           reduce using rule 256 (yield_expression -> yield_from_expression .)
    RIGHT_CBRAC     reduce using rule 256 (yield_expression -> yield_from_expression .)
    VARIABLE        reduce using rule 256 (yield_expression -> yield_from_expression .)
    DOUBLE_POINT    reduce using rule 256 (yield_expression -> yield_from_expression .)
    DOUBLE_ARROW    reduce using rule 256 (yield_expression -> yield_from_expression .)
    ELLIPSIS        reduce using rule 256 (yield_expression -> yield_from_expression .)
    TERNARY_OPERATION reduce using rule 256 (yield_expression -> yield_from_expression .)
    AMPERSAND       reduce using rule 256 (yield_expression -> yield_from_expression .)
    ARRAY           reduce using rule 256 (yield_expression -> yield_from_expression .)
    CALLABLE        reduce using rule 256 (yield_expression -> yield_from_expression .)
    ITERABLE        reduce using rule 256 (yield_expression -> yield_from_expression .)
    BOOL            reduce using rule 256 (yield_expression -> yield_from_expression .)
    FLOAT           reduce using rule 256 (yield_expression -> yield_from_expression .)
    INT             reduce using rule 256 (yield_expression -> yield_from_expression .)


state 91

    (257) yield_expression -> YIELD .
    (258) yield_expression -> YIELD . yield_expression
    (259) yield_expression -> YIELD . yield_from_expression DOUBLE_ARROW yield_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    AND             reduce using rule 257 (yield_expression -> YIELD .)
    XOR             reduce using rule 257 (yield_expression -> YIELD .)
    OR              reduce using rule 257 (yield_expression -> YIELD .)
    SEMICOLON       reduce using rule 257 (yield_expression -> YIELD .)
    STRING          reduce using rule 257 (yield_expression -> YIELD .)
    INCLUDE         reduce using rule 257 (yield_expression -> YIELD .)
    INCLUDE_ONCE    reduce using rule 257 (yield_expression -> YIELD .)
    REQUIRE         reduce using rule 257 (yield_expression -> YIELD .)
    REQUIRE_ONCE    reduce using rule 257 (yield_expression -> YIELD .)
    PRINT           reduce using rule 257 (yield_expression -> YIELD .)
    RIGHT_PARENTHESIS reduce using rule 257 (yield_expression -> YIELD .)
    COLON           reduce using rule 257 (yield_expression -> YIELD .)
    AS              reduce using rule 257 (yield_expression -> YIELD .)
    ARROW           reduce using rule 257 (yield_expression -> YIELD .)
    RIGHT_CBRAC     reduce using rule 257 (yield_expression -> YIELD .)
    VARIABLE        reduce using rule 257 (yield_expression -> YIELD .)
    DOUBLE_POINT    reduce using rule 257 (yield_expression -> YIELD .)
    DOUBLE_ARROW    reduce using rule 257 (yield_expression -> YIELD .)
    ELLIPSIS        reduce using rule 257 (yield_expression -> YIELD .)
    TERNARY_OPERATION reduce using rule 257 (yield_expression -> YIELD .)
    AMPERSAND       reduce using rule 257 (yield_expression -> YIELD .)
    ARRAY           reduce using rule 257 (yield_expression -> YIELD .)
    CALLABLE        reduce using rule 257 (yield_expression -> YIELD .)
    ITERABLE        reduce using rule 257 (yield_expression -> YIELD .)
    BOOL            reduce using rule 257 (yield_expression -> YIELD .)
    FLOAT           reduce using rule 257 (yield_expression -> YIELD .)
    INT             reduce using rule 257 (yield_expression -> YIELD .)
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! YIELD           [ reduce using rule 257 (yield_expression -> YIELD .) ]
  ! YIELD_FROM      [ reduce using rule 257 (yield_expression -> YIELD .) ]

    yield_expression               shift and go to state 157
    yield_from_expression          shift and go to state 158

state 92

    (255) yield_from_expression -> YIELD_FROM . assignment_expression
    (223) assignment_expression -> . conditional_expression
    (224) assignment_expression -> . simple_assignment_expression
    (225) assignment_expression -> . compound_assignment_expression
    (220) conditional_expression -> . coalesce_expression
    (221) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (222) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (226) simple_assignment_expression -> . variable EQUAL assignment_expression
    (227) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (242) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (218) coalesce_expression -> . logical_inc_OR_expression_1
    (219) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (216) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (217) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (564) name -> . STRING
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .

    LIST            shift and go to state 170
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 171
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 191
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193
    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    FUNCTION        reduce using rule 85 (static_opt -> .)

    assignment_expression          shift and go to state 159
    conditional_expression         shift and go to state 160
    simple_assignment_expression   shift and go to state 161
    compound_assignment_expression shift and go to state 162
    coalesce_expression            shift and go to state 163
    variable                       shift and go to state 164
    list_intrinsic                 shift and go to state 165
    logical_inc_OR_expression_1    shift and go to state 166
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    logical_AND_expression_1       shift and go to state 172
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 178
    dereferencable_expression      shift and go to state 179
    bitwise_inc_OR_expression      shift and go to state 180
    qualified_name                 shift and go to state 182
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 185
    string_literal                 shift and go to state 186
    bitwise_exc_OR_expression      shift and go to state 187
    name                           shift and go to state 188
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235

state 93

    (3) script_section -> text_opt start_tag statement_list_opt end_tag_opt . text_opt
    (5) text_opt -> . STRING
    (6) text_opt -> .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 5
    WHITESPACE      reduce using rule 6 (text_opt -> .)
    $end            reduce using rule 6 (text_opt -> .)
    OPEN_TAG        reduce using rule 6 (text_opt -> .)
    OPEN_TAG_WITH_ECHO reduce using rule 6 (text_opt -> .)

  ! STRING          [ reduce using rule 6 (text_opt -> .) ]

    text_opt                       shift and go to state 247

state 94

    (7) end_tag_opt -> CLOSE_TAG .

    STRING          reduce using rule 7 (end_tag_opt -> CLOSE_TAG .)
    WHITESPACE      reduce using rule 7 (end_tag_opt -> CLOSE_TAG .)
    $end            reduce using rule 7 (end_tag_opt -> CLOSE_TAG .)
    OPEN_TAG        reduce using rule 7 (end_tag_opt -> CLOSE_TAG .)
    OPEN_TAG_WITH_ECHO reduce using rule 7 (end_tag_opt -> CLOSE_TAG .)


state 95

    (301) statement_list -> statement_list statement .

    LEFT_CBRAC      reduce using rule 301 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 301 (statement_list -> statement_list statement .)
    TRY             reduce using rule 301 (statement_list -> statement_list statement .)
    DECLARE         reduce using rule 301 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 301 (statement_list -> statement_list statement .)
    UNSET           reduce using rule 301 (statement_list -> statement_list statement .)
    CONST           reduce using rule 301 (statement_list -> statement_list statement .)
    INTERFACE       reduce using rule 301 (statement_list -> statement_list statement .)
    TRAIT           reduce using rule 301 (statement_list -> statement_list statement .)
    NAMESPACE       reduce using rule 301 (statement_list -> statement_list statement .)
    USE             reduce using rule 301 (statement_list -> statement_list statement .)
    GLOBAL          reduce using rule 301 (statement_list -> statement_list statement .)
    STATIC          reduce using rule 301 (statement_list -> statement_list statement .)
    STRING          reduce using rule 301 (statement_list -> statement_list statement .)
    IF              reduce using rule 301 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 301 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 301 (statement_list -> statement_list statement .)
    DO              reduce using rule 301 (statement_list -> statement_list statement .)
    FOR             reduce using rule 301 (statement_list -> statement_list statement .)
    FOREACH         reduce using rule 301 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 301 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 301 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 301 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 301 (statement_list -> statement_list statement .)
    THROW           reduce using rule 301 (statement_list -> statement_list statement .)
    FUNCTION        reduce using rule 301 (statement_list -> statement_list statement .)
    INCLUDE         reduce using rule 301 (statement_list -> statement_list statement .)
    INCLUDE_ONCE    reduce using rule 301 (statement_list -> statement_list statement .)
    REQUIRE         reduce using rule 301 (statement_list -> statement_list statement .)
    REQUIRE_ONCE    reduce using rule 301 (statement_list -> statement_list statement .)
    ABSTRACT        reduce using rule 301 (statement_list -> statement_list statement .)
    FINAL           reduce using rule 301 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 301 (statement_list -> statement_list statement .)
    YIELD           reduce using rule 301 (statement_list -> statement_list statement .)
    YIELD_FROM      reduce using rule 301 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 301 (statement_list -> statement_list statement .)
    CLOSE_TAG       reduce using rule 301 (statement_list -> statement_list statement .)
    WHITESPACE      reduce using rule 301 (statement_list -> statement_list statement .)
    $end            reduce using rule 301 (statement_list -> statement_list statement .)
    OPEN_TAG        reduce using rule 301 (statement_list -> statement_list statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 301 (statement_list -> statement_list statement .)
    RIGHT_CBRAC     reduce using rule 301 (statement_list -> statement_list statement .)
    ENDDECLARE      reduce using rule 301 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 301 (statement_list -> statement_list statement .)
    ELSEIF          reduce using rule 301 (statement_list -> statement_list statement .)
    ENDWHILE        reduce using rule 301 (statement_list -> statement_list statement .)
    ENDFOR          reduce using rule 301 (statement_list -> statement_list statement .)
    CASE            reduce using rule 301 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 301 (statement_list -> statement_list statement .)
    ENDSWITCH       reduce using rule 301 (statement_list -> statement_list statement .)
    ENDFOREACH      reduce using rule 301 (statement_list -> statement_list statement .)
    ENDIF           reduce using rule 301 (statement_list -> statement_list statement .)


state 96

    (298) compound_statement -> LEFT_CBRAC statement_list . RIGHT_CBRAC
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     shift and go to state 248
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 97

    (299) compound_statement -> LEFT_CBRAC RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    TRY             reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DECLARE         reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ECHO            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    UNSET           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CONST           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INTERFACE       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    TRAIT           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    USE             reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    GLOBAL          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    STATIC          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    STRING          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IF              reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SWITCH          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    WHILE           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DO              reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FOR             reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FOREACH         reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    GOTO            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CONTINUE        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BREAK           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    RETURN          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    THROW           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FUNCTION        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE         reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE         reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FINAL           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PRINT           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    YIELD           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CLASS           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CLOSE_TAG       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    WHITESPACE      reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    $end            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    OPEN_TAG        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    OPEN_TAG_WITH_ECHO reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FINALLY         reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CATCH           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ELSE            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ELSEIF          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOR          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CASE            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DEFAULT         reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ENDIF           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    VAR             reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PUBLIC          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PROTECTED       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PRIVATE         reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ASTERISK        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DIVIDE          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    MODULO          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    PLUS            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    LESS            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CONCAT          reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SL              reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SR              reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    EQUAL           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    COALESCE        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    AND             reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    XOR             reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    OR              reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    COLON           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    AS              reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ARROW           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    VARIABLE        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ARRAY           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    CALLABLE        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    ITERABLE        reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    BOOL            reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    FLOAT           reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INT             reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 299 (compound_statement -> LEFT_CBRAC RIGHT_CBRAC .)


state 98

    (302) named_label_statement -> name DOUBLE_POINT .

    LEFT_CBRAC      reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    SEMICOLON       reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    TRY             reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    DECLARE         reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ECHO            reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    UNSET           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    CONST           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    INTERFACE       reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    TRAIT           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    NAMESPACE       reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    USE             reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    GLOBAL          reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    STATIC          reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    STRING          reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    IF              reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    SWITCH          reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    WHILE           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    DO              reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    FOR             reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    FOREACH         reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    GOTO            reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    CONTINUE        reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    BREAK           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    RETURN          reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    THROW           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    FUNCTION        reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    INCLUDE         reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    INCLUDE_ONCE    reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    REQUIRE         reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    REQUIRE_ONCE    reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ABSTRACT        reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    FINAL           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    PRINT           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    YIELD           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    YIELD_FROM      reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    CLASS           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    CLOSE_TAG       reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    WHITESPACE      reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    $end            reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    OPEN_TAG        reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    OPEN_TAG_WITH_ECHO reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    RIGHT_CBRAC     reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ELSE            reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ELSEIF          reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ENDDECLARE      reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ENDWHILE        reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ENDFOR          reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    CASE            reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    DEFAULT         reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ENDSWITCH       reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ENDFOREACH      reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)
    ENDIF           reduce using rule 302 (named_label_statement -> name DOUBLE_POINT .)


state 99

    (303) expression_statement -> expression SEMICOLON .

    LEFT_CBRAC      reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    DECLARE         reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ECHO            reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    UNSET           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    INTERFACE       reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    TRAIT           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    NAMESPACE       reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    USE             reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    GLOBAL          reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    STATIC          reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    FOREACH         reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    INCLUDE         reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    REQUIRE         reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ABSTRACT        reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    FINAL           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    PRINT           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    YIELD           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    YIELD_FROM      reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    CLASS           reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    WHITESPACE      reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    OPEN_TAG        reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ELSEIF          reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ENDDECLARE      reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ENDWHILE        reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ENDFOR          reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ENDSWITCH       reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ENDFOREACH      reduce using rule 303 (expression_statement -> expression SEMICOLON .)
    ENDIF           reduce using rule 303 (expression_statement -> expression SEMICOLON .)


state 100

    (391) try_statement -> TRY compound_statement . catch_clauses
    (392) try_statement -> TRY compound_statement . finally_clause
    (393) try_statement -> TRY compound_statement . catch_clauses finally_clause
    (394) catch_clauses -> . catch_clause
    (395) catch_clauses -> . catch_clauses catch_clause
    (399) finally_clause -> . FINALLY compound_statement
    (396) catch_clause -> . CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement

    FINALLY         shift and go to state 252
    CATCH           shift and go to state 253

    catch_clauses                  shift and go to state 249
    finally_clause                 shift and go to state 250
    catch_clause                   shift and go to state 251

state 101

    (400) declare_statement -> DECLARE LEFT_PARENTHESIS . declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> DECLARE LEFT_PARENTHESIS . declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> DECLARE LEFT_PARENTHESIS . declare_directive RIGHT_PARENTHESIS SEMICOLON
    (403) declare_directive -> . TICKS EQUALS literal
    (404) declare_directive -> . ENCODING EQUALS literal
    (405) declare_directive -> . STRICT_TYPES EQUALS literal

    TICKS           shift and go to state 255
    ENCODING        shift and go to state 256
    STRICT_TYPES    shift and go to state 257

    declare_directive              shift and go to state 254

state 102

    (406) echo_statement -> ECHO expression_list . SEMICOLON
    (408) expression_list -> expression_list . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 258
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 259
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 103

    (407) expression_list -> expression .

    SEMICOLON       reduce using rule 407 (expression_list -> expression .)
    STRING          reduce using rule 407 (expression_list -> expression .)
    INCLUDE         reduce using rule 407 (expression_list -> expression .)
    INCLUDE_ONCE    reduce using rule 407 (expression_list -> expression .)
    REQUIRE         reduce using rule 407 (expression_list -> expression .)
    REQUIRE_ONCE    reduce using rule 407 (expression_list -> expression .)
    PRINT           reduce using rule 407 (expression_list -> expression .)
    YIELD           reduce using rule 407 (expression_list -> expression .)
    YIELD_FROM      reduce using rule 407 (expression_list -> expression .)


state 104

    (270) expression -> STRING .

    SEMICOLON       reduce using rule 270 (expression -> STRING .)
    STRING          reduce using rule 270 (expression -> STRING .)
    INCLUDE         reduce using rule 270 (expression -> STRING .)
    INCLUDE_ONCE    reduce using rule 270 (expression -> STRING .)
    REQUIRE         reduce using rule 270 (expression -> STRING .)
    REQUIRE_ONCE    reduce using rule 270 (expression -> STRING .)
    PRINT           reduce using rule 270 (expression -> STRING .)
    YIELD           reduce using rule 270 (expression -> STRING .)
    YIELD_FROM      reduce using rule 270 (expression -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 270 (expression -> STRING .)
    COLON           reduce using rule 270 (expression -> STRING .)
    AS              reduce using rule 270 (expression -> STRING .)
    ARROW           reduce using rule 270 (expression -> STRING .)
    RIGHT_CBRAC     reduce using rule 270 (expression -> STRING .)
    VARIABLE        reduce using rule 270 (expression -> STRING .)
    DOUBLE_POINT    reduce using rule 270 (expression -> STRING .)
    DOUBLE_ARROW    reduce using rule 270 (expression -> STRING .)
    ELLIPSIS        reduce using rule 270 (expression -> STRING .)
    TERNARY_OPERATION reduce using rule 270 (expression -> STRING .)
    AMPERSAND       reduce using rule 270 (expression -> STRING .)
    ARRAY           reduce using rule 270 (expression -> STRING .)
    CALLABLE        reduce using rule 270 (expression -> STRING .)
    ITERABLE        reduce using rule 270 (expression -> STRING .)
    BOOL            reduce using rule 270 (expression -> STRING .)
    FLOAT           reduce using rule 270 (expression -> STRING .)
    INT             reduce using rule 270 (expression -> STRING .)


state 105

    (409) unset_statement -> UNSET LEFT_PARENTHESIS . variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> UNSET LEFT_PARENTHESIS . variable_list RIGHT_PARENTHESIS SEMICOLON
    (81) variable_list -> . variable
    (82) variable_list -> . variable_list variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable_list                  shift and go to state 261
    variable                       shift and go to state 262
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 106

    (464) const_declaration -> CONST const_elements . SEMICOLON
    (467) const_elements -> const_elements . const_element
    (468) const_element -> . name EQUAL constant_expression
    (564) name -> . STRING

    SEMICOLON       shift and go to state 268
    STRING          shift and go to state 109

    const_element                  shift and go to state 269
    name                           shift and go to state 108

state 107

    (466) const_elements -> const_element .

    SEMICOLON       reduce using rule 466 (const_elements -> const_element .)
    STRING          reduce using rule 466 (const_elements -> const_element .)


state 108

    (468) const_element -> name . EQUAL constant_expression

    EQUAL           shift and go to state 270


state 109

    (564) name -> STRING .

    EQUAL           reduce using rule 564 (name -> STRING .)
    EXTENDS         reduce using rule 564 (name -> STRING .)
    LEFT_CBRAC      reduce using rule 564 (name -> STRING .)
    SEMICOLON       reduce using rule 564 (name -> STRING .)
    IMPLEMENTS      reduce using rule 564 (name -> STRING .)
    AS              reduce using rule 564 (name -> STRING .)
    LEFT_PARENTHESIS reduce using rule 564 (name -> STRING .)
    DOUBLE_COLON    reduce using rule 564 (name -> STRING .)
    DOUBLEASTERISK  reduce using rule 564 (name -> STRING .)
    ASTERISK        reduce using rule 564 (name -> STRING .)
    DIVIDE          reduce using rule 564 (name -> STRING .)
    MODULO          reduce using rule 564 (name -> STRING .)
    PLUS            reduce using rule 564 (name -> STRING .)
    LESS            reduce using rule 564 (name -> STRING .)
    CONCAT          reduce using rule 564 (name -> STRING .)
    SL              reduce using rule 564 (name -> STRING .)
    SR              reduce using rule 564 (name -> STRING .)
    LESS_THAN       reduce using rule 564 (name -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 564 (name -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 564 (name -> STRING .)
    GREATER_THAN_OR_EQUAL reduce using rule 564 (name -> STRING .)
    SPACESHIP       reduce using rule 564 (name -> STRING .)
    IS_NOT_EQUAL    reduce using rule 564 (name -> STRING .)
    IS_IDENTICAL    reduce using rule 564 (name -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 564 (name -> STRING .)
    AMPERSAND       reduce using rule 564 (name -> STRING .)
    BITWISE_XOR     reduce using rule 564 (name -> STRING .)
    BITWISE_OR      reduce using rule 564 (name -> STRING .)
    COALESCE        reduce using rule 564 (name -> STRING .)
    TERNARY_OPERATION reduce using rule 564 (name -> STRING .)
    AND             reduce using rule 564 (name -> STRING .)
    XOR             reduce using rule 564 (name -> STRING .)
    OR              reduce using rule 564 (name -> STRING .)
    STRING          reduce using rule 564 (name -> STRING .)
    INCLUDE         reduce using rule 564 (name -> STRING .)
    INCLUDE_ONCE    reduce using rule 564 (name -> STRING .)
    REQUIRE         reduce using rule 564 (name -> STRING .)
    REQUIRE_ONCE    reduce using rule 564 (name -> STRING .)
    PRINT           reduce using rule 564 (name -> STRING .)
    YIELD           reduce using rule 564 (name -> STRING .)
    YIELD_FROM      reduce using rule 564 (name -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 564 (name -> STRING .)
    COLON           reduce using rule 564 (name -> STRING .)
    ARROW           reduce using rule 564 (name -> STRING .)
    RIGHT_CBRAC     reduce using rule 564 (name -> STRING .)
    VARIABLE        reduce using rule 564 (name -> STRING .)
    DOUBLE_POINT    reduce using rule 564 (name -> STRING .)
    DOUBLE_ARROW    reduce using rule 564 (name -> STRING .)
    ELLIPSIS        reduce using rule 564 (name -> STRING .)
    ARRAY           reduce using rule 564 (name -> STRING .)
    CALLABLE        reduce using rule 564 (name -> STRING .)
    ITERABLE        reduce using rule 564 (name -> STRING .)
    BOOL            reduce using rule 564 (name -> STRING .)
    FLOAT           reduce using rule 564 (name -> STRING .)
    INT             reduce using rule 564 (name -> STRING .)
    INSTANCEOF      reduce using rule 564 (name -> STRING .)
    NAME            reduce using rule 564 (name -> STRING .)
    FUNCTION        reduce using rule 564 (name -> STRING .)
    CONST           reduce using rule 564 (name -> STRING .)
    CONSTRUCT       reduce using rule 564 (name -> STRING .)
    DESTRUCT        reduce using rule 564 (name -> STRING .)
    INSTEADOF       reduce using rule 564 (name -> STRING .)


state 110

    (411) function_definition -> function_definition_header compound_statement .

    LEFT_CBRAC      reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    SEMICOLON       reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    TRY             reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    DECLARE         reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ECHO            reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    UNSET           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    CONST           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    INTERFACE       reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    TRAIT           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    NAMESPACE       reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    USE             reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    GLOBAL          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    STATIC          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    STRING          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    IF              reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    SWITCH          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    WHILE           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    DO              reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    FOR             reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    FOREACH         reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    GOTO            reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    CONTINUE        reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    BREAK           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    RETURN          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    THROW           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    FUNCTION        reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    INCLUDE         reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    INCLUDE_ONCE    reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    REQUIRE         reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    REQUIRE_ONCE    reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ABSTRACT        reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    FINAL           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    PRINT           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    YIELD           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    YIELD_FROM      reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    CLASS           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    CLOSE_TAG       reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    WHITESPACE      reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    $end            reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    OPEN_TAG        reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    RIGHT_CBRAC     reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ELSE            reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ELSEIF          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ENDDECLARE      reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ENDWHILE        reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ENDFOR          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    CASE            reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    DEFAULT         reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ENDSWITCH       reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ENDFOREACH      reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    ENDIF           reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    VAR             reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    PUBLIC          reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    PROTECTED       reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    PRIVATE         reduce using rule 411 (function_definition -> function_definition_header compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 411 (function_definition -> function_definition_header compound_statement .)


state 111

    (442) class_declaration -> class_modifieropt CLASS . name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 271

state 112

    (498) interface_declaration -> INTERFACE name . interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (499) interface_base_clauseopt -> . interface_base_clause
    (500) interface_base_clauseopt -> .
    (503) interface_base_clause -> . EXTENDS qualified_name
    (504) interface_base_clause -> . interface_base_clause qualified_name

    LEFT_CBRAC      reduce using rule 500 (interface_base_clauseopt -> .)
    EXTENDS         shift and go to state 274

    interface_base_clauseopt       shift and go to state 272
    interface_base_clause          shift and go to state 273

state 113

    (509) trait_declaration -> TRAIT name . LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 275


state 114

    (539) namespace_definition -> NAMESPACE namespace_name . SEMICOLON
    (16) namespace_name -> namespace_name . NS_SEPARATOR NAME
    (541) namespace_nameopt -> namespace_name .

    SEMICOLON       shift and go to state 276
    NS_SEPARATOR    shift and go to state 277
    LEFT_CBRAC      reduce using rule 541 (namespace_nameopt -> namespace_name .)


state 115

    (540) namespace_definition -> NAMESPACE namespace_nameopt . compound_statement
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 278

state 116

    (15) namespace_name -> NAME .

    SEMICOLON       reduce using rule 15 (namespace_name -> NAME .)
    NS_SEPARATOR    reduce using rule 15 (namespace_name -> NAME .)
    LEFT_CBRAC      reduce using rule 15 (namespace_name -> NAME .)
    AS              reduce using rule 15 (namespace_name -> NAME .)


state 117

    (543) namespace_use_declaration -> USE namespace_function_or_constopt . namespace_use_clauses SEMICOLON
    (550) namespace_use_clauses -> . namespace_use_clause
    (551) namespace_use_clauses -> . namespace_use_clauses namespace_use_clause
    (552) namespace_use_clause -> . qualified_name namespace_aliasing_clause_opt
    (554) qualified_name -> . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    namespace_use_clauses          shift and go to state 279
    namespace_use_clause           shift and go to state 280
    qualified_name                 shift and go to state 281
    name                           shift and go to state 188

state 118

    (544) namespace_use_declaration -> USE namespace_function_or_const . NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (546) namespace_function_or_constopt -> namespace_function_or_const .
    (548) NS_SEPARATORopt -> . NS_SEPARATOR
    (549) NS_SEPARATORopt -> .

    STRING          reduce using rule 546 (namespace_function_or_constopt -> namespace_function_or_const .)
    NS_SEPARATOR    shift and go to state 120
    NAME            reduce using rule 549 (NS_SEPARATORopt -> .)

    NS_SEPARATORopt                shift and go to state 282

state 119

    (545) namespace_use_declaration -> USE NS_SEPARATORopt . namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (15) namespace_name -> . NAME
    (16) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 116

    namespace_name                 shift and go to state 283

state 120

    (548) NS_SEPARATORopt -> NS_SEPARATOR .

    NAME            reduce using rule 548 (NS_SEPARATORopt -> NS_SEPARATOR .)


state 121

    (556) namespace_function_or_const -> FUNCTION .

    NS_SEPARATOR    reduce using rule 556 (namespace_function_or_const -> FUNCTION .)
    NAME            reduce using rule 556 (namespace_function_or_const -> FUNCTION .)
    STRING          reduce using rule 556 (namespace_function_or_const -> FUNCTION .)


state 122

    (557) namespace_function_or_const -> CONST .

    NS_SEPARATOR    reduce using rule 557 (namespace_function_or_const -> CONST .)
    NAME            reduce using rule 557 (namespace_function_or_const -> CONST .)
    STRING          reduce using rule 557 (namespace_function_or_const -> CONST .)


state 123

    (25) global_declaration -> GLOBAL variable_name_list . SEMICOLON
    (27) variable_name_list -> variable_name_list . simple_variable
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    SEMICOLON       shift and go to state 284
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    simple_variable                shift and go to state 285

state 124

    (26) variable_name_list -> simple_variable .

    SEMICOLON       reduce using rule 26 (variable_name_list -> simple_variable .)
    VARIABLE        reduce using rule 26 (variable_name_list -> simple_variable .)
    DOLLAR          reduce using rule 26 (variable_name_list -> simple_variable .)


state 125

    (43) simple_variable -> VARIABLE .

    SEMICOLON       reduce using rule 43 (simple_variable -> VARIABLE .)
    VARIABLE        reduce using rule 43 (simple_variable -> VARIABLE .)
    DOLLAR          reduce using rule 43 (simple_variable -> VARIABLE .)
    EQUAL           reduce using rule 43 (simple_variable -> VARIABLE .)
    DOUBLEPLUS      reduce using rule 43 (simple_variable -> VARIABLE .)
    DOUBLELESS      reduce using rule 43 (simple_variable -> VARIABLE .)
    POW_EQUAL       reduce using rule 43 (simple_variable -> VARIABLE .)
    MUL_EQUAL       reduce using rule 43 (simple_variable -> VARIABLE .)
    DIV_EQUAL       reduce using rule 43 (simple_variable -> VARIABLE .)
    MOD_EQUAL       reduce using rule 43 (simple_variable -> VARIABLE .)
    PLUS_EQUAL      reduce using rule 43 (simple_variable -> VARIABLE .)
    MINUS_EQUAL     reduce using rule 43 (simple_variable -> VARIABLE .)
    CONCAT_EQUAL    reduce using rule 43 (simple_variable -> VARIABLE .)
    SL_EQUAL        reduce using rule 43 (simple_variable -> VARIABLE .)
    SR_EQUAL        reduce using rule 43 (simple_variable -> VARIABLE .)
    AND_EQUAL       reduce using rule 43 (simple_variable -> VARIABLE .)
    XOR_EQUAL       reduce using rule 43 (simple_variable -> VARIABLE .)
    OR_EQUAL        reduce using rule 43 (simple_variable -> VARIABLE .)
    ARROW           reduce using rule 43 (simple_variable -> VARIABLE .)
    LEFT_CBRAC      reduce using rule 43 (simple_variable -> VARIABLE .)
    DOUBLE_COLON    reduce using rule 43 (simple_variable -> VARIABLE .)
    DOUBLEASTERISK  reduce using rule 43 (simple_variable -> VARIABLE .)
    ASTERISK        reduce using rule 43 (simple_variable -> VARIABLE .)
    DIVIDE          reduce using rule 43 (simple_variable -> VARIABLE .)
    MODULO          reduce using rule 43 (simple_variable -> VARIABLE .)
    PLUS            reduce using rule 43 (simple_variable -> VARIABLE .)
    LESS            reduce using rule 43 (simple_variable -> VARIABLE .)
    CONCAT          reduce using rule 43 (simple_variable -> VARIABLE .)
    SL              reduce using rule 43 (simple_variable -> VARIABLE .)
    SR              reduce using rule 43 (simple_variable -> VARIABLE .)
    LESS_THAN       reduce using rule 43 (simple_variable -> VARIABLE .)
    IS_SMALLER_OR_EQUAL reduce using rule 43 (simple_variable -> VARIABLE .)
    IS_GREATER_OR_EQUAL reduce using rule 43 (simple_variable -> VARIABLE .)
    GREATER_THAN_OR_EQUAL reduce using rule 43 (simple_variable -> VARIABLE .)
    SPACESHIP       reduce using rule 43 (simple_variable -> VARIABLE .)
    IS_NOT_EQUAL    reduce using rule 43 (simple_variable -> VARIABLE .)
    IS_IDENTICAL    reduce using rule 43 (simple_variable -> VARIABLE .)
    IS_NOT_IDENTICAL reduce using rule 43 (simple_variable -> VARIABLE .)
    AMPERSAND       reduce using rule 43 (simple_variable -> VARIABLE .)
    BITWISE_XOR     reduce using rule 43 (simple_variable -> VARIABLE .)
    BITWISE_OR      reduce using rule 43 (simple_variable -> VARIABLE .)
    COALESCE        reduce using rule 43 (simple_variable -> VARIABLE .)
    TERNARY_OPERATION reduce using rule 43 (simple_variable -> VARIABLE .)
    AND             reduce using rule 43 (simple_variable -> VARIABLE .)
    XOR             reduce using rule 43 (simple_variable -> VARIABLE .)
    OR              reduce using rule 43 (simple_variable -> VARIABLE .)
    STRING          reduce using rule 43 (simple_variable -> VARIABLE .)
    INCLUDE         reduce using rule 43 (simple_variable -> VARIABLE .)
    INCLUDE_ONCE    reduce using rule 43 (simple_variable -> VARIABLE .)
    REQUIRE         reduce using rule 43 (simple_variable -> VARIABLE .)
    REQUIRE_ONCE    reduce using rule 43 (simple_variable -> VARIABLE .)
    PRINT           reduce using rule 43 (simple_variable -> VARIABLE .)
    YIELD           reduce using rule 43 (simple_variable -> VARIABLE .)
    YIELD_FROM      reduce using rule 43 (simple_variable -> VARIABLE .)
    RIGHT_PARENTHESIS reduce using rule 43 (simple_variable -> VARIABLE .)
    COLON           reduce using rule 43 (simple_variable -> VARIABLE .)
    AS              reduce using rule 43 (simple_variable -> VARIABLE .)
    RIGHT_CBRAC     reduce using rule 43 (simple_variable -> VARIABLE .)
    DOUBLE_POINT    reduce using rule 43 (simple_variable -> VARIABLE .)
    DOUBLE_ARROW    reduce using rule 43 (simple_variable -> VARIABLE .)
    ELLIPSIS        reduce using rule 43 (simple_variable -> VARIABLE .)
    ARRAY           reduce using rule 43 (simple_variable -> VARIABLE .)
    CALLABLE        reduce using rule 43 (simple_variable -> VARIABLE .)
    ITERABLE        reduce using rule 43 (simple_variable -> VARIABLE .)
    BOOL            reduce using rule 43 (simple_variable -> VARIABLE .)
    FLOAT           reduce using rule 43 (simple_variable -> VARIABLE .)
    INT             reduce using rule 43 (simple_variable -> VARIABLE .)
    INSTANCEOF      reduce using rule 43 (simple_variable -> VARIABLE .)
    LEFT_PARENTHESIS reduce using rule 43 (simple_variable -> VARIABLE .)
    SELF            reduce using rule 43 (simple_variable -> VARIABLE .)
    PARENT          reduce using rule 43 (simple_variable -> VARIABLE .)
    STATIC          reduce using rule 43 (simple_variable -> VARIABLE .)


state 126

    (44) simple_variable -> DOLLAR . simple_variable
    (45) simple_variable -> DOLLAR . LEFT_CBRAC expression RIGHT_CBRAC
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 287
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    simple_variable                shift and go to state 286

state 127

    (17) function_static_declaration -> STATIC static_variable_name_list . SEMICOLON
    (19) static_variable_name_list -> static_variable_name_list . static_variable_declaration
    (20) static_variable_declaration -> . VARIABLE function_static_initializer_opt

    SEMICOLON       shift and go to state 288
    VARIABLE        shift and go to state 129

    static_variable_declaration    shift and go to state 289

state 128

    (18) static_variable_name_list -> static_variable_declaration .

    SEMICOLON       reduce using rule 18 (static_variable_name_list -> static_variable_declaration .)
    VARIABLE        reduce using rule 18 (static_variable_name_list -> static_variable_declaration .)


state 129

    (20) static_variable_declaration -> VARIABLE . function_static_initializer_opt
    (22) function_static_initializer_opt -> . function_static_initializer
    (23) function_static_initializer_opt -> .
    (24) function_static_initializer_opt -> . EQUAL constant_expression
    (21) function_static_initializer -> . EQUAL constant_expression

    SEMICOLON       reduce using rule 23 (function_static_initializer_opt -> .)
    VARIABLE        reduce using rule 23 (function_static_initializer_opt -> .)
    EQUAL           shift and go to state 292

    function_static_initializer_opt shift and go to state 290
    function_static_initializer    shift and go to state 291

state 130

    (267) logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR . logical_exc_OR_expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    logical_exc_OR_expression      shift and go to state 293
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 131

    (307) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (311) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 294
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 132

    (322) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> SWITCH LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 295
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 133

    (340) while_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (341) while_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 296
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 134

    (342) do_statement -> DO statement . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    WHILE           shift and go to state 297


state 135

    (343) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> FOR LEFT_PARENTHESIS . for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> FOR LEFT_PARENTHESIS . SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (359) for_initializer -> . for_expression_group
    (362) for_expression_group -> . expression
    (363) for_expression_group -> . for_expression_group COLON expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 299
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    for_initializer                shift and go to state 298
    for_expression_group           shift and go to state 300
    expression                     shift and go to state 301
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 136

    (364) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS . foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (368) foreach_collection_name -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    foreach_collection_name        shift and go to state 302
    expression                     shift and go to state 303
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 137

    (378) goto_statement -> GOTO name . SEMICOLON

    SEMICOLON       shift and go to state 304


state 138

    (379) continue_statement -> CONTINUE breakout_level . SEMICOLON

    SEMICOLON       shift and go to state 305


state 139

    (380) continue_statement -> CONTINUE SEMICOLON .

    LEFT_CBRAC      reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    DECLARE         reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ECHO            reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    UNSET           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    TRAIT           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    NAMESPACE       reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    USE             reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    GLOBAL          reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    INCLUDE         reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    REQUIRE         reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ABSTRACT        reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    YIELD           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    YIELD_FROM      reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    CLOSE_TAG       reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    WHITESPACE      reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    OPEN_TAG        reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ELSEIF          reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ENDDECLARE      reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ENDWHILE        reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ENDFOR          reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ENDSWITCH       reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ENDFOREACH      reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)
    ENDIF           reduce using rule 380 (continue_statement -> CONTINUE SEMICOLON .)


state 140

    (381) breakout_level -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 381 (breakout_level -> INTEGER_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 381 (breakout_level -> INTEGER_LITERAL .)


state 141

    (382) breakout_level -> LEFT_PARENTHESIS . breakout_level RIGHT_PARENTHESIS
    (381) breakout_level -> . INTEGER_LITERAL
    (382) breakout_level -> . LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS
    (386) breakout_level -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    INTEGER_LITERAL shift and go to state 140
    LEFT_PARENTHESIS shift and go to state 141
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    breakout_level                 shift and go to state 306
    expression                     shift and go to state 142
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 142

    (386) breakout_level -> expression .

    SEMICOLON       reduce using rule 386 (breakout_level -> expression .)
    RIGHT_PARENTHESIS reduce using rule 386 (breakout_level -> expression .)


state 143

    (383) break_statement -> BREAK breakout_levelopt . SEMICOLON

    SEMICOLON       shift and go to state 307


state 144

    (384) breakout_levelopt -> breakout_level .

    SEMICOLON       reduce using rule 384 (breakout_levelopt -> breakout_level .)


state 145

    (387) return_statement -> RETURN expressionopt . SEMICOLON

    SEMICOLON       shift and go to state 308


state 146

    (388) expressionopt -> expression .

    SEMICOLON       reduce using rule 388 (expressionopt -> expression .)


state 147

    (390) throw_statement -> THROW expression . SEMICOLON

    SEMICOLON       shift and go to state 309


state 148

    (412) function_definition_header -> FUNCTION ampersandopt . name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 310

state 149

    (413) ampersandopt -> AMPERSAND .

    STRING          reduce using rule 413 (ampersandopt -> AMPERSAND .)
    VARIABLE        reduce using rule 413 (ampersandopt -> AMPERSAND .)
    ELLIPSIS        reduce using rule 413 (ampersandopt -> AMPERSAND .)


state 150

    (265) logical_exc_OR_expression -> logical_exc_OR_expression XOR . logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    logical_AND_expression_2       shift and go to state 311
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 151

    (274) include_expression -> INCLUDE expression .

    SEMICOLON       reduce using rule 274 (include_expression -> INCLUDE expression .)
    STRING          reduce using rule 274 (include_expression -> INCLUDE expression .)
    INCLUDE         reduce using rule 274 (include_expression -> INCLUDE expression .)
    INCLUDE_ONCE    reduce using rule 274 (include_expression -> INCLUDE expression .)
    REQUIRE         reduce using rule 274 (include_expression -> INCLUDE expression .)
    REQUIRE_ONCE    reduce using rule 274 (include_expression -> INCLUDE expression .)
    PRINT           reduce using rule 274 (include_expression -> INCLUDE expression .)
    YIELD           reduce using rule 274 (include_expression -> INCLUDE expression .)
    YIELD_FROM      reduce using rule 274 (include_expression -> INCLUDE expression .)
    RIGHT_PARENTHESIS reduce using rule 274 (include_expression -> INCLUDE expression .)
    COLON           reduce using rule 274 (include_expression -> INCLUDE expression .)
    AS              reduce using rule 274 (include_expression -> INCLUDE expression .)
    ARROW           reduce using rule 274 (include_expression -> INCLUDE expression .)
    RIGHT_CBRAC     reduce using rule 274 (include_expression -> INCLUDE expression .)
    VARIABLE        reduce using rule 274 (include_expression -> INCLUDE expression .)
    DOUBLE_POINT    reduce using rule 274 (include_expression -> INCLUDE expression .)
    DOUBLE_ARROW    reduce using rule 274 (include_expression -> INCLUDE expression .)
    ELLIPSIS        reduce using rule 274 (include_expression -> INCLUDE expression .)
    TERNARY_OPERATION reduce using rule 274 (include_expression -> INCLUDE expression .)
    AMPERSAND       reduce using rule 274 (include_expression -> INCLUDE expression .)
    ARRAY           reduce using rule 274 (include_expression -> INCLUDE expression .)
    CALLABLE        reduce using rule 274 (include_expression -> INCLUDE expression .)
    ITERABLE        reduce using rule 274 (include_expression -> INCLUDE expression .)
    BOOL            reduce using rule 274 (include_expression -> INCLUDE expression .)
    FLOAT           reduce using rule 274 (include_expression -> INCLUDE expression .)
    INT             reduce using rule 274 (include_expression -> INCLUDE expression .)


state 152

    (275) include_once_expression -> INCLUDE_ONCE expression .

    SEMICOLON       reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    STRING          reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    INCLUDE         reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    INCLUDE_ONCE    reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    REQUIRE         reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    REQUIRE_ONCE    reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    PRINT           reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    YIELD           reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    YIELD_FROM      reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    RIGHT_PARENTHESIS reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    COLON           reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    AS              reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    ARROW           reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    RIGHT_CBRAC     reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    VARIABLE        reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    DOUBLE_POINT    reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    DOUBLE_ARROW    reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    ELLIPSIS        reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    TERNARY_OPERATION reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    AMPERSAND       reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    ARRAY           reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    CALLABLE        reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    ITERABLE        reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    BOOL            reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    FLOAT           reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)
    INT             reduce using rule 275 (include_once_expression -> INCLUDE_ONCE expression .)


state 153

    (276) require_expression -> REQUIRE expression .

    SEMICOLON       reduce using rule 276 (require_expression -> REQUIRE expression .)
    STRING          reduce using rule 276 (require_expression -> REQUIRE expression .)
    INCLUDE         reduce using rule 276 (require_expression -> REQUIRE expression .)
    INCLUDE_ONCE    reduce using rule 276 (require_expression -> REQUIRE expression .)
    REQUIRE         reduce using rule 276 (require_expression -> REQUIRE expression .)
    REQUIRE_ONCE    reduce using rule 276 (require_expression -> REQUIRE expression .)
    PRINT           reduce using rule 276 (require_expression -> REQUIRE expression .)
    YIELD           reduce using rule 276 (require_expression -> REQUIRE expression .)
    YIELD_FROM      reduce using rule 276 (require_expression -> REQUIRE expression .)
    RIGHT_PARENTHESIS reduce using rule 276 (require_expression -> REQUIRE expression .)
    COLON           reduce using rule 276 (require_expression -> REQUIRE expression .)
    AS              reduce using rule 276 (require_expression -> REQUIRE expression .)
    ARROW           reduce using rule 276 (require_expression -> REQUIRE expression .)
    RIGHT_CBRAC     reduce using rule 276 (require_expression -> REQUIRE expression .)
    VARIABLE        reduce using rule 276 (require_expression -> REQUIRE expression .)
    DOUBLE_POINT    reduce using rule 276 (require_expression -> REQUIRE expression .)
    DOUBLE_ARROW    reduce using rule 276 (require_expression -> REQUIRE expression .)
    ELLIPSIS        reduce using rule 276 (require_expression -> REQUIRE expression .)
    TERNARY_OPERATION reduce using rule 276 (require_expression -> REQUIRE expression .)
    AMPERSAND       reduce using rule 276 (require_expression -> REQUIRE expression .)
    ARRAY           reduce using rule 276 (require_expression -> REQUIRE expression .)
    CALLABLE        reduce using rule 276 (require_expression -> REQUIRE expression .)
    ITERABLE        reduce using rule 276 (require_expression -> REQUIRE expression .)
    BOOL            reduce using rule 276 (require_expression -> REQUIRE expression .)
    FLOAT           reduce using rule 276 (require_expression -> REQUIRE expression .)
    INT             reduce using rule 276 (require_expression -> REQUIRE expression .)


state 154

    (277) require_once_expression -> REQUIRE_ONCE expression .

    SEMICOLON       reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    STRING          reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    INCLUDE         reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    INCLUDE_ONCE    reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    REQUIRE         reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    REQUIRE_ONCE    reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    PRINT           reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    YIELD           reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    YIELD_FROM      reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    RIGHT_PARENTHESIS reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    COLON           reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    AS              reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    ARROW           reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    RIGHT_CBRAC     reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    VARIABLE        reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    DOUBLE_POINT    reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    DOUBLE_ARROW    reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    ELLIPSIS        reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    TERNARY_OPERATION reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    AMPERSAND       reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    ARRAY           reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    CALLABLE        reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    ITERABLE        reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    BOOL            reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    FLOAT           reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)
    INT             reduce using rule 277 (require_once_expression -> REQUIRE_ONCE expression .)


state 155

    (263) logical_AND_expression_2 -> logical_AND_expression_2 AND . yield_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    yield_expression               shift and go to state 312
    yield_from_expression          shift and go to state 90

state 156

    (261) print_expression -> PRINT print_expression .

    AND             reduce using rule 261 (print_expression -> PRINT print_expression .)
    XOR             reduce using rule 261 (print_expression -> PRINT print_expression .)
    OR              reduce using rule 261 (print_expression -> PRINT print_expression .)
    SEMICOLON       reduce using rule 261 (print_expression -> PRINT print_expression .)
    STRING          reduce using rule 261 (print_expression -> PRINT print_expression .)
    INCLUDE         reduce using rule 261 (print_expression -> PRINT print_expression .)
    INCLUDE_ONCE    reduce using rule 261 (print_expression -> PRINT print_expression .)
    REQUIRE         reduce using rule 261 (print_expression -> PRINT print_expression .)
    REQUIRE_ONCE    reduce using rule 261 (print_expression -> PRINT print_expression .)
    PRINT           reduce using rule 261 (print_expression -> PRINT print_expression .)
    YIELD           reduce using rule 261 (print_expression -> PRINT print_expression .)
    YIELD_FROM      reduce using rule 261 (print_expression -> PRINT print_expression .)
    RIGHT_PARENTHESIS reduce using rule 261 (print_expression -> PRINT print_expression .)
    COLON           reduce using rule 261 (print_expression -> PRINT print_expression .)
    AS              reduce using rule 261 (print_expression -> PRINT print_expression .)
    ARROW           reduce using rule 261 (print_expression -> PRINT print_expression .)
    RIGHT_CBRAC     reduce using rule 261 (print_expression -> PRINT print_expression .)
    VARIABLE        reduce using rule 261 (print_expression -> PRINT print_expression .)
    DOUBLE_POINT    reduce using rule 261 (print_expression -> PRINT print_expression .)
    DOUBLE_ARROW    reduce using rule 261 (print_expression -> PRINT print_expression .)
    ELLIPSIS        reduce using rule 261 (print_expression -> PRINT print_expression .)
    TERNARY_OPERATION reduce using rule 261 (print_expression -> PRINT print_expression .)
    AMPERSAND       reduce using rule 261 (print_expression -> PRINT print_expression .)
    ARRAY           reduce using rule 261 (print_expression -> PRINT print_expression .)
    CALLABLE        reduce using rule 261 (print_expression -> PRINT print_expression .)
    ITERABLE        reduce using rule 261 (print_expression -> PRINT print_expression .)
    BOOL            reduce using rule 261 (print_expression -> PRINT print_expression .)
    FLOAT           reduce using rule 261 (print_expression -> PRINT print_expression .)
    INT             reduce using rule 261 (print_expression -> PRINT print_expression .)


state 157

    (258) yield_expression -> YIELD yield_expression .

    AND             reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    XOR             reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    OR              reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    SEMICOLON       reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    STRING          reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    INCLUDE         reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    INCLUDE_ONCE    reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    REQUIRE         reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    REQUIRE_ONCE    reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    PRINT           reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    YIELD           reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    YIELD_FROM      reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    COLON           reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    AS              reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    ARROW           reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    RIGHT_CBRAC     reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    VARIABLE        reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    DOUBLE_POINT    reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    DOUBLE_ARROW    reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    ELLIPSIS        reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    TERNARY_OPERATION reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    AMPERSAND       reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    ARRAY           reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    CALLABLE        reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    ITERABLE        reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    BOOL            reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    FLOAT           reduce using rule 258 (yield_expression -> YIELD yield_expression .)
    INT             reduce using rule 258 (yield_expression -> YIELD yield_expression .)


state 158

    (259) yield_expression -> YIELD yield_from_expression . DOUBLE_ARROW yield_expression
    (256) yield_expression -> yield_from_expression .

  ! shift/reduce conflict for DOUBLE_ARROW resolved as shift
    DOUBLE_ARROW    shift and go to state 313
    AND             reduce using rule 256 (yield_expression -> yield_from_expression .)
    XOR             reduce using rule 256 (yield_expression -> yield_from_expression .)
    OR              reduce using rule 256 (yield_expression -> yield_from_expression .)
    SEMICOLON       reduce using rule 256 (yield_expression -> yield_from_expression .)
    STRING          reduce using rule 256 (yield_expression -> yield_from_expression .)
    INCLUDE         reduce using rule 256 (yield_expression -> yield_from_expression .)
    INCLUDE_ONCE    reduce using rule 256 (yield_expression -> yield_from_expression .)
    REQUIRE         reduce using rule 256 (yield_expression -> yield_from_expression .)
    REQUIRE_ONCE    reduce using rule 256 (yield_expression -> yield_from_expression .)
    PRINT           reduce using rule 256 (yield_expression -> yield_from_expression .)
    YIELD           reduce using rule 256 (yield_expression -> yield_from_expression .)
    YIELD_FROM      reduce using rule 256 (yield_expression -> yield_from_expression .)
    RIGHT_PARENTHESIS reduce using rule 256 (yield_expression -> yield_from_expression .)
    COLON           reduce using rule 256 (yield_expression -> yield_from_expression .)
    AS              reduce using rule 256 (yield_expression -> yield_from_expression .)
    ARROW           reduce using rule 256 (yield_expression -> yield_from_expression .)
    RIGHT_CBRAC     reduce using rule 256 (yield_expression -> yield_from_expression .)
    VARIABLE        reduce using rule 256 (yield_expression -> yield_from_expression .)
    DOUBLE_POINT    reduce using rule 256 (yield_expression -> yield_from_expression .)
    ELLIPSIS        reduce using rule 256 (yield_expression -> yield_from_expression .)
    TERNARY_OPERATION reduce using rule 256 (yield_expression -> yield_from_expression .)
    AMPERSAND       reduce using rule 256 (yield_expression -> yield_from_expression .)
    ARRAY           reduce using rule 256 (yield_expression -> yield_from_expression .)
    CALLABLE        reduce using rule 256 (yield_expression -> yield_from_expression .)
    ITERABLE        reduce using rule 256 (yield_expression -> yield_from_expression .)
    BOOL            reduce using rule 256 (yield_expression -> yield_from_expression .)
    FLOAT           reduce using rule 256 (yield_expression -> yield_from_expression .)
    INT             reduce using rule 256 (yield_expression -> yield_from_expression .)

  ! DOUBLE_ARROW    [ reduce using rule 256 (yield_expression -> yield_from_expression .) ]


state 159

    (255) yield_from_expression -> YIELD_FROM assignment_expression .

    AND             reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    XOR             reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    OR              reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    SEMICOLON       reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    STRING          reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    INCLUDE         reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    INCLUDE_ONCE    reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    REQUIRE         reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    REQUIRE_ONCE    reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    PRINT           reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    YIELD           reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    YIELD_FROM      reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    COLON           reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    AS              reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ARROW           reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    RIGHT_CBRAC     reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    VARIABLE        reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    DOUBLE_POINT    reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    DOUBLE_ARROW    reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ELLIPSIS        reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    TERNARY_OPERATION reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    AMPERSAND       reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ARRAY           reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    CALLABLE        reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    ITERABLE        reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    BOOL            reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    FLOAT           reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)
    INT             reduce using rule 255 (yield_from_expression -> YIELD_FROM assignment_expression .)


state 160

    (223) assignment_expression -> conditional_expression .
    (221) conditional_expression -> conditional_expression . TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (222) conditional_expression -> conditional_expression . TERNARY_OPERATION DOUBLE_POINT coalesce_expression

  ! shift/reduce conflict for TERNARY_OPERATION resolved as shift
    AND             reduce using rule 223 (assignment_expression -> conditional_expression .)
    XOR             reduce using rule 223 (assignment_expression -> conditional_expression .)
    OR              reduce using rule 223 (assignment_expression -> conditional_expression .)
    SEMICOLON       reduce using rule 223 (assignment_expression -> conditional_expression .)
    STRING          reduce using rule 223 (assignment_expression -> conditional_expression .)
    INCLUDE         reduce using rule 223 (assignment_expression -> conditional_expression .)
    INCLUDE_ONCE    reduce using rule 223 (assignment_expression -> conditional_expression .)
    REQUIRE         reduce using rule 223 (assignment_expression -> conditional_expression .)
    REQUIRE_ONCE    reduce using rule 223 (assignment_expression -> conditional_expression .)
    PRINT           reduce using rule 223 (assignment_expression -> conditional_expression .)
    YIELD           reduce using rule 223 (assignment_expression -> conditional_expression .)
    YIELD_FROM      reduce using rule 223 (assignment_expression -> conditional_expression .)
    RIGHT_PARENTHESIS reduce using rule 223 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 223 (assignment_expression -> conditional_expression .)
    AS              reduce using rule 223 (assignment_expression -> conditional_expression .)
    ARROW           reduce using rule 223 (assignment_expression -> conditional_expression .)
    RIGHT_CBRAC     reduce using rule 223 (assignment_expression -> conditional_expression .)
    VARIABLE        reduce using rule 223 (assignment_expression -> conditional_expression .)
    DOUBLE_POINT    reduce using rule 223 (assignment_expression -> conditional_expression .)
    DOUBLE_ARROW    reduce using rule 223 (assignment_expression -> conditional_expression .)
    ELLIPSIS        reduce using rule 223 (assignment_expression -> conditional_expression .)
    AMPERSAND       reduce using rule 223 (assignment_expression -> conditional_expression .)
    ARRAY           reduce using rule 223 (assignment_expression -> conditional_expression .)
    CALLABLE        reduce using rule 223 (assignment_expression -> conditional_expression .)
    ITERABLE        reduce using rule 223 (assignment_expression -> conditional_expression .)
    BOOL            reduce using rule 223 (assignment_expression -> conditional_expression .)
    FLOAT           reduce using rule 223 (assignment_expression -> conditional_expression .)
    INT             reduce using rule 223 (assignment_expression -> conditional_expression .)
    TERNARY_OPERATION shift and go to state 314

  ! TERNARY_OPERATION [ reduce using rule 223 (assignment_expression -> conditional_expression .) ]


state 161

    (224) assignment_expression -> simple_assignment_expression .

    AND             reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    XOR             reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    OR              reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    SEMICOLON       reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    STRING          reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    INCLUDE         reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    INCLUDE_ONCE    reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    REQUIRE         reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    REQUIRE_ONCE    reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    PRINT           reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    YIELD           reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    YIELD_FROM      reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    COLON           reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    AS              reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    ARROW           reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    RIGHT_CBRAC     reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    VARIABLE        reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    DOUBLE_POINT    reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    DOUBLE_ARROW    reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    ELLIPSIS        reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    TERNARY_OPERATION reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    AMPERSAND       reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    ARRAY           reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    CALLABLE        reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    ITERABLE        reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    BOOL            reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    FLOAT           reduce using rule 224 (assignment_expression -> simple_assignment_expression .)
    INT             reduce using rule 224 (assignment_expression -> simple_assignment_expression .)


state 162

    (225) assignment_expression -> compound_assignment_expression .

    AND             reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    XOR             reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    OR              reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    SEMICOLON       reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    STRING          reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    INCLUDE         reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    INCLUDE_ONCE    reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    REQUIRE         reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    REQUIRE_ONCE    reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    PRINT           reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    YIELD           reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    YIELD_FROM      reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    COLON           reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    AS              reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    ARROW           reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    RIGHT_CBRAC     reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    VARIABLE        reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    DOUBLE_POINT    reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    DOUBLE_ARROW    reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    ELLIPSIS        reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    TERNARY_OPERATION reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    AMPERSAND       reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    ARRAY           reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    CALLABLE        reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    ITERABLE        reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    BOOL            reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    FLOAT           reduce using rule 225 (assignment_expression -> compound_assignment_expression .)
    INT             reduce using rule 225 (assignment_expression -> compound_assignment_expression .)


state 163

    (220) conditional_expression -> coalesce_expression .

    TERNARY_OPERATION reduce using rule 220 (conditional_expression -> coalesce_expression .)
    AND             reduce using rule 220 (conditional_expression -> coalesce_expression .)
    XOR             reduce using rule 220 (conditional_expression -> coalesce_expression .)
    OR              reduce using rule 220 (conditional_expression -> coalesce_expression .)
    SEMICOLON       reduce using rule 220 (conditional_expression -> coalesce_expression .)
    STRING          reduce using rule 220 (conditional_expression -> coalesce_expression .)
    INCLUDE         reduce using rule 220 (conditional_expression -> coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 220 (conditional_expression -> coalesce_expression .)
    REQUIRE         reduce using rule 220 (conditional_expression -> coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 220 (conditional_expression -> coalesce_expression .)
    PRINT           reduce using rule 220 (conditional_expression -> coalesce_expression .)
    YIELD           reduce using rule 220 (conditional_expression -> coalesce_expression .)
    YIELD_FROM      reduce using rule 220 (conditional_expression -> coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 220 (conditional_expression -> coalesce_expression .)
    COLON           reduce using rule 220 (conditional_expression -> coalesce_expression .)
    AS              reduce using rule 220 (conditional_expression -> coalesce_expression .)
    ARROW           reduce using rule 220 (conditional_expression -> coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 220 (conditional_expression -> coalesce_expression .)
    VARIABLE        reduce using rule 220 (conditional_expression -> coalesce_expression .)
    DOUBLE_POINT    reduce using rule 220 (conditional_expression -> coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 220 (conditional_expression -> coalesce_expression .)
    ELLIPSIS        reduce using rule 220 (conditional_expression -> coalesce_expression .)
    AMPERSAND       reduce using rule 220 (conditional_expression -> coalesce_expression .)
    ARRAY           reduce using rule 220 (conditional_expression -> coalesce_expression .)
    CALLABLE        reduce using rule 220 (conditional_expression -> coalesce_expression .)
    ITERABLE        reduce using rule 220 (conditional_expression -> coalesce_expression .)
    BOOL            reduce using rule 220 (conditional_expression -> coalesce_expression .)
    FLOAT           reduce using rule 220 (conditional_expression -> coalesce_expression .)
    INT             reduce using rule 220 (conditional_expression -> coalesce_expression .)


state 164

    (226) simple_assignment_expression -> variable . EQUAL assignment_expression
    (242) compound_assignment_expression -> variable . compound_assignment_operator assignment_expression
    (46) dereferencable_expression -> variable .
    (28) primary_expression -> variable .
    (150) postfix_increment_expression -> variable . DOUBLEPLUS
    (151) postfix_decrement_expression -> variable . DOUBLELESS
    (241) byref_assignment_expression -> variable . EQUAL AMPERSAND variable
    (243) compound_assignment_operator -> . POW_EQUAL
    (244) compound_assignment_operator -> . MUL_EQUAL
    (245) compound_assignment_operator -> . DIV_EQUAL
    (246) compound_assignment_operator -> . MOD_EQUAL
    (247) compound_assignment_operator -> . PLUS_EQUAL
    (248) compound_assignment_operator -> . MINUS_EQUAL
    (249) compound_assignment_operator -> . CONCAT_EQUAL
    (250) compound_assignment_operator -> . SL_EQUAL
    (251) compound_assignment_operator -> . SR_EQUAL
    (252) compound_assignment_operator -> . AND_EQUAL
    (253) compound_assignment_operator -> . XOR_EQUAL
    (254) compound_assignment_operator -> . OR_EQUAL

  ! shift/reduce conflict for EQUAL resolved as shift
  ! reduce/reduce conflict for ARROW resolved using rule 28 (primary_expression -> variable .)
    EQUAL           shift and go to state 315
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 28 (primary_expression -> variable .)
    ASTERISK        reduce using rule 28 (primary_expression -> variable .)
    DIVIDE          reduce using rule 28 (primary_expression -> variable .)
    MODULO          reduce using rule 28 (primary_expression -> variable .)
    PLUS            reduce using rule 28 (primary_expression -> variable .)
    LESS            reduce using rule 28 (primary_expression -> variable .)
    CONCAT          reduce using rule 28 (primary_expression -> variable .)
    SL              reduce using rule 28 (primary_expression -> variable .)
    SR              reduce using rule 28 (primary_expression -> variable .)
    LESS_THAN       reduce using rule 28 (primary_expression -> variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (primary_expression -> variable .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (primary_expression -> variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 28 (primary_expression -> variable .)
    SPACESHIP       reduce using rule 28 (primary_expression -> variable .)
    IS_NOT_EQUAL    reduce using rule 28 (primary_expression -> variable .)
    IS_IDENTICAL    reduce using rule 28 (primary_expression -> variable .)
    IS_NOT_IDENTICAL reduce using rule 28 (primary_expression -> variable .)
    AMPERSAND       reduce using rule 28 (primary_expression -> variable .)
    BITWISE_XOR     reduce using rule 28 (primary_expression -> variable .)
    BITWISE_OR      reduce using rule 28 (primary_expression -> variable .)
    COALESCE        reduce using rule 28 (primary_expression -> variable .)
    TERNARY_OPERATION reduce using rule 28 (primary_expression -> variable .)
    AND             reduce using rule 28 (primary_expression -> variable .)
    XOR             reduce using rule 28 (primary_expression -> variable .)
    OR              reduce using rule 28 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 28 (primary_expression -> variable .)
    STRING          reduce using rule 28 (primary_expression -> variable .)
    INCLUDE         reduce using rule 28 (primary_expression -> variable .)
    INCLUDE_ONCE    reduce using rule 28 (primary_expression -> variable .)
    REQUIRE         reduce using rule 28 (primary_expression -> variable .)
    REQUIRE_ONCE    reduce using rule 28 (primary_expression -> variable .)
    PRINT           reduce using rule 28 (primary_expression -> variable .)
    YIELD           reduce using rule 28 (primary_expression -> variable .)
    YIELD_FROM      reduce using rule 28 (primary_expression -> variable .)
    RIGHT_PARENTHESIS reduce using rule 28 (primary_expression -> variable .)
    COLON           reduce using rule 28 (primary_expression -> variable .)
    AS              reduce using rule 28 (primary_expression -> variable .)
    ARROW           reduce using rule 28 (primary_expression -> variable .)
    RIGHT_CBRAC     reduce using rule 28 (primary_expression -> variable .)
    VARIABLE        reduce using rule 28 (primary_expression -> variable .)
    DOUBLE_POINT    reduce using rule 28 (primary_expression -> variable .)
    DOUBLE_ARROW    reduce using rule 28 (primary_expression -> variable .)
    ELLIPSIS        reduce using rule 28 (primary_expression -> variable .)
    ARRAY           reduce using rule 28 (primary_expression -> variable .)
    CALLABLE        reduce using rule 28 (primary_expression -> variable .)
    ITERABLE        reduce using rule 28 (primary_expression -> variable .)
    BOOL            reduce using rule 28 (primary_expression -> variable .)
    FLOAT           reduce using rule 28 (primary_expression -> variable .)
    INT             reduce using rule 28 (primary_expression -> variable .)
    INSTANCEOF      reduce using rule 28 (primary_expression -> variable .)
    DOUBLEPLUS      shift and go to state 317
    DOUBLELESS      shift and go to state 318
    POW_EQUAL       shift and go to state 319
    MUL_EQUAL       shift and go to state 320
    DIV_EQUAL       shift and go to state 321
    MOD_EQUAL       shift and go to state 322
    PLUS_EQUAL      shift and go to state 323
    MINUS_EQUAL     shift and go to state 324
    CONCAT_EQUAL    shift and go to state 325
    SL_EQUAL        shift and go to state 326
    SR_EQUAL        shift and go to state 327
    AND_EQUAL       shift and go to state 328
    XOR_EQUAL       shift and go to state 329
    OR_EQUAL        shift and go to state 330

  ! ARROW           [ reduce using rule 46 (dereferencable_expression -> variable .) ]
  ! EQUAL           [ reduce using rule 28 (primary_expression -> variable .) ]

    compound_assignment_operator   shift and go to state 316

state 165

    (227) simple_assignment_expression -> list_intrinsic . EQUAL assignment_expression

    EQUAL           shift and go to state 331


state 166

    (218) coalesce_expression -> logical_inc_OR_expression_1 .
    (219) coalesce_expression -> logical_inc_OR_expression_1 . COALESCE coalesce_expression
    (217) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 . BITWISE_OR BITWISE_OR logical_AND_expression_1

    TERNARY_OPERATION reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    AND             reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    XOR             reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    OR              reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    SEMICOLON       reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    STRING          reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    INCLUDE         reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    INCLUDE_ONCE    reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    REQUIRE         reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    REQUIRE_ONCE    reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    PRINT           reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    YIELD           reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    YIELD_FROM      reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    RIGHT_PARENTHESIS reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    COLON           reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    AS              reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ARROW           reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    RIGHT_CBRAC     reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    VARIABLE        reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    DOUBLE_POINT    reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    DOUBLE_ARROW    reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ELLIPSIS        reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    AMPERSAND       reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ARRAY           reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    CALLABLE        reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    ITERABLE        reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    BOOL            reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    FLOAT           reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    INT             reduce using rule 218 (coalesce_expression -> logical_inc_OR_expression_1 .)
    COALESCE        shift and go to state 332
    BITWISE_OR      shift and go to state 333


state 167

    (59) variable -> callable_variable .
    (50) callable_expression -> callable_variable .

  ! reduce/reduce conflict for LEFT_PARENTHESIS resolved using rule 50 (callable_expression -> callable_variable .)
    EQUAL           reduce using rule 59 (variable -> callable_variable .)
    DOUBLEPLUS      reduce using rule 59 (variable -> callable_variable .)
    DOUBLELESS      reduce using rule 59 (variable -> callable_variable .)
    POW_EQUAL       reduce using rule 59 (variable -> callable_variable .)
    MUL_EQUAL       reduce using rule 59 (variable -> callable_variable .)
    DIV_EQUAL       reduce using rule 59 (variable -> callable_variable .)
    MOD_EQUAL       reduce using rule 59 (variable -> callable_variable .)
    PLUS_EQUAL      reduce using rule 59 (variable -> callable_variable .)
    MINUS_EQUAL     reduce using rule 59 (variable -> callable_variable .)
    CONCAT_EQUAL    reduce using rule 59 (variable -> callable_variable .)
    SL_EQUAL        reduce using rule 59 (variable -> callable_variable .)
    SR_EQUAL        reduce using rule 59 (variable -> callable_variable .)
    AND_EQUAL       reduce using rule 59 (variable -> callable_variable .)
    XOR_EQUAL       reduce using rule 59 (variable -> callable_variable .)
    OR_EQUAL        reduce using rule 59 (variable -> callable_variable .)
    ARROW           reduce using rule 59 (variable -> callable_variable .)
    LEFT_CBRAC      reduce using rule 59 (variable -> callable_variable .)
    DOUBLE_COLON    reduce using rule 59 (variable -> callable_variable .)
    DOUBLEASTERISK  reduce using rule 59 (variable -> callable_variable .)
    ASTERISK        reduce using rule 59 (variable -> callable_variable .)
    DIVIDE          reduce using rule 59 (variable -> callable_variable .)
    MODULO          reduce using rule 59 (variable -> callable_variable .)
    PLUS            reduce using rule 59 (variable -> callable_variable .)
    LESS            reduce using rule 59 (variable -> callable_variable .)
    CONCAT          reduce using rule 59 (variable -> callable_variable .)
    SL              reduce using rule 59 (variable -> callable_variable .)
    SR              reduce using rule 59 (variable -> callable_variable .)
    LESS_THAN       reduce using rule 59 (variable -> callable_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 59 (variable -> callable_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 59 (variable -> callable_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 59 (variable -> callable_variable .)
    SPACESHIP       reduce using rule 59 (variable -> callable_variable .)
    IS_NOT_EQUAL    reduce using rule 59 (variable -> callable_variable .)
    IS_IDENTICAL    reduce using rule 59 (variable -> callable_variable .)
    IS_NOT_IDENTICAL reduce using rule 59 (variable -> callable_variable .)
    AMPERSAND       reduce using rule 59 (variable -> callable_variable .)
    BITWISE_XOR     reduce using rule 59 (variable -> callable_variable .)
    BITWISE_OR      reduce using rule 59 (variable -> callable_variable .)
    COALESCE        reduce using rule 59 (variable -> callable_variable .)
    TERNARY_OPERATION reduce using rule 59 (variable -> callable_variable .)
    AND             reduce using rule 59 (variable -> callable_variable .)
    XOR             reduce using rule 59 (variable -> callable_variable .)
    OR              reduce using rule 59 (variable -> callable_variable .)
    SEMICOLON       reduce using rule 59 (variable -> callable_variable .)
    STRING          reduce using rule 59 (variable -> callable_variable .)
    INCLUDE         reduce using rule 59 (variable -> callable_variable .)
    INCLUDE_ONCE    reduce using rule 59 (variable -> callable_variable .)
    REQUIRE         reduce using rule 59 (variable -> callable_variable .)
    REQUIRE_ONCE    reduce using rule 59 (variable -> callable_variable .)
    PRINT           reduce using rule 59 (variable -> callable_variable .)
    YIELD           reduce using rule 59 (variable -> callable_variable .)
    YIELD_FROM      reduce using rule 59 (variable -> callable_variable .)
    RIGHT_PARENTHESIS reduce using rule 59 (variable -> callable_variable .)
    COLON           reduce using rule 59 (variable -> callable_variable .)
    AS              reduce using rule 59 (variable -> callable_variable .)
    RIGHT_CBRAC     reduce using rule 59 (variable -> callable_variable .)
    VARIABLE        reduce using rule 59 (variable -> callable_variable .)
    DOUBLE_POINT    reduce using rule 59 (variable -> callable_variable .)
    DOUBLE_ARROW    reduce using rule 59 (variable -> callable_variable .)
    ELLIPSIS        reduce using rule 59 (variable -> callable_variable .)
    ARRAY           reduce using rule 59 (variable -> callable_variable .)
    CALLABLE        reduce using rule 59 (variable -> callable_variable .)
    ITERABLE        reduce using rule 59 (variable -> callable_variable .)
    BOOL            reduce using rule 59 (variable -> callable_variable .)
    FLOAT           reduce using rule 59 (variable -> callable_variable .)
    INT             reduce using rule 59 (variable -> callable_variable .)
    INSTANCEOF      reduce using rule 59 (variable -> callable_variable .)
    DOLLAR          reduce using rule 59 (variable -> callable_variable .)
    SELF            reduce using rule 59 (variable -> callable_variable .)
    PARENT          reduce using rule 59 (variable -> callable_variable .)
    STATIC          reduce using rule 59 (variable -> callable_variable .)
    LEFT_PARENTHESIS reduce using rule 50 (callable_expression -> callable_variable .)

  ! LEFT_PARENTHESIS [ reduce using rule 59 (variable -> callable_variable .) ]


state 168

    (60) variable -> scoped_property_access_expression .

    EQUAL           reduce using rule 60 (variable -> scoped_property_access_expression .)
    DOUBLEPLUS      reduce using rule 60 (variable -> scoped_property_access_expression .)
    DOUBLELESS      reduce using rule 60 (variable -> scoped_property_access_expression .)
    POW_EQUAL       reduce using rule 60 (variable -> scoped_property_access_expression .)
    MUL_EQUAL       reduce using rule 60 (variable -> scoped_property_access_expression .)
    DIV_EQUAL       reduce using rule 60 (variable -> scoped_property_access_expression .)
    MOD_EQUAL       reduce using rule 60 (variable -> scoped_property_access_expression .)
    PLUS_EQUAL      reduce using rule 60 (variable -> scoped_property_access_expression .)
    MINUS_EQUAL     reduce using rule 60 (variable -> scoped_property_access_expression .)
    CONCAT_EQUAL    reduce using rule 60 (variable -> scoped_property_access_expression .)
    SL_EQUAL        reduce using rule 60 (variable -> scoped_property_access_expression .)
    SR_EQUAL        reduce using rule 60 (variable -> scoped_property_access_expression .)
    AND_EQUAL       reduce using rule 60 (variable -> scoped_property_access_expression .)
    XOR_EQUAL       reduce using rule 60 (variable -> scoped_property_access_expression .)
    OR_EQUAL        reduce using rule 60 (variable -> scoped_property_access_expression .)
    ARROW           reduce using rule 60 (variable -> scoped_property_access_expression .)
    LEFT_CBRAC      reduce using rule 60 (variable -> scoped_property_access_expression .)
    DOUBLE_COLON    reduce using rule 60 (variable -> scoped_property_access_expression .)
    DOUBLEASTERISK  reduce using rule 60 (variable -> scoped_property_access_expression .)
    ASTERISK        reduce using rule 60 (variable -> scoped_property_access_expression .)
    DIVIDE          reduce using rule 60 (variable -> scoped_property_access_expression .)
    MODULO          reduce using rule 60 (variable -> scoped_property_access_expression .)
    PLUS            reduce using rule 60 (variable -> scoped_property_access_expression .)
    LESS            reduce using rule 60 (variable -> scoped_property_access_expression .)
    CONCAT          reduce using rule 60 (variable -> scoped_property_access_expression .)
    SL              reduce using rule 60 (variable -> scoped_property_access_expression .)
    SR              reduce using rule 60 (variable -> scoped_property_access_expression .)
    LESS_THAN       reduce using rule 60 (variable -> scoped_property_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 60 (variable -> scoped_property_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 60 (variable -> scoped_property_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 60 (variable -> scoped_property_access_expression .)
    SPACESHIP       reduce using rule 60 (variable -> scoped_property_access_expression .)
    IS_NOT_EQUAL    reduce using rule 60 (variable -> scoped_property_access_expression .)
    IS_IDENTICAL    reduce using rule 60 (variable -> scoped_property_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 60 (variable -> scoped_property_access_expression .)
    AMPERSAND       reduce using rule 60 (variable -> scoped_property_access_expression .)
    BITWISE_XOR     reduce using rule 60 (variable -> scoped_property_access_expression .)
    BITWISE_OR      reduce using rule 60 (variable -> scoped_property_access_expression .)
    COALESCE        reduce using rule 60 (variable -> scoped_property_access_expression .)
    TERNARY_OPERATION reduce using rule 60 (variable -> scoped_property_access_expression .)
    AND             reduce using rule 60 (variable -> scoped_property_access_expression .)
    XOR             reduce using rule 60 (variable -> scoped_property_access_expression .)
    OR              reduce using rule 60 (variable -> scoped_property_access_expression .)
    SEMICOLON       reduce using rule 60 (variable -> scoped_property_access_expression .)
    STRING          reduce using rule 60 (variable -> scoped_property_access_expression .)
    INCLUDE         reduce using rule 60 (variable -> scoped_property_access_expression .)
    INCLUDE_ONCE    reduce using rule 60 (variable -> scoped_property_access_expression .)
    REQUIRE         reduce using rule 60 (variable -> scoped_property_access_expression .)
    REQUIRE_ONCE    reduce using rule 60 (variable -> scoped_property_access_expression .)
    PRINT           reduce using rule 60 (variable -> scoped_property_access_expression .)
    YIELD           reduce using rule 60 (variable -> scoped_property_access_expression .)
    YIELD_FROM      reduce using rule 60 (variable -> scoped_property_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 60 (variable -> scoped_property_access_expression .)
    COLON           reduce using rule 60 (variable -> scoped_property_access_expression .)
    AS              reduce using rule 60 (variable -> scoped_property_access_expression .)
    RIGHT_CBRAC     reduce using rule 60 (variable -> scoped_property_access_expression .)
    VARIABLE        reduce using rule 60 (variable -> scoped_property_access_expression .)
    DOUBLE_POINT    reduce using rule 60 (variable -> scoped_property_access_expression .)
    DOUBLE_ARROW    reduce using rule 60 (variable -> scoped_property_access_expression .)
    ELLIPSIS        reduce using rule 60 (variable -> scoped_property_access_expression .)
    ARRAY           reduce using rule 60 (variable -> scoped_property_access_expression .)
    CALLABLE        reduce using rule 60 (variable -> scoped_property_access_expression .)
    ITERABLE        reduce using rule 60 (variable -> scoped_property_access_expression .)
    BOOL            reduce using rule 60 (variable -> scoped_property_access_expression .)
    FLOAT           reduce using rule 60 (variable -> scoped_property_access_expression .)
    INT             reduce using rule 60 (variable -> scoped_property_access_expression .)
    INSTANCEOF      reduce using rule 60 (variable -> scoped_property_access_expression .)
    DOLLAR          reduce using rule 60 (variable -> scoped_property_access_expression .)
    LEFT_PARENTHESIS reduce using rule 60 (variable -> scoped_property_access_expression .)
    SELF            reduce using rule 60 (variable -> scoped_property_access_expression .)
    PARENT          reduce using rule 60 (variable -> scoped_property_access_expression .)
    STATIC          reduce using rule 60 (variable -> scoped_property_access_expression .)


state 169

    (61) variable -> member_access_expression .

    EQUAL           reduce using rule 61 (variable -> member_access_expression .)
    DOUBLEPLUS      reduce using rule 61 (variable -> member_access_expression .)
    DOUBLELESS      reduce using rule 61 (variable -> member_access_expression .)
    POW_EQUAL       reduce using rule 61 (variable -> member_access_expression .)
    MUL_EQUAL       reduce using rule 61 (variable -> member_access_expression .)
    DIV_EQUAL       reduce using rule 61 (variable -> member_access_expression .)
    MOD_EQUAL       reduce using rule 61 (variable -> member_access_expression .)
    PLUS_EQUAL      reduce using rule 61 (variable -> member_access_expression .)
    MINUS_EQUAL     reduce using rule 61 (variable -> member_access_expression .)
    CONCAT_EQUAL    reduce using rule 61 (variable -> member_access_expression .)
    SL_EQUAL        reduce using rule 61 (variable -> member_access_expression .)
    SR_EQUAL        reduce using rule 61 (variable -> member_access_expression .)
    AND_EQUAL       reduce using rule 61 (variable -> member_access_expression .)
    XOR_EQUAL       reduce using rule 61 (variable -> member_access_expression .)
    OR_EQUAL        reduce using rule 61 (variable -> member_access_expression .)
    ARROW           reduce using rule 61 (variable -> member_access_expression .)
    LEFT_CBRAC      reduce using rule 61 (variable -> member_access_expression .)
    DOUBLE_COLON    reduce using rule 61 (variable -> member_access_expression .)
    DOUBLEASTERISK  reduce using rule 61 (variable -> member_access_expression .)
    ASTERISK        reduce using rule 61 (variable -> member_access_expression .)
    DIVIDE          reduce using rule 61 (variable -> member_access_expression .)
    MODULO          reduce using rule 61 (variable -> member_access_expression .)
    PLUS            reduce using rule 61 (variable -> member_access_expression .)
    LESS            reduce using rule 61 (variable -> member_access_expression .)
    CONCAT          reduce using rule 61 (variable -> member_access_expression .)
    SL              reduce using rule 61 (variable -> member_access_expression .)
    SR              reduce using rule 61 (variable -> member_access_expression .)
    LESS_THAN       reduce using rule 61 (variable -> member_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 61 (variable -> member_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 61 (variable -> member_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 61 (variable -> member_access_expression .)
    SPACESHIP       reduce using rule 61 (variable -> member_access_expression .)
    IS_NOT_EQUAL    reduce using rule 61 (variable -> member_access_expression .)
    IS_IDENTICAL    reduce using rule 61 (variable -> member_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 61 (variable -> member_access_expression .)
    AMPERSAND       reduce using rule 61 (variable -> member_access_expression .)
    BITWISE_XOR     reduce using rule 61 (variable -> member_access_expression .)
    BITWISE_OR      reduce using rule 61 (variable -> member_access_expression .)
    COALESCE        reduce using rule 61 (variable -> member_access_expression .)
    TERNARY_OPERATION reduce using rule 61 (variable -> member_access_expression .)
    AND             reduce using rule 61 (variable -> member_access_expression .)
    XOR             reduce using rule 61 (variable -> member_access_expression .)
    OR              reduce using rule 61 (variable -> member_access_expression .)
    SEMICOLON       reduce using rule 61 (variable -> member_access_expression .)
    STRING          reduce using rule 61 (variable -> member_access_expression .)
    INCLUDE         reduce using rule 61 (variable -> member_access_expression .)
    INCLUDE_ONCE    reduce using rule 61 (variable -> member_access_expression .)
    REQUIRE         reduce using rule 61 (variable -> member_access_expression .)
    REQUIRE_ONCE    reduce using rule 61 (variable -> member_access_expression .)
    PRINT           reduce using rule 61 (variable -> member_access_expression .)
    YIELD           reduce using rule 61 (variable -> member_access_expression .)
    YIELD_FROM      reduce using rule 61 (variable -> member_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 61 (variable -> member_access_expression .)
    COLON           reduce using rule 61 (variable -> member_access_expression .)
    AS              reduce using rule 61 (variable -> member_access_expression .)
    RIGHT_CBRAC     reduce using rule 61 (variable -> member_access_expression .)
    VARIABLE        reduce using rule 61 (variable -> member_access_expression .)
    DOUBLE_POINT    reduce using rule 61 (variable -> member_access_expression .)
    DOUBLE_ARROW    reduce using rule 61 (variable -> member_access_expression .)
    ELLIPSIS        reduce using rule 61 (variable -> member_access_expression .)
    ARRAY           reduce using rule 61 (variable -> member_access_expression .)
    CALLABLE        reduce using rule 61 (variable -> member_access_expression .)
    ITERABLE        reduce using rule 61 (variable -> member_access_expression .)
    BOOL            reduce using rule 61 (variable -> member_access_expression .)
    FLOAT           reduce using rule 61 (variable -> member_access_expression .)
    INT             reduce using rule 61 (variable -> member_access_expression .)
    INSTANCEOF      reduce using rule 61 (variable -> member_access_expression .)
    DOLLAR          reduce using rule 61 (variable -> member_access_expression .)
    LEFT_PARENTHESIS reduce using rule 61 (variable -> member_access_expression .)
    SELF            reduce using rule 61 (variable -> member_access_expression .)
    PARENT          reduce using rule 61 (variable -> member_access_expression .)
    STATIC          reduce using rule 61 (variable -> member_access_expression .)


state 170

    (228) list_intrinsic -> LIST . LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 334


state 171

    (47) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (51) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (180) cast_expression -> LEFT_PARENTHESIS . RIGHT_PARENTHESIS unary_expression
    (42) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 336
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 335
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 172

    (216) logical_inc_OR_expression_1 -> logical_AND_expression_1 .
    (215) logical_AND_expression_1 -> logical_AND_expression_1 . AMPERSAND AMPERSAND bitwise_inc_OR_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    COALESCE        reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    BITWISE_OR      reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    TERNARY_OPERATION reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    AND             reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    XOR             reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    OR              reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    SEMICOLON       reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    STRING          reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    INCLUDE         reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    INCLUDE_ONCE    reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    REQUIRE         reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    REQUIRE_ONCE    reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    PRINT           reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    YIELD           reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    YIELD_FROM      reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    RIGHT_PARENTHESIS reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    COLON           reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    AS              reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ARROW           reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    RIGHT_CBRAC     reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    VARIABLE        reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    DOUBLE_POINT    reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    DOUBLE_ARROW    reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ELLIPSIS        reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ARRAY           reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    CALLABLE        reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    ITERABLE        reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    BOOL            reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    FLOAT           reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    INT             reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .)
    AMPERSAND       shift and go to state 337

  ! AMPERSAND       [ reduce using rule 216 (logical_inc_OR_expression_1 -> logical_AND_expression_1 .) ]


state 173

    (54) callable_variable -> simple_variable .

    EQUAL           reduce using rule 54 (callable_variable -> simple_variable .)
    DOUBLEPLUS      reduce using rule 54 (callable_variable -> simple_variable .)
    DOUBLELESS      reduce using rule 54 (callable_variable -> simple_variable .)
    POW_EQUAL       reduce using rule 54 (callable_variable -> simple_variable .)
    MUL_EQUAL       reduce using rule 54 (callable_variable -> simple_variable .)
    DIV_EQUAL       reduce using rule 54 (callable_variable -> simple_variable .)
    MOD_EQUAL       reduce using rule 54 (callable_variable -> simple_variable .)
    PLUS_EQUAL      reduce using rule 54 (callable_variable -> simple_variable .)
    MINUS_EQUAL     reduce using rule 54 (callable_variable -> simple_variable .)
    CONCAT_EQUAL    reduce using rule 54 (callable_variable -> simple_variable .)
    SL_EQUAL        reduce using rule 54 (callable_variable -> simple_variable .)
    SR_EQUAL        reduce using rule 54 (callable_variable -> simple_variable .)
    AND_EQUAL       reduce using rule 54 (callable_variable -> simple_variable .)
    XOR_EQUAL       reduce using rule 54 (callable_variable -> simple_variable .)
    OR_EQUAL        reduce using rule 54 (callable_variable -> simple_variable .)
    ARROW           reduce using rule 54 (callable_variable -> simple_variable .)
    LEFT_CBRAC      reduce using rule 54 (callable_variable -> simple_variable .)
    DOUBLE_COLON    reduce using rule 54 (callable_variable -> simple_variable .)
    DOUBLEASTERISK  reduce using rule 54 (callable_variable -> simple_variable .)
    ASTERISK        reduce using rule 54 (callable_variable -> simple_variable .)
    DIVIDE          reduce using rule 54 (callable_variable -> simple_variable .)
    MODULO          reduce using rule 54 (callable_variable -> simple_variable .)
    PLUS            reduce using rule 54 (callable_variable -> simple_variable .)
    LESS            reduce using rule 54 (callable_variable -> simple_variable .)
    CONCAT          reduce using rule 54 (callable_variable -> simple_variable .)
    SL              reduce using rule 54 (callable_variable -> simple_variable .)
    SR              reduce using rule 54 (callable_variable -> simple_variable .)
    LESS_THAN       reduce using rule 54 (callable_variable -> simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 54 (callable_variable -> simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 54 (callable_variable -> simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 54 (callable_variable -> simple_variable .)
    SPACESHIP       reduce using rule 54 (callable_variable -> simple_variable .)
    IS_NOT_EQUAL    reduce using rule 54 (callable_variable -> simple_variable .)
    IS_IDENTICAL    reduce using rule 54 (callable_variable -> simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 54 (callable_variable -> simple_variable .)
    AMPERSAND       reduce using rule 54 (callable_variable -> simple_variable .)
    BITWISE_XOR     reduce using rule 54 (callable_variable -> simple_variable .)
    BITWISE_OR      reduce using rule 54 (callable_variable -> simple_variable .)
    COALESCE        reduce using rule 54 (callable_variable -> simple_variable .)
    TERNARY_OPERATION reduce using rule 54 (callable_variable -> simple_variable .)
    AND             reduce using rule 54 (callable_variable -> simple_variable .)
    XOR             reduce using rule 54 (callable_variable -> simple_variable .)
    OR              reduce using rule 54 (callable_variable -> simple_variable .)
    SEMICOLON       reduce using rule 54 (callable_variable -> simple_variable .)
    STRING          reduce using rule 54 (callable_variable -> simple_variable .)
    INCLUDE         reduce using rule 54 (callable_variable -> simple_variable .)
    INCLUDE_ONCE    reduce using rule 54 (callable_variable -> simple_variable .)
    REQUIRE         reduce using rule 54 (callable_variable -> simple_variable .)
    REQUIRE_ONCE    reduce using rule 54 (callable_variable -> simple_variable .)
    PRINT           reduce using rule 54 (callable_variable -> simple_variable .)
    YIELD           reduce using rule 54 (callable_variable -> simple_variable .)
    YIELD_FROM      reduce using rule 54 (callable_variable -> simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 54 (callable_variable -> simple_variable .)
    COLON           reduce using rule 54 (callable_variable -> simple_variable .)
    AS              reduce using rule 54 (callable_variable -> simple_variable .)
    RIGHT_CBRAC     reduce using rule 54 (callable_variable -> simple_variable .)
    VARIABLE        reduce using rule 54 (callable_variable -> simple_variable .)
    DOUBLE_POINT    reduce using rule 54 (callable_variable -> simple_variable .)
    DOUBLE_ARROW    reduce using rule 54 (callable_variable -> simple_variable .)
    ELLIPSIS        reduce using rule 54 (callable_variable -> simple_variable .)
    ARRAY           reduce using rule 54 (callable_variable -> simple_variable .)
    CALLABLE        reduce using rule 54 (callable_variable -> simple_variable .)
    ITERABLE        reduce using rule 54 (callable_variable -> simple_variable .)
    BOOL            reduce using rule 54 (callable_variable -> simple_variable .)
    FLOAT           reduce using rule 54 (callable_variable -> simple_variable .)
    INT             reduce using rule 54 (callable_variable -> simple_variable .)
    INSTANCEOF      reduce using rule 54 (callable_variable -> simple_variable .)
    LEFT_PARENTHESIS reduce using rule 54 (callable_variable -> simple_variable .)
    DOLLAR          reduce using rule 54 (callable_variable -> simple_variable .)
    SELF            reduce using rule 54 (callable_variable -> simple_variable .)
    PARENT          reduce using rule 54 (callable_variable -> simple_variable .)
    STATIC          reduce using rule 54 (callable_variable -> simple_variable .)


state 174

    (55) callable_variable -> subscript_expression .

    EQUAL           reduce using rule 55 (callable_variable -> subscript_expression .)
    DOUBLEPLUS      reduce using rule 55 (callable_variable -> subscript_expression .)
    DOUBLELESS      reduce using rule 55 (callable_variable -> subscript_expression .)
    POW_EQUAL       reduce using rule 55 (callable_variable -> subscript_expression .)
    MUL_EQUAL       reduce using rule 55 (callable_variable -> subscript_expression .)
    DIV_EQUAL       reduce using rule 55 (callable_variable -> subscript_expression .)
    MOD_EQUAL       reduce using rule 55 (callable_variable -> subscript_expression .)
    PLUS_EQUAL      reduce using rule 55 (callable_variable -> subscript_expression .)
    MINUS_EQUAL     reduce using rule 55 (callable_variable -> subscript_expression .)
    CONCAT_EQUAL    reduce using rule 55 (callable_variable -> subscript_expression .)
    SL_EQUAL        reduce using rule 55 (callable_variable -> subscript_expression .)
    SR_EQUAL        reduce using rule 55 (callable_variable -> subscript_expression .)
    AND_EQUAL       reduce using rule 55 (callable_variable -> subscript_expression .)
    XOR_EQUAL       reduce using rule 55 (callable_variable -> subscript_expression .)
    OR_EQUAL        reduce using rule 55 (callable_variable -> subscript_expression .)
    ARROW           reduce using rule 55 (callable_variable -> subscript_expression .)
    LEFT_CBRAC      reduce using rule 55 (callable_variable -> subscript_expression .)
    DOUBLE_COLON    reduce using rule 55 (callable_variable -> subscript_expression .)
    DOUBLEASTERISK  reduce using rule 55 (callable_variable -> subscript_expression .)
    ASTERISK        reduce using rule 55 (callable_variable -> subscript_expression .)
    DIVIDE          reduce using rule 55 (callable_variable -> subscript_expression .)
    MODULO          reduce using rule 55 (callable_variable -> subscript_expression .)
    PLUS            reduce using rule 55 (callable_variable -> subscript_expression .)
    LESS            reduce using rule 55 (callable_variable -> subscript_expression .)
    CONCAT          reduce using rule 55 (callable_variable -> subscript_expression .)
    SL              reduce using rule 55 (callable_variable -> subscript_expression .)
    SR              reduce using rule 55 (callable_variable -> subscript_expression .)
    LESS_THAN       reduce using rule 55 (callable_variable -> subscript_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 55 (callable_variable -> subscript_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 55 (callable_variable -> subscript_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 55 (callable_variable -> subscript_expression .)
    SPACESHIP       reduce using rule 55 (callable_variable -> subscript_expression .)
    IS_NOT_EQUAL    reduce using rule 55 (callable_variable -> subscript_expression .)
    IS_IDENTICAL    reduce using rule 55 (callable_variable -> subscript_expression .)
    IS_NOT_IDENTICAL reduce using rule 55 (callable_variable -> subscript_expression .)
    AMPERSAND       reduce using rule 55 (callable_variable -> subscript_expression .)
    BITWISE_XOR     reduce using rule 55 (callable_variable -> subscript_expression .)
    BITWISE_OR      reduce using rule 55 (callable_variable -> subscript_expression .)
    COALESCE        reduce using rule 55 (callable_variable -> subscript_expression .)
    TERNARY_OPERATION reduce using rule 55 (callable_variable -> subscript_expression .)
    AND             reduce using rule 55 (callable_variable -> subscript_expression .)
    XOR             reduce using rule 55 (callable_variable -> subscript_expression .)
    OR              reduce using rule 55 (callable_variable -> subscript_expression .)
    SEMICOLON       reduce using rule 55 (callable_variable -> subscript_expression .)
    STRING          reduce using rule 55 (callable_variable -> subscript_expression .)
    INCLUDE         reduce using rule 55 (callable_variable -> subscript_expression .)
    INCLUDE_ONCE    reduce using rule 55 (callable_variable -> subscript_expression .)
    REQUIRE         reduce using rule 55 (callable_variable -> subscript_expression .)
    REQUIRE_ONCE    reduce using rule 55 (callable_variable -> subscript_expression .)
    PRINT           reduce using rule 55 (callable_variable -> subscript_expression .)
    YIELD           reduce using rule 55 (callable_variable -> subscript_expression .)
    YIELD_FROM      reduce using rule 55 (callable_variable -> subscript_expression .)
    RIGHT_PARENTHESIS reduce using rule 55 (callable_variable -> subscript_expression .)
    COLON           reduce using rule 55 (callable_variable -> subscript_expression .)
    AS              reduce using rule 55 (callable_variable -> subscript_expression .)
    RIGHT_CBRAC     reduce using rule 55 (callable_variable -> subscript_expression .)
    VARIABLE        reduce using rule 55 (callable_variable -> subscript_expression .)
    DOUBLE_POINT    reduce using rule 55 (callable_variable -> subscript_expression .)
    DOUBLE_ARROW    reduce using rule 55 (callable_variable -> subscript_expression .)
    ELLIPSIS        reduce using rule 55 (callable_variable -> subscript_expression .)
    ARRAY           reduce using rule 55 (callable_variable -> subscript_expression .)
    CALLABLE        reduce using rule 55 (callable_variable -> subscript_expression .)
    ITERABLE        reduce using rule 55 (callable_variable -> subscript_expression .)
    BOOL            reduce using rule 55 (callable_variable -> subscript_expression .)
    FLOAT           reduce using rule 55 (callable_variable -> subscript_expression .)
    INT             reduce using rule 55 (callable_variable -> subscript_expression .)
    INSTANCEOF      reduce using rule 55 (callable_variable -> subscript_expression .)
    LEFT_PARENTHESIS reduce using rule 55 (callable_variable -> subscript_expression .)
    DOLLAR          reduce using rule 55 (callable_variable -> subscript_expression .)
    SELF            reduce using rule 55 (callable_variable -> subscript_expression .)
    PARENT          reduce using rule 55 (callable_variable -> subscript_expression .)
    STATIC          reduce using rule 55 (callable_variable -> subscript_expression .)


state 175

    (56) callable_variable -> member_call_expression .

    EQUAL           reduce using rule 56 (callable_variable -> member_call_expression .)
    DOUBLEPLUS      reduce using rule 56 (callable_variable -> member_call_expression .)
    DOUBLELESS      reduce using rule 56 (callable_variable -> member_call_expression .)
    POW_EQUAL       reduce using rule 56 (callable_variable -> member_call_expression .)
    MUL_EQUAL       reduce using rule 56 (callable_variable -> member_call_expression .)
    DIV_EQUAL       reduce using rule 56 (callable_variable -> member_call_expression .)
    MOD_EQUAL       reduce using rule 56 (callable_variable -> member_call_expression .)
    PLUS_EQUAL      reduce using rule 56 (callable_variable -> member_call_expression .)
    MINUS_EQUAL     reduce using rule 56 (callable_variable -> member_call_expression .)
    CONCAT_EQUAL    reduce using rule 56 (callable_variable -> member_call_expression .)
    SL_EQUAL        reduce using rule 56 (callable_variable -> member_call_expression .)
    SR_EQUAL        reduce using rule 56 (callable_variable -> member_call_expression .)
    AND_EQUAL       reduce using rule 56 (callable_variable -> member_call_expression .)
    XOR_EQUAL       reduce using rule 56 (callable_variable -> member_call_expression .)
    OR_EQUAL        reduce using rule 56 (callable_variable -> member_call_expression .)
    ARROW           reduce using rule 56 (callable_variable -> member_call_expression .)
    LEFT_CBRAC      reduce using rule 56 (callable_variable -> member_call_expression .)
    DOUBLE_COLON    reduce using rule 56 (callable_variable -> member_call_expression .)
    DOUBLEASTERISK  reduce using rule 56 (callable_variable -> member_call_expression .)
    ASTERISK        reduce using rule 56 (callable_variable -> member_call_expression .)
    DIVIDE          reduce using rule 56 (callable_variable -> member_call_expression .)
    MODULO          reduce using rule 56 (callable_variable -> member_call_expression .)
    PLUS            reduce using rule 56 (callable_variable -> member_call_expression .)
    LESS            reduce using rule 56 (callable_variable -> member_call_expression .)
    CONCAT          reduce using rule 56 (callable_variable -> member_call_expression .)
    SL              reduce using rule 56 (callable_variable -> member_call_expression .)
    SR              reduce using rule 56 (callable_variable -> member_call_expression .)
    LESS_THAN       reduce using rule 56 (callable_variable -> member_call_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 56 (callable_variable -> member_call_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 56 (callable_variable -> member_call_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 56 (callable_variable -> member_call_expression .)
    SPACESHIP       reduce using rule 56 (callable_variable -> member_call_expression .)
    IS_NOT_EQUAL    reduce using rule 56 (callable_variable -> member_call_expression .)
    IS_IDENTICAL    reduce using rule 56 (callable_variable -> member_call_expression .)
    IS_NOT_IDENTICAL reduce using rule 56 (callable_variable -> member_call_expression .)
    AMPERSAND       reduce using rule 56 (callable_variable -> member_call_expression .)
    BITWISE_XOR     reduce using rule 56 (callable_variable -> member_call_expression .)
    BITWISE_OR      reduce using rule 56 (callable_variable -> member_call_expression .)
    COALESCE        reduce using rule 56 (callable_variable -> member_call_expression .)
    TERNARY_OPERATION reduce using rule 56 (callable_variable -> member_call_expression .)
    AND             reduce using rule 56 (callable_variable -> member_call_expression .)
    XOR             reduce using rule 56 (callable_variable -> member_call_expression .)
    OR              reduce using rule 56 (callable_variable -> member_call_expression .)
    SEMICOLON       reduce using rule 56 (callable_variable -> member_call_expression .)
    STRING          reduce using rule 56 (callable_variable -> member_call_expression .)
    INCLUDE         reduce using rule 56 (callable_variable -> member_call_expression .)
    INCLUDE_ONCE    reduce using rule 56 (callable_variable -> member_call_expression .)
    REQUIRE         reduce using rule 56 (callable_variable -> member_call_expression .)
    REQUIRE_ONCE    reduce using rule 56 (callable_variable -> member_call_expression .)
    PRINT           reduce using rule 56 (callable_variable -> member_call_expression .)
    YIELD           reduce using rule 56 (callable_variable -> member_call_expression .)
    YIELD_FROM      reduce using rule 56 (callable_variable -> member_call_expression .)
    RIGHT_PARENTHESIS reduce using rule 56 (callable_variable -> member_call_expression .)
    COLON           reduce using rule 56 (callable_variable -> member_call_expression .)
    AS              reduce using rule 56 (callable_variable -> member_call_expression .)
    RIGHT_CBRAC     reduce using rule 56 (callable_variable -> member_call_expression .)
    VARIABLE        reduce using rule 56 (callable_variable -> member_call_expression .)
    DOUBLE_POINT    reduce using rule 56 (callable_variable -> member_call_expression .)
    DOUBLE_ARROW    reduce using rule 56 (callable_variable -> member_call_expression .)
    ELLIPSIS        reduce using rule 56 (callable_variable -> member_call_expression .)
    ARRAY           reduce using rule 56 (callable_variable -> member_call_expression .)
    CALLABLE        reduce using rule 56 (callable_variable -> member_call_expression .)
    ITERABLE        reduce using rule 56 (callable_variable -> member_call_expression .)
    BOOL            reduce using rule 56 (callable_variable -> member_call_expression .)
    FLOAT           reduce using rule 56 (callable_variable -> member_call_expression .)
    INT             reduce using rule 56 (callable_variable -> member_call_expression .)
    INSTANCEOF      reduce using rule 56 (callable_variable -> member_call_expression .)
    LEFT_PARENTHESIS reduce using rule 56 (callable_variable -> member_call_expression .)
    DOLLAR          reduce using rule 56 (callable_variable -> member_call_expression .)
    SELF            reduce using rule 56 (callable_variable -> member_call_expression .)
    PARENT          reduce using rule 56 (callable_variable -> member_call_expression .)
    STATIC          reduce using rule 56 (callable_variable -> member_call_expression .)


state 176

    (57) callable_variable -> scoped_call_expression .

    EQUAL           reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DOUBLEPLUS      reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DOUBLELESS      reduce using rule 57 (callable_variable -> scoped_call_expression .)
    POW_EQUAL       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    MUL_EQUAL       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DIV_EQUAL       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    MOD_EQUAL       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    PLUS_EQUAL      reduce using rule 57 (callable_variable -> scoped_call_expression .)
    MINUS_EQUAL     reduce using rule 57 (callable_variable -> scoped_call_expression .)
    CONCAT_EQUAL    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    SL_EQUAL        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    SR_EQUAL        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    AND_EQUAL       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    XOR_EQUAL       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    OR_EQUAL        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    ARROW           reduce using rule 57 (callable_variable -> scoped_call_expression .)
    LEFT_CBRAC      reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DOUBLE_COLON    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DOUBLEASTERISK  reduce using rule 57 (callable_variable -> scoped_call_expression .)
    ASTERISK        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DIVIDE          reduce using rule 57 (callable_variable -> scoped_call_expression .)
    MODULO          reduce using rule 57 (callable_variable -> scoped_call_expression .)
    PLUS            reduce using rule 57 (callable_variable -> scoped_call_expression .)
    LESS            reduce using rule 57 (callable_variable -> scoped_call_expression .)
    CONCAT          reduce using rule 57 (callable_variable -> scoped_call_expression .)
    SL              reduce using rule 57 (callable_variable -> scoped_call_expression .)
    SR              reduce using rule 57 (callable_variable -> scoped_call_expression .)
    LESS_THAN       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 57 (callable_variable -> scoped_call_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 57 (callable_variable -> scoped_call_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 57 (callable_variable -> scoped_call_expression .)
    SPACESHIP       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    IS_NOT_EQUAL    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    IS_IDENTICAL    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    IS_NOT_IDENTICAL reduce using rule 57 (callable_variable -> scoped_call_expression .)
    AMPERSAND       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    BITWISE_XOR     reduce using rule 57 (callable_variable -> scoped_call_expression .)
    BITWISE_OR      reduce using rule 57 (callable_variable -> scoped_call_expression .)
    COALESCE        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    TERNARY_OPERATION reduce using rule 57 (callable_variable -> scoped_call_expression .)
    AND             reduce using rule 57 (callable_variable -> scoped_call_expression .)
    XOR             reduce using rule 57 (callable_variable -> scoped_call_expression .)
    OR              reduce using rule 57 (callable_variable -> scoped_call_expression .)
    SEMICOLON       reduce using rule 57 (callable_variable -> scoped_call_expression .)
    STRING          reduce using rule 57 (callable_variable -> scoped_call_expression .)
    INCLUDE         reduce using rule 57 (callable_variable -> scoped_call_expression .)
    INCLUDE_ONCE    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    REQUIRE         reduce using rule 57 (callable_variable -> scoped_call_expression .)
    REQUIRE_ONCE    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    PRINT           reduce using rule 57 (callable_variable -> scoped_call_expression .)
    YIELD           reduce using rule 57 (callable_variable -> scoped_call_expression .)
    YIELD_FROM      reduce using rule 57 (callable_variable -> scoped_call_expression .)
    RIGHT_PARENTHESIS reduce using rule 57 (callable_variable -> scoped_call_expression .)
    COLON           reduce using rule 57 (callable_variable -> scoped_call_expression .)
    AS              reduce using rule 57 (callable_variable -> scoped_call_expression .)
    RIGHT_CBRAC     reduce using rule 57 (callable_variable -> scoped_call_expression .)
    VARIABLE        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DOUBLE_POINT    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DOUBLE_ARROW    reduce using rule 57 (callable_variable -> scoped_call_expression .)
    ELLIPSIS        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    ARRAY           reduce using rule 57 (callable_variable -> scoped_call_expression .)
    CALLABLE        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    ITERABLE        reduce using rule 57 (callable_variable -> scoped_call_expression .)
    BOOL            reduce using rule 57 (callable_variable -> scoped_call_expression .)
    FLOAT           reduce using rule 57 (callable_variable -> scoped_call_expression .)
    INT             reduce using rule 57 (callable_variable -> scoped_call_expression .)
    INSTANCEOF      reduce using rule 57 (callable_variable -> scoped_call_expression .)
    LEFT_PARENTHESIS reduce using rule 57 (callable_variable -> scoped_call_expression .)
    DOLLAR          reduce using rule 57 (callable_variable -> scoped_call_expression .)
    SELF            reduce using rule 57 (callable_variable -> scoped_call_expression .)
    PARENT          reduce using rule 57 (callable_variable -> scoped_call_expression .)
    STATIC          reduce using rule 57 (callable_variable -> scoped_call_expression .)


state 177

    (58) callable_variable -> function_call_expression .

    EQUAL           reduce using rule 58 (callable_variable -> function_call_expression .)
    DOUBLEPLUS      reduce using rule 58 (callable_variable -> function_call_expression .)
    DOUBLELESS      reduce using rule 58 (callable_variable -> function_call_expression .)
    POW_EQUAL       reduce using rule 58 (callable_variable -> function_call_expression .)
    MUL_EQUAL       reduce using rule 58 (callable_variable -> function_call_expression .)
    DIV_EQUAL       reduce using rule 58 (callable_variable -> function_call_expression .)
    MOD_EQUAL       reduce using rule 58 (callable_variable -> function_call_expression .)
    PLUS_EQUAL      reduce using rule 58 (callable_variable -> function_call_expression .)
    MINUS_EQUAL     reduce using rule 58 (callable_variable -> function_call_expression .)
    CONCAT_EQUAL    reduce using rule 58 (callable_variable -> function_call_expression .)
    SL_EQUAL        reduce using rule 58 (callable_variable -> function_call_expression .)
    SR_EQUAL        reduce using rule 58 (callable_variable -> function_call_expression .)
    AND_EQUAL       reduce using rule 58 (callable_variable -> function_call_expression .)
    XOR_EQUAL       reduce using rule 58 (callable_variable -> function_call_expression .)
    OR_EQUAL        reduce using rule 58 (callable_variable -> function_call_expression .)
    ARROW           reduce using rule 58 (callable_variable -> function_call_expression .)
    LEFT_CBRAC      reduce using rule 58 (callable_variable -> function_call_expression .)
    DOUBLE_COLON    reduce using rule 58 (callable_variable -> function_call_expression .)
    DOUBLEASTERISK  reduce using rule 58 (callable_variable -> function_call_expression .)
    ASTERISK        reduce using rule 58 (callable_variable -> function_call_expression .)
    DIVIDE          reduce using rule 58 (callable_variable -> function_call_expression .)
    MODULO          reduce using rule 58 (callable_variable -> function_call_expression .)
    PLUS            reduce using rule 58 (callable_variable -> function_call_expression .)
    LESS            reduce using rule 58 (callable_variable -> function_call_expression .)
    CONCAT          reduce using rule 58 (callable_variable -> function_call_expression .)
    SL              reduce using rule 58 (callable_variable -> function_call_expression .)
    SR              reduce using rule 58 (callable_variable -> function_call_expression .)
    LESS_THAN       reduce using rule 58 (callable_variable -> function_call_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 58 (callable_variable -> function_call_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 58 (callable_variable -> function_call_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 58 (callable_variable -> function_call_expression .)
    SPACESHIP       reduce using rule 58 (callable_variable -> function_call_expression .)
    IS_NOT_EQUAL    reduce using rule 58 (callable_variable -> function_call_expression .)
    IS_IDENTICAL    reduce using rule 58 (callable_variable -> function_call_expression .)
    IS_NOT_IDENTICAL reduce using rule 58 (callable_variable -> function_call_expression .)
    AMPERSAND       reduce using rule 58 (callable_variable -> function_call_expression .)
    BITWISE_XOR     reduce using rule 58 (callable_variable -> function_call_expression .)
    BITWISE_OR      reduce using rule 58 (callable_variable -> function_call_expression .)
    COALESCE        reduce using rule 58 (callable_variable -> function_call_expression .)
    TERNARY_OPERATION reduce using rule 58 (callable_variable -> function_call_expression .)
    AND             reduce using rule 58 (callable_variable -> function_call_expression .)
    XOR             reduce using rule 58 (callable_variable -> function_call_expression .)
    OR              reduce using rule 58 (callable_variable -> function_call_expression .)
    SEMICOLON       reduce using rule 58 (callable_variable -> function_call_expression .)
    STRING          reduce using rule 58 (callable_variable -> function_call_expression .)
    INCLUDE         reduce using rule 58 (callable_variable -> function_call_expression .)
    INCLUDE_ONCE    reduce using rule 58 (callable_variable -> function_call_expression .)
    REQUIRE         reduce using rule 58 (callable_variable -> function_call_expression .)
    REQUIRE_ONCE    reduce using rule 58 (callable_variable -> function_call_expression .)
    PRINT           reduce using rule 58 (callable_variable -> function_call_expression .)
    YIELD           reduce using rule 58 (callable_variable -> function_call_expression .)
    YIELD_FROM      reduce using rule 58 (callable_variable -> function_call_expression .)
    RIGHT_PARENTHESIS reduce using rule 58 (callable_variable -> function_call_expression .)
    COLON           reduce using rule 58 (callable_variable -> function_call_expression .)
    AS              reduce using rule 58 (callable_variable -> function_call_expression .)
    RIGHT_CBRAC     reduce using rule 58 (callable_variable -> function_call_expression .)
    VARIABLE        reduce using rule 58 (callable_variable -> function_call_expression .)
    DOUBLE_POINT    reduce using rule 58 (callable_variable -> function_call_expression .)
    DOUBLE_ARROW    reduce using rule 58 (callable_variable -> function_call_expression .)
    ELLIPSIS        reduce using rule 58 (callable_variable -> function_call_expression .)
    ARRAY           reduce using rule 58 (callable_variable -> function_call_expression .)
    CALLABLE        reduce using rule 58 (callable_variable -> function_call_expression .)
    ITERABLE        reduce using rule 58 (callable_variable -> function_call_expression .)
    BOOL            reduce using rule 58 (callable_variable -> function_call_expression .)
    FLOAT           reduce using rule 58 (callable_variable -> function_call_expression .)
    INT             reduce using rule 58 (callable_variable -> function_call_expression .)
    INSTANCEOF      reduce using rule 58 (callable_variable -> function_call_expression .)
    LEFT_PARENTHESIS reduce using rule 58 (callable_variable -> function_call_expression .)
    DOLLAR          reduce using rule 58 (callable_variable -> function_call_expression .)
    SELF            reduce using rule 58 (callable_variable -> function_call_expression .)
    PARENT          reduce using rule 58 (callable_variable -> function_call_expression .)
    STATIC          reduce using rule 58 (callable_variable -> function_call_expression .)


state 178

    (157) scoped_property_access_expression -> scope_resolution_qualifier . DOUBLE_COLON simple_variable
    (158) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (160) class_constant_access_expression -> scope_resolution_qualifier . DOUBLE_COLON NAME

    DOUBLE_COLON    shift and go to state 338


state 179

    (144) member_access_expression -> dereferencable_expression . ARROW member_name
    (133) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (163) scope_resolution_qualifier -> dereferencable_expression .

    ARROW           shift and go to state 339
    LEFT_CBRAC      shift and go to state 340
    DOUBLE_COLON    reduce using rule 163 (scope_resolution_qualifier -> dereferencable_expression .)


state 180

    (214) logical_AND_expression_1 -> bitwise_inc_OR_expression .
    (213) bitwise_inc_OR_expression -> bitwise_inc_OR_expression . BITWISE_OR bitwise_exc_OR_expression

  ! shift/reduce conflict for BITWISE_OR resolved as shift
    AMPERSAND       reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    COALESCE        reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    TERNARY_OPERATION reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    AND             reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    XOR             reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    OR              reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    SEMICOLON       reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    STRING          reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    INCLUDE         reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    REQUIRE         reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    PRINT           reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    YIELD           reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    YIELD_FROM      reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    COLON           reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    AS              reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ARROW           reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    VARIABLE        reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    DOUBLE_POINT    reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ELLIPSIS        reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ARRAY           reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    CALLABLE        reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    ITERABLE        reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    BOOL            reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    FLOAT           reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    INT             reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .)
    BITWISE_OR      shift and go to state 341

  ! BITWISE_OR      [ reduce using rule 214 (logical_AND_expression_1 -> bitwise_inc_OR_expression .) ]


state 181

    (122) array_creation_expression -> LEFT_CBRAC . array_initializer_opt RIGHT_CBRAC
    (123) array_initializer_opt -> . array_initializer
    (124) array_initializer_opt -> .
    (125) array_initializer -> . array_initializer_list
    (126) array_initializer -> . array_initializer_list COLON
    (127) array_initializer_list -> . array_element_initializer
    (128) array_initializer_list -> . array_element_initializer COLON array_element_initializer
    (129) array_element_initializer -> . AMPERSAND_opt element_value
    (130) array_element_initializer -> . element_key ARROW AMPERSAND_opt element_value
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .
    (131) element_key -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    RIGHT_CBRAC     reduce using rule 124 (array_initializer_opt -> .)
    AMPERSAND       shift and go to state 348
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! STRING          [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 87 (AMPERSAND_opt -> .) ]

    array_initializer_opt          shift and go to state 342
    array_initializer              shift and go to state 343
    array_initializer_list         shift and go to state 344
    array_element_initializer      shift and go to state 345
    AMPERSAND_opt                  shift and go to state 346
    element_key                    shift and go to state 347
    expression                     shift and go to state 349
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 182

    (135) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (162) scope_resolution_qualifier -> qualified_name .
    (62) constant_access_expression -> qualified_name .

    LEFT_PARENTHESIS shift and go to state 350
    DOUBLE_COLON    reduce using rule 162 (scope_resolution_qualifier -> qualified_name .)
    DOUBLEASTERISK  reduce using rule 62 (constant_access_expression -> qualified_name .)
    ASTERISK        reduce using rule 62 (constant_access_expression -> qualified_name .)
    DIVIDE          reduce using rule 62 (constant_access_expression -> qualified_name .)
    MODULO          reduce using rule 62 (constant_access_expression -> qualified_name .)
    PLUS            reduce using rule 62 (constant_access_expression -> qualified_name .)
    LESS            reduce using rule 62 (constant_access_expression -> qualified_name .)
    CONCAT          reduce using rule 62 (constant_access_expression -> qualified_name .)
    SL              reduce using rule 62 (constant_access_expression -> qualified_name .)
    SR              reduce using rule 62 (constant_access_expression -> qualified_name .)
    LESS_THAN       reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_GREATER_OR_EQUAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    SPACESHIP       reduce using rule 62 (constant_access_expression -> qualified_name .)
    EQUAL           reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_NOT_EQUAL    reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_IDENTICAL    reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_NOT_IDENTICAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    AMPERSAND       reduce using rule 62 (constant_access_expression -> qualified_name .)
    BITWISE_XOR     reduce using rule 62 (constant_access_expression -> qualified_name .)
    BITWISE_OR      reduce using rule 62 (constant_access_expression -> qualified_name .)
    COALESCE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    TERNARY_OPERATION reduce using rule 62 (constant_access_expression -> qualified_name .)
    AND             reduce using rule 62 (constant_access_expression -> qualified_name .)
    XOR             reduce using rule 62 (constant_access_expression -> qualified_name .)
    OR              reduce using rule 62 (constant_access_expression -> qualified_name .)
    SEMICOLON       reduce using rule 62 (constant_access_expression -> qualified_name .)
    STRING          reduce using rule 62 (constant_access_expression -> qualified_name .)
    INCLUDE         reduce using rule 62 (constant_access_expression -> qualified_name .)
    INCLUDE_ONCE    reduce using rule 62 (constant_access_expression -> qualified_name .)
    REQUIRE         reduce using rule 62 (constant_access_expression -> qualified_name .)
    REQUIRE_ONCE    reduce using rule 62 (constant_access_expression -> qualified_name .)
    PRINT           reduce using rule 62 (constant_access_expression -> qualified_name .)
    YIELD           reduce using rule 62 (constant_access_expression -> qualified_name .)
    YIELD_FROM      reduce using rule 62 (constant_access_expression -> qualified_name .)
    RIGHT_PARENTHESIS reduce using rule 62 (constant_access_expression -> qualified_name .)
    COLON           reduce using rule 62 (constant_access_expression -> qualified_name .)
    AS              reduce using rule 62 (constant_access_expression -> qualified_name .)
    ARROW           reduce using rule 62 (constant_access_expression -> qualified_name .)
    RIGHT_CBRAC     reduce using rule 62 (constant_access_expression -> qualified_name .)
    VARIABLE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    DOUBLE_POINT    reduce using rule 62 (constant_access_expression -> qualified_name .)
    DOUBLE_ARROW    reduce using rule 62 (constant_access_expression -> qualified_name .)
    ELLIPSIS        reduce using rule 62 (constant_access_expression -> qualified_name .)
    ARRAY           reduce using rule 62 (constant_access_expression -> qualified_name .)
    CALLABLE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    ITERABLE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    BOOL            reduce using rule 62 (constant_access_expression -> qualified_name .)
    FLOAT           reduce using rule 62 (constant_access_expression -> qualified_name .)
    INT             reduce using rule 62 (constant_access_expression -> qualified_name .)
    INSTANCEOF      reduce using rule 62 (constant_access_expression -> qualified_name .)


state 183

    (137) function_call_expression -> callable_expression . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> callable_expression . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 351


state 184

    (161) scope_resolution_qualifier -> relative_scope .

    DOUBLE_COLON    reduce using rule 161 (scope_resolution_qualifier -> relative_scope .)


state 185

    (48) dereferencable_expression -> array_creation_expression .
    (52) callable_expression -> array_creation_expression .
    (32) primary_expression -> array_creation_expression .

  ! reduce/reduce conflict for ARROW resolved using rule 32 (primary_expression -> array_creation_expression .)
    LEFT_CBRAC      reduce using rule 48 (dereferencable_expression -> array_creation_expression .)
    DOUBLE_COLON    reduce using rule 48 (dereferencable_expression -> array_creation_expression .)
    LEFT_PARENTHESIS reduce using rule 52 (callable_expression -> array_creation_expression .)
    DOUBLEASTERISK  reduce using rule 32 (primary_expression -> array_creation_expression .)
    ASTERISK        reduce using rule 32 (primary_expression -> array_creation_expression .)
    DIVIDE          reduce using rule 32 (primary_expression -> array_creation_expression .)
    MODULO          reduce using rule 32 (primary_expression -> array_creation_expression .)
    PLUS            reduce using rule 32 (primary_expression -> array_creation_expression .)
    LESS            reduce using rule 32 (primary_expression -> array_creation_expression .)
    CONCAT          reduce using rule 32 (primary_expression -> array_creation_expression .)
    SL              reduce using rule 32 (primary_expression -> array_creation_expression .)
    SR              reduce using rule 32 (primary_expression -> array_creation_expression .)
    LESS_THAN       reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    SPACESHIP       reduce using rule 32 (primary_expression -> array_creation_expression .)
    EQUAL           reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_IDENTICAL    reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    AMPERSAND       reduce using rule 32 (primary_expression -> array_creation_expression .)
    BITWISE_XOR     reduce using rule 32 (primary_expression -> array_creation_expression .)
    BITWISE_OR      reduce using rule 32 (primary_expression -> array_creation_expression .)
    COALESCE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    TERNARY_OPERATION reduce using rule 32 (primary_expression -> array_creation_expression .)
    AND             reduce using rule 32 (primary_expression -> array_creation_expression .)
    XOR             reduce using rule 32 (primary_expression -> array_creation_expression .)
    OR              reduce using rule 32 (primary_expression -> array_creation_expression .)
    SEMICOLON       reduce using rule 32 (primary_expression -> array_creation_expression .)
    STRING          reduce using rule 32 (primary_expression -> array_creation_expression .)
    INCLUDE         reduce using rule 32 (primary_expression -> array_creation_expression .)
    INCLUDE_ONCE    reduce using rule 32 (primary_expression -> array_creation_expression .)
    REQUIRE         reduce using rule 32 (primary_expression -> array_creation_expression .)
    REQUIRE_ONCE    reduce using rule 32 (primary_expression -> array_creation_expression .)
    PRINT           reduce using rule 32 (primary_expression -> array_creation_expression .)
    YIELD           reduce using rule 32 (primary_expression -> array_creation_expression .)
    YIELD_FROM      reduce using rule 32 (primary_expression -> array_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 32 (primary_expression -> array_creation_expression .)
    COLON           reduce using rule 32 (primary_expression -> array_creation_expression .)
    AS              reduce using rule 32 (primary_expression -> array_creation_expression .)
    ARROW           reduce using rule 32 (primary_expression -> array_creation_expression .)
    RIGHT_CBRAC     reduce using rule 32 (primary_expression -> array_creation_expression .)
    VARIABLE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    DOUBLE_POINT    reduce using rule 32 (primary_expression -> array_creation_expression .)
    DOUBLE_ARROW    reduce using rule 32 (primary_expression -> array_creation_expression .)
    ELLIPSIS        reduce using rule 32 (primary_expression -> array_creation_expression .)
    ARRAY           reduce using rule 32 (primary_expression -> array_creation_expression .)
    CALLABLE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    ITERABLE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    BOOL            reduce using rule 32 (primary_expression -> array_creation_expression .)
    FLOAT           reduce using rule 32 (primary_expression -> array_creation_expression .)
    INT             reduce using rule 32 (primary_expression -> array_creation_expression .)
    INSTANCEOF      reduce using rule 32 (primary_expression -> array_creation_expression .)

  ! ARROW           [ reduce using rule 48 (dereferencable_expression -> array_creation_expression .) ]


state 186

    (49) dereferencable_expression -> string_literal .
    (53) callable_expression -> string_literal .
    (65) literal -> string_literal .

  ! reduce/reduce conflict for ARROW resolved using rule 49 (dereferencable_expression -> string_literal .)
    ARROW           reduce using rule 49 (dereferencable_expression -> string_literal .)
    LEFT_CBRAC      reduce using rule 49 (dereferencable_expression -> string_literal .)
    DOUBLE_COLON    reduce using rule 49 (dereferencable_expression -> string_literal .)
    LEFT_PARENTHESIS reduce using rule 53 (callable_expression -> string_literal .)
    DOUBLEASTERISK  reduce using rule 65 (literal -> string_literal .)
    ASTERISK        reduce using rule 65 (literal -> string_literal .)
    DIVIDE          reduce using rule 65 (literal -> string_literal .)
    MODULO          reduce using rule 65 (literal -> string_literal .)
    PLUS            reduce using rule 65 (literal -> string_literal .)
    LESS            reduce using rule 65 (literal -> string_literal .)
    CONCAT          reduce using rule 65 (literal -> string_literal .)
    SL              reduce using rule 65 (literal -> string_literal .)
    SR              reduce using rule 65 (literal -> string_literal .)
    LESS_THAN       reduce using rule 65 (literal -> string_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 65 (literal -> string_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 65 (literal -> string_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 65 (literal -> string_literal .)
    SPACESHIP       reduce using rule 65 (literal -> string_literal .)
    EQUAL           reduce using rule 65 (literal -> string_literal .)
    IS_NOT_EQUAL    reduce using rule 65 (literal -> string_literal .)
    IS_IDENTICAL    reduce using rule 65 (literal -> string_literal .)
    IS_NOT_IDENTICAL reduce using rule 65 (literal -> string_literal .)
    AMPERSAND       reduce using rule 65 (literal -> string_literal .)
    BITWISE_XOR     reduce using rule 65 (literal -> string_literal .)
    BITWISE_OR      reduce using rule 65 (literal -> string_literal .)
    COALESCE        reduce using rule 65 (literal -> string_literal .)
    TERNARY_OPERATION reduce using rule 65 (literal -> string_literal .)
    AND             reduce using rule 65 (literal -> string_literal .)
    XOR             reduce using rule 65 (literal -> string_literal .)
    OR              reduce using rule 65 (literal -> string_literal .)
    SEMICOLON       reduce using rule 65 (literal -> string_literal .)
    STRING          reduce using rule 65 (literal -> string_literal .)
    INCLUDE         reduce using rule 65 (literal -> string_literal .)
    INCLUDE_ONCE    reduce using rule 65 (literal -> string_literal .)
    REQUIRE         reduce using rule 65 (literal -> string_literal .)
    REQUIRE_ONCE    reduce using rule 65 (literal -> string_literal .)
    PRINT           reduce using rule 65 (literal -> string_literal .)
    YIELD           reduce using rule 65 (literal -> string_literal .)
    YIELD_FROM      reduce using rule 65 (literal -> string_literal .)
    RIGHT_PARENTHESIS reduce using rule 65 (literal -> string_literal .)
    COLON           reduce using rule 65 (literal -> string_literal .)
    AS              reduce using rule 65 (literal -> string_literal .)
    RIGHT_CBRAC     reduce using rule 65 (literal -> string_literal .)
    VARIABLE        reduce using rule 65 (literal -> string_literal .)
    DOUBLE_POINT    reduce using rule 65 (literal -> string_literal .)
    DOUBLE_ARROW    reduce using rule 65 (literal -> string_literal .)
    ELLIPSIS        reduce using rule 65 (literal -> string_literal .)
    ARRAY           reduce using rule 65 (literal -> string_literal .)
    CALLABLE        reduce using rule 65 (literal -> string_literal .)
    ITERABLE        reduce using rule 65 (literal -> string_literal .)
    BOOL            reduce using rule 65 (literal -> string_literal .)
    FLOAT           reduce using rule 65 (literal -> string_literal .)
    INT             reduce using rule 65 (literal -> string_literal .)
    INSTANCEOF      reduce using rule 65 (literal -> string_literal .)

  ! ARROW           [ reduce using rule 65 (literal -> string_literal .) ]


state 187

    (212) bitwise_inc_OR_expression -> bitwise_exc_OR_expression .
    (211) bitwise_exc_OR_expression -> bitwise_exc_OR_expression . BITWISE_XOR bitwise_AND_expression

    BITWISE_OR      reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    AMPERSAND       reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    COALESCE        reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    AND             reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    XOR             reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    OR              reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    SEMICOLON       reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    STRING          reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    INCLUDE         reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    REQUIRE         reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    PRINT           reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    YIELD           reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    YIELD_FROM      reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    COLON           reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    AS              reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ARROW           reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    VARIABLE        reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ELLIPSIS        reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ARRAY           reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    CALLABLE        reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    ITERABLE        reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    BOOL            reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    FLOAT           reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    INT             reduce using rule 212 (bitwise_inc_OR_expression -> bitwise_exc_OR_expression .)
    BITWISE_XOR     shift and go to state 352


state 188

    (554) qualified_name -> name .

    LEFT_PARENTHESIS reduce using rule 554 (qualified_name -> name .)
    DOUBLE_COLON    reduce using rule 554 (qualified_name -> name .)
    DOUBLEASTERISK  reduce using rule 554 (qualified_name -> name .)
    ASTERISK        reduce using rule 554 (qualified_name -> name .)
    DIVIDE          reduce using rule 554 (qualified_name -> name .)
    MODULO          reduce using rule 554 (qualified_name -> name .)
    PLUS            reduce using rule 554 (qualified_name -> name .)
    LESS            reduce using rule 554 (qualified_name -> name .)
    CONCAT          reduce using rule 554 (qualified_name -> name .)
    SL              reduce using rule 554 (qualified_name -> name .)
    SR              reduce using rule 554 (qualified_name -> name .)
    LESS_THAN       reduce using rule 554 (qualified_name -> name .)
    IS_SMALLER_OR_EQUAL reduce using rule 554 (qualified_name -> name .)
    IS_GREATER_OR_EQUAL reduce using rule 554 (qualified_name -> name .)
    GREATER_THAN_OR_EQUAL reduce using rule 554 (qualified_name -> name .)
    SPACESHIP       reduce using rule 554 (qualified_name -> name .)
    EQUAL           reduce using rule 554 (qualified_name -> name .)
    IS_NOT_EQUAL    reduce using rule 554 (qualified_name -> name .)
    IS_IDENTICAL    reduce using rule 554 (qualified_name -> name .)
    IS_NOT_IDENTICAL reduce using rule 554 (qualified_name -> name .)
    AMPERSAND       reduce using rule 554 (qualified_name -> name .)
    BITWISE_XOR     reduce using rule 554 (qualified_name -> name .)
    BITWISE_OR      reduce using rule 554 (qualified_name -> name .)
    COALESCE        reduce using rule 554 (qualified_name -> name .)
    TERNARY_OPERATION reduce using rule 554 (qualified_name -> name .)
    AND             reduce using rule 554 (qualified_name -> name .)
    XOR             reduce using rule 554 (qualified_name -> name .)
    OR              reduce using rule 554 (qualified_name -> name .)
    SEMICOLON       reduce using rule 554 (qualified_name -> name .)
    STRING          reduce using rule 554 (qualified_name -> name .)
    INCLUDE         reduce using rule 554 (qualified_name -> name .)
    INCLUDE_ONCE    reduce using rule 554 (qualified_name -> name .)
    REQUIRE         reduce using rule 554 (qualified_name -> name .)
    REQUIRE_ONCE    reduce using rule 554 (qualified_name -> name .)
    PRINT           reduce using rule 554 (qualified_name -> name .)
    YIELD           reduce using rule 554 (qualified_name -> name .)
    YIELD_FROM      reduce using rule 554 (qualified_name -> name .)
    RIGHT_PARENTHESIS reduce using rule 554 (qualified_name -> name .)
    COLON           reduce using rule 554 (qualified_name -> name .)
    AS              reduce using rule 554 (qualified_name -> name .)
    ARROW           reduce using rule 554 (qualified_name -> name .)
    RIGHT_CBRAC     reduce using rule 554 (qualified_name -> name .)
    VARIABLE        reduce using rule 554 (qualified_name -> name .)
    DOUBLE_POINT    reduce using rule 554 (qualified_name -> name .)
    DOUBLE_ARROW    reduce using rule 554 (qualified_name -> name .)
    ELLIPSIS        reduce using rule 554 (qualified_name -> name .)
    ARRAY           reduce using rule 554 (qualified_name -> name .)
    CALLABLE        reduce using rule 554 (qualified_name -> name .)
    ITERABLE        reduce using rule 554 (qualified_name -> name .)
    BOOL            reduce using rule 554 (qualified_name -> name .)
    FLOAT           reduce using rule 554 (qualified_name -> name .)
    INT             reduce using rule 554 (qualified_name -> name .)
    INSTANCEOF      reduce using rule 554 (qualified_name -> name .)
    LEFT_CBRAC      reduce using rule 554 (qualified_name -> name .)
    IMPLEMENTS      reduce using rule 554 (qualified_name -> name .)


state 189

    (164) relative_scope -> SELF .

    DOUBLE_COLON    reduce using rule 164 (relative_scope -> SELF .)


state 190

    (165) relative_scope -> PARENT .

    DOUBLE_COLON    reduce using rule 165 (relative_scope -> PARENT .)


state 191

    (166) relative_scope -> STATIC .
    (84) static_opt -> STATIC .

    DOUBLE_COLON    reduce using rule 166 (relative_scope -> STATIC .)
    FUNCTION        reduce using rule 84 (static_opt -> STATIC .)


state 192

    (121) array_creation_expression -> ARRAY . LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 353


state 193

    (68) string_literal -> STRING .
    (564) name -> STRING .

  ! reduce/reduce conflict for LEFT_PARENTHESIS resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLE_COLON resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLEASTERISK resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for ASTERISK resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for MODULO resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for PLUS resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for LESS resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for CONCAT resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for SL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for SR resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_SMALLER_OR_EQUAL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_GREATER_OR_EQUAL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN_OR_EQUAL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for SPACESHIP resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for EQUAL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_NOT_EQUAL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_IDENTICAL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for IS_NOT_IDENTICAL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for BITWISE_XOR resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for BITWISE_OR resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for COALESCE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for TERNARY_OPERATION resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for AND resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for XOR resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for OR resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for STRING resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for INCLUDE_ONCE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for REQUIRE_ONCE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for PRINT resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for YIELD resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for YIELD_FROM resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for RIGHT_PARENTHESIS resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for COLON resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for AS resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for ARROW resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for RIGHT_CBRAC resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLE_POINT resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLE_ARROW resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for ELLIPSIS resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for ARRAY resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for CALLABLE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for ITERABLE resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for BOOL resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for FLOAT resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for INT resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for INSTANCEOF resolved using rule 68 (string_literal -> STRING .)
    ARROW           reduce using rule 68 (string_literal -> STRING .)
    LEFT_CBRAC      reduce using rule 68 (string_literal -> STRING .)
    DOUBLE_COLON    reduce using rule 68 (string_literal -> STRING .)
    LEFT_PARENTHESIS reduce using rule 68 (string_literal -> STRING .)
    DOUBLEASTERISK  reduce using rule 68 (string_literal -> STRING .)
    ASTERISK        reduce using rule 68 (string_literal -> STRING .)
    DIVIDE          reduce using rule 68 (string_literal -> STRING .)
    MODULO          reduce using rule 68 (string_literal -> STRING .)
    PLUS            reduce using rule 68 (string_literal -> STRING .)
    LESS            reduce using rule 68 (string_literal -> STRING .)
    CONCAT          reduce using rule 68 (string_literal -> STRING .)
    SL              reduce using rule 68 (string_literal -> STRING .)
    SR              reduce using rule 68 (string_literal -> STRING .)
    LESS_THAN       reduce using rule 68 (string_literal -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 68 (string_literal -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 68 (string_literal -> STRING .)
    GREATER_THAN_OR_EQUAL reduce using rule 68 (string_literal -> STRING .)
    SPACESHIP       reduce using rule 68 (string_literal -> STRING .)
    EQUAL           reduce using rule 68 (string_literal -> STRING .)
    IS_NOT_EQUAL    reduce using rule 68 (string_literal -> STRING .)
    IS_IDENTICAL    reduce using rule 68 (string_literal -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 68 (string_literal -> STRING .)
    AMPERSAND       reduce using rule 68 (string_literal -> STRING .)
    BITWISE_XOR     reduce using rule 68 (string_literal -> STRING .)
    BITWISE_OR      reduce using rule 68 (string_literal -> STRING .)
    COALESCE        reduce using rule 68 (string_literal -> STRING .)
    TERNARY_OPERATION reduce using rule 68 (string_literal -> STRING .)
    AND             reduce using rule 68 (string_literal -> STRING .)
    XOR             reduce using rule 68 (string_literal -> STRING .)
    OR              reduce using rule 68 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 68 (string_literal -> STRING .)
    STRING          reduce using rule 68 (string_literal -> STRING .)
    INCLUDE         reduce using rule 68 (string_literal -> STRING .)
    INCLUDE_ONCE    reduce using rule 68 (string_literal -> STRING .)
    REQUIRE         reduce using rule 68 (string_literal -> STRING .)
    REQUIRE_ONCE    reduce using rule 68 (string_literal -> STRING .)
    PRINT           reduce using rule 68 (string_literal -> STRING .)
    YIELD           reduce using rule 68 (string_literal -> STRING .)
    YIELD_FROM      reduce using rule 68 (string_literal -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 68 (string_literal -> STRING .)
    COLON           reduce using rule 68 (string_literal -> STRING .)
    AS              reduce using rule 68 (string_literal -> STRING .)
    RIGHT_CBRAC     reduce using rule 68 (string_literal -> STRING .)
    VARIABLE        reduce using rule 68 (string_literal -> STRING .)
    DOUBLE_POINT    reduce using rule 68 (string_literal -> STRING .)
    DOUBLE_ARROW    reduce using rule 68 (string_literal -> STRING .)
    ELLIPSIS        reduce using rule 68 (string_literal -> STRING .)
    ARRAY           reduce using rule 68 (string_literal -> STRING .)
    CALLABLE        reduce using rule 68 (string_literal -> STRING .)
    ITERABLE        reduce using rule 68 (string_literal -> STRING .)
    BOOL            reduce using rule 68 (string_literal -> STRING .)
    FLOAT           reduce using rule 68 (string_literal -> STRING .)
    INT             reduce using rule 68 (string_literal -> STRING .)
    INSTANCEOF      reduce using rule 68 (string_literal -> STRING .)

  ! LEFT_PARENTHESIS [ reduce using rule 564 (name -> STRING .) ]
  ! DOUBLE_COLON    [ reduce using rule 564 (name -> STRING .) ]
  ! DOUBLEASTERISK  [ reduce using rule 564 (name -> STRING .) ]
  ! ASTERISK        [ reduce using rule 564 (name -> STRING .) ]
  ! DIVIDE          [ reduce using rule 564 (name -> STRING .) ]
  ! MODULO          [ reduce using rule 564 (name -> STRING .) ]
  ! PLUS            [ reduce using rule 564 (name -> STRING .) ]
  ! LESS            [ reduce using rule 564 (name -> STRING .) ]
  ! CONCAT          [ reduce using rule 564 (name -> STRING .) ]
  ! SL              [ reduce using rule 564 (name -> STRING .) ]
  ! SR              [ reduce using rule 564 (name -> STRING .) ]
  ! LESS_THAN       [ reduce using rule 564 (name -> STRING .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 564 (name -> STRING .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 564 (name -> STRING .) ]
  ! GREATER_THAN_OR_EQUAL [ reduce using rule 564 (name -> STRING .) ]
  ! SPACESHIP       [ reduce using rule 564 (name -> STRING .) ]
  ! EQUAL           [ reduce using rule 564 (name -> STRING .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 564 (name -> STRING .) ]
  ! IS_IDENTICAL    [ reduce using rule 564 (name -> STRING .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 564 (name -> STRING .) ]
  ! AMPERSAND       [ reduce using rule 564 (name -> STRING .) ]
  ! BITWISE_XOR     [ reduce using rule 564 (name -> STRING .) ]
  ! BITWISE_OR      [ reduce using rule 564 (name -> STRING .) ]
  ! COALESCE        [ reduce using rule 564 (name -> STRING .) ]
  ! TERNARY_OPERATION [ reduce using rule 564 (name -> STRING .) ]
  ! AND             [ reduce using rule 564 (name -> STRING .) ]
  ! XOR             [ reduce using rule 564 (name -> STRING .) ]
  ! OR              [ reduce using rule 564 (name -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 564 (name -> STRING .) ]
  ! STRING          [ reduce using rule 564 (name -> STRING .) ]
  ! INCLUDE         [ reduce using rule 564 (name -> STRING .) ]
  ! INCLUDE_ONCE    [ reduce using rule 564 (name -> STRING .) ]
  ! REQUIRE         [ reduce using rule 564 (name -> STRING .) ]
  ! REQUIRE_ONCE    [ reduce using rule 564 (name -> STRING .) ]
  ! PRINT           [ reduce using rule 564 (name -> STRING .) ]
  ! YIELD           [ reduce using rule 564 (name -> STRING .) ]
  ! YIELD_FROM      [ reduce using rule 564 (name -> STRING .) ]
  ! RIGHT_PARENTHESIS [ reduce using rule 564 (name -> STRING .) ]
  ! COLON           [ reduce using rule 564 (name -> STRING .) ]
  ! AS              [ reduce using rule 564 (name -> STRING .) ]
  ! ARROW           [ reduce using rule 564 (name -> STRING .) ]
  ! RIGHT_CBRAC     [ reduce using rule 564 (name -> STRING .) ]
  ! VARIABLE        [ reduce using rule 564 (name -> STRING .) ]
  ! DOUBLE_POINT    [ reduce using rule 564 (name -> STRING .) ]
  ! DOUBLE_ARROW    [ reduce using rule 564 (name -> STRING .) ]
  ! ELLIPSIS        [ reduce using rule 564 (name -> STRING .) ]
  ! ARRAY           [ reduce using rule 564 (name -> STRING .) ]
  ! CALLABLE        [ reduce using rule 564 (name -> STRING .) ]
  ! ITERABLE        [ reduce using rule 564 (name -> STRING .) ]
  ! BOOL            [ reduce using rule 564 (name -> STRING .) ]
  ! FLOAT           [ reduce using rule 564 (name -> STRING .) ]
  ! INT             [ reduce using rule 564 (name -> STRING .) ]
  ! INSTANCEOF      [ reduce using rule 564 (name -> STRING .) ]


state 194

    (210) bitwise_exc_OR_expression -> bitwise_AND_expression .
    (209) bitwise_AND_expression -> bitwise_AND_expression . AMPERSAND equality_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    BITWISE_XOR     reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    BITWISE_OR      reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    COALESCE        reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    TERNARY_OPERATION reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    AND             reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    XOR             reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    OR              reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    SEMICOLON       reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    STRING          reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    INCLUDE         reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    INCLUDE_ONCE    reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    REQUIRE         reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    REQUIRE_ONCE    reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    PRINT           reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    YIELD           reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    YIELD_FROM      reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    RIGHT_PARENTHESIS reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    COLON           reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    AS              reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ARROW           reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    RIGHT_CBRAC     reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    VARIABLE        reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    DOUBLE_POINT    reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    DOUBLE_ARROW    reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ELLIPSIS        reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ARRAY           reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    CALLABLE        reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    ITERABLE        reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    BOOL            reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    FLOAT           reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    INT             reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .)
    AMPERSAND       shift and go to state 354

  ! AMPERSAND       [ reduce using rule 210 (bitwise_exc_OR_expression -> bitwise_AND_expression .) ]


state 195

    (208) bitwise_AND_expression -> equality_expression .
    (204) equality_expression -> equality_expression . EQUAL relational_expression
    (205) equality_expression -> equality_expression . IS_NOT_EQUAL relational_expression
    (206) equality_expression -> equality_expression . IS_IDENTICAL relational_expression
    (207) equality_expression -> equality_expression . IS_NOT_IDENTICAL relational_expression

    AMPERSAND       reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    BITWISE_XOR     reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    BITWISE_OR      reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    COALESCE        reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    TERNARY_OPERATION reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    AND             reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    XOR             reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    OR              reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    SEMICOLON       reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    STRING          reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    INCLUDE         reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    INCLUDE_ONCE    reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    REQUIRE         reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    REQUIRE_ONCE    reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    PRINT           reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    YIELD           reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    YIELD_FROM      reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    COLON           reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    AS              reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    ARROW           reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    RIGHT_CBRAC     reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    VARIABLE        reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    DOUBLE_POINT    reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    DOUBLE_ARROW    reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    ELLIPSIS        reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    ARRAY           reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    CALLABLE        reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    ITERABLE        reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    BOOL            reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    FLOAT           reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    INT             reduce using rule 208 (bitwise_AND_expression -> equality_expression .)
    EQUAL           shift and go to state 355
    IS_NOT_EQUAL    shift and go to state 356
    IS_IDENTICAL    shift and go to state 357
    IS_NOT_IDENTICAL shift and go to state 358


state 196

    (203) equality_expression -> relational_expression .
    (198) relational_expression -> relational_expression . LESS_THAN shift_expression
    (199) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 203 (equality_expression -> relational_expression .)
    IS_NOT_EQUAL    reduce using rule 203 (equality_expression -> relational_expression .)
    IS_IDENTICAL    reduce using rule 203 (equality_expression -> relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 203 (equality_expression -> relational_expression .)
    AMPERSAND       reduce using rule 203 (equality_expression -> relational_expression .)
    BITWISE_XOR     reduce using rule 203 (equality_expression -> relational_expression .)
    BITWISE_OR      reduce using rule 203 (equality_expression -> relational_expression .)
    COALESCE        reduce using rule 203 (equality_expression -> relational_expression .)
    TERNARY_OPERATION reduce using rule 203 (equality_expression -> relational_expression .)
    AND             reduce using rule 203 (equality_expression -> relational_expression .)
    XOR             reduce using rule 203 (equality_expression -> relational_expression .)
    OR              reduce using rule 203 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 203 (equality_expression -> relational_expression .)
    STRING          reduce using rule 203 (equality_expression -> relational_expression .)
    INCLUDE         reduce using rule 203 (equality_expression -> relational_expression .)
    INCLUDE_ONCE    reduce using rule 203 (equality_expression -> relational_expression .)
    REQUIRE         reduce using rule 203 (equality_expression -> relational_expression .)
    REQUIRE_ONCE    reduce using rule 203 (equality_expression -> relational_expression .)
    PRINT           reduce using rule 203 (equality_expression -> relational_expression .)
    YIELD           reduce using rule 203 (equality_expression -> relational_expression .)
    YIELD_FROM      reduce using rule 203 (equality_expression -> relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 203 (equality_expression -> relational_expression .)
    COLON           reduce using rule 203 (equality_expression -> relational_expression .)
    AS              reduce using rule 203 (equality_expression -> relational_expression .)
    ARROW           reduce using rule 203 (equality_expression -> relational_expression .)
    RIGHT_CBRAC     reduce using rule 203 (equality_expression -> relational_expression .)
    VARIABLE        reduce using rule 203 (equality_expression -> relational_expression .)
    DOUBLE_POINT    reduce using rule 203 (equality_expression -> relational_expression .)
    DOUBLE_ARROW    reduce using rule 203 (equality_expression -> relational_expression .)
    ELLIPSIS        reduce using rule 203 (equality_expression -> relational_expression .)
    ARRAY           reduce using rule 203 (equality_expression -> relational_expression .)
    CALLABLE        reduce using rule 203 (equality_expression -> relational_expression .)
    ITERABLE        reduce using rule 203 (equality_expression -> relational_expression .)
    BOOL            reduce using rule 203 (equality_expression -> relational_expression .)
    FLOAT           reduce using rule 203 (equality_expression -> relational_expression .)
    INT             reduce using rule 203 (equality_expression -> relational_expression .)
    LESS_THAN       shift and go to state 359
    IS_SMALLER_OR_EQUAL shift and go to state 360
    IS_GREATER_OR_EQUAL shift and go to state 361
    GREATER_THAN_OR_EQUAL shift and go to state 362
    SPACESHIP       shift and go to state 363


state 197

    (197) relational_expression -> shift_expression .
    (195) shift_expression -> shift_expression . SL additive_expression
    (196) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 197 (relational_expression -> shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 197 (relational_expression -> shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 197 (relational_expression -> shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 197 (relational_expression -> shift_expression .)
    SPACESHIP       reduce using rule 197 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 197 (relational_expression -> shift_expression .)
    IS_NOT_EQUAL    reduce using rule 197 (relational_expression -> shift_expression .)
    IS_IDENTICAL    reduce using rule 197 (relational_expression -> shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 197 (relational_expression -> shift_expression .)
    AMPERSAND       reduce using rule 197 (relational_expression -> shift_expression .)
    BITWISE_XOR     reduce using rule 197 (relational_expression -> shift_expression .)
    BITWISE_OR      reduce using rule 197 (relational_expression -> shift_expression .)
    COALESCE        reduce using rule 197 (relational_expression -> shift_expression .)
    TERNARY_OPERATION reduce using rule 197 (relational_expression -> shift_expression .)
    AND             reduce using rule 197 (relational_expression -> shift_expression .)
    XOR             reduce using rule 197 (relational_expression -> shift_expression .)
    OR              reduce using rule 197 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 197 (relational_expression -> shift_expression .)
    STRING          reduce using rule 197 (relational_expression -> shift_expression .)
    INCLUDE         reduce using rule 197 (relational_expression -> shift_expression .)
    INCLUDE_ONCE    reduce using rule 197 (relational_expression -> shift_expression .)
    REQUIRE         reduce using rule 197 (relational_expression -> shift_expression .)
    REQUIRE_ONCE    reduce using rule 197 (relational_expression -> shift_expression .)
    PRINT           reduce using rule 197 (relational_expression -> shift_expression .)
    YIELD           reduce using rule 197 (relational_expression -> shift_expression .)
    YIELD_FROM      reduce using rule 197 (relational_expression -> shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 197 (relational_expression -> shift_expression .)
    COLON           reduce using rule 197 (relational_expression -> shift_expression .)
    AS              reduce using rule 197 (relational_expression -> shift_expression .)
    ARROW           reduce using rule 197 (relational_expression -> shift_expression .)
    RIGHT_CBRAC     reduce using rule 197 (relational_expression -> shift_expression .)
    VARIABLE        reduce using rule 197 (relational_expression -> shift_expression .)
    DOUBLE_POINT    reduce using rule 197 (relational_expression -> shift_expression .)
    DOUBLE_ARROW    reduce using rule 197 (relational_expression -> shift_expression .)
    ELLIPSIS        reduce using rule 197 (relational_expression -> shift_expression .)
    ARRAY           reduce using rule 197 (relational_expression -> shift_expression .)
    CALLABLE        reduce using rule 197 (relational_expression -> shift_expression .)
    ITERABLE        reduce using rule 197 (relational_expression -> shift_expression .)
    BOOL            reduce using rule 197 (relational_expression -> shift_expression .)
    FLOAT           reduce using rule 197 (relational_expression -> shift_expression .)
    INT             reduce using rule 197 (relational_expression -> shift_expression .)
    SL              shift and go to state 364
    SR              shift and go to state 365


state 198

    (194) shift_expression -> additive_expression .
    (191) additive_expression -> additive_expression . PLUS multiplicative_expression
    (192) additive_expression -> additive_expression . LESS multiplicative_expression
    (193) additive_expression -> additive_expression . CONCAT multiplicative_expression

    SL              reduce using rule 194 (shift_expression -> additive_expression .)
    SR              reduce using rule 194 (shift_expression -> additive_expression .)
    LESS_THAN       reduce using rule 194 (shift_expression -> additive_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 194 (shift_expression -> additive_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 194 (shift_expression -> additive_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 194 (shift_expression -> additive_expression .)
    SPACESHIP       reduce using rule 194 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 194 (shift_expression -> additive_expression .)
    IS_NOT_EQUAL    reduce using rule 194 (shift_expression -> additive_expression .)
    IS_IDENTICAL    reduce using rule 194 (shift_expression -> additive_expression .)
    IS_NOT_IDENTICAL reduce using rule 194 (shift_expression -> additive_expression .)
    AMPERSAND       reduce using rule 194 (shift_expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 194 (shift_expression -> additive_expression .)
    BITWISE_OR      reduce using rule 194 (shift_expression -> additive_expression .)
    COALESCE        reduce using rule 194 (shift_expression -> additive_expression .)
    TERNARY_OPERATION reduce using rule 194 (shift_expression -> additive_expression .)
    AND             reduce using rule 194 (shift_expression -> additive_expression .)
    XOR             reduce using rule 194 (shift_expression -> additive_expression .)
    OR              reduce using rule 194 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 194 (shift_expression -> additive_expression .)
    STRING          reduce using rule 194 (shift_expression -> additive_expression .)
    INCLUDE         reduce using rule 194 (shift_expression -> additive_expression .)
    INCLUDE_ONCE    reduce using rule 194 (shift_expression -> additive_expression .)
    REQUIRE         reduce using rule 194 (shift_expression -> additive_expression .)
    REQUIRE_ONCE    reduce using rule 194 (shift_expression -> additive_expression .)
    PRINT           reduce using rule 194 (shift_expression -> additive_expression .)
    YIELD           reduce using rule 194 (shift_expression -> additive_expression .)
    YIELD_FROM      reduce using rule 194 (shift_expression -> additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 194 (shift_expression -> additive_expression .)
    COLON           reduce using rule 194 (shift_expression -> additive_expression .)
    AS              reduce using rule 194 (shift_expression -> additive_expression .)
    ARROW           reduce using rule 194 (shift_expression -> additive_expression .)
    RIGHT_CBRAC     reduce using rule 194 (shift_expression -> additive_expression .)
    VARIABLE        reduce using rule 194 (shift_expression -> additive_expression .)
    DOUBLE_POINT    reduce using rule 194 (shift_expression -> additive_expression .)
    DOUBLE_ARROW    reduce using rule 194 (shift_expression -> additive_expression .)
    ELLIPSIS        reduce using rule 194 (shift_expression -> additive_expression .)
    ARRAY           reduce using rule 194 (shift_expression -> additive_expression .)
    CALLABLE        reduce using rule 194 (shift_expression -> additive_expression .)
    ITERABLE        reduce using rule 194 (shift_expression -> additive_expression .)
    BOOL            reduce using rule 194 (shift_expression -> additive_expression .)
    FLOAT           reduce using rule 194 (shift_expression -> additive_expression .)
    INT             reduce using rule 194 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 366
    LESS            shift and go to state 367
    CONCAT          shift and go to state 368


state 199

    (190) additive_expression -> multiplicative_expression .
    (187) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (188) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (189) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 190 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 190 (additive_expression -> multiplicative_expression .)
    CONCAT          reduce using rule 190 (additive_expression -> multiplicative_expression .)
    SL              reduce using rule 190 (additive_expression -> multiplicative_expression .)
    SR              reduce using rule 190 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 190 (additive_expression -> multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 190 (additive_expression -> multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 190 (additive_expression -> multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 190 (additive_expression -> multiplicative_expression .)
    SPACESHIP       reduce using rule 190 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 190 (additive_expression -> multiplicative_expression .)
    AMPERSAND       reduce using rule 190 (additive_expression -> multiplicative_expression .)
    BITWISE_XOR     reduce using rule 190 (additive_expression -> multiplicative_expression .)
    BITWISE_OR      reduce using rule 190 (additive_expression -> multiplicative_expression .)
    COALESCE        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 190 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 190 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 190 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 190 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 190 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 190 (additive_expression -> multiplicative_expression .)
    INCLUDE         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    REQUIRE         reduce using rule 190 (additive_expression -> multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    PRINT           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    YIELD           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    YIELD_FROM      reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 190 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    AS              reduce using rule 190 (additive_expression -> multiplicative_expression .)
    ARROW           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 190 (additive_expression -> multiplicative_expression .)
    VARIABLE        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 190 (additive_expression -> multiplicative_expression .)
    ELLIPSIS        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    ARRAY           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    CALLABLE        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    ITERABLE        reduce using rule 190 (additive_expression -> multiplicative_expression .)
    BOOL            reduce using rule 190 (additive_expression -> multiplicative_expression .)
    FLOAT           reduce using rule 190 (additive_expression -> multiplicative_expression .)
    INT             reduce using rule 190 (additive_expression -> multiplicative_expression .)
    ASTERISK        shift and go to state 369
    DIVIDE          shift and go to state 370
    MODULO          shift and go to state 371


state 200

    (176) unary_operator -> PLUS .

    AT              reduce using rule 176 (unary_operator -> PLUS .)
    LEFT_PARENTHESIS reduce using rule 176 (unary_operator -> PLUS .)
    CLONE           reduce using rule 176 (unary_operator -> PLUS .)
    PLUS            reduce using rule 176 (unary_operator -> PLUS .)
    LESS            reduce using rule 176 (unary_operator -> PLUS .)
    BITWISE_NOT     reduce using rule 176 (unary_operator -> PLUS .)
    ARRAY           reduce using rule 176 (unary_operator -> PLUS .)
    LEFT_CBRAC      reduce using rule 176 (unary_operator -> PLUS .)
    NEW             reduce using rule 176 (unary_operator -> PLUS .)
    DOUBLEPLUS      reduce using rule 176 (unary_operator -> PLUS .)
    DOUBLELESS      reduce using rule 176 (unary_operator -> PLUS .)
    BACKTICK        reduce using rule 176 (unary_operator -> PLUS .)
    LNUMBER         reduce using rule 176 (unary_operator -> PLUS .)
    DNUMBER         reduce using rule 176 (unary_operator -> PLUS .)
    STRING          reduce using rule 176 (unary_operator -> PLUS .)
    EMPTY           reduce using rule 176 (unary_operator -> PLUS .)
    EVAL            reduce using rule 176 (unary_operator -> PLUS .)
    EXIT            reduce using rule 176 (unary_operator -> PLUS .)
    DIE             reduce using rule 176 (unary_operator -> PLUS .)
    ISSET           reduce using rule 176 (unary_operator -> PLUS .)
    STATIC          reduce using rule 176 (unary_operator -> PLUS .)
    VARIABLE        reduce using rule 176 (unary_operator -> PLUS .)
    DOLLAR          reduce using rule 176 (unary_operator -> PLUS .)
    SELF            reduce using rule 176 (unary_operator -> PLUS .)
    PARENT          reduce using rule 176 (unary_operator -> PLUS .)
    FUNCTION        reduce using rule 176 (unary_operator -> PLUS .)


state 201

    (177) unary_operator -> LESS .

    AT              reduce using rule 177 (unary_operator -> LESS .)
    LEFT_PARENTHESIS reduce using rule 177 (unary_operator -> LESS .)
    CLONE           reduce using rule 177 (unary_operator -> LESS .)
    PLUS            reduce using rule 177 (unary_operator -> LESS .)
    LESS            reduce using rule 177 (unary_operator -> LESS .)
    BITWISE_NOT     reduce using rule 177 (unary_operator -> LESS .)
    ARRAY           reduce using rule 177 (unary_operator -> LESS .)
    LEFT_CBRAC      reduce using rule 177 (unary_operator -> LESS .)
    NEW             reduce using rule 177 (unary_operator -> LESS .)
    DOUBLEPLUS      reduce using rule 177 (unary_operator -> LESS .)
    DOUBLELESS      reduce using rule 177 (unary_operator -> LESS .)
    BACKTICK        reduce using rule 177 (unary_operator -> LESS .)
    LNUMBER         reduce using rule 177 (unary_operator -> LESS .)
    DNUMBER         reduce using rule 177 (unary_operator -> LESS .)
    STRING          reduce using rule 177 (unary_operator -> LESS .)
    EMPTY           reduce using rule 177 (unary_operator -> LESS .)
    EVAL            reduce using rule 177 (unary_operator -> LESS .)
    EXIT            reduce using rule 177 (unary_operator -> LESS .)
    DIE             reduce using rule 177 (unary_operator -> LESS .)
    ISSET           reduce using rule 177 (unary_operator -> LESS .)
    STATIC          reduce using rule 177 (unary_operator -> LESS .)
    VARIABLE        reduce using rule 177 (unary_operator -> LESS .)
    DOLLAR          reduce using rule 177 (unary_operator -> LESS .)
    SELF            reduce using rule 177 (unary_operator -> LESS .)
    PARENT          reduce using rule 177 (unary_operator -> LESS .)
    FUNCTION        reduce using rule 177 (unary_operator -> LESS .)


state 202

    (186) multiplicative_expression -> logical_not_expression .

    ASTERISK        reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    DIVIDE          reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    MODULO          reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    PLUS            reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    LESS            reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    CONCAT          reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    SL              reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    SR              reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    LESS_THAN       reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    SPACESHIP       reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    EQUAL           reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    IS_IDENTICAL    reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    AMPERSAND       reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    BITWISE_XOR     reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    BITWISE_OR      reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    COALESCE        reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    TERNARY_OPERATION reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    AND             reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    XOR             reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    OR              reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    SEMICOLON       reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    STRING          reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    INCLUDE         reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    REQUIRE         reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    PRINT           reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    YIELD           reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    YIELD_FROM      reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    COLON           reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    AS              reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    ARROW           reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    VARIABLE        reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    DOUBLE_POINT    reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    ELLIPSIS        reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    ARRAY           reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    CALLABLE        reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    ITERABLE        reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    BOOL            reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    FLOAT           reduce using rule 186 (multiplicative_expression -> logical_not_expression .)
    INT             reduce using rule 186 (multiplicative_expression -> logical_not_expression .)


state 203

    (184) logical_not_expression -> instanceof_expression .
    (183) instanceof_subj -> instanceof_expression .

    ASTERISK        reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    DIVIDE          reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    MODULO          reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    PLUS            reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    LESS            reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    CONCAT          reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    SL              reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    SR              reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    LESS_THAN       reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    SPACESHIP       reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    EQUAL           reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    IS_NOT_EQUAL    reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    IS_IDENTICAL    reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    IS_NOT_IDENTICAL reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    AMPERSAND       reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    BITWISE_XOR     reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    BITWISE_OR      reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    COALESCE        reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    TERNARY_OPERATION reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    AND             reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    XOR             reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    OR              reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    SEMICOLON       reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    STRING          reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    INCLUDE         reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    INCLUDE_ONCE    reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    REQUIRE         reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    REQUIRE_ONCE    reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    PRINT           reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    YIELD           reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    YIELD_FROM      reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    RIGHT_PARENTHESIS reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    COLON           reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    AS              reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    ARROW           reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    RIGHT_CBRAC     reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    VARIABLE        reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    DOUBLE_POINT    reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    DOUBLE_ARROW    reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    ELLIPSIS        reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    ARRAY           reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    CALLABLE        reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    ITERABLE        reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    BOOL            reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    FLOAT           reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    INT             reduce using rule 184 (logical_not_expression -> instanceof_expression .)
    INSTANCEOF      reduce using rule 183 (instanceof_subj -> instanceof_expression .)


state 204

    (185) logical_not_expression -> NEGATION . instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    instanceof_expression          shift and go to state 372
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 205

    (181) instanceof_expression -> unary_expression .

    ASTERISK        reduce using rule 181 (instanceof_expression -> unary_expression .)
    DIVIDE          reduce using rule 181 (instanceof_expression -> unary_expression .)
    MODULO          reduce using rule 181 (instanceof_expression -> unary_expression .)
    PLUS            reduce using rule 181 (instanceof_expression -> unary_expression .)
    LESS            reduce using rule 181 (instanceof_expression -> unary_expression .)
    CONCAT          reduce using rule 181 (instanceof_expression -> unary_expression .)
    SL              reduce using rule 181 (instanceof_expression -> unary_expression .)
    SR              reduce using rule 181 (instanceof_expression -> unary_expression .)
    LESS_THAN       reduce using rule 181 (instanceof_expression -> unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 181 (instanceof_expression -> unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 181 (instanceof_expression -> unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 181 (instanceof_expression -> unary_expression .)
    SPACESHIP       reduce using rule 181 (instanceof_expression -> unary_expression .)
    EQUAL           reduce using rule 181 (instanceof_expression -> unary_expression .)
    IS_NOT_EQUAL    reduce using rule 181 (instanceof_expression -> unary_expression .)
    IS_IDENTICAL    reduce using rule 181 (instanceof_expression -> unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 181 (instanceof_expression -> unary_expression .)
    AMPERSAND       reduce using rule 181 (instanceof_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 181 (instanceof_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 181 (instanceof_expression -> unary_expression .)
    COALESCE        reduce using rule 181 (instanceof_expression -> unary_expression .)
    TERNARY_OPERATION reduce using rule 181 (instanceof_expression -> unary_expression .)
    AND             reduce using rule 181 (instanceof_expression -> unary_expression .)
    XOR             reduce using rule 181 (instanceof_expression -> unary_expression .)
    OR              reduce using rule 181 (instanceof_expression -> unary_expression .)
    SEMICOLON       reduce using rule 181 (instanceof_expression -> unary_expression .)
    STRING          reduce using rule 181 (instanceof_expression -> unary_expression .)
    INCLUDE         reduce using rule 181 (instanceof_expression -> unary_expression .)
    INCLUDE_ONCE    reduce using rule 181 (instanceof_expression -> unary_expression .)
    REQUIRE         reduce using rule 181 (instanceof_expression -> unary_expression .)
    REQUIRE_ONCE    reduce using rule 181 (instanceof_expression -> unary_expression .)
    PRINT           reduce using rule 181 (instanceof_expression -> unary_expression .)
    YIELD           reduce using rule 181 (instanceof_expression -> unary_expression .)
    YIELD_FROM      reduce using rule 181 (instanceof_expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 181 (instanceof_expression -> unary_expression .)
    COLON           reduce using rule 181 (instanceof_expression -> unary_expression .)
    AS              reduce using rule 181 (instanceof_expression -> unary_expression .)
    ARROW           reduce using rule 181 (instanceof_expression -> unary_expression .)
    RIGHT_CBRAC     reduce using rule 181 (instanceof_expression -> unary_expression .)
    VARIABLE        reduce using rule 181 (instanceof_expression -> unary_expression .)
    DOUBLE_POINT    reduce using rule 181 (instanceof_expression -> unary_expression .)
    DOUBLE_ARROW    reduce using rule 181 (instanceof_expression -> unary_expression .)
    ELLIPSIS        reduce using rule 181 (instanceof_expression -> unary_expression .)
    ARRAY           reduce using rule 181 (instanceof_expression -> unary_expression .)
    CALLABLE        reduce using rule 181 (instanceof_expression -> unary_expression .)
    ITERABLE        reduce using rule 181 (instanceof_expression -> unary_expression .)
    BOOL            reduce using rule 181 (instanceof_expression -> unary_expression .)
    FLOAT           reduce using rule 181 (instanceof_expression -> unary_expression .)
    INT             reduce using rule 181 (instanceof_expression -> unary_expression .)
    INSTANCEOF      reduce using rule 181 (instanceof_expression -> unary_expression .)


state 206

    (182) instanceof_expression -> instanceof_subj . INSTANCEOF class_type_designator

    INSTANCEOF      shift and go to state 381


state 207

    (171) unary_expression -> exponentiation_expression .

    ASTERISK        reduce using rule 171 (unary_expression -> exponentiation_expression .)
    DIVIDE          reduce using rule 171 (unary_expression -> exponentiation_expression .)
    MODULO          reduce using rule 171 (unary_expression -> exponentiation_expression .)
    PLUS            reduce using rule 171 (unary_expression -> exponentiation_expression .)
    LESS            reduce using rule 171 (unary_expression -> exponentiation_expression .)
    CONCAT          reduce using rule 171 (unary_expression -> exponentiation_expression .)
    SL              reduce using rule 171 (unary_expression -> exponentiation_expression .)
    SR              reduce using rule 171 (unary_expression -> exponentiation_expression .)
    LESS_THAN       reduce using rule 171 (unary_expression -> exponentiation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 171 (unary_expression -> exponentiation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 171 (unary_expression -> exponentiation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 171 (unary_expression -> exponentiation_expression .)
    SPACESHIP       reduce using rule 171 (unary_expression -> exponentiation_expression .)
    EQUAL           reduce using rule 171 (unary_expression -> exponentiation_expression .)
    IS_NOT_EQUAL    reduce using rule 171 (unary_expression -> exponentiation_expression .)
    IS_IDENTICAL    reduce using rule 171 (unary_expression -> exponentiation_expression .)
    IS_NOT_IDENTICAL reduce using rule 171 (unary_expression -> exponentiation_expression .)
    AMPERSAND       reduce using rule 171 (unary_expression -> exponentiation_expression .)
    BITWISE_XOR     reduce using rule 171 (unary_expression -> exponentiation_expression .)
    BITWISE_OR      reduce using rule 171 (unary_expression -> exponentiation_expression .)
    COALESCE        reduce using rule 171 (unary_expression -> exponentiation_expression .)
    TERNARY_OPERATION reduce using rule 171 (unary_expression -> exponentiation_expression .)
    AND             reduce using rule 171 (unary_expression -> exponentiation_expression .)
    XOR             reduce using rule 171 (unary_expression -> exponentiation_expression .)
    OR              reduce using rule 171 (unary_expression -> exponentiation_expression .)
    SEMICOLON       reduce using rule 171 (unary_expression -> exponentiation_expression .)
    STRING          reduce using rule 171 (unary_expression -> exponentiation_expression .)
    INCLUDE         reduce using rule 171 (unary_expression -> exponentiation_expression .)
    INCLUDE_ONCE    reduce using rule 171 (unary_expression -> exponentiation_expression .)
    REQUIRE         reduce using rule 171 (unary_expression -> exponentiation_expression .)
    REQUIRE_ONCE    reduce using rule 171 (unary_expression -> exponentiation_expression .)
    PRINT           reduce using rule 171 (unary_expression -> exponentiation_expression .)
    YIELD           reduce using rule 171 (unary_expression -> exponentiation_expression .)
    YIELD_FROM      reduce using rule 171 (unary_expression -> exponentiation_expression .)
    RIGHT_PARENTHESIS reduce using rule 171 (unary_expression -> exponentiation_expression .)
    COLON           reduce using rule 171 (unary_expression -> exponentiation_expression .)
    AS              reduce using rule 171 (unary_expression -> exponentiation_expression .)
    ARROW           reduce using rule 171 (unary_expression -> exponentiation_expression .)
    RIGHT_CBRAC     reduce using rule 171 (unary_expression -> exponentiation_expression .)
    VARIABLE        reduce using rule 171 (unary_expression -> exponentiation_expression .)
    DOUBLE_POINT    reduce using rule 171 (unary_expression -> exponentiation_expression .)
    DOUBLE_ARROW    reduce using rule 171 (unary_expression -> exponentiation_expression .)
    ELLIPSIS        reduce using rule 171 (unary_expression -> exponentiation_expression .)
    ARRAY           reduce using rule 171 (unary_expression -> exponentiation_expression .)
    CALLABLE        reduce using rule 171 (unary_expression -> exponentiation_expression .)
    ITERABLE        reduce using rule 171 (unary_expression -> exponentiation_expression .)
    BOOL            reduce using rule 171 (unary_expression -> exponentiation_expression .)
    FLOAT           reduce using rule 171 (unary_expression -> exponentiation_expression .)
    INT             reduce using rule 171 (unary_expression -> exponentiation_expression .)
    INSTANCEOF      reduce using rule 171 (unary_expression -> exponentiation_expression .)


state 208

    (172) unary_expression -> unary_op_expression .

    ASTERISK        reduce using rule 172 (unary_expression -> unary_op_expression .)
    DIVIDE          reduce using rule 172 (unary_expression -> unary_op_expression .)
    MODULO          reduce using rule 172 (unary_expression -> unary_op_expression .)
    PLUS            reduce using rule 172 (unary_expression -> unary_op_expression .)
    LESS            reduce using rule 172 (unary_expression -> unary_op_expression .)
    CONCAT          reduce using rule 172 (unary_expression -> unary_op_expression .)
    SL              reduce using rule 172 (unary_expression -> unary_op_expression .)
    SR              reduce using rule 172 (unary_expression -> unary_op_expression .)
    LESS_THAN       reduce using rule 172 (unary_expression -> unary_op_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 172 (unary_expression -> unary_op_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 172 (unary_expression -> unary_op_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 172 (unary_expression -> unary_op_expression .)
    SPACESHIP       reduce using rule 172 (unary_expression -> unary_op_expression .)
    EQUAL           reduce using rule 172 (unary_expression -> unary_op_expression .)
    IS_NOT_EQUAL    reduce using rule 172 (unary_expression -> unary_op_expression .)
    IS_IDENTICAL    reduce using rule 172 (unary_expression -> unary_op_expression .)
    IS_NOT_IDENTICAL reduce using rule 172 (unary_expression -> unary_op_expression .)
    AMPERSAND       reduce using rule 172 (unary_expression -> unary_op_expression .)
    BITWISE_XOR     reduce using rule 172 (unary_expression -> unary_op_expression .)
    BITWISE_OR      reduce using rule 172 (unary_expression -> unary_op_expression .)
    COALESCE        reduce using rule 172 (unary_expression -> unary_op_expression .)
    TERNARY_OPERATION reduce using rule 172 (unary_expression -> unary_op_expression .)
    AND             reduce using rule 172 (unary_expression -> unary_op_expression .)
    XOR             reduce using rule 172 (unary_expression -> unary_op_expression .)
    OR              reduce using rule 172 (unary_expression -> unary_op_expression .)
    SEMICOLON       reduce using rule 172 (unary_expression -> unary_op_expression .)
    STRING          reduce using rule 172 (unary_expression -> unary_op_expression .)
    INCLUDE         reduce using rule 172 (unary_expression -> unary_op_expression .)
    INCLUDE_ONCE    reduce using rule 172 (unary_expression -> unary_op_expression .)
    REQUIRE         reduce using rule 172 (unary_expression -> unary_op_expression .)
    REQUIRE_ONCE    reduce using rule 172 (unary_expression -> unary_op_expression .)
    PRINT           reduce using rule 172 (unary_expression -> unary_op_expression .)
    YIELD           reduce using rule 172 (unary_expression -> unary_op_expression .)
    YIELD_FROM      reduce using rule 172 (unary_expression -> unary_op_expression .)
    RIGHT_PARENTHESIS reduce using rule 172 (unary_expression -> unary_op_expression .)
    COLON           reduce using rule 172 (unary_expression -> unary_op_expression .)
    AS              reduce using rule 172 (unary_expression -> unary_op_expression .)
    ARROW           reduce using rule 172 (unary_expression -> unary_op_expression .)
    RIGHT_CBRAC     reduce using rule 172 (unary_expression -> unary_op_expression .)
    VARIABLE        reduce using rule 172 (unary_expression -> unary_op_expression .)
    DOUBLE_POINT    reduce using rule 172 (unary_expression -> unary_op_expression .)
    DOUBLE_ARROW    reduce using rule 172 (unary_expression -> unary_op_expression .)
    ELLIPSIS        reduce using rule 172 (unary_expression -> unary_op_expression .)
    ARRAY           reduce using rule 172 (unary_expression -> unary_op_expression .)
    CALLABLE        reduce using rule 172 (unary_expression -> unary_op_expression .)
    ITERABLE        reduce using rule 172 (unary_expression -> unary_op_expression .)
    BOOL            reduce using rule 172 (unary_expression -> unary_op_expression .)
    FLOAT           reduce using rule 172 (unary_expression -> unary_op_expression .)
    INT             reduce using rule 172 (unary_expression -> unary_op_expression .)
    INSTANCEOF      reduce using rule 172 (unary_expression -> unary_op_expression .)


state 209

    (173) unary_expression -> error_control_expression .

    ASTERISK        reduce using rule 173 (unary_expression -> error_control_expression .)
    DIVIDE          reduce using rule 173 (unary_expression -> error_control_expression .)
    MODULO          reduce using rule 173 (unary_expression -> error_control_expression .)
    PLUS            reduce using rule 173 (unary_expression -> error_control_expression .)
    LESS            reduce using rule 173 (unary_expression -> error_control_expression .)
    CONCAT          reduce using rule 173 (unary_expression -> error_control_expression .)
    SL              reduce using rule 173 (unary_expression -> error_control_expression .)
    SR              reduce using rule 173 (unary_expression -> error_control_expression .)
    LESS_THAN       reduce using rule 173 (unary_expression -> error_control_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 173 (unary_expression -> error_control_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 173 (unary_expression -> error_control_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 173 (unary_expression -> error_control_expression .)
    SPACESHIP       reduce using rule 173 (unary_expression -> error_control_expression .)
    EQUAL           reduce using rule 173 (unary_expression -> error_control_expression .)
    IS_NOT_EQUAL    reduce using rule 173 (unary_expression -> error_control_expression .)
    IS_IDENTICAL    reduce using rule 173 (unary_expression -> error_control_expression .)
    IS_NOT_IDENTICAL reduce using rule 173 (unary_expression -> error_control_expression .)
    AMPERSAND       reduce using rule 173 (unary_expression -> error_control_expression .)
    BITWISE_XOR     reduce using rule 173 (unary_expression -> error_control_expression .)
    BITWISE_OR      reduce using rule 173 (unary_expression -> error_control_expression .)
    COALESCE        reduce using rule 173 (unary_expression -> error_control_expression .)
    TERNARY_OPERATION reduce using rule 173 (unary_expression -> error_control_expression .)
    AND             reduce using rule 173 (unary_expression -> error_control_expression .)
    XOR             reduce using rule 173 (unary_expression -> error_control_expression .)
    OR              reduce using rule 173 (unary_expression -> error_control_expression .)
    SEMICOLON       reduce using rule 173 (unary_expression -> error_control_expression .)
    STRING          reduce using rule 173 (unary_expression -> error_control_expression .)
    INCLUDE         reduce using rule 173 (unary_expression -> error_control_expression .)
    INCLUDE_ONCE    reduce using rule 173 (unary_expression -> error_control_expression .)
    REQUIRE         reduce using rule 173 (unary_expression -> error_control_expression .)
    REQUIRE_ONCE    reduce using rule 173 (unary_expression -> error_control_expression .)
    PRINT           reduce using rule 173 (unary_expression -> error_control_expression .)
    YIELD           reduce using rule 173 (unary_expression -> error_control_expression .)
    YIELD_FROM      reduce using rule 173 (unary_expression -> error_control_expression .)
    RIGHT_PARENTHESIS reduce using rule 173 (unary_expression -> error_control_expression .)
    COLON           reduce using rule 173 (unary_expression -> error_control_expression .)
    AS              reduce using rule 173 (unary_expression -> error_control_expression .)
    ARROW           reduce using rule 173 (unary_expression -> error_control_expression .)
    RIGHT_CBRAC     reduce using rule 173 (unary_expression -> error_control_expression .)
    VARIABLE        reduce using rule 173 (unary_expression -> error_control_expression .)
    DOUBLE_POINT    reduce using rule 173 (unary_expression -> error_control_expression .)
    DOUBLE_ARROW    reduce using rule 173 (unary_expression -> error_control_expression .)
    ELLIPSIS        reduce using rule 173 (unary_expression -> error_control_expression .)
    ARRAY           reduce using rule 173 (unary_expression -> error_control_expression .)
    CALLABLE        reduce using rule 173 (unary_expression -> error_control_expression .)
    ITERABLE        reduce using rule 173 (unary_expression -> error_control_expression .)
    BOOL            reduce using rule 173 (unary_expression -> error_control_expression .)
    FLOAT           reduce using rule 173 (unary_expression -> error_control_expression .)
    INT             reduce using rule 173 (unary_expression -> error_control_expression .)
    INSTANCEOF      reduce using rule 173 (unary_expression -> error_control_expression .)


state 210

    (174) unary_expression -> cast_expression .

    ASTERISK        reduce using rule 174 (unary_expression -> cast_expression .)
    DIVIDE          reduce using rule 174 (unary_expression -> cast_expression .)
    MODULO          reduce using rule 174 (unary_expression -> cast_expression .)
    PLUS            reduce using rule 174 (unary_expression -> cast_expression .)
    LESS            reduce using rule 174 (unary_expression -> cast_expression .)
    CONCAT          reduce using rule 174 (unary_expression -> cast_expression .)
    SL              reduce using rule 174 (unary_expression -> cast_expression .)
    SR              reduce using rule 174 (unary_expression -> cast_expression .)
    LESS_THAN       reduce using rule 174 (unary_expression -> cast_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 174 (unary_expression -> cast_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 174 (unary_expression -> cast_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 174 (unary_expression -> cast_expression .)
    SPACESHIP       reduce using rule 174 (unary_expression -> cast_expression .)
    EQUAL           reduce using rule 174 (unary_expression -> cast_expression .)
    IS_NOT_EQUAL    reduce using rule 174 (unary_expression -> cast_expression .)
    IS_IDENTICAL    reduce using rule 174 (unary_expression -> cast_expression .)
    IS_NOT_IDENTICAL reduce using rule 174 (unary_expression -> cast_expression .)
    AMPERSAND       reduce using rule 174 (unary_expression -> cast_expression .)
    BITWISE_XOR     reduce using rule 174 (unary_expression -> cast_expression .)
    BITWISE_OR      reduce using rule 174 (unary_expression -> cast_expression .)
    COALESCE        reduce using rule 174 (unary_expression -> cast_expression .)
    TERNARY_OPERATION reduce using rule 174 (unary_expression -> cast_expression .)
    AND             reduce using rule 174 (unary_expression -> cast_expression .)
    XOR             reduce using rule 174 (unary_expression -> cast_expression .)
    OR              reduce using rule 174 (unary_expression -> cast_expression .)
    SEMICOLON       reduce using rule 174 (unary_expression -> cast_expression .)
    STRING          reduce using rule 174 (unary_expression -> cast_expression .)
    INCLUDE         reduce using rule 174 (unary_expression -> cast_expression .)
    INCLUDE_ONCE    reduce using rule 174 (unary_expression -> cast_expression .)
    REQUIRE         reduce using rule 174 (unary_expression -> cast_expression .)
    REQUIRE_ONCE    reduce using rule 174 (unary_expression -> cast_expression .)
    PRINT           reduce using rule 174 (unary_expression -> cast_expression .)
    YIELD           reduce using rule 174 (unary_expression -> cast_expression .)
    YIELD_FROM      reduce using rule 174 (unary_expression -> cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 174 (unary_expression -> cast_expression .)
    COLON           reduce using rule 174 (unary_expression -> cast_expression .)
    AS              reduce using rule 174 (unary_expression -> cast_expression .)
    ARROW           reduce using rule 174 (unary_expression -> cast_expression .)
    RIGHT_CBRAC     reduce using rule 174 (unary_expression -> cast_expression .)
    VARIABLE        reduce using rule 174 (unary_expression -> cast_expression .)
    DOUBLE_POINT    reduce using rule 174 (unary_expression -> cast_expression .)
    DOUBLE_ARROW    reduce using rule 174 (unary_expression -> cast_expression .)
    ELLIPSIS        reduce using rule 174 (unary_expression -> cast_expression .)
    ARRAY           reduce using rule 174 (unary_expression -> cast_expression .)
    CALLABLE        reduce using rule 174 (unary_expression -> cast_expression .)
    ITERABLE        reduce using rule 174 (unary_expression -> cast_expression .)
    BOOL            reduce using rule 174 (unary_expression -> cast_expression .)
    FLOAT           reduce using rule 174 (unary_expression -> cast_expression .)
    INT             reduce using rule 174 (unary_expression -> cast_expression .)
    INSTANCEOF      reduce using rule 174 (unary_expression -> cast_expression .)


state 211

    (169) exponentiation_expression -> clone_expression .
    (170) exponentiation_expression -> clone_expression . DOUBLEASTERISK exponentiation_expression

    ASTERISK        reduce using rule 169 (exponentiation_expression -> clone_expression .)
    DIVIDE          reduce using rule 169 (exponentiation_expression -> clone_expression .)
    MODULO          reduce using rule 169 (exponentiation_expression -> clone_expression .)
    PLUS            reduce using rule 169 (exponentiation_expression -> clone_expression .)
    LESS            reduce using rule 169 (exponentiation_expression -> clone_expression .)
    CONCAT          reduce using rule 169 (exponentiation_expression -> clone_expression .)
    SL              reduce using rule 169 (exponentiation_expression -> clone_expression .)
    SR              reduce using rule 169 (exponentiation_expression -> clone_expression .)
    LESS_THAN       reduce using rule 169 (exponentiation_expression -> clone_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 169 (exponentiation_expression -> clone_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 169 (exponentiation_expression -> clone_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 169 (exponentiation_expression -> clone_expression .)
    SPACESHIP       reduce using rule 169 (exponentiation_expression -> clone_expression .)
    EQUAL           reduce using rule 169 (exponentiation_expression -> clone_expression .)
    IS_NOT_EQUAL    reduce using rule 169 (exponentiation_expression -> clone_expression .)
    IS_IDENTICAL    reduce using rule 169 (exponentiation_expression -> clone_expression .)
    IS_NOT_IDENTICAL reduce using rule 169 (exponentiation_expression -> clone_expression .)
    AMPERSAND       reduce using rule 169 (exponentiation_expression -> clone_expression .)
    BITWISE_XOR     reduce using rule 169 (exponentiation_expression -> clone_expression .)
    BITWISE_OR      reduce using rule 169 (exponentiation_expression -> clone_expression .)
    COALESCE        reduce using rule 169 (exponentiation_expression -> clone_expression .)
    TERNARY_OPERATION reduce using rule 169 (exponentiation_expression -> clone_expression .)
    AND             reduce using rule 169 (exponentiation_expression -> clone_expression .)
    XOR             reduce using rule 169 (exponentiation_expression -> clone_expression .)
    OR              reduce using rule 169 (exponentiation_expression -> clone_expression .)
    SEMICOLON       reduce using rule 169 (exponentiation_expression -> clone_expression .)
    STRING          reduce using rule 169 (exponentiation_expression -> clone_expression .)
    INCLUDE         reduce using rule 169 (exponentiation_expression -> clone_expression .)
    INCLUDE_ONCE    reduce using rule 169 (exponentiation_expression -> clone_expression .)
    REQUIRE         reduce using rule 169 (exponentiation_expression -> clone_expression .)
    REQUIRE_ONCE    reduce using rule 169 (exponentiation_expression -> clone_expression .)
    PRINT           reduce using rule 169 (exponentiation_expression -> clone_expression .)
    YIELD           reduce using rule 169 (exponentiation_expression -> clone_expression .)
    YIELD_FROM      reduce using rule 169 (exponentiation_expression -> clone_expression .)
    RIGHT_PARENTHESIS reduce using rule 169 (exponentiation_expression -> clone_expression .)
    COLON           reduce using rule 169 (exponentiation_expression -> clone_expression .)
    AS              reduce using rule 169 (exponentiation_expression -> clone_expression .)
    ARROW           reduce using rule 169 (exponentiation_expression -> clone_expression .)
    RIGHT_CBRAC     reduce using rule 169 (exponentiation_expression -> clone_expression .)
    VARIABLE        reduce using rule 169 (exponentiation_expression -> clone_expression .)
    DOUBLE_POINT    reduce using rule 169 (exponentiation_expression -> clone_expression .)
    DOUBLE_ARROW    reduce using rule 169 (exponentiation_expression -> clone_expression .)
    ELLIPSIS        reduce using rule 169 (exponentiation_expression -> clone_expression .)
    ARRAY           reduce using rule 169 (exponentiation_expression -> clone_expression .)
    CALLABLE        reduce using rule 169 (exponentiation_expression -> clone_expression .)
    ITERABLE        reduce using rule 169 (exponentiation_expression -> clone_expression .)
    BOOL            reduce using rule 169 (exponentiation_expression -> clone_expression .)
    FLOAT           reduce using rule 169 (exponentiation_expression -> clone_expression .)
    INT             reduce using rule 169 (exponentiation_expression -> clone_expression .)
    INSTANCEOF      reduce using rule 169 (exponentiation_expression -> clone_expression .)
    DOUBLEASTERISK  shift and go to state 382


state 212

    (175) unary_op_expression -> unary_operator . unary_expression
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    unary_operator                 shift and go to state 212
    unary_expression               shift and go to state 383
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 213

    (179) error_control_expression -> AT . unary_expression
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    unary_expression               shift and go to state 384
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 214

    (167) clone_expression -> primary_expression .

    DOUBLEASTERISK  reduce using rule 167 (clone_expression -> primary_expression .)
    ASTERISK        reduce using rule 167 (clone_expression -> primary_expression .)
    DIVIDE          reduce using rule 167 (clone_expression -> primary_expression .)
    MODULO          reduce using rule 167 (clone_expression -> primary_expression .)
    PLUS            reduce using rule 167 (clone_expression -> primary_expression .)
    LESS            reduce using rule 167 (clone_expression -> primary_expression .)
    CONCAT          reduce using rule 167 (clone_expression -> primary_expression .)
    SL              reduce using rule 167 (clone_expression -> primary_expression .)
    SR              reduce using rule 167 (clone_expression -> primary_expression .)
    LESS_THAN       reduce using rule 167 (clone_expression -> primary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 167 (clone_expression -> primary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 167 (clone_expression -> primary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 167 (clone_expression -> primary_expression .)
    SPACESHIP       reduce using rule 167 (clone_expression -> primary_expression .)
    EQUAL           reduce using rule 167 (clone_expression -> primary_expression .)
    IS_NOT_EQUAL    reduce using rule 167 (clone_expression -> primary_expression .)
    IS_IDENTICAL    reduce using rule 167 (clone_expression -> primary_expression .)
    IS_NOT_IDENTICAL reduce using rule 167 (clone_expression -> primary_expression .)
    AMPERSAND       reduce using rule 167 (clone_expression -> primary_expression .)
    BITWISE_XOR     reduce using rule 167 (clone_expression -> primary_expression .)
    BITWISE_OR      reduce using rule 167 (clone_expression -> primary_expression .)
    COALESCE        reduce using rule 167 (clone_expression -> primary_expression .)
    TERNARY_OPERATION reduce using rule 167 (clone_expression -> primary_expression .)
    AND             reduce using rule 167 (clone_expression -> primary_expression .)
    XOR             reduce using rule 167 (clone_expression -> primary_expression .)
    OR              reduce using rule 167 (clone_expression -> primary_expression .)
    SEMICOLON       reduce using rule 167 (clone_expression -> primary_expression .)
    STRING          reduce using rule 167 (clone_expression -> primary_expression .)
    INCLUDE         reduce using rule 167 (clone_expression -> primary_expression .)
    INCLUDE_ONCE    reduce using rule 167 (clone_expression -> primary_expression .)
    REQUIRE         reduce using rule 167 (clone_expression -> primary_expression .)
    REQUIRE_ONCE    reduce using rule 167 (clone_expression -> primary_expression .)
    PRINT           reduce using rule 167 (clone_expression -> primary_expression .)
    YIELD           reduce using rule 167 (clone_expression -> primary_expression .)
    YIELD_FROM      reduce using rule 167 (clone_expression -> primary_expression .)
    RIGHT_PARENTHESIS reduce using rule 167 (clone_expression -> primary_expression .)
    COLON           reduce using rule 167 (clone_expression -> primary_expression .)
    AS              reduce using rule 167 (clone_expression -> primary_expression .)
    ARROW           reduce using rule 167 (clone_expression -> primary_expression .)
    RIGHT_CBRAC     reduce using rule 167 (clone_expression -> primary_expression .)
    VARIABLE        reduce using rule 167 (clone_expression -> primary_expression .)
    DOUBLE_POINT    reduce using rule 167 (clone_expression -> primary_expression .)
    DOUBLE_ARROW    reduce using rule 167 (clone_expression -> primary_expression .)
    ELLIPSIS        reduce using rule 167 (clone_expression -> primary_expression .)
    ARRAY           reduce using rule 167 (clone_expression -> primary_expression .)
    CALLABLE        reduce using rule 167 (clone_expression -> primary_expression .)
    ITERABLE        reduce using rule 167 (clone_expression -> primary_expression .)
    BOOL            reduce using rule 167 (clone_expression -> primary_expression .)
    FLOAT           reduce using rule 167 (clone_expression -> primary_expression .)
    INT             reduce using rule 167 (clone_expression -> primary_expression .)
    INSTANCEOF      reduce using rule 167 (clone_expression -> primary_expression .)


state 215

    (168) clone_expression -> CLONE . primary_expression
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    LEFT_PARENTHESIS shift and go to state 386
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    primary_expression             shift and go to state 385
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 216

    (178) unary_operator -> BITWISE_NOT .

    AT              reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    LEFT_PARENTHESIS reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    CLONE           reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    PLUS            reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    LESS            reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    BITWISE_NOT     reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    ARRAY           reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    LEFT_CBRAC      reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    NEW             reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    DOUBLEPLUS      reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    DOUBLELESS      reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    BACKTICK        reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    LNUMBER         reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    DNUMBER         reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    STRING          reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    EMPTY           reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    EVAL            reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    EXIT            reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    DIE             reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    ISSET           reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    STATIC          reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    VARIABLE        reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    DOLLAR          reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    SELF            reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    PARENT          reduce using rule 178 (unary_operator -> BITWISE_NOT .)
    FUNCTION        reduce using rule 178 (unary_operator -> BITWISE_NOT .)


state 217

    (29) primary_expression -> class_constant_access_expression .

    DOUBLEASTERISK  reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    ASTERISK        reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    DIVIDE          reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    MODULO          reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    PLUS            reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    LESS            reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    CONCAT          reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    SL              reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    SR              reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    LESS_THAN       reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    SPACESHIP       reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    EQUAL           reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    IS_NOT_EQUAL    reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    IS_IDENTICAL    reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    AMPERSAND       reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    BITWISE_XOR     reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    BITWISE_OR      reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    COALESCE        reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    TERNARY_OPERATION reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    AND             reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    XOR             reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    OR              reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    SEMICOLON       reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    STRING          reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    INCLUDE         reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    INCLUDE_ONCE    reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    REQUIRE         reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    REQUIRE_ONCE    reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    PRINT           reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    YIELD           reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    YIELD_FROM      reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    COLON           reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    AS              reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    ARROW           reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    RIGHT_CBRAC     reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    VARIABLE        reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    DOUBLE_POINT    reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    DOUBLE_ARROW    reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    ELLIPSIS        reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    ARRAY           reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    CALLABLE        reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    ITERABLE        reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    BOOL            reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    FLOAT           reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    INT             reduce using rule 29 (primary_expression -> class_constant_access_expression .)
    INSTANCEOF      reduce using rule 29 (primary_expression -> class_constant_access_expression .)


state 218

    (30) primary_expression -> constant_access_expression .

    DOUBLEASTERISK  reduce using rule 30 (primary_expression -> constant_access_expression .)
    ASTERISK        reduce using rule 30 (primary_expression -> constant_access_expression .)
    DIVIDE          reduce using rule 30 (primary_expression -> constant_access_expression .)
    MODULO          reduce using rule 30 (primary_expression -> constant_access_expression .)
    PLUS            reduce using rule 30 (primary_expression -> constant_access_expression .)
    LESS            reduce using rule 30 (primary_expression -> constant_access_expression .)
    CONCAT          reduce using rule 30 (primary_expression -> constant_access_expression .)
    SL              reduce using rule 30 (primary_expression -> constant_access_expression .)
    SR              reduce using rule 30 (primary_expression -> constant_access_expression .)
    LESS_THAN       reduce using rule 30 (primary_expression -> constant_access_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 30 (primary_expression -> constant_access_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 30 (primary_expression -> constant_access_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 30 (primary_expression -> constant_access_expression .)
    SPACESHIP       reduce using rule 30 (primary_expression -> constant_access_expression .)
    EQUAL           reduce using rule 30 (primary_expression -> constant_access_expression .)
    IS_NOT_EQUAL    reduce using rule 30 (primary_expression -> constant_access_expression .)
    IS_IDENTICAL    reduce using rule 30 (primary_expression -> constant_access_expression .)
    IS_NOT_IDENTICAL reduce using rule 30 (primary_expression -> constant_access_expression .)
    AMPERSAND       reduce using rule 30 (primary_expression -> constant_access_expression .)
    BITWISE_XOR     reduce using rule 30 (primary_expression -> constant_access_expression .)
    BITWISE_OR      reduce using rule 30 (primary_expression -> constant_access_expression .)
    COALESCE        reduce using rule 30 (primary_expression -> constant_access_expression .)
    TERNARY_OPERATION reduce using rule 30 (primary_expression -> constant_access_expression .)
    AND             reduce using rule 30 (primary_expression -> constant_access_expression .)
    XOR             reduce using rule 30 (primary_expression -> constant_access_expression .)
    OR              reduce using rule 30 (primary_expression -> constant_access_expression .)
    SEMICOLON       reduce using rule 30 (primary_expression -> constant_access_expression .)
    STRING          reduce using rule 30 (primary_expression -> constant_access_expression .)
    INCLUDE         reduce using rule 30 (primary_expression -> constant_access_expression .)
    INCLUDE_ONCE    reduce using rule 30 (primary_expression -> constant_access_expression .)
    REQUIRE         reduce using rule 30 (primary_expression -> constant_access_expression .)
    REQUIRE_ONCE    reduce using rule 30 (primary_expression -> constant_access_expression .)
    PRINT           reduce using rule 30 (primary_expression -> constant_access_expression .)
    YIELD           reduce using rule 30 (primary_expression -> constant_access_expression .)
    YIELD_FROM      reduce using rule 30 (primary_expression -> constant_access_expression .)
    RIGHT_PARENTHESIS reduce using rule 30 (primary_expression -> constant_access_expression .)
    COLON           reduce using rule 30 (primary_expression -> constant_access_expression .)
    AS              reduce using rule 30 (primary_expression -> constant_access_expression .)
    ARROW           reduce using rule 30 (primary_expression -> constant_access_expression .)
    RIGHT_CBRAC     reduce using rule 30 (primary_expression -> constant_access_expression .)
    VARIABLE        reduce using rule 30 (primary_expression -> constant_access_expression .)
    DOUBLE_POINT    reduce using rule 30 (primary_expression -> constant_access_expression .)
    DOUBLE_ARROW    reduce using rule 30 (primary_expression -> constant_access_expression .)
    ELLIPSIS        reduce using rule 30 (primary_expression -> constant_access_expression .)
    ARRAY           reduce using rule 30 (primary_expression -> constant_access_expression .)
    CALLABLE        reduce using rule 30 (primary_expression -> constant_access_expression .)
    ITERABLE        reduce using rule 30 (primary_expression -> constant_access_expression .)
    BOOL            reduce using rule 30 (primary_expression -> constant_access_expression .)
    FLOAT           reduce using rule 30 (primary_expression -> constant_access_expression .)
    INT             reduce using rule 30 (primary_expression -> constant_access_expression .)
    INSTANCEOF      reduce using rule 30 (primary_expression -> constant_access_expression .)


state 219

    (31) primary_expression -> literal .

    DOUBLEASTERISK  reduce using rule 31 (primary_expression -> literal .)
    ASTERISK        reduce using rule 31 (primary_expression -> literal .)
    DIVIDE          reduce using rule 31 (primary_expression -> literal .)
    MODULO          reduce using rule 31 (primary_expression -> literal .)
    PLUS            reduce using rule 31 (primary_expression -> literal .)
    LESS            reduce using rule 31 (primary_expression -> literal .)
    CONCAT          reduce using rule 31 (primary_expression -> literal .)
    SL              reduce using rule 31 (primary_expression -> literal .)
    SR              reduce using rule 31 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 31 (primary_expression -> literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 31 (primary_expression -> literal .)
    IS_GREATER_OR_EQUAL reduce using rule 31 (primary_expression -> literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 31 (primary_expression -> literal .)
    SPACESHIP       reduce using rule 31 (primary_expression -> literal .)
    EQUAL           reduce using rule 31 (primary_expression -> literal .)
    IS_NOT_EQUAL    reduce using rule 31 (primary_expression -> literal .)
    IS_IDENTICAL    reduce using rule 31 (primary_expression -> literal .)
    IS_NOT_IDENTICAL reduce using rule 31 (primary_expression -> literal .)
    AMPERSAND       reduce using rule 31 (primary_expression -> literal .)
    BITWISE_XOR     reduce using rule 31 (primary_expression -> literal .)
    BITWISE_OR      reduce using rule 31 (primary_expression -> literal .)
    COALESCE        reduce using rule 31 (primary_expression -> literal .)
    TERNARY_OPERATION reduce using rule 31 (primary_expression -> literal .)
    AND             reduce using rule 31 (primary_expression -> literal .)
    XOR             reduce using rule 31 (primary_expression -> literal .)
    OR              reduce using rule 31 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 31 (primary_expression -> literal .)
    STRING          reduce using rule 31 (primary_expression -> literal .)
    INCLUDE         reduce using rule 31 (primary_expression -> literal .)
    INCLUDE_ONCE    reduce using rule 31 (primary_expression -> literal .)
    REQUIRE         reduce using rule 31 (primary_expression -> literal .)
    REQUIRE_ONCE    reduce using rule 31 (primary_expression -> literal .)
    PRINT           reduce using rule 31 (primary_expression -> literal .)
    YIELD           reduce using rule 31 (primary_expression -> literal .)
    YIELD_FROM      reduce using rule 31 (primary_expression -> literal .)
    RIGHT_PARENTHESIS reduce using rule 31 (primary_expression -> literal .)
    COLON           reduce using rule 31 (primary_expression -> literal .)
    AS              reduce using rule 31 (primary_expression -> literal .)
    ARROW           reduce using rule 31 (primary_expression -> literal .)
    RIGHT_CBRAC     reduce using rule 31 (primary_expression -> literal .)
    VARIABLE        reduce using rule 31 (primary_expression -> literal .)
    DOUBLE_POINT    reduce using rule 31 (primary_expression -> literal .)
    DOUBLE_ARROW    reduce using rule 31 (primary_expression -> literal .)
    ELLIPSIS        reduce using rule 31 (primary_expression -> literal .)
    ARRAY           reduce using rule 31 (primary_expression -> literal .)
    CALLABLE        reduce using rule 31 (primary_expression -> literal .)
    ITERABLE        reduce using rule 31 (primary_expression -> literal .)
    BOOL            reduce using rule 31 (primary_expression -> literal .)
    FLOAT           reduce using rule 31 (primary_expression -> literal .)
    INT             reduce using rule 31 (primary_expression -> literal .)
    INSTANCEOF      reduce using rule 31 (primary_expression -> literal .)


state 220

    (33) primary_expression -> intrinsic .

    DOUBLEASTERISK  reduce using rule 33 (primary_expression -> intrinsic .)
    ASTERISK        reduce using rule 33 (primary_expression -> intrinsic .)
    DIVIDE          reduce using rule 33 (primary_expression -> intrinsic .)
    MODULO          reduce using rule 33 (primary_expression -> intrinsic .)
    PLUS            reduce using rule 33 (primary_expression -> intrinsic .)
    LESS            reduce using rule 33 (primary_expression -> intrinsic .)
    CONCAT          reduce using rule 33 (primary_expression -> intrinsic .)
    SL              reduce using rule 33 (primary_expression -> intrinsic .)
    SR              reduce using rule 33 (primary_expression -> intrinsic .)
    LESS_THAN       reduce using rule 33 (primary_expression -> intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 33 (primary_expression -> intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 33 (primary_expression -> intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 33 (primary_expression -> intrinsic .)
    SPACESHIP       reduce using rule 33 (primary_expression -> intrinsic .)
    EQUAL           reduce using rule 33 (primary_expression -> intrinsic .)
    IS_NOT_EQUAL    reduce using rule 33 (primary_expression -> intrinsic .)
    IS_IDENTICAL    reduce using rule 33 (primary_expression -> intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 33 (primary_expression -> intrinsic .)
    AMPERSAND       reduce using rule 33 (primary_expression -> intrinsic .)
    BITWISE_XOR     reduce using rule 33 (primary_expression -> intrinsic .)
    BITWISE_OR      reduce using rule 33 (primary_expression -> intrinsic .)
    COALESCE        reduce using rule 33 (primary_expression -> intrinsic .)
    TERNARY_OPERATION reduce using rule 33 (primary_expression -> intrinsic .)
    AND             reduce using rule 33 (primary_expression -> intrinsic .)
    XOR             reduce using rule 33 (primary_expression -> intrinsic .)
    OR              reduce using rule 33 (primary_expression -> intrinsic .)
    SEMICOLON       reduce using rule 33 (primary_expression -> intrinsic .)
    STRING          reduce using rule 33 (primary_expression -> intrinsic .)
    INCLUDE         reduce using rule 33 (primary_expression -> intrinsic .)
    INCLUDE_ONCE    reduce using rule 33 (primary_expression -> intrinsic .)
    REQUIRE         reduce using rule 33 (primary_expression -> intrinsic .)
    REQUIRE_ONCE    reduce using rule 33 (primary_expression -> intrinsic .)
    PRINT           reduce using rule 33 (primary_expression -> intrinsic .)
    YIELD           reduce using rule 33 (primary_expression -> intrinsic .)
    YIELD_FROM      reduce using rule 33 (primary_expression -> intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 33 (primary_expression -> intrinsic .)
    COLON           reduce using rule 33 (primary_expression -> intrinsic .)
    AS              reduce using rule 33 (primary_expression -> intrinsic .)
    ARROW           reduce using rule 33 (primary_expression -> intrinsic .)
    RIGHT_CBRAC     reduce using rule 33 (primary_expression -> intrinsic .)
    VARIABLE        reduce using rule 33 (primary_expression -> intrinsic .)
    DOUBLE_POINT    reduce using rule 33 (primary_expression -> intrinsic .)
    DOUBLE_ARROW    reduce using rule 33 (primary_expression -> intrinsic .)
    ELLIPSIS        reduce using rule 33 (primary_expression -> intrinsic .)
    ARRAY           reduce using rule 33 (primary_expression -> intrinsic .)
    CALLABLE        reduce using rule 33 (primary_expression -> intrinsic .)
    ITERABLE        reduce using rule 33 (primary_expression -> intrinsic .)
    BOOL            reduce using rule 33 (primary_expression -> intrinsic .)
    FLOAT           reduce using rule 33 (primary_expression -> intrinsic .)
    INT             reduce using rule 33 (primary_expression -> intrinsic .)
    INSTANCEOF      reduce using rule 33 (primary_expression -> intrinsic .)


state 221

    (34) primary_expression -> anonymous_function_creation_expression .

    DOUBLEASTERISK  reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    ASTERISK        reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    DIVIDE          reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    MODULO          reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    PLUS            reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    LESS            reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    CONCAT          reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    SL              reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    SR              reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    LESS_THAN       reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    SPACESHIP       reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    EQUAL           reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    IS_IDENTICAL    reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    AMPERSAND       reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    BITWISE_XOR     reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    BITWISE_OR      reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    COALESCE        reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    TERNARY_OPERATION reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    AND             reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    XOR             reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    OR              reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    SEMICOLON       reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    STRING          reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    INCLUDE         reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    INCLUDE_ONCE    reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    REQUIRE         reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    REQUIRE_ONCE    reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    PRINT           reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    YIELD           reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    YIELD_FROM      reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    COLON           reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    AS              reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    ARROW           reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    RIGHT_CBRAC     reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    VARIABLE        reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    DOUBLE_POINT    reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    DOUBLE_ARROW    reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    ELLIPSIS        reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    ARRAY           reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    CALLABLE        reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    ITERABLE        reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    BOOL            reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    FLOAT           reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    INT             reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)
    INSTANCEOF      reduce using rule 34 (primary_expression -> anonymous_function_creation_expression .)


state 222

    (35) primary_expression -> object_creation_expression .

    DOUBLEASTERISK  reduce using rule 35 (primary_expression -> object_creation_expression .)
    ASTERISK        reduce using rule 35 (primary_expression -> object_creation_expression .)
    DIVIDE          reduce using rule 35 (primary_expression -> object_creation_expression .)
    MODULO          reduce using rule 35 (primary_expression -> object_creation_expression .)
    PLUS            reduce using rule 35 (primary_expression -> object_creation_expression .)
    LESS            reduce using rule 35 (primary_expression -> object_creation_expression .)
    CONCAT          reduce using rule 35 (primary_expression -> object_creation_expression .)
    SL              reduce using rule 35 (primary_expression -> object_creation_expression .)
    SR              reduce using rule 35 (primary_expression -> object_creation_expression .)
    LESS_THAN       reduce using rule 35 (primary_expression -> object_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 35 (primary_expression -> object_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 35 (primary_expression -> object_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 35 (primary_expression -> object_creation_expression .)
    SPACESHIP       reduce using rule 35 (primary_expression -> object_creation_expression .)
    EQUAL           reduce using rule 35 (primary_expression -> object_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 35 (primary_expression -> object_creation_expression .)
    IS_IDENTICAL    reduce using rule 35 (primary_expression -> object_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 35 (primary_expression -> object_creation_expression .)
    AMPERSAND       reduce using rule 35 (primary_expression -> object_creation_expression .)
    BITWISE_XOR     reduce using rule 35 (primary_expression -> object_creation_expression .)
    BITWISE_OR      reduce using rule 35 (primary_expression -> object_creation_expression .)
    COALESCE        reduce using rule 35 (primary_expression -> object_creation_expression .)
    TERNARY_OPERATION reduce using rule 35 (primary_expression -> object_creation_expression .)
    AND             reduce using rule 35 (primary_expression -> object_creation_expression .)
    XOR             reduce using rule 35 (primary_expression -> object_creation_expression .)
    OR              reduce using rule 35 (primary_expression -> object_creation_expression .)
    SEMICOLON       reduce using rule 35 (primary_expression -> object_creation_expression .)
    STRING          reduce using rule 35 (primary_expression -> object_creation_expression .)
    INCLUDE         reduce using rule 35 (primary_expression -> object_creation_expression .)
    INCLUDE_ONCE    reduce using rule 35 (primary_expression -> object_creation_expression .)
    REQUIRE         reduce using rule 35 (primary_expression -> object_creation_expression .)
    REQUIRE_ONCE    reduce using rule 35 (primary_expression -> object_creation_expression .)
    PRINT           reduce using rule 35 (primary_expression -> object_creation_expression .)
    YIELD           reduce using rule 35 (primary_expression -> object_creation_expression .)
    YIELD_FROM      reduce using rule 35 (primary_expression -> object_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 35 (primary_expression -> object_creation_expression .)
    COLON           reduce using rule 35 (primary_expression -> object_creation_expression .)
    AS              reduce using rule 35 (primary_expression -> object_creation_expression .)
    ARROW           reduce using rule 35 (primary_expression -> object_creation_expression .)
    RIGHT_CBRAC     reduce using rule 35 (primary_expression -> object_creation_expression .)
    VARIABLE        reduce using rule 35 (primary_expression -> object_creation_expression .)
    DOUBLE_POINT    reduce using rule 35 (primary_expression -> object_creation_expression .)
    DOUBLE_ARROW    reduce using rule 35 (primary_expression -> object_creation_expression .)
    ELLIPSIS        reduce using rule 35 (primary_expression -> object_creation_expression .)
    ARRAY           reduce using rule 35 (primary_expression -> object_creation_expression .)
    CALLABLE        reduce using rule 35 (primary_expression -> object_creation_expression .)
    ITERABLE        reduce using rule 35 (primary_expression -> object_creation_expression .)
    BOOL            reduce using rule 35 (primary_expression -> object_creation_expression .)
    FLOAT           reduce using rule 35 (primary_expression -> object_creation_expression .)
    INT             reduce using rule 35 (primary_expression -> object_creation_expression .)
    INSTANCEOF      reduce using rule 35 (primary_expression -> object_creation_expression .)


state 223

    (36) primary_expression -> postfix_increment_expression .

    DOUBLEASTERISK  reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    ASTERISK        reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    DIVIDE          reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    MODULO          reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    PLUS            reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    LESS            reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    CONCAT          reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    SL              reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    SR              reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    LESS_THAN       reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    SPACESHIP       reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    EQUAL           reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    IS_NOT_EQUAL    reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    IS_IDENTICAL    reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    IS_NOT_IDENTICAL reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    AMPERSAND       reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    BITWISE_XOR     reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    BITWISE_OR      reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    COALESCE        reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    TERNARY_OPERATION reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    AND             reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    XOR             reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    OR              reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    SEMICOLON       reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    STRING          reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    INCLUDE         reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    INCLUDE_ONCE    reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    REQUIRE         reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    REQUIRE_ONCE    reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    PRINT           reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    YIELD           reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    YIELD_FROM      reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    RIGHT_PARENTHESIS reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    COLON           reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    AS              reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    ARROW           reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    RIGHT_CBRAC     reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    VARIABLE        reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    DOUBLE_POINT    reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    DOUBLE_ARROW    reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    ELLIPSIS        reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    ARRAY           reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    CALLABLE        reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    ITERABLE        reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    BOOL            reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    FLOAT           reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    INT             reduce using rule 36 (primary_expression -> postfix_increment_expression .)
    INSTANCEOF      reduce using rule 36 (primary_expression -> postfix_increment_expression .)


state 224

    (37) primary_expression -> postfix_decrement_expression .

    DOUBLEASTERISK  reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    ASTERISK        reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    DIVIDE          reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    MODULO          reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    PLUS            reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    LESS            reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    CONCAT          reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    SL              reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    SR              reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    LESS_THAN       reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    SPACESHIP       reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    EQUAL           reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    IS_NOT_EQUAL    reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    IS_IDENTICAL    reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    IS_NOT_IDENTICAL reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    AMPERSAND       reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    BITWISE_XOR     reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    BITWISE_OR      reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    COALESCE        reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    TERNARY_OPERATION reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    AND             reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    XOR             reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    OR              reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    SEMICOLON       reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    STRING          reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    INCLUDE         reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    INCLUDE_ONCE    reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    REQUIRE         reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    REQUIRE_ONCE    reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    PRINT           reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    YIELD           reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    YIELD_FROM      reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    RIGHT_PARENTHESIS reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    COLON           reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    AS              reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    ARROW           reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    RIGHT_CBRAC     reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    VARIABLE        reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    DOUBLE_POINT    reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    DOUBLE_ARROW    reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    ELLIPSIS        reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    ARRAY           reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    CALLABLE        reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    ITERABLE        reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    BOOL            reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    FLOAT           reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    INT             reduce using rule 37 (primary_expression -> postfix_decrement_expression .)
    INSTANCEOF      reduce using rule 37 (primary_expression -> postfix_decrement_expression .)


state 225

    (38) primary_expression -> prefix_increment_expression .

    DOUBLEASTERISK  reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    ASTERISK        reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    DIVIDE          reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    MODULO          reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    PLUS            reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    LESS            reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    CONCAT          reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    SL              reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    SR              reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    LESS_THAN       reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    SPACESHIP       reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    EQUAL           reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    IS_NOT_EQUAL    reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    IS_IDENTICAL    reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    IS_NOT_IDENTICAL reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    AMPERSAND       reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    BITWISE_XOR     reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    BITWISE_OR      reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    COALESCE        reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    TERNARY_OPERATION reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    AND             reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    XOR             reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    OR              reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    SEMICOLON       reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    STRING          reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    INCLUDE         reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    INCLUDE_ONCE    reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    REQUIRE         reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    REQUIRE_ONCE    reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    PRINT           reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    YIELD           reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    YIELD_FROM      reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    RIGHT_PARENTHESIS reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    COLON           reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    AS              reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    ARROW           reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    RIGHT_CBRAC     reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    VARIABLE        reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    DOUBLE_POINT    reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    DOUBLE_ARROW    reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    ELLIPSIS        reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    ARRAY           reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    CALLABLE        reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    ITERABLE        reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    BOOL            reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    FLOAT           reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    INT             reduce using rule 38 (primary_expression -> prefix_increment_expression .)
    INSTANCEOF      reduce using rule 38 (primary_expression -> prefix_increment_expression .)


state 226

    (39) primary_expression -> prefix_decrement_expression .

    DOUBLEASTERISK  reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    ASTERISK        reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    DIVIDE          reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    MODULO          reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    PLUS            reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    LESS            reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    CONCAT          reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    SL              reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    SR              reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    LESS_THAN       reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    SPACESHIP       reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    EQUAL           reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    IS_NOT_EQUAL    reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    IS_IDENTICAL    reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    IS_NOT_IDENTICAL reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    AMPERSAND       reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    BITWISE_XOR     reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    BITWISE_OR      reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    COALESCE        reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    TERNARY_OPERATION reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    AND             reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    XOR             reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    OR              reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    SEMICOLON       reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    STRING          reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    INCLUDE         reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    INCLUDE_ONCE    reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    REQUIRE         reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    REQUIRE_ONCE    reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    PRINT           reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    YIELD           reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    YIELD_FROM      reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    RIGHT_PARENTHESIS reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    COLON           reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    AS              reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    ARROW           reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    RIGHT_CBRAC     reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    VARIABLE        reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    DOUBLE_POINT    reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    DOUBLE_ARROW    reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    ELLIPSIS        reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    ARRAY           reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    CALLABLE        reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    ITERABLE        reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    BOOL            reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    FLOAT           reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    INT             reduce using rule 39 (primary_expression -> prefix_decrement_expression .)
    INSTANCEOF      reduce using rule 39 (primary_expression -> prefix_decrement_expression .)


state 227

    (40) primary_expression -> byref_assignment_expression .

    DOUBLEASTERISK  reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    ASTERISK        reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    DIVIDE          reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    MODULO          reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    PLUS            reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    LESS            reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    CONCAT          reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    SL              reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    SR              reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    LESS_THAN       reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    SPACESHIP       reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    EQUAL           reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    IS_NOT_EQUAL    reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    IS_IDENTICAL    reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    IS_NOT_IDENTICAL reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    AMPERSAND       reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    BITWISE_XOR     reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    BITWISE_OR      reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    COALESCE        reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    TERNARY_OPERATION reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    AND             reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    XOR             reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    OR              reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    SEMICOLON       reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    STRING          reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    INCLUDE         reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    INCLUDE_ONCE    reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    REQUIRE         reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    REQUIRE_ONCE    reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    PRINT           reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    YIELD           reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    YIELD_FROM      reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    COLON           reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    AS              reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    ARROW           reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    RIGHT_CBRAC     reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    VARIABLE        reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    DOUBLE_POINT    reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    DOUBLE_ARROW    reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    ELLIPSIS        reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    ARRAY           reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    CALLABLE        reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    ITERABLE        reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    BOOL            reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    FLOAT           reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    INT             reduce using rule 40 (primary_expression -> byref_assignment_expression .)
    INSTANCEOF      reduce using rule 40 (primary_expression -> byref_assignment_expression .)


state 228

    (41) primary_expression -> shell_command_expression .

    DOUBLEASTERISK  reduce using rule 41 (primary_expression -> shell_command_expression .)
    ASTERISK        reduce using rule 41 (primary_expression -> shell_command_expression .)
    DIVIDE          reduce using rule 41 (primary_expression -> shell_command_expression .)
    MODULO          reduce using rule 41 (primary_expression -> shell_command_expression .)
    PLUS            reduce using rule 41 (primary_expression -> shell_command_expression .)
    LESS            reduce using rule 41 (primary_expression -> shell_command_expression .)
    CONCAT          reduce using rule 41 (primary_expression -> shell_command_expression .)
    SL              reduce using rule 41 (primary_expression -> shell_command_expression .)
    SR              reduce using rule 41 (primary_expression -> shell_command_expression .)
    LESS_THAN       reduce using rule 41 (primary_expression -> shell_command_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 41 (primary_expression -> shell_command_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 41 (primary_expression -> shell_command_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 41 (primary_expression -> shell_command_expression .)
    SPACESHIP       reduce using rule 41 (primary_expression -> shell_command_expression .)
    EQUAL           reduce using rule 41 (primary_expression -> shell_command_expression .)
    IS_NOT_EQUAL    reduce using rule 41 (primary_expression -> shell_command_expression .)
    IS_IDENTICAL    reduce using rule 41 (primary_expression -> shell_command_expression .)
    IS_NOT_IDENTICAL reduce using rule 41 (primary_expression -> shell_command_expression .)
    AMPERSAND       reduce using rule 41 (primary_expression -> shell_command_expression .)
    BITWISE_XOR     reduce using rule 41 (primary_expression -> shell_command_expression .)
    BITWISE_OR      reduce using rule 41 (primary_expression -> shell_command_expression .)
    COALESCE        reduce using rule 41 (primary_expression -> shell_command_expression .)
    TERNARY_OPERATION reduce using rule 41 (primary_expression -> shell_command_expression .)
    AND             reduce using rule 41 (primary_expression -> shell_command_expression .)
    XOR             reduce using rule 41 (primary_expression -> shell_command_expression .)
    OR              reduce using rule 41 (primary_expression -> shell_command_expression .)
    SEMICOLON       reduce using rule 41 (primary_expression -> shell_command_expression .)
    STRING          reduce using rule 41 (primary_expression -> shell_command_expression .)
    INCLUDE         reduce using rule 41 (primary_expression -> shell_command_expression .)
    INCLUDE_ONCE    reduce using rule 41 (primary_expression -> shell_command_expression .)
    REQUIRE         reduce using rule 41 (primary_expression -> shell_command_expression .)
    REQUIRE_ONCE    reduce using rule 41 (primary_expression -> shell_command_expression .)
    PRINT           reduce using rule 41 (primary_expression -> shell_command_expression .)
    YIELD           reduce using rule 41 (primary_expression -> shell_command_expression .)
    YIELD_FROM      reduce using rule 41 (primary_expression -> shell_command_expression .)
    RIGHT_PARENTHESIS reduce using rule 41 (primary_expression -> shell_command_expression .)
    COLON           reduce using rule 41 (primary_expression -> shell_command_expression .)
    AS              reduce using rule 41 (primary_expression -> shell_command_expression .)
    ARROW           reduce using rule 41 (primary_expression -> shell_command_expression .)
    RIGHT_CBRAC     reduce using rule 41 (primary_expression -> shell_command_expression .)
    VARIABLE        reduce using rule 41 (primary_expression -> shell_command_expression .)
    DOUBLE_POINT    reduce using rule 41 (primary_expression -> shell_command_expression .)
    DOUBLE_ARROW    reduce using rule 41 (primary_expression -> shell_command_expression .)
    ELLIPSIS        reduce using rule 41 (primary_expression -> shell_command_expression .)
    ARRAY           reduce using rule 41 (primary_expression -> shell_command_expression .)
    CALLABLE        reduce using rule 41 (primary_expression -> shell_command_expression .)
    ITERABLE        reduce using rule 41 (primary_expression -> shell_command_expression .)
    BOOL            reduce using rule 41 (primary_expression -> shell_command_expression .)
    FLOAT           reduce using rule 41 (primary_expression -> shell_command_expression .)
    INT             reduce using rule 41 (primary_expression -> shell_command_expression .)
    INSTANCEOF      reduce using rule 41 (primary_expression -> shell_command_expression .)


state 229

    (63) literal -> integer_literal .

    DOUBLEASTERISK  reduce using rule 63 (literal -> integer_literal .)
    ASTERISK        reduce using rule 63 (literal -> integer_literal .)
    DIVIDE          reduce using rule 63 (literal -> integer_literal .)
    MODULO          reduce using rule 63 (literal -> integer_literal .)
    PLUS            reduce using rule 63 (literal -> integer_literal .)
    LESS            reduce using rule 63 (literal -> integer_literal .)
    CONCAT          reduce using rule 63 (literal -> integer_literal .)
    SL              reduce using rule 63 (literal -> integer_literal .)
    SR              reduce using rule 63 (literal -> integer_literal .)
    LESS_THAN       reduce using rule 63 (literal -> integer_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 63 (literal -> integer_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 63 (literal -> integer_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 63 (literal -> integer_literal .)
    SPACESHIP       reduce using rule 63 (literal -> integer_literal .)
    EQUAL           reduce using rule 63 (literal -> integer_literal .)
    IS_NOT_EQUAL    reduce using rule 63 (literal -> integer_literal .)
    IS_IDENTICAL    reduce using rule 63 (literal -> integer_literal .)
    IS_NOT_IDENTICAL reduce using rule 63 (literal -> integer_literal .)
    AMPERSAND       reduce using rule 63 (literal -> integer_literal .)
    BITWISE_XOR     reduce using rule 63 (literal -> integer_literal .)
    BITWISE_OR      reduce using rule 63 (literal -> integer_literal .)
    COALESCE        reduce using rule 63 (literal -> integer_literal .)
    TERNARY_OPERATION reduce using rule 63 (literal -> integer_literal .)
    AND             reduce using rule 63 (literal -> integer_literal .)
    XOR             reduce using rule 63 (literal -> integer_literal .)
    OR              reduce using rule 63 (literal -> integer_literal .)
    SEMICOLON       reduce using rule 63 (literal -> integer_literal .)
    STRING          reduce using rule 63 (literal -> integer_literal .)
    INCLUDE         reduce using rule 63 (literal -> integer_literal .)
    INCLUDE_ONCE    reduce using rule 63 (literal -> integer_literal .)
    REQUIRE         reduce using rule 63 (literal -> integer_literal .)
    REQUIRE_ONCE    reduce using rule 63 (literal -> integer_literal .)
    PRINT           reduce using rule 63 (literal -> integer_literal .)
    YIELD           reduce using rule 63 (literal -> integer_literal .)
    YIELD_FROM      reduce using rule 63 (literal -> integer_literal .)
    RIGHT_PARENTHESIS reduce using rule 63 (literal -> integer_literal .)
    COLON           reduce using rule 63 (literal -> integer_literal .)
    AS              reduce using rule 63 (literal -> integer_literal .)
    ARROW           reduce using rule 63 (literal -> integer_literal .)
    RIGHT_CBRAC     reduce using rule 63 (literal -> integer_literal .)
    VARIABLE        reduce using rule 63 (literal -> integer_literal .)
    DOUBLE_POINT    reduce using rule 63 (literal -> integer_literal .)
    DOUBLE_ARROW    reduce using rule 63 (literal -> integer_literal .)
    ELLIPSIS        reduce using rule 63 (literal -> integer_literal .)
    ARRAY           reduce using rule 63 (literal -> integer_literal .)
    CALLABLE        reduce using rule 63 (literal -> integer_literal .)
    ITERABLE        reduce using rule 63 (literal -> integer_literal .)
    BOOL            reduce using rule 63 (literal -> integer_literal .)
    FLOAT           reduce using rule 63 (literal -> integer_literal .)
    INT             reduce using rule 63 (literal -> integer_literal .)
    INSTANCEOF      reduce using rule 63 (literal -> integer_literal .)


state 230

    (64) literal -> floating_literal .

    DOUBLEASTERISK  reduce using rule 64 (literal -> floating_literal .)
    ASTERISK        reduce using rule 64 (literal -> floating_literal .)
    DIVIDE          reduce using rule 64 (literal -> floating_literal .)
    MODULO          reduce using rule 64 (literal -> floating_literal .)
    PLUS            reduce using rule 64 (literal -> floating_literal .)
    LESS            reduce using rule 64 (literal -> floating_literal .)
    CONCAT          reduce using rule 64 (literal -> floating_literal .)
    SL              reduce using rule 64 (literal -> floating_literal .)
    SR              reduce using rule 64 (literal -> floating_literal .)
    LESS_THAN       reduce using rule 64 (literal -> floating_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 64 (literal -> floating_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 64 (literal -> floating_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 64 (literal -> floating_literal .)
    SPACESHIP       reduce using rule 64 (literal -> floating_literal .)
    EQUAL           reduce using rule 64 (literal -> floating_literal .)
    IS_NOT_EQUAL    reduce using rule 64 (literal -> floating_literal .)
    IS_IDENTICAL    reduce using rule 64 (literal -> floating_literal .)
    IS_NOT_IDENTICAL reduce using rule 64 (literal -> floating_literal .)
    AMPERSAND       reduce using rule 64 (literal -> floating_literal .)
    BITWISE_XOR     reduce using rule 64 (literal -> floating_literal .)
    BITWISE_OR      reduce using rule 64 (literal -> floating_literal .)
    COALESCE        reduce using rule 64 (literal -> floating_literal .)
    TERNARY_OPERATION reduce using rule 64 (literal -> floating_literal .)
    AND             reduce using rule 64 (literal -> floating_literal .)
    XOR             reduce using rule 64 (literal -> floating_literal .)
    OR              reduce using rule 64 (literal -> floating_literal .)
    SEMICOLON       reduce using rule 64 (literal -> floating_literal .)
    STRING          reduce using rule 64 (literal -> floating_literal .)
    INCLUDE         reduce using rule 64 (literal -> floating_literal .)
    INCLUDE_ONCE    reduce using rule 64 (literal -> floating_literal .)
    REQUIRE         reduce using rule 64 (literal -> floating_literal .)
    REQUIRE_ONCE    reduce using rule 64 (literal -> floating_literal .)
    PRINT           reduce using rule 64 (literal -> floating_literal .)
    YIELD           reduce using rule 64 (literal -> floating_literal .)
    YIELD_FROM      reduce using rule 64 (literal -> floating_literal .)
    RIGHT_PARENTHESIS reduce using rule 64 (literal -> floating_literal .)
    COLON           reduce using rule 64 (literal -> floating_literal .)
    AS              reduce using rule 64 (literal -> floating_literal .)
    ARROW           reduce using rule 64 (literal -> floating_literal .)
    RIGHT_CBRAC     reduce using rule 64 (literal -> floating_literal .)
    VARIABLE        reduce using rule 64 (literal -> floating_literal .)
    DOUBLE_POINT    reduce using rule 64 (literal -> floating_literal .)
    DOUBLE_ARROW    reduce using rule 64 (literal -> floating_literal .)
    ELLIPSIS        reduce using rule 64 (literal -> floating_literal .)
    ARRAY           reduce using rule 64 (literal -> floating_literal .)
    CALLABLE        reduce using rule 64 (literal -> floating_literal .)
    ITERABLE        reduce using rule 64 (literal -> floating_literal .)
    BOOL            reduce using rule 64 (literal -> floating_literal .)
    FLOAT           reduce using rule 64 (literal -> floating_literal .)
    INT             reduce using rule 64 (literal -> floating_literal .)
    INSTANCEOF      reduce using rule 64 (literal -> floating_literal .)


state 231

    (69) intrinsic -> empty_intrinsic .

    DOUBLEASTERISK  reduce using rule 69 (intrinsic -> empty_intrinsic .)
    ASTERISK        reduce using rule 69 (intrinsic -> empty_intrinsic .)
    DIVIDE          reduce using rule 69 (intrinsic -> empty_intrinsic .)
    MODULO          reduce using rule 69 (intrinsic -> empty_intrinsic .)
    PLUS            reduce using rule 69 (intrinsic -> empty_intrinsic .)
    LESS            reduce using rule 69 (intrinsic -> empty_intrinsic .)
    CONCAT          reduce using rule 69 (intrinsic -> empty_intrinsic .)
    SL              reduce using rule 69 (intrinsic -> empty_intrinsic .)
    SR              reduce using rule 69 (intrinsic -> empty_intrinsic .)
    LESS_THAN       reduce using rule 69 (intrinsic -> empty_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 69 (intrinsic -> empty_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 69 (intrinsic -> empty_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 69 (intrinsic -> empty_intrinsic .)
    SPACESHIP       reduce using rule 69 (intrinsic -> empty_intrinsic .)
    EQUAL           reduce using rule 69 (intrinsic -> empty_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 69 (intrinsic -> empty_intrinsic .)
    IS_IDENTICAL    reduce using rule 69 (intrinsic -> empty_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 69 (intrinsic -> empty_intrinsic .)
    AMPERSAND       reduce using rule 69 (intrinsic -> empty_intrinsic .)
    BITWISE_XOR     reduce using rule 69 (intrinsic -> empty_intrinsic .)
    BITWISE_OR      reduce using rule 69 (intrinsic -> empty_intrinsic .)
    COALESCE        reduce using rule 69 (intrinsic -> empty_intrinsic .)
    TERNARY_OPERATION reduce using rule 69 (intrinsic -> empty_intrinsic .)
    AND             reduce using rule 69 (intrinsic -> empty_intrinsic .)
    XOR             reduce using rule 69 (intrinsic -> empty_intrinsic .)
    OR              reduce using rule 69 (intrinsic -> empty_intrinsic .)
    SEMICOLON       reduce using rule 69 (intrinsic -> empty_intrinsic .)
    STRING          reduce using rule 69 (intrinsic -> empty_intrinsic .)
    INCLUDE         reduce using rule 69 (intrinsic -> empty_intrinsic .)
    INCLUDE_ONCE    reduce using rule 69 (intrinsic -> empty_intrinsic .)
    REQUIRE         reduce using rule 69 (intrinsic -> empty_intrinsic .)
    REQUIRE_ONCE    reduce using rule 69 (intrinsic -> empty_intrinsic .)
    PRINT           reduce using rule 69 (intrinsic -> empty_intrinsic .)
    YIELD           reduce using rule 69 (intrinsic -> empty_intrinsic .)
    YIELD_FROM      reduce using rule 69 (intrinsic -> empty_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 69 (intrinsic -> empty_intrinsic .)
    COLON           reduce using rule 69 (intrinsic -> empty_intrinsic .)
    AS              reduce using rule 69 (intrinsic -> empty_intrinsic .)
    ARROW           reduce using rule 69 (intrinsic -> empty_intrinsic .)
    RIGHT_CBRAC     reduce using rule 69 (intrinsic -> empty_intrinsic .)
    VARIABLE        reduce using rule 69 (intrinsic -> empty_intrinsic .)
    DOUBLE_POINT    reduce using rule 69 (intrinsic -> empty_intrinsic .)
    DOUBLE_ARROW    reduce using rule 69 (intrinsic -> empty_intrinsic .)
    ELLIPSIS        reduce using rule 69 (intrinsic -> empty_intrinsic .)
    ARRAY           reduce using rule 69 (intrinsic -> empty_intrinsic .)
    CALLABLE        reduce using rule 69 (intrinsic -> empty_intrinsic .)
    ITERABLE        reduce using rule 69 (intrinsic -> empty_intrinsic .)
    BOOL            reduce using rule 69 (intrinsic -> empty_intrinsic .)
    FLOAT           reduce using rule 69 (intrinsic -> empty_intrinsic .)
    INT             reduce using rule 69 (intrinsic -> empty_intrinsic .)
    INSTANCEOF      reduce using rule 69 (intrinsic -> empty_intrinsic .)


state 232

    (70) intrinsic -> eval_intrinsic .

    DOUBLEASTERISK  reduce using rule 70 (intrinsic -> eval_intrinsic .)
    ASTERISK        reduce using rule 70 (intrinsic -> eval_intrinsic .)
    DIVIDE          reduce using rule 70 (intrinsic -> eval_intrinsic .)
    MODULO          reduce using rule 70 (intrinsic -> eval_intrinsic .)
    PLUS            reduce using rule 70 (intrinsic -> eval_intrinsic .)
    LESS            reduce using rule 70 (intrinsic -> eval_intrinsic .)
    CONCAT          reduce using rule 70 (intrinsic -> eval_intrinsic .)
    SL              reduce using rule 70 (intrinsic -> eval_intrinsic .)
    SR              reduce using rule 70 (intrinsic -> eval_intrinsic .)
    LESS_THAN       reduce using rule 70 (intrinsic -> eval_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 70 (intrinsic -> eval_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 70 (intrinsic -> eval_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 70 (intrinsic -> eval_intrinsic .)
    SPACESHIP       reduce using rule 70 (intrinsic -> eval_intrinsic .)
    EQUAL           reduce using rule 70 (intrinsic -> eval_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 70 (intrinsic -> eval_intrinsic .)
    IS_IDENTICAL    reduce using rule 70 (intrinsic -> eval_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 70 (intrinsic -> eval_intrinsic .)
    AMPERSAND       reduce using rule 70 (intrinsic -> eval_intrinsic .)
    BITWISE_XOR     reduce using rule 70 (intrinsic -> eval_intrinsic .)
    BITWISE_OR      reduce using rule 70 (intrinsic -> eval_intrinsic .)
    COALESCE        reduce using rule 70 (intrinsic -> eval_intrinsic .)
    TERNARY_OPERATION reduce using rule 70 (intrinsic -> eval_intrinsic .)
    AND             reduce using rule 70 (intrinsic -> eval_intrinsic .)
    XOR             reduce using rule 70 (intrinsic -> eval_intrinsic .)
    OR              reduce using rule 70 (intrinsic -> eval_intrinsic .)
    SEMICOLON       reduce using rule 70 (intrinsic -> eval_intrinsic .)
    STRING          reduce using rule 70 (intrinsic -> eval_intrinsic .)
    INCLUDE         reduce using rule 70 (intrinsic -> eval_intrinsic .)
    INCLUDE_ONCE    reduce using rule 70 (intrinsic -> eval_intrinsic .)
    REQUIRE         reduce using rule 70 (intrinsic -> eval_intrinsic .)
    REQUIRE_ONCE    reduce using rule 70 (intrinsic -> eval_intrinsic .)
    PRINT           reduce using rule 70 (intrinsic -> eval_intrinsic .)
    YIELD           reduce using rule 70 (intrinsic -> eval_intrinsic .)
    YIELD_FROM      reduce using rule 70 (intrinsic -> eval_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 70 (intrinsic -> eval_intrinsic .)
    COLON           reduce using rule 70 (intrinsic -> eval_intrinsic .)
    AS              reduce using rule 70 (intrinsic -> eval_intrinsic .)
    ARROW           reduce using rule 70 (intrinsic -> eval_intrinsic .)
    RIGHT_CBRAC     reduce using rule 70 (intrinsic -> eval_intrinsic .)
    VARIABLE        reduce using rule 70 (intrinsic -> eval_intrinsic .)
    DOUBLE_POINT    reduce using rule 70 (intrinsic -> eval_intrinsic .)
    DOUBLE_ARROW    reduce using rule 70 (intrinsic -> eval_intrinsic .)
    ELLIPSIS        reduce using rule 70 (intrinsic -> eval_intrinsic .)
    ARRAY           reduce using rule 70 (intrinsic -> eval_intrinsic .)
    CALLABLE        reduce using rule 70 (intrinsic -> eval_intrinsic .)
    ITERABLE        reduce using rule 70 (intrinsic -> eval_intrinsic .)
    BOOL            reduce using rule 70 (intrinsic -> eval_intrinsic .)
    FLOAT           reduce using rule 70 (intrinsic -> eval_intrinsic .)
    INT             reduce using rule 70 (intrinsic -> eval_intrinsic .)
    INSTANCEOF      reduce using rule 70 (intrinsic -> eval_intrinsic .)


state 233

    (71) intrinsic -> exit_intrinsic .

    DOUBLEASTERISK  reduce using rule 71 (intrinsic -> exit_intrinsic .)
    ASTERISK        reduce using rule 71 (intrinsic -> exit_intrinsic .)
    DIVIDE          reduce using rule 71 (intrinsic -> exit_intrinsic .)
    MODULO          reduce using rule 71 (intrinsic -> exit_intrinsic .)
    PLUS            reduce using rule 71 (intrinsic -> exit_intrinsic .)
    LESS            reduce using rule 71 (intrinsic -> exit_intrinsic .)
    CONCAT          reduce using rule 71 (intrinsic -> exit_intrinsic .)
    SL              reduce using rule 71 (intrinsic -> exit_intrinsic .)
    SR              reduce using rule 71 (intrinsic -> exit_intrinsic .)
    LESS_THAN       reduce using rule 71 (intrinsic -> exit_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 71 (intrinsic -> exit_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 71 (intrinsic -> exit_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 71 (intrinsic -> exit_intrinsic .)
    SPACESHIP       reduce using rule 71 (intrinsic -> exit_intrinsic .)
    EQUAL           reduce using rule 71 (intrinsic -> exit_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 71 (intrinsic -> exit_intrinsic .)
    IS_IDENTICAL    reduce using rule 71 (intrinsic -> exit_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 71 (intrinsic -> exit_intrinsic .)
    AMPERSAND       reduce using rule 71 (intrinsic -> exit_intrinsic .)
    BITWISE_XOR     reduce using rule 71 (intrinsic -> exit_intrinsic .)
    BITWISE_OR      reduce using rule 71 (intrinsic -> exit_intrinsic .)
    COALESCE        reduce using rule 71 (intrinsic -> exit_intrinsic .)
    TERNARY_OPERATION reduce using rule 71 (intrinsic -> exit_intrinsic .)
    AND             reduce using rule 71 (intrinsic -> exit_intrinsic .)
    XOR             reduce using rule 71 (intrinsic -> exit_intrinsic .)
    OR              reduce using rule 71 (intrinsic -> exit_intrinsic .)
    SEMICOLON       reduce using rule 71 (intrinsic -> exit_intrinsic .)
    STRING          reduce using rule 71 (intrinsic -> exit_intrinsic .)
    INCLUDE         reduce using rule 71 (intrinsic -> exit_intrinsic .)
    INCLUDE_ONCE    reduce using rule 71 (intrinsic -> exit_intrinsic .)
    REQUIRE         reduce using rule 71 (intrinsic -> exit_intrinsic .)
    REQUIRE_ONCE    reduce using rule 71 (intrinsic -> exit_intrinsic .)
    PRINT           reduce using rule 71 (intrinsic -> exit_intrinsic .)
    YIELD           reduce using rule 71 (intrinsic -> exit_intrinsic .)
    YIELD_FROM      reduce using rule 71 (intrinsic -> exit_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 71 (intrinsic -> exit_intrinsic .)
    COLON           reduce using rule 71 (intrinsic -> exit_intrinsic .)
    AS              reduce using rule 71 (intrinsic -> exit_intrinsic .)
    ARROW           reduce using rule 71 (intrinsic -> exit_intrinsic .)
    RIGHT_CBRAC     reduce using rule 71 (intrinsic -> exit_intrinsic .)
    VARIABLE        reduce using rule 71 (intrinsic -> exit_intrinsic .)
    DOUBLE_POINT    reduce using rule 71 (intrinsic -> exit_intrinsic .)
    DOUBLE_ARROW    reduce using rule 71 (intrinsic -> exit_intrinsic .)
    ELLIPSIS        reduce using rule 71 (intrinsic -> exit_intrinsic .)
    ARRAY           reduce using rule 71 (intrinsic -> exit_intrinsic .)
    CALLABLE        reduce using rule 71 (intrinsic -> exit_intrinsic .)
    ITERABLE        reduce using rule 71 (intrinsic -> exit_intrinsic .)
    BOOL            reduce using rule 71 (intrinsic -> exit_intrinsic .)
    FLOAT           reduce using rule 71 (intrinsic -> exit_intrinsic .)
    INT             reduce using rule 71 (intrinsic -> exit_intrinsic .)
    INSTANCEOF      reduce using rule 71 (intrinsic -> exit_intrinsic .)


state 234

    (72) intrinsic -> isset_intrinsic .

    DOUBLEASTERISK  reduce using rule 72 (intrinsic -> isset_intrinsic .)
    ASTERISK        reduce using rule 72 (intrinsic -> isset_intrinsic .)
    DIVIDE          reduce using rule 72 (intrinsic -> isset_intrinsic .)
    MODULO          reduce using rule 72 (intrinsic -> isset_intrinsic .)
    PLUS            reduce using rule 72 (intrinsic -> isset_intrinsic .)
    LESS            reduce using rule 72 (intrinsic -> isset_intrinsic .)
    CONCAT          reduce using rule 72 (intrinsic -> isset_intrinsic .)
    SL              reduce using rule 72 (intrinsic -> isset_intrinsic .)
    SR              reduce using rule 72 (intrinsic -> isset_intrinsic .)
    LESS_THAN       reduce using rule 72 (intrinsic -> isset_intrinsic .)
    IS_SMALLER_OR_EQUAL reduce using rule 72 (intrinsic -> isset_intrinsic .)
    IS_GREATER_OR_EQUAL reduce using rule 72 (intrinsic -> isset_intrinsic .)
    GREATER_THAN_OR_EQUAL reduce using rule 72 (intrinsic -> isset_intrinsic .)
    SPACESHIP       reduce using rule 72 (intrinsic -> isset_intrinsic .)
    EQUAL           reduce using rule 72 (intrinsic -> isset_intrinsic .)
    IS_NOT_EQUAL    reduce using rule 72 (intrinsic -> isset_intrinsic .)
    IS_IDENTICAL    reduce using rule 72 (intrinsic -> isset_intrinsic .)
    IS_NOT_IDENTICAL reduce using rule 72 (intrinsic -> isset_intrinsic .)
    AMPERSAND       reduce using rule 72 (intrinsic -> isset_intrinsic .)
    BITWISE_XOR     reduce using rule 72 (intrinsic -> isset_intrinsic .)
    BITWISE_OR      reduce using rule 72 (intrinsic -> isset_intrinsic .)
    COALESCE        reduce using rule 72 (intrinsic -> isset_intrinsic .)
    TERNARY_OPERATION reduce using rule 72 (intrinsic -> isset_intrinsic .)
    AND             reduce using rule 72 (intrinsic -> isset_intrinsic .)
    XOR             reduce using rule 72 (intrinsic -> isset_intrinsic .)
    OR              reduce using rule 72 (intrinsic -> isset_intrinsic .)
    SEMICOLON       reduce using rule 72 (intrinsic -> isset_intrinsic .)
    STRING          reduce using rule 72 (intrinsic -> isset_intrinsic .)
    INCLUDE         reduce using rule 72 (intrinsic -> isset_intrinsic .)
    INCLUDE_ONCE    reduce using rule 72 (intrinsic -> isset_intrinsic .)
    REQUIRE         reduce using rule 72 (intrinsic -> isset_intrinsic .)
    REQUIRE_ONCE    reduce using rule 72 (intrinsic -> isset_intrinsic .)
    PRINT           reduce using rule 72 (intrinsic -> isset_intrinsic .)
    YIELD           reduce using rule 72 (intrinsic -> isset_intrinsic .)
    YIELD_FROM      reduce using rule 72 (intrinsic -> isset_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 72 (intrinsic -> isset_intrinsic .)
    COLON           reduce using rule 72 (intrinsic -> isset_intrinsic .)
    AS              reduce using rule 72 (intrinsic -> isset_intrinsic .)
    ARROW           reduce using rule 72 (intrinsic -> isset_intrinsic .)
    RIGHT_CBRAC     reduce using rule 72 (intrinsic -> isset_intrinsic .)
    VARIABLE        reduce using rule 72 (intrinsic -> isset_intrinsic .)
    DOUBLE_POINT    reduce using rule 72 (intrinsic -> isset_intrinsic .)
    DOUBLE_ARROW    reduce using rule 72 (intrinsic -> isset_intrinsic .)
    ELLIPSIS        reduce using rule 72 (intrinsic -> isset_intrinsic .)
    ARRAY           reduce using rule 72 (intrinsic -> isset_intrinsic .)
    CALLABLE        reduce using rule 72 (intrinsic -> isset_intrinsic .)
    ITERABLE        reduce using rule 72 (intrinsic -> isset_intrinsic .)
    BOOL            reduce using rule 72 (intrinsic -> isset_intrinsic .)
    FLOAT           reduce using rule 72 (intrinsic -> isset_intrinsic .)
    INT             reduce using rule 72 (intrinsic -> isset_intrinsic .)
    INSTANCEOF      reduce using rule 72 (intrinsic -> isset_intrinsic .)


state 235

    (83) anonymous_function_creation_expression -> static_opt . FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement

    FUNCTION        shift and go to state 387


state 236

    (97) object_creation_expression -> NEW . class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> NEW . class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> NEW . class_type_designator
    (100) object_creation_expression -> NEW . CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> NEW . CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (110) class_type_designator -> . qualified_name
    (111) class_type_designator -> . new_variable
    (554) qualified_name -> . name
    (112) new_variable -> . simple_variable
    (113) new_variable -> . new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
    (114) new_variable -> . new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS
    (115) new_variable -> . new_variable ARROW member_name
    (116) new_variable -> . qualified_name DOUBLE_COLON simple_variable
    (117) new_variable -> . relative_scope DOUBLE_COLON simple_variable
    (118) new_variable -> . new_variable DOUBLE_COLON simple_variable
    (564) name -> . STRING
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC

    CLASS           shift and go to state 389
    STRING          shift and go to state 109
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267

    class_type_designator          shift and go to state 388
    qualified_name                 shift and go to state 390
    new_variable                   shift and go to state 391
    name                           shift and go to state 188
    simple_variable                shift and go to state 392
    relative_scope                 shift and go to state 393

state 237

    (152) prefix_increment_expression -> DOUBLEPLUS . variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable                       shift and go to state 394
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 238

    (153) prefix_decrement_expression -> DOUBLELESS . variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable                       shift and go to state 395
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 239

    (154) shell_command_expression -> BACKTICK . dq_char_sequence_opt BACKTICK
    (155) dq_char_sequence_opt -> . DQ_CHAR_SEQUENCE
    (156) dq_char_sequence_opt -> .

    DQ_CHAR_SEQUENCE shift and go to state 397
    BACKTICK        reduce using rule 156 (dq_char_sequence_opt -> .)

    dq_char_sequence_opt           shift and go to state 396

state 240

    (66) integer_literal -> LNUMBER .

    DOUBLEASTERISK  reduce using rule 66 (integer_literal -> LNUMBER .)
    ASTERISK        reduce using rule 66 (integer_literal -> LNUMBER .)
    DIVIDE          reduce using rule 66 (integer_literal -> LNUMBER .)
    MODULO          reduce using rule 66 (integer_literal -> LNUMBER .)
    PLUS            reduce using rule 66 (integer_literal -> LNUMBER .)
    LESS            reduce using rule 66 (integer_literal -> LNUMBER .)
    CONCAT          reduce using rule 66 (integer_literal -> LNUMBER .)
    SL              reduce using rule 66 (integer_literal -> LNUMBER .)
    SR              reduce using rule 66 (integer_literal -> LNUMBER .)
    LESS_THAN       reduce using rule 66 (integer_literal -> LNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 66 (integer_literal -> LNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 66 (integer_literal -> LNUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 66 (integer_literal -> LNUMBER .)
    SPACESHIP       reduce using rule 66 (integer_literal -> LNUMBER .)
    EQUAL           reduce using rule 66 (integer_literal -> LNUMBER .)
    IS_NOT_EQUAL    reduce using rule 66 (integer_literal -> LNUMBER .)
    IS_IDENTICAL    reduce using rule 66 (integer_literal -> LNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 66 (integer_literal -> LNUMBER .)
    AMPERSAND       reduce using rule 66 (integer_literal -> LNUMBER .)
    BITWISE_XOR     reduce using rule 66 (integer_literal -> LNUMBER .)
    BITWISE_OR      reduce using rule 66 (integer_literal -> LNUMBER .)
    COALESCE        reduce using rule 66 (integer_literal -> LNUMBER .)
    TERNARY_OPERATION reduce using rule 66 (integer_literal -> LNUMBER .)
    AND             reduce using rule 66 (integer_literal -> LNUMBER .)
    XOR             reduce using rule 66 (integer_literal -> LNUMBER .)
    OR              reduce using rule 66 (integer_literal -> LNUMBER .)
    SEMICOLON       reduce using rule 66 (integer_literal -> LNUMBER .)
    STRING          reduce using rule 66 (integer_literal -> LNUMBER .)
    INCLUDE         reduce using rule 66 (integer_literal -> LNUMBER .)
    INCLUDE_ONCE    reduce using rule 66 (integer_literal -> LNUMBER .)
    REQUIRE         reduce using rule 66 (integer_literal -> LNUMBER .)
    REQUIRE_ONCE    reduce using rule 66 (integer_literal -> LNUMBER .)
    PRINT           reduce using rule 66 (integer_literal -> LNUMBER .)
    YIELD           reduce using rule 66 (integer_literal -> LNUMBER .)
    YIELD_FROM      reduce using rule 66 (integer_literal -> LNUMBER .)
    RIGHT_PARENTHESIS reduce using rule 66 (integer_literal -> LNUMBER .)
    COLON           reduce using rule 66 (integer_literal -> LNUMBER .)
    AS              reduce using rule 66 (integer_literal -> LNUMBER .)
    ARROW           reduce using rule 66 (integer_literal -> LNUMBER .)
    RIGHT_CBRAC     reduce using rule 66 (integer_literal -> LNUMBER .)
    VARIABLE        reduce using rule 66 (integer_literal -> LNUMBER .)
    DOUBLE_POINT    reduce using rule 66 (integer_literal -> LNUMBER .)
    DOUBLE_ARROW    reduce using rule 66 (integer_literal -> LNUMBER .)
    ELLIPSIS        reduce using rule 66 (integer_literal -> LNUMBER .)
    ARRAY           reduce using rule 66 (integer_literal -> LNUMBER .)
    CALLABLE        reduce using rule 66 (integer_literal -> LNUMBER .)
    ITERABLE        reduce using rule 66 (integer_literal -> LNUMBER .)
    BOOL            reduce using rule 66 (integer_literal -> LNUMBER .)
    FLOAT           reduce using rule 66 (integer_literal -> LNUMBER .)
    INT             reduce using rule 66 (integer_literal -> LNUMBER .)
    INSTANCEOF      reduce using rule 66 (integer_literal -> LNUMBER .)


state 241

    (67) floating_literal -> DNUMBER .

    DOUBLEASTERISK  reduce using rule 67 (floating_literal -> DNUMBER .)
    ASTERISK        reduce using rule 67 (floating_literal -> DNUMBER .)
    DIVIDE          reduce using rule 67 (floating_literal -> DNUMBER .)
    MODULO          reduce using rule 67 (floating_literal -> DNUMBER .)
    PLUS            reduce using rule 67 (floating_literal -> DNUMBER .)
    LESS            reduce using rule 67 (floating_literal -> DNUMBER .)
    CONCAT          reduce using rule 67 (floating_literal -> DNUMBER .)
    SL              reduce using rule 67 (floating_literal -> DNUMBER .)
    SR              reduce using rule 67 (floating_literal -> DNUMBER .)
    LESS_THAN       reduce using rule 67 (floating_literal -> DNUMBER .)
    IS_SMALLER_OR_EQUAL reduce using rule 67 (floating_literal -> DNUMBER .)
    IS_GREATER_OR_EQUAL reduce using rule 67 (floating_literal -> DNUMBER .)
    GREATER_THAN_OR_EQUAL reduce using rule 67 (floating_literal -> DNUMBER .)
    SPACESHIP       reduce using rule 67 (floating_literal -> DNUMBER .)
    EQUAL           reduce using rule 67 (floating_literal -> DNUMBER .)
    IS_NOT_EQUAL    reduce using rule 67 (floating_literal -> DNUMBER .)
    IS_IDENTICAL    reduce using rule 67 (floating_literal -> DNUMBER .)
    IS_NOT_IDENTICAL reduce using rule 67 (floating_literal -> DNUMBER .)
    AMPERSAND       reduce using rule 67 (floating_literal -> DNUMBER .)
    BITWISE_XOR     reduce using rule 67 (floating_literal -> DNUMBER .)
    BITWISE_OR      reduce using rule 67 (floating_literal -> DNUMBER .)
    COALESCE        reduce using rule 67 (floating_literal -> DNUMBER .)
    TERNARY_OPERATION reduce using rule 67 (floating_literal -> DNUMBER .)
    AND             reduce using rule 67 (floating_literal -> DNUMBER .)
    XOR             reduce using rule 67 (floating_literal -> DNUMBER .)
    OR              reduce using rule 67 (floating_literal -> DNUMBER .)
    SEMICOLON       reduce using rule 67 (floating_literal -> DNUMBER .)
    STRING          reduce using rule 67 (floating_literal -> DNUMBER .)
    INCLUDE         reduce using rule 67 (floating_literal -> DNUMBER .)
    INCLUDE_ONCE    reduce using rule 67 (floating_literal -> DNUMBER .)
    REQUIRE         reduce using rule 67 (floating_literal -> DNUMBER .)
    REQUIRE_ONCE    reduce using rule 67 (floating_literal -> DNUMBER .)
    PRINT           reduce using rule 67 (floating_literal -> DNUMBER .)
    YIELD           reduce using rule 67 (floating_literal -> DNUMBER .)
    YIELD_FROM      reduce using rule 67 (floating_literal -> DNUMBER .)
    RIGHT_PARENTHESIS reduce using rule 67 (floating_literal -> DNUMBER .)
    COLON           reduce using rule 67 (floating_literal -> DNUMBER .)
    AS              reduce using rule 67 (floating_literal -> DNUMBER .)
    ARROW           reduce using rule 67 (floating_literal -> DNUMBER .)
    RIGHT_CBRAC     reduce using rule 67 (floating_literal -> DNUMBER .)
    VARIABLE        reduce using rule 67 (floating_literal -> DNUMBER .)
    DOUBLE_POINT    reduce using rule 67 (floating_literal -> DNUMBER .)
    DOUBLE_ARROW    reduce using rule 67 (floating_literal -> DNUMBER .)
    ELLIPSIS        reduce using rule 67 (floating_literal -> DNUMBER .)
    ARRAY           reduce using rule 67 (floating_literal -> DNUMBER .)
    CALLABLE        reduce using rule 67 (floating_literal -> DNUMBER .)
    ITERABLE        reduce using rule 67 (floating_literal -> DNUMBER .)
    BOOL            reduce using rule 67 (floating_literal -> DNUMBER .)
    FLOAT           reduce using rule 67 (floating_literal -> DNUMBER .)
    INT             reduce using rule 67 (floating_literal -> DNUMBER .)
    INSTANCEOF      reduce using rule 67 (floating_literal -> DNUMBER .)


state 242

    (73) empty_intrinsic -> EMPTY . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 398


state 243

    (74) eval_intrinsic -> EVAL . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 399


state 244

    (75) exit_intrinsic -> EXIT .
    (76) exit_intrinsic -> EXIT . LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS

    DOUBLEASTERISK  reduce using rule 75 (exit_intrinsic -> EXIT .)
    ASTERISK        reduce using rule 75 (exit_intrinsic -> EXIT .)
    DIVIDE          reduce using rule 75 (exit_intrinsic -> EXIT .)
    MODULO          reduce using rule 75 (exit_intrinsic -> EXIT .)
    PLUS            reduce using rule 75 (exit_intrinsic -> EXIT .)
    LESS            reduce using rule 75 (exit_intrinsic -> EXIT .)
    CONCAT          reduce using rule 75 (exit_intrinsic -> EXIT .)
    SL              reduce using rule 75 (exit_intrinsic -> EXIT .)
    SR              reduce using rule 75 (exit_intrinsic -> EXIT .)
    LESS_THAN       reduce using rule 75 (exit_intrinsic -> EXIT .)
    IS_SMALLER_OR_EQUAL reduce using rule 75 (exit_intrinsic -> EXIT .)
    IS_GREATER_OR_EQUAL reduce using rule 75 (exit_intrinsic -> EXIT .)
    GREATER_THAN_OR_EQUAL reduce using rule 75 (exit_intrinsic -> EXIT .)
    SPACESHIP       reduce using rule 75 (exit_intrinsic -> EXIT .)
    EQUAL           reduce using rule 75 (exit_intrinsic -> EXIT .)
    IS_NOT_EQUAL    reduce using rule 75 (exit_intrinsic -> EXIT .)
    IS_IDENTICAL    reduce using rule 75 (exit_intrinsic -> EXIT .)
    IS_NOT_IDENTICAL reduce using rule 75 (exit_intrinsic -> EXIT .)
    AMPERSAND       reduce using rule 75 (exit_intrinsic -> EXIT .)
    BITWISE_XOR     reduce using rule 75 (exit_intrinsic -> EXIT .)
    BITWISE_OR      reduce using rule 75 (exit_intrinsic -> EXIT .)
    COALESCE        reduce using rule 75 (exit_intrinsic -> EXIT .)
    TERNARY_OPERATION reduce using rule 75 (exit_intrinsic -> EXIT .)
    AND             reduce using rule 75 (exit_intrinsic -> EXIT .)
    XOR             reduce using rule 75 (exit_intrinsic -> EXIT .)
    OR              reduce using rule 75 (exit_intrinsic -> EXIT .)
    SEMICOLON       reduce using rule 75 (exit_intrinsic -> EXIT .)
    STRING          reduce using rule 75 (exit_intrinsic -> EXIT .)
    INCLUDE         reduce using rule 75 (exit_intrinsic -> EXIT .)
    INCLUDE_ONCE    reduce using rule 75 (exit_intrinsic -> EXIT .)
    REQUIRE         reduce using rule 75 (exit_intrinsic -> EXIT .)
    REQUIRE_ONCE    reduce using rule 75 (exit_intrinsic -> EXIT .)
    PRINT           reduce using rule 75 (exit_intrinsic -> EXIT .)
    YIELD           reduce using rule 75 (exit_intrinsic -> EXIT .)
    YIELD_FROM      reduce using rule 75 (exit_intrinsic -> EXIT .)
    RIGHT_PARENTHESIS reduce using rule 75 (exit_intrinsic -> EXIT .)
    COLON           reduce using rule 75 (exit_intrinsic -> EXIT .)
    AS              reduce using rule 75 (exit_intrinsic -> EXIT .)
    ARROW           reduce using rule 75 (exit_intrinsic -> EXIT .)
    RIGHT_CBRAC     reduce using rule 75 (exit_intrinsic -> EXIT .)
    VARIABLE        reduce using rule 75 (exit_intrinsic -> EXIT .)
    DOUBLE_POINT    reduce using rule 75 (exit_intrinsic -> EXIT .)
    DOUBLE_ARROW    reduce using rule 75 (exit_intrinsic -> EXIT .)
    ELLIPSIS        reduce using rule 75 (exit_intrinsic -> EXIT .)
    ARRAY           reduce using rule 75 (exit_intrinsic -> EXIT .)
    CALLABLE        reduce using rule 75 (exit_intrinsic -> EXIT .)
    ITERABLE        reduce using rule 75 (exit_intrinsic -> EXIT .)
    BOOL            reduce using rule 75 (exit_intrinsic -> EXIT .)
    FLOAT           reduce using rule 75 (exit_intrinsic -> EXIT .)
    INT             reduce using rule 75 (exit_intrinsic -> EXIT .)
    INSTANCEOF      reduce using rule 75 (exit_intrinsic -> EXIT .)
    LEFT_PARENTHESIS shift and go to state 400


state 245

    (77) exit_intrinsic -> DIE .
    (78) exit_intrinsic -> DIE . LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS

    DOUBLEASTERISK  reduce using rule 77 (exit_intrinsic -> DIE .)
    ASTERISK        reduce using rule 77 (exit_intrinsic -> DIE .)
    DIVIDE          reduce using rule 77 (exit_intrinsic -> DIE .)
    MODULO          reduce using rule 77 (exit_intrinsic -> DIE .)
    PLUS            reduce using rule 77 (exit_intrinsic -> DIE .)
    LESS            reduce using rule 77 (exit_intrinsic -> DIE .)
    CONCAT          reduce using rule 77 (exit_intrinsic -> DIE .)
    SL              reduce using rule 77 (exit_intrinsic -> DIE .)
    SR              reduce using rule 77 (exit_intrinsic -> DIE .)
    LESS_THAN       reduce using rule 77 (exit_intrinsic -> DIE .)
    IS_SMALLER_OR_EQUAL reduce using rule 77 (exit_intrinsic -> DIE .)
    IS_GREATER_OR_EQUAL reduce using rule 77 (exit_intrinsic -> DIE .)
    GREATER_THAN_OR_EQUAL reduce using rule 77 (exit_intrinsic -> DIE .)
    SPACESHIP       reduce using rule 77 (exit_intrinsic -> DIE .)
    EQUAL           reduce using rule 77 (exit_intrinsic -> DIE .)
    IS_NOT_EQUAL    reduce using rule 77 (exit_intrinsic -> DIE .)
    IS_IDENTICAL    reduce using rule 77 (exit_intrinsic -> DIE .)
    IS_NOT_IDENTICAL reduce using rule 77 (exit_intrinsic -> DIE .)
    AMPERSAND       reduce using rule 77 (exit_intrinsic -> DIE .)
    BITWISE_XOR     reduce using rule 77 (exit_intrinsic -> DIE .)
    BITWISE_OR      reduce using rule 77 (exit_intrinsic -> DIE .)
    COALESCE        reduce using rule 77 (exit_intrinsic -> DIE .)
    TERNARY_OPERATION reduce using rule 77 (exit_intrinsic -> DIE .)
    AND             reduce using rule 77 (exit_intrinsic -> DIE .)
    XOR             reduce using rule 77 (exit_intrinsic -> DIE .)
    OR              reduce using rule 77 (exit_intrinsic -> DIE .)
    SEMICOLON       reduce using rule 77 (exit_intrinsic -> DIE .)
    STRING          reduce using rule 77 (exit_intrinsic -> DIE .)
    INCLUDE         reduce using rule 77 (exit_intrinsic -> DIE .)
    INCLUDE_ONCE    reduce using rule 77 (exit_intrinsic -> DIE .)
    REQUIRE         reduce using rule 77 (exit_intrinsic -> DIE .)
    REQUIRE_ONCE    reduce using rule 77 (exit_intrinsic -> DIE .)
    PRINT           reduce using rule 77 (exit_intrinsic -> DIE .)
    YIELD           reduce using rule 77 (exit_intrinsic -> DIE .)
    YIELD_FROM      reduce using rule 77 (exit_intrinsic -> DIE .)
    RIGHT_PARENTHESIS reduce using rule 77 (exit_intrinsic -> DIE .)
    COLON           reduce using rule 77 (exit_intrinsic -> DIE .)
    AS              reduce using rule 77 (exit_intrinsic -> DIE .)
    ARROW           reduce using rule 77 (exit_intrinsic -> DIE .)
    RIGHT_CBRAC     reduce using rule 77 (exit_intrinsic -> DIE .)
    VARIABLE        reduce using rule 77 (exit_intrinsic -> DIE .)
    DOUBLE_POINT    reduce using rule 77 (exit_intrinsic -> DIE .)
    DOUBLE_ARROW    reduce using rule 77 (exit_intrinsic -> DIE .)
    ELLIPSIS        reduce using rule 77 (exit_intrinsic -> DIE .)
    ARRAY           reduce using rule 77 (exit_intrinsic -> DIE .)
    CALLABLE        reduce using rule 77 (exit_intrinsic -> DIE .)
    ITERABLE        reduce using rule 77 (exit_intrinsic -> DIE .)
    BOOL            reduce using rule 77 (exit_intrinsic -> DIE .)
    FLOAT           reduce using rule 77 (exit_intrinsic -> DIE .)
    INT             reduce using rule 77 (exit_intrinsic -> DIE .)
    INSTANCEOF      reduce using rule 77 (exit_intrinsic -> DIE .)
    LEFT_PARENTHESIS shift and go to state 401


state 246

    (79) isset_intrinsic -> ISSET . LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 402


state 247

    (3) script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt .

    WHITESPACE      reduce using rule 3 (script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt .)
    STRING          reduce using rule 3 (script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt .)
    $end            reduce using rule 3 (script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt .)
    OPEN_TAG        reduce using rule 3 (script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt .)
    OPEN_TAG_WITH_ECHO reduce using rule 3 (script_section -> text_opt start_tag statement_list_opt end_tag_opt text_opt .)


state 248

    (298) compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    TRY             reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DECLARE         reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ECHO            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    UNSET           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CONST           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INTERFACE       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    TRAIT           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    USE             reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    GLOBAL          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    STATIC          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    STRING          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IF              reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SWITCH          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    WHILE           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DO              reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FOR             reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FOREACH         reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    GOTO            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CONTINUE        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BREAK           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    RETURN          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    THROW           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FUNCTION        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INCLUDE         reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    REQUIRE         reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FINAL           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PRINT           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    YIELD           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CLASS           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CLOSE_TAG       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    WHITESPACE      reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    $end            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    OPEN_TAG        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    OPEN_TAG_WITH_ECHO reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FINALLY         reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CATCH           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ELSE            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ELSEIF          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDFOR          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CASE            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DEFAULT         reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ENDIF           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    VAR             reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PUBLIC          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PROTECTED       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PRIVATE         reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ASTERISK        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DIVIDE          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    MODULO          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    PLUS            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    LESS            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CONCAT          reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SL              reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SR              reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    EQUAL           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    COALESCE        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    AND             reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    XOR             reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    OR              reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    COLON           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    AS              reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ARROW           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    VARIABLE        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ARRAY           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    CALLABLE        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    ITERABLE        reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    BOOL            reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    FLOAT           reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INT             reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 298 (compound_statement -> LEFT_CBRAC statement_list RIGHT_CBRAC .)


state 249

    (391) try_statement -> TRY compound_statement catch_clauses .
    (393) try_statement -> TRY compound_statement catch_clauses . finally_clause
    (395) catch_clauses -> catch_clauses . catch_clause
    (399) finally_clause -> . FINALLY compound_statement
    (396) catch_clause -> . CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement

    LEFT_CBRAC      reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    SEMICOLON       reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    TRY             reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    DECLARE         reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ECHO            reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    UNSET           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    CONST           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    INTERFACE       reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    TRAIT           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    NAMESPACE       reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    USE             reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    GLOBAL          reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    STATIC          reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    STRING          reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    IF              reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    SWITCH          reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    WHILE           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    DO              reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    FOR             reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    FOREACH         reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    GOTO            reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    CONTINUE        reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    BREAK           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    RETURN          reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    THROW           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    FUNCTION        reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    INCLUDE         reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    INCLUDE_ONCE    reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    REQUIRE         reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    REQUIRE_ONCE    reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ABSTRACT        reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    FINAL           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    PRINT           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    YIELD           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    YIELD_FROM      reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    CLASS           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    CLOSE_TAG       reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    WHITESPACE      reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    $end            reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    OPEN_TAG        reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    OPEN_TAG_WITH_ECHO reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    RIGHT_CBRAC     reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ELSE            reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ELSEIF          reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ENDDECLARE      reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ENDWHILE        reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ENDFOR          reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    CASE            reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    DEFAULT         reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ENDSWITCH       reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ENDFOREACH      reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    ENDIF           reduce using rule 391 (try_statement -> TRY compound_statement catch_clauses .)
    FINALLY         shift and go to state 252
    CATCH           shift and go to state 253

    finally_clause                 shift and go to state 403
    catch_clause                   shift and go to state 404

state 250

    (392) try_statement -> TRY compound_statement finally_clause .

    LEFT_CBRAC      reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    SEMICOLON       reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    TRY             reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    DECLARE         reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ECHO            reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    UNSET           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    CONST           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    INTERFACE       reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    TRAIT           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    NAMESPACE       reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    USE             reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    GLOBAL          reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    STATIC          reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    STRING          reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    IF              reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    SWITCH          reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    WHILE           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    DO              reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    FOR             reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    FOREACH         reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    GOTO            reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    CONTINUE        reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    BREAK           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    RETURN          reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    THROW           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    FUNCTION        reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    INCLUDE         reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    INCLUDE_ONCE    reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    REQUIRE         reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    REQUIRE_ONCE    reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ABSTRACT        reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    FINAL           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    PRINT           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    YIELD           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    YIELD_FROM      reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    CLASS           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    CLOSE_TAG       reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    WHITESPACE      reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    $end            reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    OPEN_TAG        reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    OPEN_TAG_WITH_ECHO reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    RIGHT_CBRAC     reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ELSE            reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ELSEIF          reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ENDDECLARE      reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ENDWHILE        reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ENDFOR          reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    CASE            reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    DEFAULT         reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ENDSWITCH       reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ENDFOREACH      reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)
    ENDIF           reduce using rule 392 (try_statement -> TRY compound_statement finally_clause .)


state 251

    (394) catch_clauses -> catch_clause .

    FINALLY         reduce using rule 394 (catch_clauses -> catch_clause .)
    CATCH           reduce using rule 394 (catch_clauses -> catch_clause .)
    LEFT_CBRAC      reduce using rule 394 (catch_clauses -> catch_clause .)
    SEMICOLON       reduce using rule 394 (catch_clauses -> catch_clause .)
    TRY             reduce using rule 394 (catch_clauses -> catch_clause .)
    DECLARE         reduce using rule 394 (catch_clauses -> catch_clause .)
    ECHO            reduce using rule 394 (catch_clauses -> catch_clause .)
    UNSET           reduce using rule 394 (catch_clauses -> catch_clause .)
    CONST           reduce using rule 394 (catch_clauses -> catch_clause .)
    INTERFACE       reduce using rule 394 (catch_clauses -> catch_clause .)
    TRAIT           reduce using rule 394 (catch_clauses -> catch_clause .)
    NAMESPACE       reduce using rule 394 (catch_clauses -> catch_clause .)
    USE             reduce using rule 394 (catch_clauses -> catch_clause .)
    GLOBAL          reduce using rule 394 (catch_clauses -> catch_clause .)
    STATIC          reduce using rule 394 (catch_clauses -> catch_clause .)
    STRING          reduce using rule 394 (catch_clauses -> catch_clause .)
    IF              reduce using rule 394 (catch_clauses -> catch_clause .)
    SWITCH          reduce using rule 394 (catch_clauses -> catch_clause .)
    WHILE           reduce using rule 394 (catch_clauses -> catch_clause .)
    DO              reduce using rule 394 (catch_clauses -> catch_clause .)
    FOR             reduce using rule 394 (catch_clauses -> catch_clause .)
    FOREACH         reduce using rule 394 (catch_clauses -> catch_clause .)
    GOTO            reduce using rule 394 (catch_clauses -> catch_clause .)
    CONTINUE        reduce using rule 394 (catch_clauses -> catch_clause .)
    BREAK           reduce using rule 394 (catch_clauses -> catch_clause .)
    RETURN          reduce using rule 394 (catch_clauses -> catch_clause .)
    THROW           reduce using rule 394 (catch_clauses -> catch_clause .)
    FUNCTION        reduce using rule 394 (catch_clauses -> catch_clause .)
    INCLUDE         reduce using rule 394 (catch_clauses -> catch_clause .)
    INCLUDE_ONCE    reduce using rule 394 (catch_clauses -> catch_clause .)
    REQUIRE         reduce using rule 394 (catch_clauses -> catch_clause .)
    REQUIRE_ONCE    reduce using rule 394 (catch_clauses -> catch_clause .)
    ABSTRACT        reduce using rule 394 (catch_clauses -> catch_clause .)
    FINAL           reduce using rule 394 (catch_clauses -> catch_clause .)
    PRINT           reduce using rule 394 (catch_clauses -> catch_clause .)
    YIELD           reduce using rule 394 (catch_clauses -> catch_clause .)
    YIELD_FROM      reduce using rule 394 (catch_clauses -> catch_clause .)
    CLASS           reduce using rule 394 (catch_clauses -> catch_clause .)
    CLOSE_TAG       reduce using rule 394 (catch_clauses -> catch_clause .)
    WHITESPACE      reduce using rule 394 (catch_clauses -> catch_clause .)
    $end            reduce using rule 394 (catch_clauses -> catch_clause .)
    OPEN_TAG        reduce using rule 394 (catch_clauses -> catch_clause .)
    OPEN_TAG_WITH_ECHO reduce using rule 394 (catch_clauses -> catch_clause .)
    RIGHT_CBRAC     reduce using rule 394 (catch_clauses -> catch_clause .)
    ELSE            reduce using rule 394 (catch_clauses -> catch_clause .)
    ELSEIF          reduce using rule 394 (catch_clauses -> catch_clause .)
    ENDDECLARE      reduce using rule 394 (catch_clauses -> catch_clause .)
    ENDWHILE        reduce using rule 394 (catch_clauses -> catch_clause .)
    ENDFOR          reduce using rule 394 (catch_clauses -> catch_clause .)
    CASE            reduce using rule 394 (catch_clauses -> catch_clause .)
    DEFAULT         reduce using rule 394 (catch_clauses -> catch_clause .)
    ENDSWITCH       reduce using rule 394 (catch_clauses -> catch_clause .)
    ENDFOREACH      reduce using rule 394 (catch_clauses -> catch_clause .)
    ENDIF           reduce using rule 394 (catch_clauses -> catch_clause .)


state 252

    (399) finally_clause -> FINALLY . compound_statement
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 405

state 253

    (396) catch_clause -> CATCH . LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 406


state 254

    (400) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive . RIGHT_PARENTHESIS statement
    (401) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 407


state 255

    (403) declare_directive -> TICKS . EQUALS literal

    EQUALS          shift and go to state 408


state 256

    (404) declare_directive -> ENCODING . EQUALS literal

    EQUALS          shift and go to state 409


state 257

    (405) declare_directive -> STRICT_TYPES . EQUALS literal

    EQUALS          shift and go to state 410


state 258

    (406) echo_statement -> ECHO expression_list SEMICOLON .

    LEFT_CBRAC      reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    SEMICOLON       reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    TRY             reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    DECLARE         reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ECHO            reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    UNSET           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    CONST           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    INTERFACE       reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    TRAIT           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    NAMESPACE       reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    USE             reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    GLOBAL          reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    STATIC          reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    STRING          reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    IF              reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    SWITCH          reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    WHILE           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    DO              reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    FOR             reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    FOREACH         reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    GOTO            reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    CONTINUE        reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    BREAK           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    RETURN          reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    THROW           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    FUNCTION        reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    INCLUDE         reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    REQUIRE         reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ABSTRACT        reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    FINAL           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    PRINT           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    YIELD           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    YIELD_FROM      reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    CLASS           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    CLOSE_TAG       reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    WHITESPACE      reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    $end            reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    OPEN_TAG        reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ELSE            reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ELSEIF          reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDDECLARE      reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDWHILE        reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDFOR          reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    CASE            reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    DEFAULT         reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDSWITCH       reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDFOREACH      reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)
    ENDIF           reduce using rule 406 (echo_statement -> ECHO expression_list SEMICOLON .)


state 259

    (408) expression_list -> expression_list expression .

    SEMICOLON       reduce using rule 408 (expression_list -> expression_list expression .)
    STRING          reduce using rule 408 (expression_list -> expression_list expression .)
    INCLUDE         reduce using rule 408 (expression_list -> expression_list expression .)
    INCLUDE_ONCE    reduce using rule 408 (expression_list -> expression_list expression .)
    REQUIRE         reduce using rule 408 (expression_list -> expression_list expression .)
    REQUIRE_ONCE    reduce using rule 408 (expression_list -> expression_list expression .)
    PRINT           reduce using rule 408 (expression_list -> expression_list expression .)
    YIELD           reduce using rule 408 (expression_list -> expression_list expression .)
    YIELD_FROM      reduce using rule 408 (expression_list -> expression_list expression .)


state 260

    (47) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (51) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 411
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 261

    (409) unset_statement -> UNSET LEFT_PARENTHESIS variable_list . COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> UNSET LEFT_PARENTHESIS variable_list . RIGHT_PARENTHESIS SEMICOLON
    (82) variable_list -> variable_list . variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    COLON           shift and go to state 412
    RIGHT_PARENTHESIS shift and go to state 413
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable                       shift and go to state 414
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 262

    (81) variable_list -> variable .
    (46) dereferencable_expression -> variable .

  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 46 (dereferencable_expression -> variable .)
    COLON           reduce using rule 81 (variable_list -> variable .)
    RIGHT_PARENTHESIS reduce using rule 81 (variable_list -> variable .)
    VARIABLE        reduce using rule 81 (variable_list -> variable .)
    DOLLAR          reduce using rule 81 (variable_list -> variable .)
    LEFT_PARENTHESIS reduce using rule 81 (variable_list -> variable .)
    SELF            reduce using rule 81 (variable_list -> variable .)
    PARENT          reduce using rule 81 (variable_list -> variable .)
    STATIC          reduce using rule 81 (variable_list -> variable .)
    ARRAY           reduce using rule 81 (variable_list -> variable .)
    STRING          reduce using rule 81 (variable_list -> variable .)
    ARROW           reduce using rule 46 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)

  ! LEFT_CBRAC      [ reduce using rule 81 (variable_list -> variable .) ]


state 263

    (157) scoped_property_access_expression -> scope_resolution_qualifier . DOUBLE_COLON simple_variable
    (158) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    DOUBLE_COLON    shift and go to state 415


state 264

    (135) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (162) scope_resolution_qualifier -> qualified_name .

    LEFT_PARENTHESIS shift and go to state 350
    DOUBLE_COLON    reduce using rule 162 (scope_resolution_qualifier -> qualified_name .)


state 265

    (48) dereferencable_expression -> array_creation_expression .
    (52) callable_expression -> array_creation_expression .

    ARROW           reduce using rule 48 (dereferencable_expression -> array_creation_expression .)
    LEFT_CBRAC      reduce using rule 48 (dereferencable_expression -> array_creation_expression .)
    DOUBLE_COLON    reduce using rule 48 (dereferencable_expression -> array_creation_expression .)
    LEFT_PARENTHESIS reduce using rule 52 (callable_expression -> array_creation_expression .)


state 266

    (49) dereferencable_expression -> string_literal .
    (53) callable_expression -> string_literal .

    ARROW           reduce using rule 49 (dereferencable_expression -> string_literal .)
    LEFT_CBRAC      reduce using rule 49 (dereferencable_expression -> string_literal .)
    DOUBLE_COLON    reduce using rule 49 (dereferencable_expression -> string_literal .)
    LEFT_PARENTHESIS reduce using rule 53 (callable_expression -> string_literal .)


state 267

    (166) relative_scope -> STATIC .

    DOUBLE_COLON    reduce using rule 166 (relative_scope -> STATIC .)


state 268

    (464) const_declaration -> CONST const_elements SEMICOLON .

    LEFT_CBRAC      reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    SEMICOLON       reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    TRY             reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    DECLARE         reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ECHO            reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    UNSET           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    CONST           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    INTERFACE       reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    TRAIT           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    NAMESPACE       reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    USE             reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    GLOBAL          reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    STATIC          reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    STRING          reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    IF              reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    SWITCH          reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    WHILE           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    DO              reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    FOR             reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    FOREACH         reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    GOTO            reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    CONTINUE        reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    BREAK           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    RETURN          reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    THROW           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    FUNCTION        reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    INCLUDE         reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    REQUIRE         reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ABSTRACT        reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    FINAL           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    PRINT           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    YIELD           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    YIELD_FROM      reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    CLASS           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    CLOSE_TAG       reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    WHITESPACE      reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    $end            reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    OPEN_TAG        reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ELSE            reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ELSEIF          reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDDECLARE      reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDWHILE        reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDFOR          reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    CASE            reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    DEFAULT         reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDSWITCH       reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDFOREACH      reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)
    ENDIF           reduce using rule 464 (const_declaration -> CONST const_elements SEMICOLON .)


state 269

    (467) const_elements -> const_elements const_element .

    SEMICOLON       reduce using rule 467 (const_elements -> const_elements const_element .)
    STRING          reduce using rule 467 (const_elements -> const_elements const_element .)


state 270

    (468) const_element -> name EQUAL . constant_expression
    (278) constant_expression -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    constant_expression            shift and go to state 416
    expression                     shift and go to state 417
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 271

    (442) class_declaration -> class_modifieropt CLASS name . class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (445) class_base_clauseopt -> . class_base_clause
    (446) class_base_clauseopt -> .
    (453) class_base_clause -> . EXTENDS qualified_name

    IMPLEMENTS      reduce using rule 446 (class_base_clauseopt -> .)
    LEFT_CBRAC      reduce using rule 446 (class_base_clauseopt -> .)
    EXTENDS         shift and go to state 420

    class_base_clauseopt           shift and go to state 418
    class_base_clause              shift and go to state 419

state 272

    (498) interface_declaration -> INTERFACE name interface_base_clauseopt . LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 421


state 273

    (499) interface_base_clauseopt -> interface_base_clause .
    (504) interface_base_clause -> interface_base_clause . qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    LEFT_CBRAC      reduce using rule 499 (interface_base_clauseopt -> interface_base_clause .)
    STRING          shift and go to state 109

    qualified_name                 shift and go to state 422
    name                           shift and go to state 188

state 274

    (503) interface_base_clause -> EXTENDS . qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    qualified_name                 shift and go to state 423
    name                           shift and go to state 188

state 275

    (509) trait_declaration -> TRAIT name LEFT_CBRAC . trait_member_declarationsopt RIGHT_CBRAC
    (510) trait_member_declarationsopt -> . trait_member_declarations
    (511) trait_member_declarationsopt -> .
    (512) trait_member_declarations -> . trait_member_declaration
    (513) trait_member_declarations -> . trait_member_declarations trait_member_declaration
    (514) trait_member_declaration -> . property_declaration
    (515) trait_member_declaration -> . method_declaration
    (516) trait_member_declaration -> . constructor_declaration
    (517) trait_member_declaration -> . destructor_declaration
    (518) trait_member_declaration -> . trait_use_clauses
    (469) property_declaration -> . property_modifier property_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (494) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (519) trait_use_clauses -> . trait_use_clause
    (520) trait_use_clauses -> . trait_use_clauses trait_use_clause
    (470) property_modifier -> . VAR
    (471) property_modifier -> . visibility_modifier static_modifieropt
    (472) property_modifier -> . static_modifier visibility_modifier_opt
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 511 (trait_member_declarationsopt -> .)
    VAR             shift and go to state 436
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    USE             shift and go to state 440
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    trait_member_declarationsopt   shift and go to state 424
    trait_member_declarations      shift and go to state 425
    trait_member_declaration       shift and go to state 426
    property_declaration           shift and go to state 427
    method_declaration             shift and go to state 428
    constructor_declaration        shift and go to state 429
    destructor_declaration         shift and go to state 430
    trait_use_clauses              shift and go to state 431
    property_modifier              shift and go to state 432
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 434
    trait_use_clause               shift and go to state 435
    visibility_modifier            shift and go to state 437
    static_modifier                shift and go to state 438
    method_modifier                shift and go to state 439
    class_modifier                 shift and go to state 445

state 276

    (539) namespace_definition -> NAMESPACE namespace_name SEMICOLON .

    LEFT_CBRAC      reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    SEMICOLON       reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    TRY             reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    DECLARE         reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ECHO            reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    UNSET           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CONST           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    INTERFACE       reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    TRAIT           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    NAMESPACE       reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    USE             reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    GLOBAL          reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    STATIC          reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    STRING          reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    IF              reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    SWITCH          reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    WHILE           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    DO              reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FOR             reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FOREACH         reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    GOTO            reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CONTINUE        reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    BREAK           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    RETURN          reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    THROW           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FUNCTION        reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    INCLUDE         reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    REQUIRE         reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ABSTRACT        reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    FINAL           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    PRINT           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    YIELD           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    YIELD_FROM      reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CLASS           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CLOSE_TAG       reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    WHITESPACE      reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    $end            reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    OPEN_TAG        reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ELSE            reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ELSEIF          reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDDECLARE      reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDWHILE        reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDFOR          reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    CASE            reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    DEFAULT         reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDSWITCH       reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDFOREACH      reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)
    ENDIF           reduce using rule 539 (namespace_definition -> NAMESPACE namespace_name SEMICOLON .)


state 277

    (16) namespace_name -> namespace_name NS_SEPARATOR . NAME

    NAME            shift and go to state 446


state 278

    (540) namespace_definition -> NAMESPACE namespace_nameopt compound_statement .

    LEFT_CBRAC      reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    SEMICOLON       reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    TRY             reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    DECLARE         reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ECHO            reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    UNSET           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CONST           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    INTERFACE       reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    TRAIT           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    NAMESPACE       reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    USE             reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    GLOBAL          reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    STATIC          reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    STRING          reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    IF              reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    SWITCH          reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    WHILE           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    DO              reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FOR             reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FOREACH         reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    GOTO            reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CONTINUE        reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    BREAK           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    RETURN          reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    THROW           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FUNCTION        reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    INCLUDE         reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    INCLUDE_ONCE    reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    REQUIRE         reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    REQUIRE_ONCE    reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ABSTRACT        reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    FINAL           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    PRINT           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    YIELD           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    YIELD_FROM      reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CLASS           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CLOSE_TAG       reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    WHITESPACE      reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    $end            reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    OPEN_TAG        reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    RIGHT_CBRAC     reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ELSE            reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ELSEIF          reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDDECLARE      reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDWHILE        reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDFOR          reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    CASE            reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    DEFAULT         reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDSWITCH       reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDFOREACH      reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)
    ENDIF           reduce using rule 540 (namespace_definition -> NAMESPACE namespace_nameopt compound_statement .)


state 279

    (543) namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses . SEMICOLON
    (551) namespace_use_clauses -> namespace_use_clauses . namespace_use_clause
    (552) namespace_use_clause -> . qualified_name namespace_aliasing_clause_opt
    (554) qualified_name -> . name
    (564) name -> . STRING

    SEMICOLON       shift and go to state 447
    STRING          shift and go to state 109

    namespace_use_clause           shift and go to state 448
    qualified_name                 shift and go to state 281
    name                           shift and go to state 188

state 280

    (550) namespace_use_clauses -> namespace_use_clause .

    SEMICOLON       reduce using rule 550 (namespace_use_clauses -> namespace_use_clause .)
    STRING          reduce using rule 550 (namespace_use_clauses -> namespace_use_clause .)


state 281

    (552) namespace_use_clause -> qualified_name . namespace_aliasing_clause_opt
    (553) namespace_aliasing_clause_opt -> . namespace_aliasing_clause
    (555) namespace_aliasing_clause -> . AS name

    AS              shift and go to state 451

    namespace_aliasing_clause_opt  shift and go to state 449
    namespace_aliasing_clause      shift and go to state 450

state 282

    (544) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt . namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (15) namespace_name -> . NAME
    (16) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 116

    namespace_name                 shift and go to state 452

state 283

    (545) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name . NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (16) namespace_name -> namespace_name . NS_SEPARATOR NAME

    NS_SEPARATOR    shift and go to state 453


state 284

    (25) global_declaration -> GLOBAL variable_name_list SEMICOLON .

    LEFT_CBRAC      reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    SEMICOLON       reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    TRY             reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    DECLARE         reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ECHO            reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    UNSET           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CONST           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    INTERFACE       reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    TRAIT           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    NAMESPACE       reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    USE             reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    GLOBAL          reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    STATIC          reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    STRING          reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    IF              reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    SWITCH          reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    WHILE           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    DO              reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FOR             reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FOREACH         reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    GOTO            reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CONTINUE        reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    BREAK           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    RETURN          reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    THROW           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FUNCTION        reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    INCLUDE         reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    REQUIRE         reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ABSTRACT        reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    FINAL           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    PRINT           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    YIELD           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    YIELD_FROM      reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CLASS           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CLOSE_TAG       reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    WHITESPACE      reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    $end            reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    OPEN_TAG        reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ELSE            reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ELSEIF          reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDDECLARE      reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDWHILE        reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDFOR          reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    CASE            reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    DEFAULT         reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDSWITCH       reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDFOREACH      reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)
    ENDIF           reduce using rule 25 (global_declaration -> GLOBAL variable_name_list SEMICOLON .)


state 285

    (27) variable_name_list -> variable_name_list simple_variable .

    SEMICOLON       reduce using rule 27 (variable_name_list -> variable_name_list simple_variable .)
    VARIABLE        reduce using rule 27 (variable_name_list -> variable_name_list simple_variable .)
    DOLLAR          reduce using rule 27 (variable_name_list -> variable_name_list simple_variable .)


state 286

    (44) simple_variable -> DOLLAR simple_variable .

    SEMICOLON       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    VARIABLE        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DOLLAR          reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    EQUAL           reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DOUBLEPLUS      reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DOUBLELESS      reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    POW_EQUAL       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    MUL_EQUAL       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DIV_EQUAL       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    MOD_EQUAL       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    PLUS_EQUAL      reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    MINUS_EQUAL     reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    CONCAT_EQUAL    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    SL_EQUAL        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    SR_EQUAL        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    AND_EQUAL       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    XOR_EQUAL       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    OR_EQUAL        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    ARROW           reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    LEFT_CBRAC      reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DOUBLE_COLON    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DOUBLEASTERISK  reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    ASTERISK        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DIVIDE          reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    MODULO          reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    PLUS            reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    LESS            reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    CONCAT          reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    SL              reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    SR              reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    LESS_THAN       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    SPACESHIP       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    IS_NOT_EQUAL    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    IS_IDENTICAL    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    AMPERSAND       reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    BITWISE_XOR     reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    BITWISE_OR      reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    COALESCE        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    TERNARY_OPERATION reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    AND             reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    XOR             reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    OR              reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    STRING          reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    INCLUDE         reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    INCLUDE_ONCE    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    REQUIRE         reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    REQUIRE_ONCE    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    PRINT           reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    YIELD           reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    YIELD_FROM      reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    COLON           reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    AS              reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    RIGHT_CBRAC     reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DOUBLE_POINT    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    DOUBLE_ARROW    reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    ELLIPSIS        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    ARRAY           reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    CALLABLE        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    ITERABLE        reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    BOOL            reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    FLOAT           reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    INT             reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    INSTANCEOF      reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    LEFT_PARENTHESIS reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    SELF            reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    PARENT          reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)
    STATIC          reduce using rule 44 (simple_variable -> DOLLAR simple_variable .)


state 287

    (45) simple_variable -> DOLLAR LEFT_CBRAC . expression RIGHT_CBRAC
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 454
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 288

    (17) function_static_declaration -> STATIC static_variable_name_list SEMICOLON .

    LEFT_CBRAC      reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    SEMICOLON       reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    TRY             reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    DECLARE         reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ECHO            reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    UNSET           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CONST           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    INTERFACE       reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    TRAIT           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    NAMESPACE       reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    USE             reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    GLOBAL          reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    STATIC          reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    STRING          reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    IF              reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    SWITCH          reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    WHILE           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    DO              reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FOR             reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FOREACH         reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    GOTO            reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CONTINUE        reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    BREAK           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    RETURN          reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    THROW           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FUNCTION        reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    INCLUDE         reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    REQUIRE         reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ABSTRACT        reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    FINAL           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    PRINT           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    YIELD           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    YIELD_FROM      reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CLASS           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CLOSE_TAG       reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    WHITESPACE      reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    $end            reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    OPEN_TAG        reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ELSE            reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ELSEIF          reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDDECLARE      reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDWHILE        reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDFOR          reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    CASE            reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    DEFAULT         reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDSWITCH       reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDFOREACH      reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)
    ENDIF           reduce using rule 17 (function_static_declaration -> STATIC static_variable_name_list SEMICOLON .)


state 289

    (19) static_variable_name_list -> static_variable_name_list static_variable_declaration .

    SEMICOLON       reduce using rule 19 (static_variable_name_list -> static_variable_name_list static_variable_declaration .)
    VARIABLE        reduce using rule 19 (static_variable_name_list -> static_variable_name_list static_variable_declaration .)


state 290

    (20) static_variable_declaration -> VARIABLE function_static_initializer_opt .

    SEMICOLON       reduce using rule 20 (static_variable_declaration -> VARIABLE function_static_initializer_opt .)
    VARIABLE        reduce using rule 20 (static_variable_declaration -> VARIABLE function_static_initializer_opt .)


state 291

    (22) function_static_initializer_opt -> function_static_initializer .

    SEMICOLON       reduce using rule 22 (function_static_initializer_opt -> function_static_initializer .)
    VARIABLE        reduce using rule 22 (function_static_initializer_opt -> function_static_initializer .)


state 292

    (24) function_static_initializer_opt -> EQUAL . constant_expression
    (21) function_static_initializer -> EQUAL . constant_expression
    (278) constant_expression -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    constant_expression            shift and go to state 455
    expression                     shift and go to state 417
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 293

    (267) logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .
    (265) logical_exc_OR_expression -> logical_exc_OR_expression . XOR logical_AND_expression_2

    OR              reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    SEMICOLON       reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    STRING          reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    INCLUDE         reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    REQUIRE         reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    PRINT           reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    YIELD           reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    YIELD_FROM      reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    COLON           reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    AS              reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ARROW           reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    VARIABLE        reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ELLIPSIS        reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    AMPERSAND       reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ARRAY           reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    CALLABLE        reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    ITERABLE        reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    BOOL            reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    FLOAT           reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    INT             reduce using rule 267 (logical_inc_OR_expression_2 -> logical_inc_OR_expression_2 OR logical_exc_OR_expression .)
    XOR             shift and go to state 150


state 294

    (307) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (311) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 456


state 295

    (322) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> SWITCH LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 457


state 296

    (340) while_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (341) while_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 458


state 297

    (342) do_statement -> DO statement WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 459


state 298

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer . SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    SEMICOLON       shift and go to state 460


state 299

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON RIGHT_PARENTHESIS statement
    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (360) for_control -> . for_expression_group
    (362) for_expression_group -> . expression
    (363) for_expression_group -> . for_expression_group COLON expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 461
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    for_control                    shift and go to state 462
    for_expression_group           shift and go to state 463
    expression                     shift and go to state 301
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 300

    (359) for_initializer -> for_expression_group .
    (363) for_expression_group -> for_expression_group . COLON expression

    SEMICOLON       reduce using rule 359 (for_initializer -> for_expression_group .)
    COLON           shift and go to state 464


state 301

    (362) for_expression_group -> expression .

    COLON           reduce using rule 362 (for_expression_group -> expression .)
    SEMICOLON       reduce using rule 362 (for_expression_group -> expression .)
    RIGHT_PARENTHESIS reduce using rule 362 (for_expression_group -> expression .)


state 302

    (364) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name . AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    AS              shift and go to state 465


state 303

    (368) foreach_collection_name -> expression .

    AS              reduce using rule 368 (foreach_collection_name -> expression .)


state 304

    (378) goto_statement -> GOTO name SEMICOLON .

    LEFT_CBRAC      reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    SEMICOLON       reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    TRY             reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    DECLARE         reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ECHO            reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    UNSET           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    CONST           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    INTERFACE       reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    TRAIT           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    NAMESPACE       reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    USE             reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    GLOBAL          reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    STATIC          reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    STRING          reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    IF              reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    SWITCH          reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    WHILE           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    DO              reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    FOR             reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    FOREACH         reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    GOTO            reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    CONTINUE        reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    BREAK           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    RETURN          reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    THROW           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    FUNCTION        reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    INCLUDE         reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    REQUIRE         reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ABSTRACT        reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    FINAL           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    PRINT           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    YIELD           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    YIELD_FROM      reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    CLASS           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    CLOSE_TAG       reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    WHITESPACE      reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    $end            reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    OPEN_TAG        reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ELSE            reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ELSEIF          reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ENDDECLARE      reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ENDWHILE        reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ENDFOR          reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    CASE            reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    DEFAULT         reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ENDSWITCH       reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ENDFOREACH      reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)
    ENDIF           reduce using rule 378 (goto_statement -> GOTO name SEMICOLON .)


state 305

    (379) continue_statement -> CONTINUE breakout_level SEMICOLON .

    LEFT_CBRAC      reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    SEMICOLON       reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    TRY             reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    DECLARE         reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ECHO            reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    UNSET           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CONST           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    INTERFACE       reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    TRAIT           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    NAMESPACE       reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    USE             reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    GLOBAL          reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    STATIC          reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    STRING          reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    IF              reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    SWITCH          reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    WHILE           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    DO              reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FOR             reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FOREACH         reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    GOTO            reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CONTINUE        reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    BREAK           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    RETURN          reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    THROW           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FUNCTION        reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    INCLUDE         reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    REQUIRE         reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ABSTRACT        reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    FINAL           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    PRINT           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    YIELD           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    YIELD_FROM      reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CLASS           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CLOSE_TAG       reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    WHITESPACE      reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    $end            reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    OPEN_TAG        reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ELSE            reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ELSEIF          reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDDECLARE      reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDWHILE        reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDFOR          reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    CASE            reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    DEFAULT         reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDSWITCH       reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDFOREACH      reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)
    ENDIF           reduce using rule 379 (continue_statement -> CONTINUE breakout_level SEMICOLON .)


state 306

    (382) breakout_level -> LEFT_PARENTHESIS breakout_level . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 466


state 307

    (383) break_statement -> BREAK breakout_levelopt SEMICOLON .

    LEFT_CBRAC      reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    SEMICOLON       reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    TRY             reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    DECLARE         reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ECHO            reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    UNSET           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CONST           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    INTERFACE       reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    TRAIT           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    NAMESPACE       reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    USE             reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    GLOBAL          reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    STATIC          reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    STRING          reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    IF              reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    SWITCH          reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    WHILE           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    DO              reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FOR             reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FOREACH         reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    GOTO            reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CONTINUE        reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    BREAK           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    RETURN          reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    THROW           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FUNCTION        reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    INCLUDE         reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    REQUIRE         reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ABSTRACT        reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    FINAL           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    PRINT           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    YIELD           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    YIELD_FROM      reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CLASS           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CLOSE_TAG       reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    WHITESPACE      reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    $end            reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    OPEN_TAG        reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ELSE            reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ELSEIF          reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDDECLARE      reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDWHILE        reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDFOR          reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    CASE            reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    DEFAULT         reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDSWITCH       reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDFOREACH      reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)
    ENDIF           reduce using rule 383 (break_statement -> BREAK breakout_levelopt SEMICOLON .)


state 308

    (387) return_statement -> RETURN expressionopt SEMICOLON .

    LEFT_CBRAC      reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    SEMICOLON       reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    TRY             reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    DECLARE         reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ECHO            reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    UNSET           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    CONST           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    INTERFACE       reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    TRAIT           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    NAMESPACE       reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    USE             reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    GLOBAL          reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    STATIC          reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    STRING          reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    IF              reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    SWITCH          reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    WHILE           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    DO              reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    FOR             reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    FOREACH         reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    GOTO            reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    CONTINUE        reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    BREAK           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    RETURN          reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    THROW           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    FUNCTION        reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    INCLUDE         reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    REQUIRE         reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ABSTRACT        reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    FINAL           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    PRINT           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    YIELD           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    YIELD_FROM      reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    CLASS           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    CLOSE_TAG       reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    WHITESPACE      reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    $end            reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    OPEN_TAG        reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ELSE            reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ELSEIF          reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDDECLARE      reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDWHILE        reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDFOR          reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    CASE            reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    DEFAULT         reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDSWITCH       reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDFOREACH      reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)
    ENDIF           reduce using rule 387 (return_statement -> RETURN expressionopt SEMICOLON .)


state 309

    (390) throw_statement -> THROW expression SEMICOLON .

    LEFT_CBRAC      reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    SEMICOLON       reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    TRY             reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    DECLARE         reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ECHO            reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    UNSET           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    CONST           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    INTERFACE       reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    TRAIT           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    NAMESPACE       reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    USE             reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    GLOBAL          reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    STATIC          reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    STRING          reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    IF              reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    SWITCH          reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    WHILE           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    DO              reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    FOR             reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    FOREACH         reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    GOTO            reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    CONTINUE        reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    BREAK           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    RETURN          reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    THROW           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    FUNCTION        reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    INCLUDE         reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    REQUIRE         reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ABSTRACT        reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    FINAL           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    PRINT           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    YIELD           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    YIELD_FROM      reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    CLASS           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    WHITESPACE      reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    $end            reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    OPEN_TAG        reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ELSE            reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ELSEIF          reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ENDDECLARE      reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ENDWHILE        reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ENDFOR          reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    CASE            reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    DEFAULT         reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ENDSWITCH       reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ENDFOREACH      reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)
    ENDIF           reduce using rule 390 (throw_statement -> THROW expression SEMICOLON .)


state 310

    (412) function_definition_header -> FUNCTION ampersandopt name . LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt

    LEFT_PARENTHESIS shift and go to state 467


state 311

    (265) logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .
    (263) logical_AND_expression_2 -> logical_AND_expression_2 . AND yield_expression

    XOR             reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    OR              reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    SEMICOLON       reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    STRING          reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    INCLUDE         reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    INCLUDE_ONCE    reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    REQUIRE         reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    REQUIRE_ONCE    reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    PRINT           reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    YIELD           reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    YIELD_FROM      reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    RIGHT_PARENTHESIS reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    COLON           reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    AS              reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ARROW           reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    RIGHT_CBRAC     reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    VARIABLE        reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    DOUBLE_POINT    reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    DOUBLE_ARROW    reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ELLIPSIS        reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    TERNARY_OPERATION reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    AMPERSAND       reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ARRAY           reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    CALLABLE        reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    ITERABLE        reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    BOOL            reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    FLOAT           reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    INT             reduce using rule 265 (logical_exc_OR_expression -> logical_exc_OR_expression XOR logical_AND_expression_2 .)
    AND             shift and go to state 155


state 312

    (263) logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .

    AND             reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    XOR             reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    OR              reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    SEMICOLON       reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    STRING          reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    INCLUDE         reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    INCLUDE_ONCE    reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    REQUIRE         reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    REQUIRE_ONCE    reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    PRINT           reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    YIELD           reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    YIELD_FROM      reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    COLON           reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    AS              reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ARROW           reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    RIGHT_CBRAC     reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    VARIABLE        reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    DOUBLE_POINT    reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    DOUBLE_ARROW    reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ELLIPSIS        reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    TERNARY_OPERATION reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    AMPERSAND       reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ARRAY           reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    CALLABLE        reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    ITERABLE        reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    BOOL            reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    FLOAT           reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)
    INT             reduce using rule 263 (logical_AND_expression_2 -> logical_AND_expression_2 AND yield_expression .)


state 313

    (259) yield_expression -> YIELD yield_from_expression DOUBLE_ARROW . yield_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    yield_from_expression          shift and go to state 90
    yield_expression               shift and go to state 468

state 314

    (221) conditional_expression -> conditional_expression TERNARY_OPERATION . expression DOUBLE_POINT coalesce_expression
    (222) conditional_expression -> conditional_expression TERNARY_OPERATION . DOUBLE_POINT coalesce_expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 470
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 469
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 315

    (226) simple_assignment_expression -> variable EQUAL . assignment_expression
    (241) byref_assignment_expression -> variable EQUAL . AMPERSAND variable
    (223) assignment_expression -> . conditional_expression
    (224) assignment_expression -> . simple_assignment_expression
    (225) assignment_expression -> . compound_assignment_expression
    (220) conditional_expression -> . coalesce_expression
    (221) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (222) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (226) simple_assignment_expression -> . variable EQUAL assignment_expression
    (227) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (242) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (218) coalesce_expression -> . logical_inc_OR_expression_1
    (219) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (216) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (217) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (564) name -> . STRING
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .

    AMPERSAND       shift and go to state 472
    LIST            shift and go to state 170
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 171
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 191
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193
    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    FUNCTION        reduce using rule 85 (static_opt -> .)

    variable                       shift and go to state 164
    assignment_expression          shift and go to state 471
    conditional_expression         shift and go to state 160
    simple_assignment_expression   shift and go to state 161
    compound_assignment_expression shift and go to state 162
    coalesce_expression            shift and go to state 163
    list_intrinsic                 shift and go to state 165
    logical_inc_OR_expression_1    shift and go to state 166
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    logical_AND_expression_1       shift and go to state 172
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 178
    dereferencable_expression      shift and go to state 179
    bitwise_inc_OR_expression      shift and go to state 180
    qualified_name                 shift and go to state 182
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 185
    string_literal                 shift and go to state 186
    bitwise_exc_OR_expression      shift and go to state 187
    name                           shift and go to state 188
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235

state 316

    (242) compound_assignment_expression -> variable compound_assignment_operator . assignment_expression
    (223) assignment_expression -> . conditional_expression
    (224) assignment_expression -> . simple_assignment_expression
    (225) assignment_expression -> . compound_assignment_expression
    (220) conditional_expression -> . coalesce_expression
    (221) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (222) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (226) simple_assignment_expression -> . variable EQUAL assignment_expression
    (227) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (242) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (218) coalesce_expression -> . logical_inc_OR_expression_1
    (219) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (216) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (217) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (564) name -> . STRING
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .

    LIST            shift and go to state 170
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 171
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 191
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193
    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    FUNCTION        reduce using rule 85 (static_opt -> .)

    variable                       shift and go to state 164
    assignment_expression          shift and go to state 473
    conditional_expression         shift and go to state 160
    simple_assignment_expression   shift and go to state 161
    compound_assignment_expression shift and go to state 162
    coalesce_expression            shift and go to state 163
    list_intrinsic                 shift and go to state 165
    logical_inc_OR_expression_1    shift and go to state 166
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    logical_AND_expression_1       shift and go to state 172
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 178
    dereferencable_expression      shift and go to state 179
    bitwise_inc_OR_expression      shift and go to state 180
    qualified_name                 shift and go to state 182
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 185
    string_literal                 shift and go to state 186
    bitwise_exc_OR_expression      shift and go to state 187
    name                           shift and go to state 188
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235

state 317

    (150) postfix_increment_expression -> variable DOUBLEPLUS .

    DOUBLEASTERISK  reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ASTERISK        reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    DIVIDE          reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    MODULO          reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    PLUS            reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    LESS            reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    CONCAT          reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SL              reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SR              reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    LESS_THAN       reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_SMALLER_OR_EQUAL reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_GREATER_OR_EQUAL reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    GREATER_THAN_OR_EQUAL reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SPACESHIP       reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    EQUAL           reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_NOT_EQUAL    reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_IDENTICAL    reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    IS_NOT_IDENTICAL reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    AMPERSAND       reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    BITWISE_XOR     reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    BITWISE_OR      reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    COALESCE        reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    TERNARY_OPERATION reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    AND             reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    XOR             reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    OR              reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    SEMICOLON       reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    STRING          reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INCLUDE         reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INCLUDE_ONCE    reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    REQUIRE         reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    REQUIRE_ONCE    reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    PRINT           reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    YIELD           reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    YIELD_FROM      reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    RIGHT_PARENTHESIS reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    COLON           reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    AS              reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ARROW           reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    RIGHT_CBRAC     reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    VARIABLE        reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    DOUBLE_POINT    reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    DOUBLE_ARROW    reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ELLIPSIS        reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ARRAY           reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    CALLABLE        reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    ITERABLE        reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    BOOL            reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    FLOAT           reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INT             reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)
    INSTANCEOF      reduce using rule 150 (postfix_increment_expression -> variable DOUBLEPLUS .)


state 318

    (151) postfix_decrement_expression -> variable DOUBLELESS .

    DOUBLEASTERISK  reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    ASTERISK        reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    DIVIDE          reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    MODULO          reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    PLUS            reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    LESS            reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    CONCAT          reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    SL              reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    SR              reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    LESS_THAN       reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_SMALLER_OR_EQUAL reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_GREATER_OR_EQUAL reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    GREATER_THAN_OR_EQUAL reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    SPACESHIP       reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    EQUAL           reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_NOT_EQUAL    reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_IDENTICAL    reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    IS_NOT_IDENTICAL reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    AMPERSAND       reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    BITWISE_XOR     reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    BITWISE_OR      reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    COALESCE        reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    TERNARY_OPERATION reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    AND             reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    XOR             reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    OR              reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    SEMICOLON       reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    STRING          reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    INCLUDE         reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    INCLUDE_ONCE    reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    REQUIRE         reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    REQUIRE_ONCE    reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    PRINT           reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    YIELD           reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    YIELD_FROM      reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    RIGHT_PARENTHESIS reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    COLON           reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    AS              reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    ARROW           reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    RIGHT_CBRAC     reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    VARIABLE        reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    DOUBLE_POINT    reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    DOUBLE_ARROW    reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    ELLIPSIS        reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    ARRAY           reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    CALLABLE        reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    ITERABLE        reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    BOOL            reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    FLOAT           reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    INT             reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)
    INSTANCEOF      reduce using rule 151 (postfix_decrement_expression -> variable DOUBLELESS .)


state 319

    (243) compound_assignment_operator -> POW_EQUAL .

    LIST            reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    VARIABLE        reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    DOLLAR          reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    SELF            reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    PARENT          reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    STATIC          reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    ARRAY           reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    LEFT_CBRAC      reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    STRING          reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    NEGATION        reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    AT              reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    CLONE           reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    PLUS            reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    LESS            reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    BITWISE_NOT     reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    NEW             reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    DOUBLEPLUS      reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    DOUBLELESS      reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    BACKTICK        reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    LNUMBER         reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    DNUMBER         reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    EMPTY           reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    EVAL            reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    EXIT            reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    DIE             reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    ISSET           reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)
    FUNCTION        reduce using rule 243 (compound_assignment_operator -> POW_EQUAL .)


state 320

    (244) compound_assignment_operator -> MUL_EQUAL .

    LIST            reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    VARIABLE        reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    DOLLAR          reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    SELF            reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    PARENT          reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    STATIC          reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    ARRAY           reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    LEFT_CBRAC      reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    STRING          reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    NEGATION        reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    AT              reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    CLONE           reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    PLUS            reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    LESS            reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    BITWISE_NOT     reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    NEW             reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    DOUBLEPLUS      reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    DOUBLELESS      reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    BACKTICK        reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    LNUMBER         reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    DNUMBER         reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    EMPTY           reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    EVAL            reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    EXIT            reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    DIE             reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    ISSET           reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)
    FUNCTION        reduce using rule 244 (compound_assignment_operator -> MUL_EQUAL .)


state 321

    (245) compound_assignment_operator -> DIV_EQUAL .

    LIST            reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    VARIABLE        reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    DOLLAR          reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    SELF            reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    PARENT          reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    STATIC          reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    ARRAY           reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    LEFT_CBRAC      reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    STRING          reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    NEGATION        reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    AT              reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    CLONE           reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    PLUS            reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    LESS            reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    BITWISE_NOT     reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    NEW             reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    DOUBLEPLUS      reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    DOUBLELESS      reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    BACKTICK        reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    LNUMBER         reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    DNUMBER         reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    EMPTY           reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    EVAL            reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    EXIT            reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    DIE             reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    ISSET           reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)
    FUNCTION        reduce using rule 245 (compound_assignment_operator -> DIV_EQUAL .)


state 322

    (246) compound_assignment_operator -> MOD_EQUAL .

    LIST            reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    VARIABLE        reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    DOLLAR          reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    SELF            reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    PARENT          reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    STATIC          reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    ARRAY           reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    LEFT_CBRAC      reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    STRING          reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    NEGATION        reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    AT              reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    CLONE           reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    PLUS            reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    LESS            reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    BITWISE_NOT     reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    NEW             reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    DOUBLEPLUS      reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    DOUBLELESS      reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    BACKTICK        reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    LNUMBER         reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    DNUMBER         reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    EMPTY           reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    EVAL            reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    EXIT            reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    DIE             reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    ISSET           reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)
    FUNCTION        reduce using rule 246 (compound_assignment_operator -> MOD_EQUAL .)


state 323

    (247) compound_assignment_operator -> PLUS_EQUAL .

    LIST            reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    VARIABLE        reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    DOLLAR          reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    SELF            reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    PARENT          reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    STATIC          reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    ARRAY           reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    LEFT_CBRAC      reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    STRING          reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    NEGATION        reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    AT              reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    CLONE           reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    PLUS            reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    LESS            reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    BITWISE_NOT     reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    NEW             reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    DOUBLEPLUS      reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    DOUBLELESS      reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    BACKTICK        reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    LNUMBER         reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    DNUMBER         reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    EMPTY           reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    EVAL            reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    EXIT            reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    DIE             reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    ISSET           reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)
    FUNCTION        reduce using rule 247 (compound_assignment_operator -> PLUS_EQUAL .)


state 324

    (248) compound_assignment_operator -> MINUS_EQUAL .

    LIST            reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    VARIABLE        reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    DOLLAR          reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    SELF            reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    PARENT          reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    STATIC          reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    ARRAY           reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    LEFT_CBRAC      reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    STRING          reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    NEGATION        reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    AT              reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    CLONE           reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    PLUS            reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    LESS            reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    BITWISE_NOT     reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    NEW             reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    DOUBLEPLUS      reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    DOUBLELESS      reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    BACKTICK        reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    LNUMBER         reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    DNUMBER         reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    EMPTY           reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    EVAL            reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    EXIT            reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    DIE             reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    ISSET           reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)
    FUNCTION        reduce using rule 248 (compound_assignment_operator -> MINUS_EQUAL .)


state 325

    (249) compound_assignment_operator -> CONCAT_EQUAL .

    LIST            reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    VARIABLE        reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    DOLLAR          reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    SELF            reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    PARENT          reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    STATIC          reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    ARRAY           reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    LEFT_CBRAC      reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    STRING          reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    NEGATION        reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    AT              reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    CLONE           reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    PLUS            reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    LESS            reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    BITWISE_NOT     reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    NEW             reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    DOUBLEPLUS      reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    DOUBLELESS      reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    BACKTICK        reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    LNUMBER         reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    DNUMBER         reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    EMPTY           reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    EVAL            reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    EXIT            reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    DIE             reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    ISSET           reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)
    FUNCTION        reduce using rule 249 (compound_assignment_operator -> CONCAT_EQUAL .)


state 326

    (250) compound_assignment_operator -> SL_EQUAL .

    LIST            reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    VARIABLE        reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    DOLLAR          reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    SELF            reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    PARENT          reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    STATIC          reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    ARRAY           reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    LEFT_CBRAC      reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    STRING          reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    NEGATION        reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    AT              reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    CLONE           reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    PLUS            reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    LESS            reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    BITWISE_NOT     reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    NEW             reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    DOUBLEPLUS      reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    DOUBLELESS      reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    BACKTICK        reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    LNUMBER         reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    DNUMBER         reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    EMPTY           reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    EVAL            reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    EXIT            reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    DIE             reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    ISSET           reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)
    FUNCTION        reduce using rule 250 (compound_assignment_operator -> SL_EQUAL .)


state 327

    (251) compound_assignment_operator -> SR_EQUAL .

    LIST            reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    VARIABLE        reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    DOLLAR          reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    SELF            reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    PARENT          reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    STATIC          reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    ARRAY           reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    LEFT_CBRAC      reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    STRING          reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    NEGATION        reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    AT              reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    CLONE           reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    PLUS            reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    LESS            reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    BITWISE_NOT     reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    NEW             reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    DOUBLEPLUS      reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    DOUBLELESS      reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    BACKTICK        reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    LNUMBER         reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    DNUMBER         reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    EMPTY           reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    EVAL            reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    EXIT            reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    DIE             reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    ISSET           reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)
    FUNCTION        reduce using rule 251 (compound_assignment_operator -> SR_EQUAL .)


state 328

    (252) compound_assignment_operator -> AND_EQUAL .

    LIST            reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    VARIABLE        reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    DOLLAR          reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    SELF            reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    PARENT          reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    STATIC          reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    ARRAY           reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    LEFT_CBRAC      reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    STRING          reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    NEGATION        reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    AT              reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    CLONE           reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    PLUS            reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    LESS            reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    BITWISE_NOT     reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    NEW             reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    DOUBLEPLUS      reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    DOUBLELESS      reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    BACKTICK        reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    LNUMBER         reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    DNUMBER         reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    EMPTY           reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    EVAL            reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    EXIT            reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    DIE             reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    ISSET           reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)
    FUNCTION        reduce using rule 252 (compound_assignment_operator -> AND_EQUAL .)


state 329

    (253) compound_assignment_operator -> XOR_EQUAL .

    LIST            reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    VARIABLE        reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    DOLLAR          reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    SELF            reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    PARENT          reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    STATIC          reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    ARRAY           reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    LEFT_CBRAC      reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    STRING          reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    NEGATION        reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    AT              reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    CLONE           reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    PLUS            reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    LESS            reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    BITWISE_NOT     reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    NEW             reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    DOUBLEPLUS      reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    DOUBLELESS      reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    BACKTICK        reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    LNUMBER         reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    DNUMBER         reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    EMPTY           reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    EVAL            reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    EXIT            reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    DIE             reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    ISSET           reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)
    FUNCTION        reduce using rule 253 (compound_assignment_operator -> XOR_EQUAL .)


state 330

    (254) compound_assignment_operator -> OR_EQUAL .

    LIST            reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    VARIABLE        reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    DOLLAR          reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    LEFT_PARENTHESIS reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    SELF            reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    PARENT          reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    STATIC          reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    ARRAY           reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    LEFT_CBRAC      reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    STRING          reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    NEGATION        reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    AT              reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    CLONE           reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    PLUS            reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    LESS            reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    BITWISE_NOT     reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    NEW             reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    DOUBLEPLUS      reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    DOUBLELESS      reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    BACKTICK        reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    LNUMBER         reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    DNUMBER         reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    EMPTY           reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    EVAL            reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    EXIT            reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    DIE             reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    ISSET           reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)
    FUNCTION        reduce using rule 254 (compound_assignment_operator -> OR_EQUAL .)


state 331

    (227) simple_assignment_expression -> list_intrinsic EQUAL . assignment_expression
    (223) assignment_expression -> . conditional_expression
    (224) assignment_expression -> . simple_assignment_expression
    (225) assignment_expression -> . compound_assignment_expression
    (220) conditional_expression -> . coalesce_expression
    (221) conditional_expression -> . conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression
    (222) conditional_expression -> . conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression
    (226) simple_assignment_expression -> . variable EQUAL assignment_expression
    (227) simple_assignment_expression -> . list_intrinsic EQUAL assignment_expression
    (242) compound_assignment_expression -> . variable compound_assignment_operator assignment_expression
    (218) coalesce_expression -> . logical_inc_OR_expression_1
    (219) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (216) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (217) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (564) name -> . STRING
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .

    LIST            shift and go to state 170
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 171
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 191
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193
    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    FUNCTION        reduce using rule 85 (static_opt -> .)

    list_intrinsic                 shift and go to state 165
    assignment_expression          shift and go to state 474
    conditional_expression         shift and go to state 160
    simple_assignment_expression   shift and go to state 161
    compound_assignment_expression shift and go to state 162
    coalesce_expression            shift and go to state 163
    variable                       shift and go to state 164
    logical_inc_OR_expression_1    shift and go to state 166
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    logical_AND_expression_1       shift and go to state 172
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 178
    dereferencable_expression      shift and go to state 179
    bitwise_inc_OR_expression      shift and go to state 180
    qualified_name                 shift and go to state 182
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 185
    string_literal                 shift and go to state 186
    bitwise_exc_OR_expression      shift and go to state 187
    name                           shift and go to state 188
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235

state 332

    (219) coalesce_expression -> logical_inc_OR_expression_1 COALESCE . coalesce_expression
    (218) coalesce_expression -> . logical_inc_OR_expression_1
    (219) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (216) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (217) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    logical_inc_OR_expression_1    shift and go to state 166
    coalesce_expression            shift and go to state 475
    logical_AND_expression_1       shift and go to state 172
    bitwise_inc_OR_expression      shift and go to state 180
    bitwise_exc_OR_expression      shift and go to state 187
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 333

    (217) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR . BITWISE_OR logical_AND_expression_1

    BITWISE_OR      shift and go to state 476


state 334

    (228) list_intrinsic -> LIST LEFT_PARENTHESIS . list_expression_list RIGHT_PARENTHESIS
    (229) list_expression_list -> . unkeyed_list_expression_list
    (230) list_expression_list -> . keyed_list_expression_list COLON
    (231) list_expression_list -> . keyed_list_expression_list
    (232) unkeyed_list_expression_list -> . list_or_variable
    (233) unkeyed_list_expression_list -> . COLON
    (234) unkeyed_list_expression_list -> . unkeyed_list_expression_list COLON list_or_variable COLON
    (235) unkeyed_list_expression_list -> . unkeyed_list_expression_list COLON list_or_variable
    (236) keyed_list_expression_list -> . expression DOUBLE_ARROW list_or_variable
    (237) keyed_list_expression_list -> . keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable
    (238) list_or_variable -> . list_intrinsic
    (239) list_or_variable -> . AMPERSAND variable
    (240) list_or_variable -> . variable
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (564) name -> . STRING
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    COLON           shift and go to state 480
    AMPERSAND       shift and go to state 484
    STRING          shift and go to state 486
    LIST            shift and go to state 170
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    list_expression_list           shift and go to state 477
    unkeyed_list_expression_list   shift and go to state 478
    keyed_list_expression_list     shift and go to state 479
    list_or_variable               shift and go to state 481
    expression                     shift and go to state 482
    list_intrinsic                 shift and go to state 483
    variable                       shift and go to state 485
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    logical_exc_OR_expression      shift and go to state 79
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    logical_AND_expression_2       shift and go to state 86
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    name                           shift and go to state 188
    yield_from_expression          shift and go to state 90

state 335

    (47) dereferencable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (51) callable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (42) primary_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 487


state 336

    (180) cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS . unary_expression
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    unary_expression               shift and go to state 488
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 337

    (215) logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND . AMPERSAND bitwise_inc_OR_expression

    AMPERSAND       shift and go to state 489


state 338

    (157) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON . simple_variable
    (158) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (160) class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON . NAME
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (145) member_name -> . NAME
    (146) member_name -> . simple_variable
    (147) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS

    NAME            shift and go to state 492
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_CBRAC      shift and go to state 493

    simple_variable                shift and go to state 490
    member_name                    shift and go to state 491

state 339

    (144) member_access_expression -> dereferencable_expression ARROW . member_name
    (148) member_call_expression -> dereferencable_expression ARROW . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> dereferencable_expression ARROW . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (145) member_name -> . NAME
    (146) member_name -> . simple_variable
    (147) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    NAME            shift and go to state 495
    LEFT_CBRAC      shift and go to state 493
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    member_name                    shift and go to state 494
    simple_variable                shift and go to state 496

state 340

    (133) subscript_expression -> dereferencable_expression LEFT_CBRAC . expression_opt RIGHT_CBRAC
    (134) subscript_expression -> dereferencable_expression LEFT_CBRAC . expression RIGHT_PARENTHESIS
    (119) expression_opt -> . expression
    (120) expression_opt -> .
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     reduce using rule 120 (expression_opt -> .)
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression_opt                 shift and go to state 497
    expression                     shift and go to state 498
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 341

    (213) bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR . bitwise_exc_OR_expression
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    bitwise_exc_OR_expression      shift and go to state 499
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 342

    (122) array_creation_expression -> LEFT_CBRAC array_initializer_opt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 500


state 343

    (123) array_initializer_opt -> array_initializer .

    RIGHT_CBRAC     reduce using rule 123 (array_initializer_opt -> array_initializer .)
    RIGHT_PARENTHESIS reduce using rule 123 (array_initializer_opt -> array_initializer .)


state 344

    (125) array_initializer -> array_initializer_list .
    (126) array_initializer -> array_initializer_list . COLON

    RIGHT_CBRAC     reduce using rule 125 (array_initializer -> array_initializer_list .)
    RIGHT_PARENTHESIS reduce using rule 125 (array_initializer -> array_initializer_list .)
    COLON           shift and go to state 501


state 345

    (127) array_initializer_list -> array_element_initializer .
    (128) array_initializer_list -> array_element_initializer . COLON array_element_initializer

  ! shift/reduce conflict for COLON resolved as shift
    RIGHT_CBRAC     reduce using rule 127 (array_initializer_list -> array_element_initializer .)
    RIGHT_PARENTHESIS reduce using rule 127 (array_initializer_list -> array_element_initializer .)
    COLON           shift and go to state 502

  ! COLON           [ reduce using rule 127 (array_initializer_list -> array_element_initializer .) ]


state 346

    (129) array_element_initializer -> AMPERSAND_opt . element_value
    (132) element_value -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    element_value                  shift and go to state 503
    expression                     shift and go to state 504
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 347

    (130) array_element_initializer -> element_key . ARROW AMPERSAND_opt element_value

    ARROW           shift and go to state 505


state 348

    (86) AMPERSAND_opt -> AMPERSAND .

    STRING          reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    INCLUDE         reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    INCLUDE_ONCE    reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    REQUIRE         reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    REQUIRE_ONCE    reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    PRINT           reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    YIELD           reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    YIELD_FROM      reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    LEFT_PARENTHESIS reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    CONSTRUCT       reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    DESTRUCT        reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)
    VARIABLE        reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .)


state 349

    (131) element_key -> expression .

    ARROW           reduce using rule 131 (element_key -> expression .)


state 350

    (135) function_call_expression -> qualified_name LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> qualified_name LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> . argument_expression_list
    (103) argument_expression_list_opt -> .
    (139) argument_expression_list -> . argument_expression
    (140) argument_expression_list -> . argument_expression_list argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 103 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression_list_opt   shift and go to state 506
    argument_expression_list       shift and go to state 507
    argument_expression            shift and go to state 508
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 351

    (137) function_call_expression -> callable_expression LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> callable_expression LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> . argument_expression_list
    (103) argument_expression_list_opt -> .
    (139) argument_expression_list -> . argument_expression
    (140) argument_expression_list -> . argument_expression_list argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 103 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression_list_opt   shift and go to state 512
    argument_expression_list       shift and go to state 513
    argument_expression            shift and go to state 508
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 352

    (211) bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR . bitwise_AND_expression
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    bitwise_AND_expression         shift and go to state 514
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 353

    (121) array_creation_expression -> ARRAY LEFT_PARENTHESIS . array_initializer_opt RIGHT_PARENTHESIS
    (123) array_initializer_opt -> . array_initializer
    (124) array_initializer_opt -> .
    (125) array_initializer -> . array_initializer_list
    (126) array_initializer -> . array_initializer_list COLON
    (127) array_initializer_list -> . array_element_initializer
    (128) array_initializer_list -> . array_element_initializer COLON array_element_initializer
    (129) array_element_initializer -> . AMPERSAND_opt element_value
    (130) array_element_initializer -> . element_key ARROW AMPERSAND_opt element_value
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .
    (131) element_key -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    RIGHT_PARENTHESIS reduce using rule 124 (array_initializer_opt -> .)
    AMPERSAND       shift and go to state 348
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! STRING          [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 87 (AMPERSAND_opt -> .) ]

    array_initializer_opt          shift and go to state 515
    array_initializer              shift and go to state 343
    array_initializer_list         shift and go to state 344
    array_element_initializer      shift and go to state 345
    AMPERSAND_opt                  shift and go to state 346
    element_key                    shift and go to state 347
    expression                     shift and go to state 349
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 354

    (209) bitwise_AND_expression -> bitwise_AND_expression AMPERSAND . equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    equality_expression            shift and go to state 516
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 355

    (204) equality_expression -> equality_expression EQUAL . relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    relational_expression          shift and go to state 517
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 356

    (205) equality_expression -> equality_expression IS_NOT_EQUAL . relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    relational_expression          shift and go to state 518
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 357

    (206) equality_expression -> equality_expression IS_IDENTICAL . relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    relational_expression          shift and go to state 519
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 358

    (207) equality_expression -> equality_expression IS_NOT_IDENTICAL . relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    relational_expression          shift and go to state 520
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 359

    (198) relational_expression -> relational_expression LESS_THAN . shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    shift_expression               shift and go to state 521
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 360

    (199) relational_expression -> relational_expression IS_SMALLER_OR_EQUAL . shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    shift_expression               shift and go to state 522
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 361

    (200) relational_expression -> relational_expression IS_GREATER_OR_EQUAL . shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    shift_expression               shift and go to state 523
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 362

    (201) relational_expression -> relational_expression GREATER_THAN_OR_EQUAL . shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    shift_expression               shift and go to state 524
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 363

    (202) relational_expression -> relational_expression SPACESHIP . shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    shift_expression               shift and go to state 525
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 364

    (195) shift_expression -> shift_expression SL . additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    additive_expression            shift and go to state 526
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 365

    (196) shift_expression -> shift_expression SR . additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    additive_expression            shift and go to state 527
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 366

    (191) additive_expression -> additive_expression PLUS . multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    multiplicative_expression      shift and go to state 528
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 367

    (192) additive_expression -> additive_expression LESS . multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    multiplicative_expression      shift and go to state 529
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 368

    (193) additive_expression -> additive_expression CONCAT . multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    multiplicative_expression      shift and go to state 530
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 369

    (187) multiplicative_expression -> multiplicative_expression ASTERISK . logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    logical_not_expression         shift and go to state 531
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 370

    (188) multiplicative_expression -> multiplicative_expression DIVIDE . logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    logical_not_expression         shift and go to state 532
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 371

    (189) multiplicative_expression -> multiplicative_expression MODULO . logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    logical_not_expression         shift and go to state 533
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 372

    (185) logical_not_expression -> NEGATION instanceof_expression .
    (183) instanceof_subj -> instanceof_expression .

    ASTERISK        reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    DIVIDE          reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    MODULO          reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    PLUS            reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    LESS            reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    CONCAT          reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    SL              reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    SR              reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    LESS_THAN       reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    SPACESHIP       reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    EQUAL           reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_NOT_EQUAL    reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_IDENTICAL    reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    IS_NOT_IDENTICAL reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    AMPERSAND       reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    BITWISE_XOR     reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    BITWISE_OR      reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    COALESCE        reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    TERNARY_OPERATION reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    AND             reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    XOR             reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    OR              reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    SEMICOLON       reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    STRING          reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    INCLUDE         reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    INCLUDE_ONCE    reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    REQUIRE         reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    REQUIRE_ONCE    reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    PRINT           reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    YIELD           reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    YIELD_FROM      reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    RIGHT_PARENTHESIS reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    COLON           reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    AS              reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    ARROW           reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    RIGHT_CBRAC     reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    VARIABLE        reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    DOUBLE_POINT    reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    DOUBLE_ARROW    reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    ELLIPSIS        reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    ARRAY           reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    CALLABLE        reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    ITERABLE        reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    BOOL            reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    FLOAT           reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    INT             reduce using rule 185 (logical_not_expression -> NEGATION instanceof_expression .)
    INSTANCEOF      reduce using rule 183 (instanceof_subj -> instanceof_expression .)


state 373

    (180) cast_expression -> LEFT_PARENTHESIS . RIGHT_PARENTHESIS unary_expression
    (42) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (47) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (51) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 336
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 534
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 374

    (28) primary_expression -> variable .
    (150) postfix_increment_expression -> variable . DOUBLEPLUS
    (151) postfix_decrement_expression -> variable . DOUBLELESS
    (241) byref_assignment_expression -> variable . EQUAL AMPERSAND variable
    (46) dereferencable_expression -> variable .

  ! shift/reduce conflict for EQUAL resolved as shift
  ! reduce/reduce conflict for ARROW resolved using rule 28 (primary_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 28 (primary_expression -> variable .)
    ASTERISK        reduce using rule 28 (primary_expression -> variable .)
    DIVIDE          reduce using rule 28 (primary_expression -> variable .)
    MODULO          reduce using rule 28 (primary_expression -> variable .)
    PLUS            reduce using rule 28 (primary_expression -> variable .)
    LESS            reduce using rule 28 (primary_expression -> variable .)
    CONCAT          reduce using rule 28 (primary_expression -> variable .)
    SL              reduce using rule 28 (primary_expression -> variable .)
    SR              reduce using rule 28 (primary_expression -> variable .)
    LESS_THAN       reduce using rule 28 (primary_expression -> variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (primary_expression -> variable .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (primary_expression -> variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 28 (primary_expression -> variable .)
    SPACESHIP       reduce using rule 28 (primary_expression -> variable .)
    IS_NOT_EQUAL    reduce using rule 28 (primary_expression -> variable .)
    IS_IDENTICAL    reduce using rule 28 (primary_expression -> variable .)
    IS_NOT_IDENTICAL reduce using rule 28 (primary_expression -> variable .)
    AMPERSAND       reduce using rule 28 (primary_expression -> variable .)
    BITWISE_XOR     reduce using rule 28 (primary_expression -> variable .)
    BITWISE_OR      reduce using rule 28 (primary_expression -> variable .)
    COALESCE        reduce using rule 28 (primary_expression -> variable .)
    TERNARY_OPERATION reduce using rule 28 (primary_expression -> variable .)
    AND             reduce using rule 28 (primary_expression -> variable .)
    XOR             reduce using rule 28 (primary_expression -> variable .)
    OR              reduce using rule 28 (primary_expression -> variable .)
    SEMICOLON       reduce using rule 28 (primary_expression -> variable .)
    STRING          reduce using rule 28 (primary_expression -> variable .)
    INCLUDE         reduce using rule 28 (primary_expression -> variable .)
    INCLUDE_ONCE    reduce using rule 28 (primary_expression -> variable .)
    REQUIRE         reduce using rule 28 (primary_expression -> variable .)
    REQUIRE_ONCE    reduce using rule 28 (primary_expression -> variable .)
    PRINT           reduce using rule 28 (primary_expression -> variable .)
    YIELD           reduce using rule 28 (primary_expression -> variable .)
    YIELD_FROM      reduce using rule 28 (primary_expression -> variable .)
    RIGHT_PARENTHESIS reduce using rule 28 (primary_expression -> variable .)
    COLON           reduce using rule 28 (primary_expression -> variable .)
    AS              reduce using rule 28 (primary_expression -> variable .)
    ARROW           reduce using rule 28 (primary_expression -> variable .)
    RIGHT_CBRAC     reduce using rule 28 (primary_expression -> variable .)
    VARIABLE        reduce using rule 28 (primary_expression -> variable .)
    DOUBLE_POINT    reduce using rule 28 (primary_expression -> variable .)
    DOUBLE_ARROW    reduce using rule 28 (primary_expression -> variable .)
    ELLIPSIS        reduce using rule 28 (primary_expression -> variable .)
    ARRAY           reduce using rule 28 (primary_expression -> variable .)
    CALLABLE        reduce using rule 28 (primary_expression -> variable .)
    ITERABLE        reduce using rule 28 (primary_expression -> variable .)
    BOOL            reduce using rule 28 (primary_expression -> variable .)
    FLOAT           reduce using rule 28 (primary_expression -> variable .)
    INT             reduce using rule 28 (primary_expression -> variable .)
    INSTANCEOF      reduce using rule 28 (primary_expression -> variable .)
    DOUBLEPLUS      shift and go to state 317
    DOUBLELESS      shift and go to state 318
    EQUAL           shift and go to state 535
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)

  ! EQUAL           [ reduce using rule 28 (primary_expression -> variable .) ]
  ! ARROW           [ reduce using rule 46 (dereferencable_expression -> variable .) ]


state 375

    (32) primary_expression -> array_creation_expression .
    (48) dereferencable_expression -> array_creation_expression .
    (52) callable_expression -> array_creation_expression .

  ! reduce/reduce conflict for ARROW resolved using rule 32 (primary_expression -> array_creation_expression .)
    DOUBLEASTERISK  reduce using rule 32 (primary_expression -> array_creation_expression .)
    ASTERISK        reduce using rule 32 (primary_expression -> array_creation_expression .)
    DIVIDE          reduce using rule 32 (primary_expression -> array_creation_expression .)
    MODULO          reduce using rule 32 (primary_expression -> array_creation_expression .)
    PLUS            reduce using rule 32 (primary_expression -> array_creation_expression .)
    LESS            reduce using rule 32 (primary_expression -> array_creation_expression .)
    CONCAT          reduce using rule 32 (primary_expression -> array_creation_expression .)
    SL              reduce using rule 32 (primary_expression -> array_creation_expression .)
    SR              reduce using rule 32 (primary_expression -> array_creation_expression .)
    LESS_THAN       reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    SPACESHIP       reduce using rule 32 (primary_expression -> array_creation_expression .)
    EQUAL           reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_NOT_EQUAL    reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_IDENTICAL    reduce using rule 32 (primary_expression -> array_creation_expression .)
    IS_NOT_IDENTICAL reduce using rule 32 (primary_expression -> array_creation_expression .)
    AMPERSAND       reduce using rule 32 (primary_expression -> array_creation_expression .)
    BITWISE_XOR     reduce using rule 32 (primary_expression -> array_creation_expression .)
    BITWISE_OR      reduce using rule 32 (primary_expression -> array_creation_expression .)
    COALESCE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    TERNARY_OPERATION reduce using rule 32 (primary_expression -> array_creation_expression .)
    AND             reduce using rule 32 (primary_expression -> array_creation_expression .)
    XOR             reduce using rule 32 (primary_expression -> array_creation_expression .)
    OR              reduce using rule 32 (primary_expression -> array_creation_expression .)
    SEMICOLON       reduce using rule 32 (primary_expression -> array_creation_expression .)
    STRING          reduce using rule 32 (primary_expression -> array_creation_expression .)
    INCLUDE         reduce using rule 32 (primary_expression -> array_creation_expression .)
    INCLUDE_ONCE    reduce using rule 32 (primary_expression -> array_creation_expression .)
    REQUIRE         reduce using rule 32 (primary_expression -> array_creation_expression .)
    REQUIRE_ONCE    reduce using rule 32 (primary_expression -> array_creation_expression .)
    PRINT           reduce using rule 32 (primary_expression -> array_creation_expression .)
    YIELD           reduce using rule 32 (primary_expression -> array_creation_expression .)
    YIELD_FROM      reduce using rule 32 (primary_expression -> array_creation_expression .)
    RIGHT_PARENTHESIS reduce using rule 32 (primary_expression -> array_creation_expression .)
    COLON           reduce using rule 32 (primary_expression -> array_creation_expression .)
    AS              reduce using rule 32 (primary_expression -> array_creation_expression .)
    ARROW           reduce using rule 32 (primary_expression -> array_creation_expression .)
    RIGHT_CBRAC     reduce using rule 32 (primary_expression -> array_creation_expression .)
    VARIABLE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    DOUBLE_POINT    reduce using rule 32 (primary_expression -> array_creation_expression .)
    DOUBLE_ARROW    reduce using rule 32 (primary_expression -> array_creation_expression .)
    ELLIPSIS        reduce using rule 32 (primary_expression -> array_creation_expression .)
    ARRAY           reduce using rule 32 (primary_expression -> array_creation_expression .)
    CALLABLE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    ITERABLE        reduce using rule 32 (primary_expression -> array_creation_expression .)
    BOOL            reduce using rule 32 (primary_expression -> array_creation_expression .)
    FLOAT           reduce using rule 32 (primary_expression -> array_creation_expression .)
    INT             reduce using rule 32 (primary_expression -> array_creation_expression .)
    INSTANCEOF      reduce using rule 32 (primary_expression -> array_creation_expression .)
    LEFT_CBRAC      reduce using rule 48 (dereferencable_expression -> array_creation_expression .)
    DOUBLE_COLON    reduce using rule 48 (dereferencable_expression -> array_creation_expression .)
    LEFT_PARENTHESIS reduce using rule 52 (callable_expression -> array_creation_expression .)

  ! ARROW           [ reduce using rule 48 (dereferencable_expression -> array_creation_expression .) ]


state 376

    (160) class_constant_access_expression -> scope_resolution_qualifier . DOUBLE_COLON NAME
    (157) scoped_property_access_expression -> scope_resolution_qualifier . DOUBLE_COLON simple_variable
    (158) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier . DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    DOUBLE_COLON    shift and go to state 536


state 377

    (62) constant_access_expression -> qualified_name .
    (162) scope_resolution_qualifier -> qualified_name .
    (135) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> qualified_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    DOUBLEASTERISK  reduce using rule 62 (constant_access_expression -> qualified_name .)
    ASTERISK        reduce using rule 62 (constant_access_expression -> qualified_name .)
    DIVIDE          reduce using rule 62 (constant_access_expression -> qualified_name .)
    MODULO          reduce using rule 62 (constant_access_expression -> qualified_name .)
    PLUS            reduce using rule 62 (constant_access_expression -> qualified_name .)
    LESS            reduce using rule 62 (constant_access_expression -> qualified_name .)
    CONCAT          reduce using rule 62 (constant_access_expression -> qualified_name .)
    SL              reduce using rule 62 (constant_access_expression -> qualified_name .)
    SR              reduce using rule 62 (constant_access_expression -> qualified_name .)
    LESS_THAN       reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_GREATER_OR_EQUAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    SPACESHIP       reduce using rule 62 (constant_access_expression -> qualified_name .)
    EQUAL           reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_NOT_EQUAL    reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_IDENTICAL    reduce using rule 62 (constant_access_expression -> qualified_name .)
    IS_NOT_IDENTICAL reduce using rule 62 (constant_access_expression -> qualified_name .)
    AMPERSAND       reduce using rule 62 (constant_access_expression -> qualified_name .)
    BITWISE_XOR     reduce using rule 62 (constant_access_expression -> qualified_name .)
    BITWISE_OR      reduce using rule 62 (constant_access_expression -> qualified_name .)
    COALESCE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    TERNARY_OPERATION reduce using rule 62 (constant_access_expression -> qualified_name .)
    AND             reduce using rule 62 (constant_access_expression -> qualified_name .)
    XOR             reduce using rule 62 (constant_access_expression -> qualified_name .)
    OR              reduce using rule 62 (constant_access_expression -> qualified_name .)
    SEMICOLON       reduce using rule 62 (constant_access_expression -> qualified_name .)
    STRING          reduce using rule 62 (constant_access_expression -> qualified_name .)
    INCLUDE         reduce using rule 62 (constant_access_expression -> qualified_name .)
    INCLUDE_ONCE    reduce using rule 62 (constant_access_expression -> qualified_name .)
    REQUIRE         reduce using rule 62 (constant_access_expression -> qualified_name .)
    REQUIRE_ONCE    reduce using rule 62 (constant_access_expression -> qualified_name .)
    PRINT           reduce using rule 62 (constant_access_expression -> qualified_name .)
    YIELD           reduce using rule 62 (constant_access_expression -> qualified_name .)
    YIELD_FROM      reduce using rule 62 (constant_access_expression -> qualified_name .)
    RIGHT_PARENTHESIS reduce using rule 62 (constant_access_expression -> qualified_name .)
    COLON           reduce using rule 62 (constant_access_expression -> qualified_name .)
    AS              reduce using rule 62 (constant_access_expression -> qualified_name .)
    ARROW           reduce using rule 62 (constant_access_expression -> qualified_name .)
    RIGHT_CBRAC     reduce using rule 62 (constant_access_expression -> qualified_name .)
    VARIABLE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    DOUBLE_POINT    reduce using rule 62 (constant_access_expression -> qualified_name .)
    DOUBLE_ARROW    reduce using rule 62 (constant_access_expression -> qualified_name .)
    ELLIPSIS        reduce using rule 62 (constant_access_expression -> qualified_name .)
    ARRAY           reduce using rule 62 (constant_access_expression -> qualified_name .)
    CALLABLE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    ITERABLE        reduce using rule 62 (constant_access_expression -> qualified_name .)
    BOOL            reduce using rule 62 (constant_access_expression -> qualified_name .)
    FLOAT           reduce using rule 62 (constant_access_expression -> qualified_name .)
    INT             reduce using rule 62 (constant_access_expression -> qualified_name .)
    INSTANCEOF      reduce using rule 62 (constant_access_expression -> qualified_name .)
    DOUBLE_COLON    reduce using rule 162 (scope_resolution_qualifier -> qualified_name .)
    LEFT_PARENTHESIS shift and go to state 350


state 378

    (65) literal -> string_literal .
    (49) dereferencable_expression -> string_literal .
    (53) callable_expression -> string_literal .

  ! reduce/reduce conflict for ARROW resolved using rule 49 (dereferencable_expression -> string_literal .)
    DOUBLEASTERISK  reduce using rule 65 (literal -> string_literal .)
    ASTERISK        reduce using rule 65 (literal -> string_literal .)
    DIVIDE          reduce using rule 65 (literal -> string_literal .)
    MODULO          reduce using rule 65 (literal -> string_literal .)
    PLUS            reduce using rule 65 (literal -> string_literal .)
    LESS            reduce using rule 65 (literal -> string_literal .)
    CONCAT          reduce using rule 65 (literal -> string_literal .)
    SL              reduce using rule 65 (literal -> string_literal .)
    SR              reduce using rule 65 (literal -> string_literal .)
    LESS_THAN       reduce using rule 65 (literal -> string_literal .)
    IS_SMALLER_OR_EQUAL reduce using rule 65 (literal -> string_literal .)
    IS_GREATER_OR_EQUAL reduce using rule 65 (literal -> string_literal .)
    GREATER_THAN_OR_EQUAL reduce using rule 65 (literal -> string_literal .)
    SPACESHIP       reduce using rule 65 (literal -> string_literal .)
    EQUAL           reduce using rule 65 (literal -> string_literal .)
    IS_NOT_EQUAL    reduce using rule 65 (literal -> string_literal .)
    IS_IDENTICAL    reduce using rule 65 (literal -> string_literal .)
    IS_NOT_IDENTICAL reduce using rule 65 (literal -> string_literal .)
    AMPERSAND       reduce using rule 65 (literal -> string_literal .)
    BITWISE_XOR     reduce using rule 65 (literal -> string_literal .)
    BITWISE_OR      reduce using rule 65 (literal -> string_literal .)
    COALESCE        reduce using rule 65 (literal -> string_literal .)
    TERNARY_OPERATION reduce using rule 65 (literal -> string_literal .)
    AND             reduce using rule 65 (literal -> string_literal .)
    XOR             reduce using rule 65 (literal -> string_literal .)
    OR              reduce using rule 65 (literal -> string_literal .)
    SEMICOLON       reduce using rule 65 (literal -> string_literal .)
    STRING          reduce using rule 65 (literal -> string_literal .)
    INCLUDE         reduce using rule 65 (literal -> string_literal .)
    INCLUDE_ONCE    reduce using rule 65 (literal -> string_literal .)
    REQUIRE         reduce using rule 65 (literal -> string_literal .)
    REQUIRE_ONCE    reduce using rule 65 (literal -> string_literal .)
    PRINT           reduce using rule 65 (literal -> string_literal .)
    YIELD           reduce using rule 65 (literal -> string_literal .)
    YIELD_FROM      reduce using rule 65 (literal -> string_literal .)
    RIGHT_PARENTHESIS reduce using rule 65 (literal -> string_literal .)
    COLON           reduce using rule 65 (literal -> string_literal .)
    AS              reduce using rule 65 (literal -> string_literal .)
    RIGHT_CBRAC     reduce using rule 65 (literal -> string_literal .)
    VARIABLE        reduce using rule 65 (literal -> string_literal .)
    DOUBLE_POINT    reduce using rule 65 (literal -> string_literal .)
    DOUBLE_ARROW    reduce using rule 65 (literal -> string_literal .)
    ELLIPSIS        reduce using rule 65 (literal -> string_literal .)
    ARRAY           reduce using rule 65 (literal -> string_literal .)
    CALLABLE        reduce using rule 65 (literal -> string_literal .)
    ITERABLE        reduce using rule 65 (literal -> string_literal .)
    BOOL            reduce using rule 65 (literal -> string_literal .)
    FLOAT           reduce using rule 65 (literal -> string_literal .)
    INT             reduce using rule 65 (literal -> string_literal .)
    INSTANCEOF      reduce using rule 65 (literal -> string_literal .)
    ARROW           reduce using rule 49 (dereferencable_expression -> string_literal .)
    LEFT_CBRAC      reduce using rule 49 (dereferencable_expression -> string_literal .)
    DOUBLE_COLON    reduce using rule 49 (dereferencable_expression -> string_literal .)
    LEFT_PARENTHESIS reduce using rule 53 (callable_expression -> string_literal .)

  ! ARROW           [ reduce using rule 65 (literal -> string_literal .) ]


state 379

    (144) member_access_expression -> dereferencable_expression . ARROW member_name
    (163) scope_resolution_qualifier -> dereferencable_expression .
    (133) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> dereferencable_expression . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> dereferencable_expression . ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    ARROW           shift and go to state 339
    DOUBLE_COLON    reduce using rule 163 (scope_resolution_qualifier -> dereferencable_expression .)
    LEFT_CBRAC      shift and go to state 340


state 380

    (84) static_opt -> STATIC .
    (166) relative_scope -> STATIC .

    FUNCTION        reduce using rule 84 (static_opt -> STATIC .)
    DOUBLE_COLON    reduce using rule 166 (relative_scope -> STATIC .)


state 381

    (182) instanceof_expression -> instanceof_subj INSTANCEOF . class_type_designator
    (110) class_type_designator -> . qualified_name
    (111) class_type_designator -> . new_variable
    (554) qualified_name -> . name
    (112) new_variable -> . simple_variable
    (113) new_variable -> . new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC
    (114) new_variable -> . new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS
    (115) new_variable -> . new_variable ARROW member_name
    (116) new_variable -> . qualified_name DOUBLE_COLON simple_variable
    (117) new_variable -> . relative_scope DOUBLE_COLON simple_variable
    (118) new_variable -> . new_variable DOUBLE_COLON simple_variable
    (564) name -> . STRING
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC

    STRING          shift and go to state 109
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267

    class_type_designator          shift and go to state 537
    qualified_name                 shift and go to state 390
    new_variable                   shift and go to state 391
    name                           shift and go to state 188
    simple_variable                shift and go to state 392
    relative_scope                 shift and go to state 393

state 382

    (170) exponentiation_expression -> clone_expression DOUBLEASTERISK . exponentiation_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    CLONE           shift and go to state 215
    LEFT_PARENTHESIS shift and go to state 386
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    clone_expression               shift and go to state 211
    exponentiation_expression      shift and go to state 538
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 383

    (175) unary_op_expression -> unary_operator unary_expression .

    ASTERISK        reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    DIVIDE          reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    MODULO          reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    PLUS            reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    LESS            reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    CONCAT          reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    SL              reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    SR              reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    LESS_THAN       reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    SPACESHIP       reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    EQUAL           reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    IS_NOT_EQUAL    reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    IS_IDENTICAL    reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    AMPERSAND       reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    BITWISE_XOR     reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    BITWISE_OR      reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    COALESCE        reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    TERNARY_OPERATION reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    AND             reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    XOR             reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    OR              reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    SEMICOLON       reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    STRING          reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    INCLUDE         reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    INCLUDE_ONCE    reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    REQUIRE         reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    REQUIRE_ONCE    reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    PRINT           reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    YIELD           reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    YIELD_FROM      reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    COLON           reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    AS              reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    ARROW           reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    RIGHT_CBRAC     reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    VARIABLE        reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    DOUBLE_POINT    reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    DOUBLE_ARROW    reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    ELLIPSIS        reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    ARRAY           reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    CALLABLE        reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    ITERABLE        reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    BOOL            reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    FLOAT           reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    INT             reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)
    INSTANCEOF      reduce using rule 175 (unary_op_expression -> unary_operator unary_expression .)


state 384

    (179) error_control_expression -> AT unary_expression .

    ASTERISK        reduce using rule 179 (error_control_expression -> AT unary_expression .)
    DIVIDE          reduce using rule 179 (error_control_expression -> AT unary_expression .)
    MODULO          reduce using rule 179 (error_control_expression -> AT unary_expression .)
    PLUS            reduce using rule 179 (error_control_expression -> AT unary_expression .)
    LESS            reduce using rule 179 (error_control_expression -> AT unary_expression .)
    CONCAT          reduce using rule 179 (error_control_expression -> AT unary_expression .)
    SL              reduce using rule 179 (error_control_expression -> AT unary_expression .)
    SR              reduce using rule 179 (error_control_expression -> AT unary_expression .)
    LESS_THAN       reduce using rule 179 (error_control_expression -> AT unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 179 (error_control_expression -> AT unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 179 (error_control_expression -> AT unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 179 (error_control_expression -> AT unary_expression .)
    SPACESHIP       reduce using rule 179 (error_control_expression -> AT unary_expression .)
    EQUAL           reduce using rule 179 (error_control_expression -> AT unary_expression .)
    IS_NOT_EQUAL    reduce using rule 179 (error_control_expression -> AT unary_expression .)
    IS_IDENTICAL    reduce using rule 179 (error_control_expression -> AT unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 179 (error_control_expression -> AT unary_expression .)
    AMPERSAND       reduce using rule 179 (error_control_expression -> AT unary_expression .)
    BITWISE_XOR     reduce using rule 179 (error_control_expression -> AT unary_expression .)
    BITWISE_OR      reduce using rule 179 (error_control_expression -> AT unary_expression .)
    COALESCE        reduce using rule 179 (error_control_expression -> AT unary_expression .)
    TERNARY_OPERATION reduce using rule 179 (error_control_expression -> AT unary_expression .)
    AND             reduce using rule 179 (error_control_expression -> AT unary_expression .)
    XOR             reduce using rule 179 (error_control_expression -> AT unary_expression .)
    OR              reduce using rule 179 (error_control_expression -> AT unary_expression .)
    SEMICOLON       reduce using rule 179 (error_control_expression -> AT unary_expression .)
    STRING          reduce using rule 179 (error_control_expression -> AT unary_expression .)
    INCLUDE         reduce using rule 179 (error_control_expression -> AT unary_expression .)
    INCLUDE_ONCE    reduce using rule 179 (error_control_expression -> AT unary_expression .)
    REQUIRE         reduce using rule 179 (error_control_expression -> AT unary_expression .)
    REQUIRE_ONCE    reduce using rule 179 (error_control_expression -> AT unary_expression .)
    PRINT           reduce using rule 179 (error_control_expression -> AT unary_expression .)
    YIELD           reduce using rule 179 (error_control_expression -> AT unary_expression .)
    YIELD_FROM      reduce using rule 179 (error_control_expression -> AT unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 179 (error_control_expression -> AT unary_expression .)
    COLON           reduce using rule 179 (error_control_expression -> AT unary_expression .)
    AS              reduce using rule 179 (error_control_expression -> AT unary_expression .)
    ARROW           reduce using rule 179 (error_control_expression -> AT unary_expression .)
    RIGHT_CBRAC     reduce using rule 179 (error_control_expression -> AT unary_expression .)
    VARIABLE        reduce using rule 179 (error_control_expression -> AT unary_expression .)
    DOUBLE_POINT    reduce using rule 179 (error_control_expression -> AT unary_expression .)
    DOUBLE_ARROW    reduce using rule 179 (error_control_expression -> AT unary_expression .)
    ELLIPSIS        reduce using rule 179 (error_control_expression -> AT unary_expression .)
    ARRAY           reduce using rule 179 (error_control_expression -> AT unary_expression .)
    CALLABLE        reduce using rule 179 (error_control_expression -> AT unary_expression .)
    ITERABLE        reduce using rule 179 (error_control_expression -> AT unary_expression .)
    BOOL            reduce using rule 179 (error_control_expression -> AT unary_expression .)
    FLOAT           reduce using rule 179 (error_control_expression -> AT unary_expression .)
    INT             reduce using rule 179 (error_control_expression -> AT unary_expression .)
    INSTANCEOF      reduce using rule 179 (error_control_expression -> AT unary_expression .)


state 385

    (168) clone_expression -> CLONE primary_expression .

    DOUBLEASTERISK  reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    ASTERISK        reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    DIVIDE          reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    MODULO          reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    PLUS            reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    LESS            reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    CONCAT          reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    SL              reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    SR              reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    LESS_THAN       reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    SPACESHIP       reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    EQUAL           reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    IS_NOT_EQUAL    reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    IS_IDENTICAL    reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    IS_NOT_IDENTICAL reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    AMPERSAND       reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    BITWISE_XOR     reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    BITWISE_OR      reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    COALESCE        reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    TERNARY_OPERATION reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    AND             reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    XOR             reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    OR              reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    SEMICOLON       reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    STRING          reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    INCLUDE         reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    INCLUDE_ONCE    reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    REQUIRE         reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    REQUIRE_ONCE    reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    PRINT           reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    YIELD           reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    YIELD_FROM      reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    RIGHT_PARENTHESIS reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    COLON           reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    AS              reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    ARROW           reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    RIGHT_CBRAC     reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    VARIABLE        reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    DOUBLE_POINT    reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    DOUBLE_ARROW    reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    ELLIPSIS        reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    ARRAY           reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    CALLABLE        reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    ITERABLE        reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    BOOL            reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    FLOAT           reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    INT             reduce using rule 168 (clone_expression -> CLONE primary_expression .)
    INSTANCEOF      reduce using rule 168 (clone_expression -> CLONE primary_expression .)


state 386

    (42) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (47) dereferencable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (51) callable_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 534
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 387

    (83) anonymous_function_creation_expression -> static_opt FUNCTION . AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 348
    LEFT_PARENTHESIS reduce using rule 87 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 539

state 388

    (97) object_creation_expression -> NEW class_type_designator . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> NEW class_type_designator . LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> NEW class_type_designator .

    LEFT_PARENTHESIS shift and go to state 540
    DOUBLEASTERISK  reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    ASTERISK        reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    DIVIDE          reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    MODULO          reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    PLUS            reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    LESS            reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    CONCAT          reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    SL              reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    SR              reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    LESS_THAN       reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    IS_SMALLER_OR_EQUAL reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    IS_GREATER_OR_EQUAL reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    GREATER_THAN_OR_EQUAL reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    SPACESHIP       reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    EQUAL           reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    IS_NOT_EQUAL    reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    IS_IDENTICAL    reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    IS_NOT_IDENTICAL reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    AMPERSAND       reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    BITWISE_XOR     reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    BITWISE_OR      reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    COALESCE        reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    TERNARY_OPERATION reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    AND             reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    XOR             reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    OR              reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    SEMICOLON       reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    STRING          reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    INCLUDE         reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    INCLUDE_ONCE    reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    REQUIRE         reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    REQUIRE_ONCE    reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    PRINT           reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    YIELD           reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    YIELD_FROM      reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    RIGHT_PARENTHESIS reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    COLON           reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    AS              reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    ARROW           reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    RIGHT_CBRAC     reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    VARIABLE        reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    DOUBLE_POINT    reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    DOUBLE_ARROW    reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    ELLIPSIS        reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    ARRAY           reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    CALLABLE        reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    ITERABLE        reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    BOOL            reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    FLOAT           reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    INT             reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)
    INSTANCEOF      reduce using rule 99 (object_creation_expression -> NEW class_type_designator .)


state 389

    (100) object_creation_expression -> NEW CLASS . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> NEW CLASS . class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (104) class_base_clause_opt -> . class_base_clause
    (105) class_base_clause_opt -> .
    (453) class_base_clause -> . EXTENDS qualified_name

    LEFT_PARENTHESIS shift and go to state 541
    IMPLEMENTS      reduce using rule 105 (class_base_clause_opt -> .)
    LEFT_CBRAC      reduce using rule 105 (class_base_clause_opt -> .)
    EXTENDS         shift and go to state 420

    class_base_clause_opt          shift and go to state 542
    class_base_clause              shift and go to state 543

state 390

    (110) class_type_designator -> qualified_name .
    (116) new_variable -> qualified_name . DOUBLE_COLON simple_variable

    LEFT_PARENTHESIS reduce using rule 110 (class_type_designator -> qualified_name .)
    DOUBLEASTERISK  reduce using rule 110 (class_type_designator -> qualified_name .)
    ASTERISK        reduce using rule 110 (class_type_designator -> qualified_name .)
    DIVIDE          reduce using rule 110 (class_type_designator -> qualified_name .)
    MODULO          reduce using rule 110 (class_type_designator -> qualified_name .)
    PLUS            reduce using rule 110 (class_type_designator -> qualified_name .)
    LESS            reduce using rule 110 (class_type_designator -> qualified_name .)
    CONCAT          reduce using rule 110 (class_type_designator -> qualified_name .)
    SL              reduce using rule 110 (class_type_designator -> qualified_name .)
    SR              reduce using rule 110 (class_type_designator -> qualified_name .)
    LESS_THAN       reduce using rule 110 (class_type_designator -> qualified_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 110 (class_type_designator -> qualified_name .)
    IS_GREATER_OR_EQUAL reduce using rule 110 (class_type_designator -> qualified_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 110 (class_type_designator -> qualified_name .)
    SPACESHIP       reduce using rule 110 (class_type_designator -> qualified_name .)
    EQUAL           reduce using rule 110 (class_type_designator -> qualified_name .)
    IS_NOT_EQUAL    reduce using rule 110 (class_type_designator -> qualified_name .)
    IS_IDENTICAL    reduce using rule 110 (class_type_designator -> qualified_name .)
    IS_NOT_IDENTICAL reduce using rule 110 (class_type_designator -> qualified_name .)
    AMPERSAND       reduce using rule 110 (class_type_designator -> qualified_name .)
    BITWISE_XOR     reduce using rule 110 (class_type_designator -> qualified_name .)
    BITWISE_OR      reduce using rule 110 (class_type_designator -> qualified_name .)
    COALESCE        reduce using rule 110 (class_type_designator -> qualified_name .)
    TERNARY_OPERATION reduce using rule 110 (class_type_designator -> qualified_name .)
    AND             reduce using rule 110 (class_type_designator -> qualified_name .)
    XOR             reduce using rule 110 (class_type_designator -> qualified_name .)
    OR              reduce using rule 110 (class_type_designator -> qualified_name .)
    SEMICOLON       reduce using rule 110 (class_type_designator -> qualified_name .)
    STRING          reduce using rule 110 (class_type_designator -> qualified_name .)
    INCLUDE         reduce using rule 110 (class_type_designator -> qualified_name .)
    INCLUDE_ONCE    reduce using rule 110 (class_type_designator -> qualified_name .)
    REQUIRE         reduce using rule 110 (class_type_designator -> qualified_name .)
    REQUIRE_ONCE    reduce using rule 110 (class_type_designator -> qualified_name .)
    PRINT           reduce using rule 110 (class_type_designator -> qualified_name .)
    YIELD           reduce using rule 110 (class_type_designator -> qualified_name .)
    YIELD_FROM      reduce using rule 110 (class_type_designator -> qualified_name .)
    RIGHT_PARENTHESIS reduce using rule 110 (class_type_designator -> qualified_name .)
    COLON           reduce using rule 110 (class_type_designator -> qualified_name .)
    AS              reduce using rule 110 (class_type_designator -> qualified_name .)
    ARROW           reduce using rule 110 (class_type_designator -> qualified_name .)
    RIGHT_CBRAC     reduce using rule 110 (class_type_designator -> qualified_name .)
    VARIABLE        reduce using rule 110 (class_type_designator -> qualified_name .)
    DOUBLE_POINT    reduce using rule 110 (class_type_designator -> qualified_name .)
    DOUBLE_ARROW    reduce using rule 110 (class_type_designator -> qualified_name .)
    ELLIPSIS        reduce using rule 110 (class_type_designator -> qualified_name .)
    ARRAY           reduce using rule 110 (class_type_designator -> qualified_name .)
    CALLABLE        reduce using rule 110 (class_type_designator -> qualified_name .)
    ITERABLE        reduce using rule 110 (class_type_designator -> qualified_name .)
    BOOL            reduce using rule 110 (class_type_designator -> qualified_name .)
    FLOAT           reduce using rule 110 (class_type_designator -> qualified_name .)
    INT             reduce using rule 110 (class_type_designator -> qualified_name .)
    INSTANCEOF      reduce using rule 110 (class_type_designator -> qualified_name .)
    DOUBLE_COLON    shift and go to state 544


state 391

    (111) class_type_designator -> new_variable .
    (113) new_variable -> new_variable . LEFT_CBRAC expression_opt RIGHT_CBRAC
    (114) new_variable -> new_variable . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (115) new_variable -> new_variable . ARROW member_name
    (118) new_variable -> new_variable . DOUBLE_COLON simple_variable

  ! shift/reduce conflict for ARROW resolved as shift
    LEFT_PARENTHESIS reduce using rule 111 (class_type_designator -> new_variable .)
    DOUBLEASTERISK  reduce using rule 111 (class_type_designator -> new_variable .)
    ASTERISK        reduce using rule 111 (class_type_designator -> new_variable .)
    DIVIDE          reduce using rule 111 (class_type_designator -> new_variable .)
    MODULO          reduce using rule 111 (class_type_designator -> new_variable .)
    PLUS            reduce using rule 111 (class_type_designator -> new_variable .)
    LESS            reduce using rule 111 (class_type_designator -> new_variable .)
    CONCAT          reduce using rule 111 (class_type_designator -> new_variable .)
    SL              reduce using rule 111 (class_type_designator -> new_variable .)
    SR              reduce using rule 111 (class_type_designator -> new_variable .)
    LESS_THAN       reduce using rule 111 (class_type_designator -> new_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 111 (class_type_designator -> new_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 111 (class_type_designator -> new_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 111 (class_type_designator -> new_variable .)
    SPACESHIP       reduce using rule 111 (class_type_designator -> new_variable .)
    EQUAL           reduce using rule 111 (class_type_designator -> new_variable .)
    IS_NOT_EQUAL    reduce using rule 111 (class_type_designator -> new_variable .)
    IS_IDENTICAL    reduce using rule 111 (class_type_designator -> new_variable .)
    IS_NOT_IDENTICAL reduce using rule 111 (class_type_designator -> new_variable .)
    AMPERSAND       reduce using rule 111 (class_type_designator -> new_variable .)
    BITWISE_XOR     reduce using rule 111 (class_type_designator -> new_variable .)
    BITWISE_OR      reduce using rule 111 (class_type_designator -> new_variable .)
    COALESCE        reduce using rule 111 (class_type_designator -> new_variable .)
    TERNARY_OPERATION reduce using rule 111 (class_type_designator -> new_variable .)
    AND             reduce using rule 111 (class_type_designator -> new_variable .)
    XOR             reduce using rule 111 (class_type_designator -> new_variable .)
    OR              reduce using rule 111 (class_type_designator -> new_variable .)
    SEMICOLON       reduce using rule 111 (class_type_designator -> new_variable .)
    STRING          reduce using rule 111 (class_type_designator -> new_variable .)
    INCLUDE         reduce using rule 111 (class_type_designator -> new_variable .)
    INCLUDE_ONCE    reduce using rule 111 (class_type_designator -> new_variable .)
    REQUIRE         reduce using rule 111 (class_type_designator -> new_variable .)
    REQUIRE_ONCE    reduce using rule 111 (class_type_designator -> new_variable .)
    PRINT           reduce using rule 111 (class_type_designator -> new_variable .)
    YIELD           reduce using rule 111 (class_type_designator -> new_variable .)
    YIELD_FROM      reduce using rule 111 (class_type_designator -> new_variable .)
    RIGHT_PARENTHESIS reduce using rule 111 (class_type_designator -> new_variable .)
    COLON           reduce using rule 111 (class_type_designator -> new_variable .)
    AS              reduce using rule 111 (class_type_designator -> new_variable .)
    RIGHT_CBRAC     reduce using rule 111 (class_type_designator -> new_variable .)
    VARIABLE        reduce using rule 111 (class_type_designator -> new_variable .)
    DOUBLE_POINT    reduce using rule 111 (class_type_designator -> new_variable .)
    DOUBLE_ARROW    reduce using rule 111 (class_type_designator -> new_variable .)
    ELLIPSIS        reduce using rule 111 (class_type_designator -> new_variable .)
    ARRAY           reduce using rule 111 (class_type_designator -> new_variable .)
    CALLABLE        reduce using rule 111 (class_type_designator -> new_variable .)
    ITERABLE        reduce using rule 111 (class_type_designator -> new_variable .)
    BOOL            reduce using rule 111 (class_type_designator -> new_variable .)
    FLOAT           reduce using rule 111 (class_type_designator -> new_variable .)
    INT             reduce using rule 111 (class_type_designator -> new_variable .)
    INSTANCEOF      reduce using rule 111 (class_type_designator -> new_variable .)
    LEFT_CBRAC      shift and go to state 545
    ARROW           shift and go to state 546
    DOUBLE_COLON    shift and go to state 547

  ! ARROW           [ reduce using rule 111 (class_type_designator -> new_variable .) ]


state 392

    (112) new_variable -> simple_variable .

    LEFT_CBRAC      reduce using rule 112 (new_variable -> simple_variable .)
    ARROW           reduce using rule 112 (new_variable -> simple_variable .)
    DOUBLE_COLON    reduce using rule 112 (new_variable -> simple_variable .)
    LEFT_PARENTHESIS reduce using rule 112 (new_variable -> simple_variable .)
    DOUBLEASTERISK  reduce using rule 112 (new_variable -> simple_variable .)
    ASTERISK        reduce using rule 112 (new_variable -> simple_variable .)
    DIVIDE          reduce using rule 112 (new_variable -> simple_variable .)
    MODULO          reduce using rule 112 (new_variable -> simple_variable .)
    PLUS            reduce using rule 112 (new_variable -> simple_variable .)
    LESS            reduce using rule 112 (new_variable -> simple_variable .)
    CONCAT          reduce using rule 112 (new_variable -> simple_variable .)
    SL              reduce using rule 112 (new_variable -> simple_variable .)
    SR              reduce using rule 112 (new_variable -> simple_variable .)
    LESS_THAN       reduce using rule 112 (new_variable -> simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 112 (new_variable -> simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 112 (new_variable -> simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 112 (new_variable -> simple_variable .)
    SPACESHIP       reduce using rule 112 (new_variable -> simple_variable .)
    EQUAL           reduce using rule 112 (new_variable -> simple_variable .)
    IS_NOT_EQUAL    reduce using rule 112 (new_variable -> simple_variable .)
    IS_IDENTICAL    reduce using rule 112 (new_variable -> simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 112 (new_variable -> simple_variable .)
    AMPERSAND       reduce using rule 112 (new_variable -> simple_variable .)
    BITWISE_XOR     reduce using rule 112 (new_variable -> simple_variable .)
    BITWISE_OR      reduce using rule 112 (new_variable -> simple_variable .)
    COALESCE        reduce using rule 112 (new_variable -> simple_variable .)
    TERNARY_OPERATION reduce using rule 112 (new_variable -> simple_variable .)
    AND             reduce using rule 112 (new_variable -> simple_variable .)
    XOR             reduce using rule 112 (new_variable -> simple_variable .)
    OR              reduce using rule 112 (new_variable -> simple_variable .)
    SEMICOLON       reduce using rule 112 (new_variable -> simple_variable .)
    STRING          reduce using rule 112 (new_variable -> simple_variable .)
    INCLUDE         reduce using rule 112 (new_variable -> simple_variable .)
    INCLUDE_ONCE    reduce using rule 112 (new_variable -> simple_variable .)
    REQUIRE         reduce using rule 112 (new_variable -> simple_variable .)
    REQUIRE_ONCE    reduce using rule 112 (new_variable -> simple_variable .)
    PRINT           reduce using rule 112 (new_variable -> simple_variable .)
    YIELD           reduce using rule 112 (new_variable -> simple_variable .)
    YIELD_FROM      reduce using rule 112 (new_variable -> simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 112 (new_variable -> simple_variable .)
    COLON           reduce using rule 112 (new_variable -> simple_variable .)
    AS              reduce using rule 112 (new_variable -> simple_variable .)
    RIGHT_CBRAC     reduce using rule 112 (new_variable -> simple_variable .)
    VARIABLE        reduce using rule 112 (new_variable -> simple_variable .)
    DOUBLE_POINT    reduce using rule 112 (new_variable -> simple_variable .)
    DOUBLE_ARROW    reduce using rule 112 (new_variable -> simple_variable .)
    ELLIPSIS        reduce using rule 112 (new_variable -> simple_variable .)
    ARRAY           reduce using rule 112 (new_variable -> simple_variable .)
    CALLABLE        reduce using rule 112 (new_variable -> simple_variable .)
    ITERABLE        reduce using rule 112 (new_variable -> simple_variable .)
    BOOL            reduce using rule 112 (new_variable -> simple_variable .)
    FLOAT           reduce using rule 112 (new_variable -> simple_variable .)
    INT             reduce using rule 112 (new_variable -> simple_variable .)
    INSTANCEOF      reduce using rule 112 (new_variable -> simple_variable .)


state 393

    (117) new_variable -> relative_scope . DOUBLE_COLON simple_variable

    DOUBLE_COLON    shift and go to state 548


state 394

    (152) prefix_increment_expression -> DOUBLEPLUS variable .
    (46) dereferencable_expression -> variable .

  ! reduce/reduce conflict for ARROW resolved using rule 46 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ASTERISK        reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    DIVIDE          reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    MODULO          reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    PLUS            reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    LESS            reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    CONCAT          reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SL              reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SR              reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    LESS_THAN       reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_GREATER_OR_EQUAL reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SPACESHIP       reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    EQUAL           reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_NOT_EQUAL    reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_IDENTICAL    reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    IS_NOT_IDENTICAL reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    AMPERSAND       reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    BITWISE_XOR     reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    BITWISE_OR      reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    COALESCE        reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    TERNARY_OPERATION reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    AND             reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    XOR             reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    OR              reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    SEMICOLON       reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    STRING          reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INCLUDE         reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INCLUDE_ONCE    reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    REQUIRE         reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    REQUIRE_ONCE    reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    PRINT           reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    YIELD           reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    YIELD_FROM      reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    RIGHT_PARENTHESIS reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    COLON           reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    AS              reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    RIGHT_CBRAC     reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    VARIABLE        reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    DOUBLE_POINT    reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    DOUBLE_ARROW    reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ELLIPSIS        reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ARRAY           reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    CALLABLE        reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ITERABLE        reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    BOOL            reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    FLOAT           reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INT             reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    INSTANCEOF      reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .)
    ARROW           reduce using rule 46 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)

  ! ARROW           [ reduce using rule 152 (prefix_increment_expression -> DOUBLEPLUS variable .) ]


state 395

    (153) prefix_decrement_expression -> DOUBLELESS variable .
    (46) dereferencable_expression -> variable .

  ! reduce/reduce conflict for ARROW resolved using rule 46 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    ASTERISK        reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    DIVIDE          reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    MODULO          reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    PLUS            reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    LESS            reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    CONCAT          reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    SL              reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    SR              reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    LESS_THAN       reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_GREATER_OR_EQUAL reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    SPACESHIP       reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    EQUAL           reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_NOT_EQUAL    reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_IDENTICAL    reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    IS_NOT_IDENTICAL reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    AMPERSAND       reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    BITWISE_XOR     reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    BITWISE_OR      reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    COALESCE        reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    TERNARY_OPERATION reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    AND             reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    XOR             reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    OR              reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    SEMICOLON       reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    STRING          reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    INCLUDE         reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    INCLUDE_ONCE    reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    REQUIRE         reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    REQUIRE_ONCE    reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    PRINT           reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    YIELD           reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    YIELD_FROM      reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    RIGHT_PARENTHESIS reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    COLON           reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    AS              reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    RIGHT_CBRAC     reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    VARIABLE        reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    DOUBLE_POINT    reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    DOUBLE_ARROW    reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    ELLIPSIS        reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    ARRAY           reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    CALLABLE        reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    ITERABLE        reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    BOOL            reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    FLOAT           reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    INT             reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    INSTANCEOF      reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .)
    ARROW           reduce using rule 46 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)

  ! ARROW           [ reduce using rule 153 (prefix_decrement_expression -> DOUBLELESS variable .) ]


state 396

    (154) shell_command_expression -> BACKTICK dq_char_sequence_opt . BACKTICK

    BACKTICK        shift and go to state 549


state 397

    (155) dq_char_sequence_opt -> DQ_CHAR_SEQUENCE .

    BACKTICK        reduce using rule 155 (dq_char_sequence_opt -> DQ_CHAR_SEQUENCE .)


state 398

    (73) empty_intrinsic -> EMPTY LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 550
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 399

    (74) eval_intrinsic -> EVAL LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 551
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 400

    (76) exit_intrinsic -> EXIT LEFT_PARENTHESIS . expression_opt RIGHT_PARENTHESIS
    (119) expression_opt -> . expression
    (120) expression_opt -> .
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 120 (expression_opt -> .)
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression_opt                 shift and go to state 552
    expression                     shift and go to state 553
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 401

    (78) exit_intrinsic -> DIE LEFT_PARENTHESIS . expression_opt RIGHT_PARENTHESIS
    (119) expression_opt -> . expression
    (120) expression_opt -> .
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 120 (expression_opt -> .)
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression_opt                 shift and go to state 554
    expression                     shift and go to state 553
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 402

    (79) isset_intrinsic -> ISSET LEFT_PARENTHESIS . variable_list_opt RIGHT_PARENTHESIS
    (80) variable_list_opt -> . variable_list
    (81) variable_list -> . variable
    (82) variable_list -> . variable_list variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable_list_opt              shift and go to state 555
    variable_list                  shift and go to state 556
    variable                       shift and go to state 262
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 403

    (393) try_statement -> TRY compound_statement catch_clauses finally_clause .

    LEFT_CBRAC      reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    SEMICOLON       reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    TRY             reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    DECLARE         reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ECHO            reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    UNSET           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CONST           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    INTERFACE       reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    TRAIT           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    NAMESPACE       reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    USE             reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    GLOBAL          reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    STATIC          reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    STRING          reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    IF              reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    SWITCH          reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    WHILE           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    DO              reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FOR             reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FOREACH         reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    GOTO            reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CONTINUE        reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    BREAK           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    RETURN          reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    THROW           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FUNCTION        reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    INCLUDE         reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    INCLUDE_ONCE    reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    REQUIRE         reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    REQUIRE_ONCE    reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ABSTRACT        reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    FINAL           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    PRINT           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    YIELD           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    YIELD_FROM      reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CLASS           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CLOSE_TAG       reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    WHITESPACE      reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    $end            reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    OPEN_TAG        reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    OPEN_TAG_WITH_ECHO reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    RIGHT_CBRAC     reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ELSE            reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ELSEIF          reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDDECLARE      reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDWHILE        reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDFOR          reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    CASE            reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    DEFAULT         reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDSWITCH       reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDFOREACH      reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)
    ENDIF           reduce using rule 393 (try_statement -> TRY compound_statement catch_clauses finally_clause .)


state 404

    (395) catch_clauses -> catch_clauses catch_clause .

    FINALLY         reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    CATCH           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    LEFT_CBRAC      reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    SEMICOLON       reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    TRY             reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    DECLARE         reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ECHO            reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    UNSET           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    CONST           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    INTERFACE       reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    TRAIT           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    NAMESPACE       reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    USE             reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    GLOBAL          reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    STATIC          reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    STRING          reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    IF              reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    SWITCH          reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    WHILE           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    DO              reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    FOR             reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    FOREACH         reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    GOTO            reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    CONTINUE        reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    BREAK           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    RETURN          reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    THROW           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    FUNCTION        reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    INCLUDE         reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    INCLUDE_ONCE    reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    REQUIRE         reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    REQUIRE_ONCE    reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ABSTRACT        reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    FINAL           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    PRINT           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    YIELD           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    YIELD_FROM      reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    CLASS           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    CLOSE_TAG       reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    WHITESPACE      reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    $end            reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    OPEN_TAG        reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    OPEN_TAG_WITH_ECHO reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    RIGHT_CBRAC     reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ELSE            reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ELSEIF          reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ENDDECLARE      reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ENDWHILE        reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ENDFOR          reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    CASE            reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    DEFAULT         reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ENDSWITCH       reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ENDFOREACH      reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)
    ENDIF           reduce using rule 395 (catch_clauses -> catch_clauses catch_clause .)


state 405

    (399) finally_clause -> FINALLY compound_statement .

    LEFT_CBRAC      reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    SEMICOLON       reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    TRY             reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    DECLARE         reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ECHO            reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    UNSET           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    CONST           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    INTERFACE       reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    TRAIT           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    NAMESPACE       reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    USE             reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    GLOBAL          reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    STATIC          reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    STRING          reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    IF              reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    SWITCH          reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    WHILE           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    DO              reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    FOR             reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    FOREACH         reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    GOTO            reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    CONTINUE        reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    BREAK           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    RETURN          reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    THROW           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    FUNCTION        reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    INCLUDE         reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    INCLUDE_ONCE    reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    REQUIRE         reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    REQUIRE_ONCE    reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ABSTRACT        reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    FINAL           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    PRINT           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    YIELD           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    YIELD_FROM      reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    CLASS           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    CLOSE_TAG       reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    WHITESPACE      reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    $end            reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    OPEN_TAG        reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    RIGHT_CBRAC     reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ELSE            reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ELSEIF          reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ENDDECLARE      reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ENDWHILE        reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ENDFOR          reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    CASE            reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    DEFAULT         reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ENDSWITCH       reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ENDFOREACH      reduce using rule 399 (finally_clause -> FINALLY compound_statement .)
    ENDIF           reduce using rule 399 (finally_clause -> FINALLY compound_statement .)


state 406

    (396) catch_clause -> CATCH LEFT_PARENTHESIS . catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement
    (397) catch_name_list -> . qualified_name
    (398) catch_name_list -> . catch_name_list
    (554) qualified_name -> . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    catch_name_list                shift and go to state 557
    qualified_name                 shift and go to state 558
    name                           shift and go to state 188

state 407

    (400) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS . statement
    (401) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS . SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 560
    SEMICOLON       shift and go to state 561
    LEFT_CBRAC      shift and go to state 32
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 559
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 408

    (403) declare_directive -> TICKS EQUALS . literal
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING

    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 564

    literal                        shift and go to state 562
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 563

state 409

    (404) declare_directive -> ENCODING EQUALS . literal
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING

    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 564

    literal                        shift and go to state 565
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 563

state 410

    (405) declare_directive -> STRICT_TYPES EQUALS . literal
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING

    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 564

    literal                        shift and go to state 566
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 563

state 411

    (47) dereferencable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (51) callable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 567


state 412

    (409) unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 568


state 413

    (410) unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 569


state 414

    (82) variable_list -> variable_list variable .
    (46) dereferencable_expression -> variable .

  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 46 (dereferencable_expression -> variable .)
    COLON           reduce using rule 82 (variable_list -> variable_list variable .)
    RIGHT_PARENTHESIS reduce using rule 82 (variable_list -> variable_list variable .)
    VARIABLE        reduce using rule 82 (variable_list -> variable_list variable .)
    DOLLAR          reduce using rule 82 (variable_list -> variable_list variable .)
    LEFT_PARENTHESIS reduce using rule 82 (variable_list -> variable_list variable .)
    SELF            reduce using rule 82 (variable_list -> variable_list variable .)
    PARENT          reduce using rule 82 (variable_list -> variable_list variable .)
    STATIC          reduce using rule 82 (variable_list -> variable_list variable .)
    ARRAY           reduce using rule 82 (variable_list -> variable_list variable .)
    STRING          reduce using rule 82 (variable_list -> variable_list variable .)
    ARROW           reduce using rule 46 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)

  ! LEFT_CBRAC      [ reduce using rule 82 (variable_list -> variable_list variable .) ]


state 415

    (157) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON . simple_variable
    (158) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (145) member_name -> . NAME
    (146) member_name -> . simple_variable
    (147) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    NAME            shift and go to state 495
    LEFT_CBRAC      shift and go to state 493

    simple_variable                shift and go to state 490
    member_name                    shift and go to state 491

state 416

    (468) const_element -> name EQUAL constant_expression .

    SEMICOLON       reduce using rule 468 (const_element -> name EQUAL constant_expression .)
    STRING          reduce using rule 468 (const_element -> name EQUAL constant_expression .)


state 417

    (278) constant_expression -> expression .

    SEMICOLON       reduce using rule 278 (constant_expression -> expression .)
    STRING          reduce using rule 278 (constant_expression -> expression .)
    VARIABLE        reduce using rule 278 (constant_expression -> expression .)
    TERNARY_OPERATION reduce using rule 278 (constant_expression -> expression .)
    AMPERSAND       reduce using rule 278 (constant_expression -> expression .)
    ELLIPSIS        reduce using rule 278 (constant_expression -> expression .)
    ARRAY           reduce using rule 278 (constant_expression -> expression .)
    CALLABLE        reduce using rule 278 (constant_expression -> expression .)
    ITERABLE        reduce using rule 278 (constant_expression -> expression .)
    BOOL            reduce using rule 278 (constant_expression -> expression .)
    FLOAT           reduce using rule 278 (constant_expression -> expression .)
    INT             reduce using rule 278 (constant_expression -> expression .)
    RIGHT_PARENTHESIS reduce using rule 278 (constant_expression -> expression .)


state 418

    (442) class_declaration -> class_modifieropt CLASS name class_base_clauseopt . class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (447) class_interface_clauseopt -> . class_interface_clause
    (448) class_interface_clauseopt -> .
    (454) class_interface_clause -> . IMPLEMENTS qualified_name
    (455) class_interface_clause -> . class_interface_clause qualified_name

    LEFT_CBRAC      reduce using rule 448 (class_interface_clauseopt -> .)
    IMPLEMENTS      shift and go to state 572

    class_interface_clauseopt      shift and go to state 570
    class_interface_clause         shift and go to state 571

state 419

    (445) class_base_clauseopt -> class_base_clause .

    IMPLEMENTS      reduce using rule 445 (class_base_clauseopt -> class_base_clause .)
    LEFT_CBRAC      reduce using rule 445 (class_base_clauseopt -> class_base_clause .)


state 420

    (453) class_base_clause -> EXTENDS . qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    qualified_name                 shift and go to state 573
    name                           shift and go to state 188

state 421

    (498) interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC . interface_member_declarationsopt RIGHT_CBRAC
    (501) interface_member_declarationsopt -> . interface_member_declarations
    (502) interface_member_declarationsopt -> .
    (505) interface_member_declarations -> . interface_member_declaration
    (506) interface_member_declarations -> . interface_member_declarations interface_member_declaration
    (507) interface_member_declaration -> . class_const_declaration
    (508) interface_member_declaration -> . method_declaration
    (465) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (478) static_modifier -> . STATIC
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 502 (interface_member_declarationsopt -> .)
    CONST           reduce using rule 536 (visibility_modifier_opt -> .)
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    interface_member_declarationsopt shift and go to state 574
    interface_member_declarations  shift and go to state 575
    interface_member_declaration   shift and go to state 576
    class_const_declaration        shift and go to state 577
    method_declaration             shift and go to state 578
    visibility_modifier_opt        shift and go to state 579
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 580
    visibility_modifier            shift and go to state 581
    method_modifier                shift and go to state 439
    static_modifier                shift and go to state 582
    class_modifier                 shift and go to state 445

state 422

    (504) interface_base_clause -> interface_base_clause qualified_name .

    STRING          reduce using rule 504 (interface_base_clause -> interface_base_clause qualified_name .)
    LEFT_CBRAC      reduce using rule 504 (interface_base_clause -> interface_base_clause qualified_name .)


state 423

    (503) interface_base_clause -> EXTENDS qualified_name .

    STRING          reduce using rule 503 (interface_base_clause -> EXTENDS qualified_name .)
    LEFT_CBRAC      reduce using rule 503 (interface_base_clause -> EXTENDS qualified_name .)


state 424

    (509) trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 583


state 425

    (510) trait_member_declarationsopt -> trait_member_declarations .
    (513) trait_member_declarations -> trait_member_declarations . trait_member_declaration
    (514) trait_member_declaration -> . property_declaration
    (515) trait_member_declaration -> . method_declaration
    (516) trait_member_declaration -> . constructor_declaration
    (517) trait_member_declaration -> . destructor_declaration
    (518) trait_member_declaration -> . trait_use_clauses
    (469) property_declaration -> . property_modifier property_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (494) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (519) trait_use_clauses -> . trait_use_clause
    (520) trait_use_clauses -> . trait_use_clauses trait_use_clause
    (470) property_modifier -> . VAR
    (471) property_modifier -> . visibility_modifier static_modifieropt
    (472) property_modifier -> . static_modifier visibility_modifier_opt
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 510 (trait_member_declarationsopt -> trait_member_declarations .)
    VAR             shift and go to state 436
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    USE             shift and go to state 440
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    trait_member_declaration       shift and go to state 584
    property_declaration           shift and go to state 427
    method_declaration             shift and go to state 428
    constructor_declaration        shift and go to state 429
    destructor_declaration         shift and go to state 430
    trait_use_clauses              shift and go to state 431
    property_modifier              shift and go to state 432
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 434
    trait_use_clause               shift and go to state 435
    visibility_modifier            shift and go to state 437
    static_modifier                shift and go to state 438
    method_modifier                shift and go to state 439
    class_modifier                 shift and go to state 445

state 426

    (512) trait_member_declarations -> trait_member_declaration .

    VAR             reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    USE             reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    PUBLIC          reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    PROTECTED       reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    PRIVATE         reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    STATIC          reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    ABSTRACT        reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    FINAL           reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    FUNCTION        reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)
    RIGHT_CBRAC     reduce using rule 512 (trait_member_declarations -> trait_member_declaration .)


state 427

    (514) trait_member_declaration -> property_declaration .

    VAR             reduce using rule 514 (trait_member_declaration -> property_declaration .)
    USE             reduce using rule 514 (trait_member_declaration -> property_declaration .)
    PUBLIC          reduce using rule 514 (trait_member_declaration -> property_declaration .)
    PROTECTED       reduce using rule 514 (trait_member_declaration -> property_declaration .)
    PRIVATE         reduce using rule 514 (trait_member_declaration -> property_declaration .)
    STATIC          reduce using rule 514 (trait_member_declaration -> property_declaration .)
    ABSTRACT        reduce using rule 514 (trait_member_declaration -> property_declaration .)
    FINAL           reduce using rule 514 (trait_member_declaration -> property_declaration .)
    FUNCTION        reduce using rule 514 (trait_member_declaration -> property_declaration .)
    RIGHT_CBRAC     reduce using rule 514 (trait_member_declaration -> property_declaration .)


state 428

    (515) trait_member_declaration -> method_declaration .

    VAR             reduce using rule 515 (trait_member_declaration -> method_declaration .)
    USE             reduce using rule 515 (trait_member_declaration -> method_declaration .)
    PUBLIC          reduce using rule 515 (trait_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 515 (trait_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 515 (trait_member_declaration -> method_declaration .)
    STATIC          reduce using rule 515 (trait_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 515 (trait_member_declaration -> method_declaration .)
    FINAL           reduce using rule 515 (trait_member_declaration -> method_declaration .)
    FUNCTION        reduce using rule 515 (trait_member_declaration -> method_declaration .)
    RIGHT_CBRAC     reduce using rule 515 (trait_member_declaration -> method_declaration .)


state 429

    (516) trait_member_declaration -> constructor_declaration .

    VAR             reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    USE             reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    PUBLIC          reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    PROTECTED       reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    PRIVATE         reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    STATIC          reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    ABSTRACT        reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    FINAL           reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 516 (trait_member_declaration -> constructor_declaration .)
    RIGHT_CBRAC     reduce using rule 516 (trait_member_declaration -> constructor_declaration .)


state 430

    (517) trait_member_declaration -> destructor_declaration .

    VAR             reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    USE             reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    PUBLIC          reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    PROTECTED       reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    PRIVATE         reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    STATIC          reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    ABSTRACT        reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    FINAL           reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 517 (trait_member_declaration -> destructor_declaration .)
    RIGHT_CBRAC     reduce using rule 517 (trait_member_declaration -> destructor_declaration .)


state 431

    (518) trait_member_declaration -> trait_use_clauses .
    (520) trait_use_clauses -> trait_use_clauses . trait_use_clause
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification

  ! shift/reduce conflict for USE resolved as shift
    VAR             reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    PUBLIC          reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    PROTECTED       reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    PRIVATE         reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    STATIC          reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    ABSTRACT        reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    FINAL           reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    FUNCTION        reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    RIGHT_CBRAC     reduce using rule 518 (trait_member_declaration -> trait_use_clauses .)
    USE             shift and go to state 440

  ! USE             [ reduce using rule 518 (trait_member_declaration -> trait_use_clauses .) ]

    trait_use_clause               shift and go to state 585

state 432

    (469) property_declaration -> property_modifier . property_elements SEMICOLON
    (479) property_elements -> . property_element
    (480) property_elements -> . property_elements property_element
    (481) property_element -> . VARIABLE property_initializeropt SEMICOLON

    VARIABLE        shift and go to state 588

    property_elements              shift and go to state 586
    property_element               shift and go to state 587

state 433

    (485) method_declaration -> method_modifiersopt . function_definition
    (411) function_definition -> . function_definition_header compound_statement
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt

    FUNCTION        shift and go to state 77

    function_definition            shift and go to state 589
    function_definition_header     shift and go to state 52

state 434

    (486) method_declaration -> method_modifiers . function_definition_header SEMICOLON
    (494) constructor_declaration -> method_modifiers . FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> method_modifiers . FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (487) method_modifiersopt -> method_modifiers .
    (490) method_modifiers -> method_modifiers . method_modifier
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 591
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

  ! FUNCTION        [ reduce using rule 487 (method_modifiersopt -> method_modifiers .) ]

    function_definition_header     shift and go to state 590
    method_modifier                shift and go to state 592
    visibility_modifier            shift and go to state 593
    static_modifier                shift and go to state 582
    class_modifier                 shift and go to state 445

state 435

    (519) trait_use_clauses -> trait_use_clause .

    USE             reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    VAR             reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    PUBLIC          reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    PROTECTED       reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    PRIVATE         reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    STATIC          reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    ABSTRACT        reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    FINAL           reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    FUNCTION        reduce using rule 519 (trait_use_clauses -> trait_use_clause .)
    RIGHT_CBRAC     reduce using rule 519 (trait_use_clauses -> trait_use_clause .)


state 436

    (470) property_modifier -> VAR .

    VARIABLE        reduce using rule 470 (property_modifier -> VAR .)


state 437

    (471) property_modifier -> visibility_modifier . static_modifieropt
    (491) method_modifier -> visibility_modifier .
    (473) static_modifieropt -> . static_modifier
    (474) static_modifieropt -> .
    (478) static_modifier -> . STATIC

  ! shift/reduce conflict for STATIC resolved as shift
    FUNCTION        reduce using rule 491 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 491 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 491 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 491 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 491 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 491 (method_modifier -> visibility_modifier .)
    VARIABLE        reduce using rule 474 (static_modifieropt -> .)
    STATIC          shift and go to state 444

  ! STATIC          [ reduce using rule 491 (method_modifier -> visibility_modifier .) ]

    static_modifieropt             shift and go to state 594
    static_modifier                shift and go to state 595

state 438

    (472) property_modifier -> static_modifier . visibility_modifier_opt
    (492) method_modifier -> static_modifier .
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    FUNCTION        reduce using rule 492 (method_modifier -> static_modifier .)
    STATIC          reduce using rule 492 (method_modifier -> static_modifier .)
    ABSTRACT        reduce using rule 492 (method_modifier -> static_modifier .)
    FINAL           reduce using rule 492 (method_modifier -> static_modifier .)
    VARIABLE        reduce using rule 536 (visibility_modifier_opt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443

  ! PUBLIC          [ reduce using rule 492 (method_modifier -> static_modifier .) ]
  ! PROTECTED       [ reduce using rule 492 (method_modifier -> static_modifier .) ]
  ! PRIVATE         [ reduce using rule 492 (method_modifier -> static_modifier .) ]

    visibility_modifier_opt        shift and go to state 596
    visibility_modifier            shift and go to state 597

state 439

    (489) method_modifiers -> method_modifier .

    FUNCTION        reduce using rule 489 (method_modifiers -> method_modifier .)
    PUBLIC          reduce using rule 489 (method_modifiers -> method_modifier .)
    PROTECTED       reduce using rule 489 (method_modifiers -> method_modifier .)
    PRIVATE         reduce using rule 489 (method_modifiers -> method_modifier .)
    STATIC          reduce using rule 489 (method_modifiers -> method_modifier .)
    ABSTRACT        reduce using rule 489 (method_modifiers -> method_modifier .)
    FINAL           reduce using rule 489 (method_modifiers -> method_modifier .)


state 440

    (521) trait_use_clause -> USE . trait_name_list trait_use_specification
    (522) trait_name_list -> . qualified_name
    (523) trait_name_list -> . trait_name_list qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    trait_name_list                shift and go to state 598
    qualified_name                 shift and go to state 599
    name                           shift and go to state 188

state 441

    (475) visibility_modifier -> PUBLIC .

    STATIC          reduce using rule 475 (visibility_modifier -> PUBLIC .)
    VARIABLE        reduce using rule 475 (visibility_modifier -> PUBLIC .)
    FUNCTION        reduce using rule 475 (visibility_modifier -> PUBLIC .)
    PUBLIC          reduce using rule 475 (visibility_modifier -> PUBLIC .)
    PROTECTED       reduce using rule 475 (visibility_modifier -> PUBLIC .)
    PRIVATE         reduce using rule 475 (visibility_modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 475 (visibility_modifier -> PUBLIC .)
    FINAL           reduce using rule 475 (visibility_modifier -> PUBLIC .)
    CONST           reduce using rule 475 (visibility_modifier -> PUBLIC .)
    STRING          reduce using rule 475 (visibility_modifier -> PUBLIC .)
    SEMICOLON       reduce using rule 475 (visibility_modifier -> PUBLIC .)


state 442

    (476) visibility_modifier -> PROTECTED .

    STATIC          reduce using rule 476 (visibility_modifier -> PROTECTED .)
    VARIABLE        reduce using rule 476 (visibility_modifier -> PROTECTED .)
    FUNCTION        reduce using rule 476 (visibility_modifier -> PROTECTED .)
    PUBLIC          reduce using rule 476 (visibility_modifier -> PROTECTED .)
    PROTECTED       reduce using rule 476 (visibility_modifier -> PROTECTED .)
    PRIVATE         reduce using rule 476 (visibility_modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 476 (visibility_modifier -> PROTECTED .)
    FINAL           reduce using rule 476 (visibility_modifier -> PROTECTED .)
    CONST           reduce using rule 476 (visibility_modifier -> PROTECTED .)
    STRING          reduce using rule 476 (visibility_modifier -> PROTECTED .)
    SEMICOLON       reduce using rule 476 (visibility_modifier -> PROTECTED .)


state 443

    (477) visibility_modifier -> PRIVATE .

    STATIC          reduce using rule 477 (visibility_modifier -> PRIVATE .)
    VARIABLE        reduce using rule 477 (visibility_modifier -> PRIVATE .)
    FUNCTION        reduce using rule 477 (visibility_modifier -> PRIVATE .)
    PUBLIC          reduce using rule 477 (visibility_modifier -> PRIVATE .)
    PROTECTED       reduce using rule 477 (visibility_modifier -> PRIVATE .)
    PRIVATE         reduce using rule 477 (visibility_modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 477 (visibility_modifier -> PRIVATE .)
    FINAL           reduce using rule 477 (visibility_modifier -> PRIVATE .)
    CONST           reduce using rule 477 (visibility_modifier -> PRIVATE .)
    STRING          reduce using rule 477 (visibility_modifier -> PRIVATE .)
    SEMICOLON       reduce using rule 477 (visibility_modifier -> PRIVATE .)


state 444

    (478) static_modifier -> STATIC .

    PUBLIC          reduce using rule 478 (static_modifier -> STATIC .)
    PROTECTED       reduce using rule 478 (static_modifier -> STATIC .)
    PRIVATE         reduce using rule 478 (static_modifier -> STATIC .)
    VARIABLE        reduce using rule 478 (static_modifier -> STATIC .)
    FUNCTION        reduce using rule 478 (static_modifier -> STATIC .)
    STATIC          reduce using rule 478 (static_modifier -> STATIC .)
    ABSTRACT        reduce using rule 478 (static_modifier -> STATIC .)
    FINAL           reduce using rule 478 (static_modifier -> STATIC .)


state 445

    (493) method_modifier -> class_modifier .

    FUNCTION        reduce using rule 493 (method_modifier -> class_modifier .)
    PUBLIC          reduce using rule 493 (method_modifier -> class_modifier .)
    PROTECTED       reduce using rule 493 (method_modifier -> class_modifier .)
    PRIVATE         reduce using rule 493 (method_modifier -> class_modifier .)
    STATIC          reduce using rule 493 (method_modifier -> class_modifier .)
    ABSTRACT        reduce using rule 493 (method_modifier -> class_modifier .)
    FINAL           reduce using rule 493 (method_modifier -> class_modifier .)


state 446

    (16) namespace_name -> namespace_name NS_SEPARATOR NAME .

    SEMICOLON       reduce using rule 16 (namespace_name -> namespace_name NS_SEPARATOR NAME .)
    NS_SEPARATOR    reduce using rule 16 (namespace_name -> namespace_name NS_SEPARATOR NAME .)
    LEFT_CBRAC      reduce using rule 16 (namespace_name -> namespace_name NS_SEPARATOR NAME .)
    AS              reduce using rule 16 (namespace_name -> namespace_name NS_SEPARATOR NAME .)


state 447

    (543) namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .

    LEFT_CBRAC      reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    SEMICOLON       reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    TRY             reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    DECLARE         reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ECHO            reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    UNSET           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CONST           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    INTERFACE       reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    TRAIT           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    NAMESPACE       reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    USE             reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    GLOBAL          reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    STATIC          reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    STRING          reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    IF              reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    SWITCH          reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    WHILE           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    DO              reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FOR             reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FOREACH         reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    GOTO            reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CONTINUE        reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    BREAK           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    RETURN          reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    THROW           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FUNCTION        reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    INCLUDE         reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    REQUIRE         reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ABSTRACT        reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    FINAL           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    PRINT           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    YIELD           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    YIELD_FROM      reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CLASS           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CLOSE_TAG       reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    WHITESPACE      reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    $end            reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    OPEN_TAG        reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ELSE            reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ELSEIF          reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDDECLARE      reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDWHILE        reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDFOR          reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    CASE            reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    DEFAULT         reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDSWITCH       reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDFOREACH      reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)
    ENDIF           reduce using rule 543 (namespace_use_declaration -> USE namespace_function_or_constopt namespace_use_clauses SEMICOLON .)


state 448

    (551) namespace_use_clauses -> namespace_use_clauses namespace_use_clause .

    SEMICOLON       reduce using rule 551 (namespace_use_clauses -> namespace_use_clauses namespace_use_clause .)
    STRING          reduce using rule 551 (namespace_use_clauses -> namespace_use_clauses namespace_use_clause .)


state 449

    (552) namespace_use_clause -> qualified_name namespace_aliasing_clause_opt .

    SEMICOLON       reduce using rule 552 (namespace_use_clause -> qualified_name namespace_aliasing_clause_opt .)
    STRING          reduce using rule 552 (namespace_use_clause -> qualified_name namespace_aliasing_clause_opt .)


state 450

    (553) namespace_aliasing_clause_opt -> namespace_aliasing_clause .

    SEMICOLON       reduce using rule 553 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    STRING          reduce using rule 553 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    RIGHT_CBRAC     reduce using rule 553 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    NAME            reduce using rule 553 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    FUNCTION        reduce using rule 553 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)
    CONST           reduce using rule 553 (namespace_aliasing_clause_opt -> namespace_aliasing_clause .)


state 451

    (555) namespace_aliasing_clause -> AS . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 600

state 452

    (544) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name . NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (16) namespace_name -> namespace_name . NS_SEPARATOR NAME

    NS_SEPARATOR    shift and go to state 601


state 453

    (545) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR . LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (16) namespace_name -> namespace_name NS_SEPARATOR . NAME

    LEFT_CBRAC      shift and go to state 602
    NAME            shift and go to state 446


state 454

    (45) simple_variable -> DOLLAR LEFT_CBRAC expression . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 603


state 455

    (24) function_static_initializer_opt -> EQUAL constant_expression .
    (21) function_static_initializer -> EQUAL constant_expression .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 21 (function_static_initializer -> EQUAL constant_expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 21 (function_static_initializer -> EQUAL constant_expression .)
    SEMICOLON       reduce using rule 21 (function_static_initializer -> EQUAL constant_expression .)
    VARIABLE        reduce using rule 21 (function_static_initializer -> EQUAL constant_expression .)

  ! SEMICOLON       [ reduce using rule 24 (function_static_initializer_opt -> EQUAL constant_expression .) ]
  ! VARIABLE        [ reduce using rule 24 (function_static_initializer_opt -> EQUAL constant_expression .) ]


state 456

    (307) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement elseif_clauses_1 else_clause_1
    (308) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement elseif_clauses_1
    (309) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement else_clause_1
    (310) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (311) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 605
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement                      shift and go to state 604
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 457

    (322) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT ENDSWITCH SEMICOLON

    LEFT_CBRAC      shift and go to state 606
    DOUBLE_POINT    shift and go to state 607


state 458

    (340) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (341) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 609
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement                      shift and go to state 608
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 459

    (342) do_statement -> DO statement WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS SEMICOLON
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 610
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 460

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (360) for_control -> . for_expression_group
    (362) for_expression_group -> . expression
    (363) for_expression_group -> . for_expression_group COLON expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    SEMICOLON       shift and go to state 611
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    for_control                    shift and go to state 612
    for_expression_group           shift and go to state 463
    expression                     shift and go to state 301
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 461

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . RIGHT_PARENTHESIS statement
    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (361) for_end_of_loop -> . for_expression_group
    (362) for_expression_group -> . expression
    (363) for_expression_group -> . for_expression_group COLON expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 614
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    for_end_of_loop                shift and go to state 613
    for_expression_group           shift and go to state 615
    expression                     shift and go to state 301
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 462

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS statement
    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    SEMICOLON       shift and go to state 616


state 463

    (360) for_control -> for_expression_group .
    (363) for_expression_group -> for_expression_group . COLON expression

    SEMICOLON       reduce using rule 360 (for_control -> for_expression_group .)
    COLON           shift and go to state 464


state 464

    (363) for_expression_group -> for_expression_group COLON . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 617
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 465

    (364) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS . foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (369) foreach_key -> . expression DOUBLE_ARROW
    (370) foreach_value -> . AMPERSAND_opt expression
    (371) foreach_value -> . AMPERSAND expression
    (372) foreach_value -> . list_intrinsic
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    AMPERSAND       shift and go to state 622
    STRING          shift and go to state 104
    LIST            shift and go to state 170
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! STRING          [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 87 (AMPERSAND_opt -> .) ]

    foreach_key                    shift and go to state 618
    foreach_value                  shift and go to state 619
    expression                     shift and go to state 620
    AMPERSAND_opt                  shift and go to state 621
    list_intrinsic                 shift and go to state 623
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 466

    (382) breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS .

    SEMICOLON       reduce using rule 382 (breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 382 (breakout_level -> LEFT_PARENTHESIS breakout_level RIGHT_PARENTHESIS .)


state 467

    (412) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS . parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (496) parameter_declaration_listopt -> . parameter_declaration_list
    (497) parameter_declaration_listopt -> .
    (415) parameter_declaration_list -> . simple_parameter_declaration_list
    (416) parameter_declaration_list -> . variadic_declaration_list
    (417) simple_parameter_declaration_list -> . parameter_declaration
    (418) simple_parameter_declaration_list -> . parameter_declaration_list parameter_declaration
    (419) variadic_declaration_list -> . simple_parameter_declaration_list variadic_parameter
    (420) variadic_declaration_list -> . variadic_parameter
    (421) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (422) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (425) type_declarationopt -> . type_declaration
    (426) type_declarationopt -> .
    (427) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (428) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (429) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 497 (parameter_declaration_listopt -> .)
    AMPERSAND       reduce using rule 426 (type_declarationopt -> .)
    VARIABLE        reduce using rule 426 (type_declarationopt -> .)
    ELLIPSIS        reduce using rule 426 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 633
    ARRAY           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 429 (TERNARY_OPERATIONopt -> .)

    parameter_declaration_listopt  shift and go to state 624
    parameter_declaration_list     shift and go to state 625
    simple_parameter_declaration_list shift and go to state 626
    variadic_declaration_list      shift and go to state 627
    parameter_declaration          shift and go to state 628
    variadic_parameter             shift and go to state 629
    type_declarationopt            shift and go to state 630
    type_declaration               shift and go to state 631
    TERNARY_OPERATIONopt           shift and go to state 632

state 468

    (259) yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .

    AND             reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    XOR             reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    OR              reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    SEMICOLON       reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    STRING          reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    INCLUDE         reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    INCLUDE_ONCE    reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    REQUIRE         reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    REQUIRE_ONCE    reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    PRINT           reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    YIELD           reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    YIELD_FROM      reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    RIGHT_PARENTHESIS reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    COLON           reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    AS              reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ARROW           reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    RIGHT_CBRAC     reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    VARIABLE        reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    DOUBLE_POINT    reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    DOUBLE_ARROW    reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ELLIPSIS        reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    TERNARY_OPERATION reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    AMPERSAND       reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ARRAY           reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    CALLABLE        reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    ITERABLE        reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    BOOL            reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    FLOAT           reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)
    INT             reduce using rule 259 (yield_expression -> YIELD yield_from_expression DOUBLE_ARROW yield_expression .)


state 469

    (221) conditional_expression -> conditional_expression TERNARY_OPERATION expression . DOUBLE_POINT coalesce_expression

    DOUBLE_POINT    shift and go to state 634


state 470

    (222) conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT . coalesce_expression
    (218) coalesce_expression -> . logical_inc_OR_expression_1
    (219) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (216) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (217) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    coalesce_expression            shift and go to state 635
    logical_inc_OR_expression_1    shift and go to state 166
    logical_AND_expression_1       shift and go to state 172
    bitwise_inc_OR_expression      shift and go to state 180
    bitwise_exc_OR_expression      shift and go to state 187
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 471

    (226) simple_assignment_expression -> variable EQUAL assignment_expression .

    AND             reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    XOR             reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    OR              reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    SEMICOLON       reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    STRING          reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    INCLUDE         reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    INCLUDE_ONCE    reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    REQUIRE         reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    REQUIRE_ONCE    reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    PRINT           reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    YIELD           reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    YIELD_FROM      reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    COLON           reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    AS              reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ARROW           reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    RIGHT_CBRAC     reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    VARIABLE        reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    DOUBLE_POINT    reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    DOUBLE_ARROW    reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ELLIPSIS        reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    TERNARY_OPERATION reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    AMPERSAND       reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ARRAY           reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    CALLABLE        reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    ITERABLE        reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    BOOL            reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    FLOAT           reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)
    INT             reduce using rule 226 (simple_assignment_expression -> variable EQUAL assignment_expression .)


state 472

    (241) byref_assignment_expression -> variable EQUAL AMPERSAND . variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable                       shift and go to state 636
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 473

    (242) compound_assignment_expression -> variable compound_assignment_operator assignment_expression .

    AND             reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    XOR             reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    OR              reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    STRING          reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    INCLUDE         reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    INCLUDE_ONCE    reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    REQUIRE         reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    REQUIRE_ONCE    reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    PRINT           reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    YIELD           reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    YIELD_FROM      reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    COLON           reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    AS              reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ARROW           reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    RIGHT_CBRAC     reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    VARIABLE        reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    DOUBLE_POINT    reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    DOUBLE_ARROW    reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ELLIPSIS        reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    TERNARY_OPERATION reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    AMPERSAND       reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ARRAY           reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    CALLABLE        reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    ITERABLE        reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    BOOL            reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    FLOAT           reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)
    INT             reduce using rule 242 (compound_assignment_expression -> variable compound_assignment_operator assignment_expression .)


state 474

    (227) simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .

    AND             reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    XOR             reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    OR              reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    SEMICOLON       reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    STRING          reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    INCLUDE         reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    INCLUDE_ONCE    reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    REQUIRE         reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    REQUIRE_ONCE    reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    PRINT           reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    YIELD           reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    YIELD_FROM      reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    COLON           reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    AS              reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ARROW           reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    RIGHT_CBRAC     reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    VARIABLE        reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    DOUBLE_POINT    reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    DOUBLE_ARROW    reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ELLIPSIS        reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    TERNARY_OPERATION reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    AMPERSAND       reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ARRAY           reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    CALLABLE        reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    ITERABLE        reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    BOOL            reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    FLOAT           reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)
    INT             reduce using rule 227 (simple_assignment_expression -> list_intrinsic EQUAL assignment_expression .)


state 475

    (219) coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .

    TERNARY_OPERATION reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    AND             reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    XOR             reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    OR              reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    SEMICOLON       reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    STRING          reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    INCLUDE         reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    REQUIRE         reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    PRINT           reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    YIELD           reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    YIELD_FROM      reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    COLON           reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    AS              reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ARROW           reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    VARIABLE        reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    DOUBLE_POINT    reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ELLIPSIS        reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    AMPERSAND       reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ARRAY           reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    CALLABLE        reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    ITERABLE        reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    BOOL            reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    FLOAT           reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)
    INT             reduce using rule 219 (coalesce_expression -> logical_inc_OR_expression_1 COALESCE coalesce_expression .)


state 476

    (217) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR . logical_AND_expression_1
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    logical_AND_expression_1       shift and go to state 637
    bitwise_inc_OR_expression      shift and go to state 180
    bitwise_exc_OR_expression      shift and go to state 187
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 477

    (228) list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 638


state 478

    (229) list_expression_list -> unkeyed_list_expression_list .
    (234) unkeyed_list_expression_list -> unkeyed_list_expression_list . COLON list_or_variable COLON
    (235) unkeyed_list_expression_list -> unkeyed_list_expression_list . COLON list_or_variable

    RIGHT_PARENTHESIS reduce using rule 229 (list_expression_list -> unkeyed_list_expression_list .)
    COLON           shift and go to state 639


state 479

    (230) list_expression_list -> keyed_list_expression_list . COLON
    (231) list_expression_list -> keyed_list_expression_list .
    (237) keyed_list_expression_list -> keyed_list_expression_list . COLON expression DOUBLE_ARROW list_or_variable

    COLON           shift and go to state 640
    RIGHT_PARENTHESIS reduce using rule 231 (list_expression_list -> keyed_list_expression_list .)


state 480

    (233) unkeyed_list_expression_list -> COLON .

    COLON           reduce using rule 233 (unkeyed_list_expression_list -> COLON .)
    RIGHT_PARENTHESIS reduce using rule 233 (unkeyed_list_expression_list -> COLON .)


state 481

    (232) unkeyed_list_expression_list -> list_or_variable .

    COLON           reduce using rule 232 (unkeyed_list_expression_list -> list_or_variable .)
    RIGHT_PARENTHESIS reduce using rule 232 (unkeyed_list_expression_list -> list_or_variable .)


state 482

    (236) keyed_list_expression_list -> expression . DOUBLE_ARROW list_or_variable

    DOUBLE_ARROW    shift and go to state 641


state 483

    (238) list_or_variable -> list_intrinsic .

    COLON           reduce using rule 238 (list_or_variable -> list_intrinsic .)
    RIGHT_PARENTHESIS reduce using rule 238 (list_or_variable -> list_intrinsic .)


state 484

    (239) list_or_variable -> AMPERSAND . variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable                       shift and go to state 642
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 485

    (240) list_or_variable -> variable .
    (46) dereferencable_expression -> variable .

    COLON           reduce using rule 240 (list_or_variable -> variable .)
    RIGHT_PARENTHESIS reduce using rule 240 (list_or_variable -> variable .)
    ARROW           reduce using rule 46 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)


state 486

    (270) expression -> STRING .
    (68) string_literal -> STRING .
    (564) name -> STRING .

  ! reduce/reduce conflict for LEFT_PARENTHESIS resolved using rule 68 (string_literal -> STRING .)
  ! reduce/reduce conflict for DOUBLE_COLON resolved using rule 68 (string_literal -> STRING .)
    DOUBLE_ARROW    reduce using rule 270 (expression -> STRING .)
    ARROW           reduce using rule 68 (string_literal -> STRING .)
    LEFT_CBRAC      reduce using rule 68 (string_literal -> STRING .)
    DOUBLE_COLON    reduce using rule 68 (string_literal -> STRING .)
    LEFT_PARENTHESIS reduce using rule 68 (string_literal -> STRING .)

  ! LEFT_PARENTHESIS [ reduce using rule 564 (name -> STRING .) ]
  ! DOUBLE_COLON    [ reduce using rule 564 (name -> STRING .) ]


state 487

    (47) dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (51) callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (42) primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

  ! reduce/reduce conflict for ARROW resolved using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 51 (callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)

  ! ARROW           [ reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .) ]


state 488

    (180) cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .

    ASTERISK        reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    DIVIDE          reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    MODULO          reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    PLUS            reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    LESS            reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    CONCAT          reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SL              reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SR              reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    LESS_THAN       reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SPACESHIP       reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    EQUAL           reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_NOT_EQUAL    reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_IDENTICAL    reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    IS_NOT_IDENTICAL reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    AMPERSAND       reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    BITWISE_XOR     reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    BITWISE_OR      reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    COALESCE        reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    TERNARY_OPERATION reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    AND             reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    XOR             reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    OR              reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    SEMICOLON       reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    STRING          reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INCLUDE         reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INCLUDE_ONCE    reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    REQUIRE         reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    REQUIRE_ONCE    reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    PRINT           reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    YIELD           reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    YIELD_FROM      reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    COLON           reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    AS              reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ARROW           reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    RIGHT_CBRAC     reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    VARIABLE        reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    DOUBLE_POINT    reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    DOUBLE_ARROW    reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ELLIPSIS        reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ARRAY           reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    CALLABLE        reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    ITERABLE        reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    BOOL            reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    FLOAT           reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INT             reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)
    INSTANCEOF      reduce using rule 180 (cast_expression -> LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression .)


state 489

    (215) logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND . bitwise_inc_OR_expression
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    bitwise_inc_OR_expression      shift and go to state 643
    bitwise_exc_OR_expression      shift and go to state 187
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 490

    (157) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .
    (146) member_name -> simple_variable .

  ! reduce/reduce conflict for LEFT_PARENTHESIS resolved using rule 146 (member_name -> simple_variable .)
    EQUAL           reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLEPLUS      reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLELESS      reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    POW_EQUAL       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MUL_EQUAL       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DIV_EQUAL       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MOD_EQUAL       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PLUS_EQUAL      reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MINUS_EQUAL     reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    CONCAT_EQUAL    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SL_EQUAL        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SR_EQUAL        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AND_EQUAL       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    XOR_EQUAL       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    OR_EQUAL        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LEFT_CBRAC      reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SL              reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SR              reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AND             reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    OR              reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    AS              reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INT             reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    DOLLAR          reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    SELF            reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    PARENT          reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    STATIC          reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 146 (member_name -> simple_variable .)

  ! LEFT_PARENTHESIS [ reduce using rule 157 (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable .) ]


state 491

    (158) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 644


state 492

    (160) class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .
    (145) member_name -> NAME .

    DOUBLEASTERISK  reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ASTERISK        reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    DIVIDE          reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    MODULO          reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    PLUS            reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    LESS            reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    CONCAT          reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SL              reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SR              reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    LESS_THAN       reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_GREATER_OR_EQUAL reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    GREATER_THAN_OR_EQUAL reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SPACESHIP       reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    EQUAL           reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_NOT_EQUAL    reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_IDENTICAL    reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    IS_NOT_IDENTICAL reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    AMPERSAND       reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    BITWISE_XOR     reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    BITWISE_OR      reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    COALESCE        reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    TERNARY_OPERATION reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    AND             reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    XOR             reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    OR              reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    SEMICOLON       reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    STRING          reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INCLUDE         reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INCLUDE_ONCE    reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    REQUIRE         reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    REQUIRE_ONCE    reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    PRINT           reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    YIELD           reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    YIELD_FROM      reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    RIGHT_PARENTHESIS reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    COLON           reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    AS              reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ARROW           reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    RIGHT_CBRAC     reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    VARIABLE        reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    DOUBLE_POINT    reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    DOUBLE_ARROW    reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ELLIPSIS        reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ARRAY           reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    CALLABLE        reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    ITERABLE        reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    BOOL            reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    FLOAT           reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INT             reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    INSTANCEOF      reduce using rule 160 (class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON NAME .)
    LEFT_PARENTHESIS reduce using rule 145 (member_name -> NAME .)


state 493

    (147) member_name -> LEFT_CBRAC . expression RIGHT_PARENTHESIS
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 645
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 494

    (144) member_access_expression -> dereferencable_expression ARROW member_name .
    (148) member_call_expression -> dereferencable_expression ARROW member_name . LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> dereferencable_expression ARROW member_name . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS

  ! shift/reduce conflict for LEFT_PARENTHESIS resolved as shift
    EQUAL           reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLEPLUS      reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLELESS      reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    POW_EQUAL       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MUL_EQUAL       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DIV_EQUAL       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MOD_EQUAL       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PLUS_EQUAL      reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MINUS_EQUAL     reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    CONCAT_EQUAL    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SL_EQUAL        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SR_EQUAL        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AND_EQUAL       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    XOR_EQUAL       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    OR_EQUAL        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ARROW           reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LEFT_CBRAC      reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLE_COLON    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLEASTERISK  reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ASTERISK        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DIVIDE          reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    MODULO          reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PLUS            reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LESS            reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    CONCAT          reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SL              reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SR              reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LESS_THAN       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_GREATER_OR_EQUAL reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SPACESHIP       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_NOT_EQUAL    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_IDENTICAL    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    IS_NOT_IDENTICAL reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AMPERSAND       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    BITWISE_XOR     reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    BITWISE_OR      reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    COALESCE        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    TERNARY_OPERATION reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AND             reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    XOR             reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    OR              reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SEMICOLON       reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    STRING          reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INCLUDE         reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INCLUDE_ONCE    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    REQUIRE         reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    REQUIRE_ONCE    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PRINT           reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    YIELD           reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    YIELD_FROM      reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    RIGHT_PARENTHESIS reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    COLON           reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    AS              reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    RIGHT_CBRAC     reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    VARIABLE        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLE_POINT    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOUBLE_ARROW    reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ELLIPSIS        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ARRAY           reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    CALLABLE        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    ITERABLE        reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    BOOL            reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    FLOAT           reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INT             reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    INSTANCEOF      reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    DOLLAR          reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    SELF            reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    PARENT          reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    STATIC          reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .)
    LEFT_PARENTHESIS shift and go to state 646

  ! LEFT_PARENTHESIS [ reduce using rule 144 (member_access_expression -> dereferencable_expression ARROW member_name .) ]


state 495

    (145) member_name -> NAME .

    LEFT_PARENTHESIS reduce using rule 145 (member_name -> NAME .)
    EQUAL           reduce using rule 145 (member_name -> NAME .)
    DOUBLEPLUS      reduce using rule 145 (member_name -> NAME .)
    DOUBLELESS      reduce using rule 145 (member_name -> NAME .)
    POW_EQUAL       reduce using rule 145 (member_name -> NAME .)
    MUL_EQUAL       reduce using rule 145 (member_name -> NAME .)
    DIV_EQUAL       reduce using rule 145 (member_name -> NAME .)
    MOD_EQUAL       reduce using rule 145 (member_name -> NAME .)
    PLUS_EQUAL      reduce using rule 145 (member_name -> NAME .)
    MINUS_EQUAL     reduce using rule 145 (member_name -> NAME .)
    CONCAT_EQUAL    reduce using rule 145 (member_name -> NAME .)
    SL_EQUAL        reduce using rule 145 (member_name -> NAME .)
    SR_EQUAL        reduce using rule 145 (member_name -> NAME .)
    AND_EQUAL       reduce using rule 145 (member_name -> NAME .)
    XOR_EQUAL       reduce using rule 145 (member_name -> NAME .)
    OR_EQUAL        reduce using rule 145 (member_name -> NAME .)
    ARROW           reduce using rule 145 (member_name -> NAME .)
    LEFT_CBRAC      reduce using rule 145 (member_name -> NAME .)
    DOUBLE_COLON    reduce using rule 145 (member_name -> NAME .)
    DOUBLEASTERISK  reduce using rule 145 (member_name -> NAME .)
    ASTERISK        reduce using rule 145 (member_name -> NAME .)
    DIVIDE          reduce using rule 145 (member_name -> NAME .)
    MODULO          reduce using rule 145 (member_name -> NAME .)
    PLUS            reduce using rule 145 (member_name -> NAME .)
    LESS            reduce using rule 145 (member_name -> NAME .)
    CONCAT          reduce using rule 145 (member_name -> NAME .)
    SL              reduce using rule 145 (member_name -> NAME .)
    SR              reduce using rule 145 (member_name -> NAME .)
    LESS_THAN       reduce using rule 145 (member_name -> NAME .)
    IS_SMALLER_OR_EQUAL reduce using rule 145 (member_name -> NAME .)
    IS_GREATER_OR_EQUAL reduce using rule 145 (member_name -> NAME .)
    GREATER_THAN_OR_EQUAL reduce using rule 145 (member_name -> NAME .)
    SPACESHIP       reduce using rule 145 (member_name -> NAME .)
    IS_NOT_EQUAL    reduce using rule 145 (member_name -> NAME .)
    IS_IDENTICAL    reduce using rule 145 (member_name -> NAME .)
    IS_NOT_IDENTICAL reduce using rule 145 (member_name -> NAME .)
    AMPERSAND       reduce using rule 145 (member_name -> NAME .)
    BITWISE_XOR     reduce using rule 145 (member_name -> NAME .)
    BITWISE_OR      reduce using rule 145 (member_name -> NAME .)
    COALESCE        reduce using rule 145 (member_name -> NAME .)
    TERNARY_OPERATION reduce using rule 145 (member_name -> NAME .)
    AND             reduce using rule 145 (member_name -> NAME .)
    XOR             reduce using rule 145 (member_name -> NAME .)
    OR              reduce using rule 145 (member_name -> NAME .)
    SEMICOLON       reduce using rule 145 (member_name -> NAME .)
    STRING          reduce using rule 145 (member_name -> NAME .)
    INCLUDE         reduce using rule 145 (member_name -> NAME .)
    INCLUDE_ONCE    reduce using rule 145 (member_name -> NAME .)
    REQUIRE         reduce using rule 145 (member_name -> NAME .)
    REQUIRE_ONCE    reduce using rule 145 (member_name -> NAME .)
    PRINT           reduce using rule 145 (member_name -> NAME .)
    YIELD           reduce using rule 145 (member_name -> NAME .)
    YIELD_FROM      reduce using rule 145 (member_name -> NAME .)
    RIGHT_PARENTHESIS reduce using rule 145 (member_name -> NAME .)
    COLON           reduce using rule 145 (member_name -> NAME .)
    AS              reduce using rule 145 (member_name -> NAME .)
    RIGHT_CBRAC     reduce using rule 145 (member_name -> NAME .)
    VARIABLE        reduce using rule 145 (member_name -> NAME .)
    DOUBLE_POINT    reduce using rule 145 (member_name -> NAME .)
    DOUBLE_ARROW    reduce using rule 145 (member_name -> NAME .)
    ELLIPSIS        reduce using rule 145 (member_name -> NAME .)
    ARRAY           reduce using rule 145 (member_name -> NAME .)
    CALLABLE        reduce using rule 145 (member_name -> NAME .)
    ITERABLE        reduce using rule 145 (member_name -> NAME .)
    BOOL            reduce using rule 145 (member_name -> NAME .)
    FLOAT           reduce using rule 145 (member_name -> NAME .)
    INT             reduce using rule 145 (member_name -> NAME .)
    INSTANCEOF      reduce using rule 145 (member_name -> NAME .)
    DOLLAR          reduce using rule 145 (member_name -> NAME .)
    SELF            reduce using rule 145 (member_name -> NAME .)
    PARENT          reduce using rule 145 (member_name -> NAME .)
    STATIC          reduce using rule 145 (member_name -> NAME .)


state 496

    (146) member_name -> simple_variable .

    LEFT_PARENTHESIS reduce using rule 146 (member_name -> simple_variable .)
    EQUAL           reduce using rule 146 (member_name -> simple_variable .)
    DOUBLEPLUS      reduce using rule 146 (member_name -> simple_variable .)
    DOUBLELESS      reduce using rule 146 (member_name -> simple_variable .)
    POW_EQUAL       reduce using rule 146 (member_name -> simple_variable .)
    MUL_EQUAL       reduce using rule 146 (member_name -> simple_variable .)
    DIV_EQUAL       reduce using rule 146 (member_name -> simple_variable .)
    MOD_EQUAL       reduce using rule 146 (member_name -> simple_variable .)
    PLUS_EQUAL      reduce using rule 146 (member_name -> simple_variable .)
    MINUS_EQUAL     reduce using rule 146 (member_name -> simple_variable .)
    CONCAT_EQUAL    reduce using rule 146 (member_name -> simple_variable .)
    SL_EQUAL        reduce using rule 146 (member_name -> simple_variable .)
    SR_EQUAL        reduce using rule 146 (member_name -> simple_variable .)
    AND_EQUAL       reduce using rule 146 (member_name -> simple_variable .)
    XOR_EQUAL       reduce using rule 146 (member_name -> simple_variable .)
    OR_EQUAL        reduce using rule 146 (member_name -> simple_variable .)
    ARROW           reduce using rule 146 (member_name -> simple_variable .)
    LEFT_CBRAC      reduce using rule 146 (member_name -> simple_variable .)
    DOUBLE_COLON    reduce using rule 146 (member_name -> simple_variable .)
    DOUBLEASTERISK  reduce using rule 146 (member_name -> simple_variable .)
    ASTERISK        reduce using rule 146 (member_name -> simple_variable .)
    DIVIDE          reduce using rule 146 (member_name -> simple_variable .)
    MODULO          reduce using rule 146 (member_name -> simple_variable .)
    PLUS            reduce using rule 146 (member_name -> simple_variable .)
    LESS            reduce using rule 146 (member_name -> simple_variable .)
    CONCAT          reduce using rule 146 (member_name -> simple_variable .)
    SL              reduce using rule 146 (member_name -> simple_variable .)
    SR              reduce using rule 146 (member_name -> simple_variable .)
    LESS_THAN       reduce using rule 146 (member_name -> simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 146 (member_name -> simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 146 (member_name -> simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 146 (member_name -> simple_variable .)
    SPACESHIP       reduce using rule 146 (member_name -> simple_variable .)
    IS_NOT_EQUAL    reduce using rule 146 (member_name -> simple_variable .)
    IS_IDENTICAL    reduce using rule 146 (member_name -> simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 146 (member_name -> simple_variable .)
    AMPERSAND       reduce using rule 146 (member_name -> simple_variable .)
    BITWISE_XOR     reduce using rule 146 (member_name -> simple_variable .)
    BITWISE_OR      reduce using rule 146 (member_name -> simple_variable .)
    COALESCE        reduce using rule 146 (member_name -> simple_variable .)
    TERNARY_OPERATION reduce using rule 146 (member_name -> simple_variable .)
    AND             reduce using rule 146 (member_name -> simple_variable .)
    XOR             reduce using rule 146 (member_name -> simple_variable .)
    OR              reduce using rule 146 (member_name -> simple_variable .)
    SEMICOLON       reduce using rule 146 (member_name -> simple_variable .)
    STRING          reduce using rule 146 (member_name -> simple_variable .)
    INCLUDE         reduce using rule 146 (member_name -> simple_variable .)
    INCLUDE_ONCE    reduce using rule 146 (member_name -> simple_variable .)
    REQUIRE         reduce using rule 146 (member_name -> simple_variable .)
    REQUIRE_ONCE    reduce using rule 146 (member_name -> simple_variable .)
    PRINT           reduce using rule 146 (member_name -> simple_variable .)
    YIELD           reduce using rule 146 (member_name -> simple_variable .)
    YIELD_FROM      reduce using rule 146 (member_name -> simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 146 (member_name -> simple_variable .)
    COLON           reduce using rule 146 (member_name -> simple_variable .)
    AS              reduce using rule 146 (member_name -> simple_variable .)
    RIGHT_CBRAC     reduce using rule 146 (member_name -> simple_variable .)
    VARIABLE        reduce using rule 146 (member_name -> simple_variable .)
    DOUBLE_POINT    reduce using rule 146 (member_name -> simple_variable .)
    DOUBLE_ARROW    reduce using rule 146 (member_name -> simple_variable .)
    ELLIPSIS        reduce using rule 146 (member_name -> simple_variable .)
    ARRAY           reduce using rule 146 (member_name -> simple_variable .)
    CALLABLE        reduce using rule 146 (member_name -> simple_variable .)
    ITERABLE        reduce using rule 146 (member_name -> simple_variable .)
    BOOL            reduce using rule 146 (member_name -> simple_variable .)
    FLOAT           reduce using rule 146 (member_name -> simple_variable .)
    INT             reduce using rule 146 (member_name -> simple_variable .)
    INSTANCEOF      reduce using rule 146 (member_name -> simple_variable .)
    DOLLAR          reduce using rule 146 (member_name -> simple_variable .)
    SELF            reduce using rule 146 (member_name -> simple_variable .)
    PARENT          reduce using rule 146 (member_name -> simple_variable .)
    STATIC          reduce using rule 146 (member_name -> simple_variable .)


state 497

    (133) subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 647


state 498

    (134) subscript_expression -> dereferencable_expression LEFT_CBRAC expression . RIGHT_PARENTHESIS
    (119) expression_opt -> expression .

    RIGHT_PARENTHESIS shift and go to state 648
    RIGHT_CBRAC     reduce using rule 119 (expression_opt -> expression .)


state 499

    (213) bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .
    (211) bitwise_exc_OR_expression -> bitwise_exc_OR_expression . BITWISE_XOR bitwise_AND_expression

    BITWISE_OR      reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    AMPERSAND       reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    COALESCE        reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    TERNARY_OPERATION reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    AND             reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    XOR             reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    OR              reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    SEMICOLON       reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    STRING          reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    INCLUDE         reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    REQUIRE         reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    PRINT           reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    YIELD           reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    YIELD_FROM      reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    COLON           reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    AS              reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ARROW           reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    VARIABLE        reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    DOUBLE_POINT    reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ELLIPSIS        reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ARRAY           reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    CALLABLE        reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    ITERABLE        reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    BOOL            reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    FLOAT           reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    INT             reduce using rule 213 (bitwise_inc_OR_expression -> bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression .)
    BITWISE_XOR     shift and go to state 352


state 500

    (122) array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .

    ARROW           reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LEFT_CBRAC      reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ASTERISK        reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DIVIDE          reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    MODULO          reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    PLUS            reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LESS            reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    CONCAT          reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SL              reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SR              reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    EQUAL           reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    COALESCE        reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    AND             reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    XOR             reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    OR              reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    STRING          reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    PRINT           reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    YIELD           reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    COLON           reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    AS              reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    VARIABLE        reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ARRAY           reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    CALLABLE        reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    ITERABLE        reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    BOOL            reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    FLOAT           reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INT             reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 122 (array_creation_expression -> LEFT_CBRAC array_initializer_opt RIGHT_CBRAC .)


state 501

    (126) array_initializer -> array_initializer_list COLON .

    RIGHT_CBRAC     reduce using rule 126 (array_initializer -> array_initializer_list COLON .)
    RIGHT_PARENTHESIS reduce using rule 126 (array_initializer -> array_initializer_list COLON .)


state 502

    (128) array_initializer_list -> array_element_initializer COLON . array_element_initializer
    (129) array_element_initializer -> . AMPERSAND_opt element_value
    (130) array_element_initializer -> . element_key ARROW AMPERSAND_opt element_value
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .
    (131) element_key -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    AMPERSAND       shift and go to state 348
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! STRING          [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! INCLUDE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE         [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! REQUIRE_ONCE    [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! PRINT           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD           [ reduce using rule 87 (AMPERSAND_opt -> .) ]
  ! YIELD_FROM      [ reduce using rule 87 (AMPERSAND_opt -> .) ]

    array_element_initializer      shift and go to state 649
    AMPERSAND_opt                  shift and go to state 346
    element_key                    shift and go to state 347
    expression                     shift and go to state 349
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 503

    (129) array_element_initializer -> AMPERSAND_opt element_value .

    COLON           reduce using rule 129 (array_element_initializer -> AMPERSAND_opt element_value .)
    RIGHT_CBRAC     reduce using rule 129 (array_element_initializer -> AMPERSAND_opt element_value .)
    RIGHT_PARENTHESIS reduce using rule 129 (array_element_initializer -> AMPERSAND_opt element_value .)


state 504

    (132) element_value -> expression .

    COLON           reduce using rule 132 (element_value -> expression .)
    RIGHT_CBRAC     reduce using rule 132 (element_value -> expression .)
    RIGHT_PARENTHESIS reduce using rule 132 (element_value -> expression .)


state 505

    (130) array_element_initializer -> element_key ARROW . AMPERSAND_opt element_value
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 348
    STRING          reduce using rule 87 (AMPERSAND_opt -> .)
    INCLUDE         reduce using rule 87 (AMPERSAND_opt -> .)
    INCLUDE_ONCE    reduce using rule 87 (AMPERSAND_opt -> .)
    REQUIRE         reduce using rule 87 (AMPERSAND_opt -> .)
    REQUIRE_ONCE    reduce using rule 87 (AMPERSAND_opt -> .)
    PRINT           reduce using rule 87 (AMPERSAND_opt -> .)
    YIELD           reduce using rule 87 (AMPERSAND_opt -> .)
    YIELD_FROM      reduce using rule 87 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 650

state 506

    (135) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 651


state 507

    (136) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> argument_expression_list .
    (140) argument_expression_list -> argument_expression_list . argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 652
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! RIGHT_PARENTHESIS [ reduce using rule 102 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 653
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 508

    (139) argument_expression_list -> argument_expression .

    RIGHT_PARENTHESIS reduce using rule 139 (argument_expression_list -> argument_expression .)
    ELLIPSIS        reduce using rule 139 (argument_expression_list -> argument_expression .)
    STRING          reduce using rule 139 (argument_expression_list -> argument_expression .)
    INCLUDE         reduce using rule 139 (argument_expression_list -> argument_expression .)
    INCLUDE_ONCE    reduce using rule 139 (argument_expression_list -> argument_expression .)
    REQUIRE         reduce using rule 139 (argument_expression_list -> argument_expression .)
    REQUIRE_ONCE    reduce using rule 139 (argument_expression_list -> argument_expression .)
    PRINT           reduce using rule 139 (argument_expression_list -> argument_expression .)
    YIELD           reduce using rule 139 (argument_expression_list -> argument_expression .)
    YIELD_FROM      reduce using rule 139 (argument_expression_list -> argument_expression .)
    COLON           reduce using rule 139 (argument_expression_list -> argument_expression .)


state 509

    (141) argument_expression -> variadic_unpacking .

    RIGHT_PARENTHESIS reduce using rule 141 (argument_expression -> variadic_unpacking .)
    ELLIPSIS        reduce using rule 141 (argument_expression -> variadic_unpacking .)
    STRING          reduce using rule 141 (argument_expression -> variadic_unpacking .)
    INCLUDE         reduce using rule 141 (argument_expression -> variadic_unpacking .)
    INCLUDE_ONCE    reduce using rule 141 (argument_expression -> variadic_unpacking .)
    REQUIRE         reduce using rule 141 (argument_expression -> variadic_unpacking .)
    REQUIRE_ONCE    reduce using rule 141 (argument_expression -> variadic_unpacking .)
    PRINT           reduce using rule 141 (argument_expression -> variadic_unpacking .)
    YIELD           reduce using rule 141 (argument_expression -> variadic_unpacking .)
    YIELD_FROM      reduce using rule 141 (argument_expression -> variadic_unpacking .)
    COLON           reduce using rule 141 (argument_expression -> variadic_unpacking .)


state 510

    (142) argument_expression -> expression .

    RIGHT_PARENTHESIS reduce using rule 142 (argument_expression -> expression .)
    ELLIPSIS        reduce using rule 142 (argument_expression -> expression .)
    STRING          reduce using rule 142 (argument_expression -> expression .)
    INCLUDE         reduce using rule 142 (argument_expression -> expression .)
    INCLUDE_ONCE    reduce using rule 142 (argument_expression -> expression .)
    REQUIRE         reduce using rule 142 (argument_expression -> expression .)
    REQUIRE_ONCE    reduce using rule 142 (argument_expression -> expression .)
    PRINT           reduce using rule 142 (argument_expression -> expression .)
    YIELD           reduce using rule 142 (argument_expression -> expression .)
    YIELD_FROM      reduce using rule 142 (argument_expression -> expression .)
    COLON           reduce using rule 142 (argument_expression -> expression .)


state 511

    (143) variadic_unpacking -> ELLIPSIS . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 654
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 512

    (137) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 655


state 513

    (138) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> argument_expression_list .
    (140) argument_expression_list -> argument_expression_list . argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 656
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! RIGHT_PARENTHESIS [ reduce using rule 102 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 653
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 514

    (211) bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .
    (209) bitwise_AND_expression -> bitwise_AND_expression . AMPERSAND equality_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    BITWISE_XOR     reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    BITWISE_OR      reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    COALESCE        reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    TERNARY_OPERATION reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    AND             reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    XOR             reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    OR              reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    SEMICOLON       reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    STRING          reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    INCLUDE         reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    INCLUDE_ONCE    reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    REQUIRE         reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    REQUIRE_ONCE    reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    PRINT           reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    YIELD           reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    YIELD_FROM      reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    RIGHT_PARENTHESIS reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    COLON           reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    AS              reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ARROW           reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    RIGHT_CBRAC     reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    VARIABLE        reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    DOUBLE_POINT    reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    DOUBLE_ARROW    reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ELLIPSIS        reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ARRAY           reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    CALLABLE        reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    ITERABLE        reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    BOOL            reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    FLOAT           reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    INT             reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .)
    AMPERSAND       shift and go to state 354

  ! AMPERSAND       [ reduce using rule 211 (bitwise_exc_OR_expression -> bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression .) ]


state 515

    (121) array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 657


state 516

    (209) bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .
    (204) equality_expression -> equality_expression . EQUAL relational_expression
    (205) equality_expression -> equality_expression . IS_NOT_EQUAL relational_expression
    (206) equality_expression -> equality_expression . IS_IDENTICAL relational_expression
    (207) equality_expression -> equality_expression . IS_NOT_IDENTICAL relational_expression

    AMPERSAND       reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    BITWISE_XOR     reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    BITWISE_OR      reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    COALESCE        reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    TERNARY_OPERATION reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    AND             reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    XOR             reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    OR              reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    SEMICOLON       reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    STRING          reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    INCLUDE         reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    INCLUDE_ONCE    reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    REQUIRE         reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    REQUIRE_ONCE    reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    PRINT           reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    YIELD           reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    YIELD_FROM      reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    COLON           reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    AS              reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ARROW           reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    RIGHT_CBRAC     reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    VARIABLE        reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    DOUBLE_POINT    reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    DOUBLE_ARROW    reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ELLIPSIS        reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ARRAY           reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    CALLABLE        reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    ITERABLE        reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    BOOL            reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    FLOAT           reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    INT             reduce using rule 209 (bitwise_AND_expression -> bitwise_AND_expression AMPERSAND equality_expression .)
    EQUAL           shift and go to state 355
    IS_NOT_EQUAL    shift and go to state 356
    IS_IDENTICAL    shift and go to state 357
    IS_NOT_IDENTICAL shift and go to state 358


state 517

    (204) equality_expression -> equality_expression EQUAL relational_expression .
    (198) relational_expression -> relational_expression . LESS_THAN shift_expression
    (199) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    IS_IDENTICAL    reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    AMPERSAND       reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    BITWISE_XOR     reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    BITWISE_OR      reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    COALESCE        reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    TERNARY_OPERATION reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    XOR             reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEMICOLON       reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    INCLUDE         reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    REQUIRE         reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    PRINT           reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    YIELD           reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    YIELD_FROM      reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    COLON           reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    AS              reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    ARROW           reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    VARIABLE        reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOUBLE_POINT    reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELLIPSIS        reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    ARRAY           reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    CALLABLE        reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    ITERABLE        reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    BOOL            reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOAT           reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    INT             reduce using rule 204 (equality_expression -> equality_expression EQUAL relational_expression .)
    LESS_THAN       shift and go to state 359
    IS_SMALLER_OR_EQUAL shift and go to state 360
    IS_GREATER_OR_EQUAL shift and go to state 361
    GREATER_THAN_OR_EQUAL shift and go to state 362
    SPACESHIP       shift and go to state 363


state 518

    (205) equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .
    (198) relational_expression -> relational_expression . LESS_THAN shift_expression
    (199) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    IS_IDENTICAL    reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    AMPERSAND       reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    BITWISE_XOR     reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    BITWISE_OR      reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    COALESCE        reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    TERNARY_OPERATION reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    AND             reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    XOR             reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    OR              reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    SEMICOLON       reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    STRING          reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    INCLUDE         reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    REQUIRE         reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    PRINT           reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    YIELD           reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    YIELD_FROM      reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    COLON           reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    AS              reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ARROW           reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    VARIABLE        reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    DOUBLE_POINT    reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ELLIPSIS        reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ARRAY           reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    CALLABLE        reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    ITERABLE        reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    BOOL            reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    FLOAT           reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    INT             reduce using rule 205 (equality_expression -> equality_expression IS_NOT_EQUAL relational_expression .)
    LESS_THAN       shift and go to state 359
    IS_SMALLER_OR_EQUAL shift and go to state 360
    IS_GREATER_OR_EQUAL shift and go to state 361
    GREATER_THAN_OR_EQUAL shift and go to state 362
    SPACESHIP       shift and go to state 363


state 519

    (206) equality_expression -> equality_expression IS_IDENTICAL relational_expression .
    (198) relational_expression -> relational_expression . LESS_THAN shift_expression
    (199) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    IS_IDENTICAL    reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    AMPERSAND       reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    BITWISE_XOR     reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    BITWISE_OR      reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    COALESCE        reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    TERNARY_OPERATION reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    AND             reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    XOR             reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    OR              reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    SEMICOLON       reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    STRING          reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    INCLUDE         reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    REQUIRE         reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    PRINT           reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    YIELD           reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    YIELD_FROM      reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    COLON           reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    AS              reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ARROW           reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    VARIABLE        reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    DOUBLE_POINT    reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ELLIPSIS        reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ARRAY           reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    CALLABLE        reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    ITERABLE        reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    BOOL            reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    FLOAT           reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    INT             reduce using rule 206 (equality_expression -> equality_expression IS_IDENTICAL relational_expression .)
    LESS_THAN       shift and go to state 359
    IS_SMALLER_OR_EQUAL shift and go to state 360
    IS_GREATER_OR_EQUAL shift and go to state 361
    GREATER_THAN_OR_EQUAL shift and go to state 362
    SPACESHIP       shift and go to state 363


state 520

    (207) equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .
    (198) relational_expression -> relational_expression . LESS_THAN shift_expression
    (199) relational_expression -> relational_expression . IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> relational_expression . IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> relational_expression . GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> relational_expression . SPACESHIP shift_expression

    EQUAL           reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    IS_NOT_EQUAL    reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    IS_IDENTICAL    reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    IS_NOT_IDENTICAL reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    AMPERSAND       reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    BITWISE_XOR     reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    BITWISE_OR      reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    COALESCE        reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    TERNARY_OPERATION reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    AND             reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    XOR             reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    OR              reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    SEMICOLON       reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    STRING          reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    INCLUDE         reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    INCLUDE_ONCE    reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    REQUIRE         reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    REQUIRE_ONCE    reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    PRINT           reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    YIELD           reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    YIELD_FROM      reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    COLON           reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    AS              reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ARROW           reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    RIGHT_CBRAC     reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    VARIABLE        reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    DOUBLE_POINT    reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    DOUBLE_ARROW    reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ELLIPSIS        reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ARRAY           reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    CALLABLE        reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    ITERABLE        reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    BOOL            reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    FLOAT           reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    INT             reduce using rule 207 (equality_expression -> equality_expression IS_NOT_IDENTICAL relational_expression .)
    LESS_THAN       shift and go to state 359
    IS_SMALLER_OR_EQUAL shift and go to state 360
    IS_GREATER_OR_EQUAL shift and go to state 361
    GREATER_THAN_OR_EQUAL shift and go to state 362
    SPACESHIP       shift and go to state 363


state 521

    (198) relational_expression -> relational_expression LESS_THAN shift_expression .
    (195) shift_expression -> shift_expression . SL additive_expression
    (196) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SPACESHIP       reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    EQUAL           reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_NOT_EQUAL    reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_IDENTICAL    reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AMPERSAND       reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BITWISE_XOR     reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BITWISE_OR      reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COALESCE        reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    TERNARY_OPERATION reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AND             reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    XOR             reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    OR              reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SEMICOLON       reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    STRING          reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    INCLUDE         reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    INCLUDE_ONCE    reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    REQUIRE         reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    REQUIRE_ONCE    reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    PRINT           reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    YIELD           reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    YIELD_FROM      reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COLON           reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AS              reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ARROW           reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_CBRAC     reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    VARIABLE        reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    DOUBLE_POINT    reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    DOUBLE_ARROW    reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ELLIPSIS        reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ARRAY           reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    CALLABLE        reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    ITERABLE        reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    BOOL            reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    FLOAT           reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    INT             reduce using rule 198 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SL              shift and go to state 364
    SR              shift and go to state 365


state 522

    (199) relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .
    (195) shift_expression -> shift_expression . SL additive_expression
    (196) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    SPACESHIP       reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    EQUAL           reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_NOT_EQUAL    reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_IDENTICAL    reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    AMPERSAND       reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    BITWISE_XOR     reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    BITWISE_OR      reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    COALESCE        reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    TERNARY_OPERATION reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    AND             reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    XOR             reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    OR              reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    SEMICOLON       reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    STRING          reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    INCLUDE         reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    INCLUDE_ONCE    reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    REQUIRE         reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    REQUIRE_ONCE    reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    PRINT           reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    YIELD           reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    YIELD_FROM      reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    COLON           reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    AS              reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ARROW           reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    RIGHT_CBRAC     reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    VARIABLE        reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    DOUBLE_POINT    reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    DOUBLE_ARROW    reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ELLIPSIS        reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ARRAY           reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    CALLABLE        reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    ITERABLE        reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    BOOL            reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    FLOAT           reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    INT             reduce using rule 199 (relational_expression -> relational_expression IS_SMALLER_OR_EQUAL shift_expression .)
    SL              shift and go to state 364
    SR              shift and go to state 365


state 523

    (200) relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .
    (195) shift_expression -> shift_expression . SL additive_expression
    (196) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    SPACESHIP       reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    EQUAL           reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_NOT_EQUAL    reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_IDENTICAL    reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    AMPERSAND       reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    BITWISE_XOR     reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    BITWISE_OR      reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    COALESCE        reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    TERNARY_OPERATION reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    AND             reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    XOR             reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    OR              reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    SEMICOLON       reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    STRING          reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    INCLUDE         reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    INCLUDE_ONCE    reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    REQUIRE         reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    REQUIRE_ONCE    reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    PRINT           reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    YIELD           reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    YIELD_FROM      reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    COLON           reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    AS              reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ARROW           reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    RIGHT_CBRAC     reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    VARIABLE        reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    DOUBLE_POINT    reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    DOUBLE_ARROW    reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ELLIPSIS        reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ARRAY           reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    CALLABLE        reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    ITERABLE        reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    BOOL            reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    FLOAT           reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    INT             reduce using rule 200 (relational_expression -> relational_expression IS_GREATER_OR_EQUAL shift_expression .)
    SL              shift and go to state 364
    SR              shift and go to state 365


state 524

    (201) relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .
    (195) shift_expression -> shift_expression . SL additive_expression
    (196) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    SPACESHIP       reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    EQUAL           reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_NOT_EQUAL    reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_IDENTICAL    reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    AMPERSAND       reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    BITWISE_XOR     reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    BITWISE_OR      reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    COALESCE        reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    TERNARY_OPERATION reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    AND             reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    XOR             reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    OR              reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    SEMICOLON       reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    STRING          reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    INCLUDE         reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    INCLUDE_ONCE    reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    REQUIRE         reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    REQUIRE_ONCE    reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    PRINT           reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    YIELD           reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    YIELD_FROM      reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    COLON           reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    AS              reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ARROW           reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    RIGHT_CBRAC     reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    VARIABLE        reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    DOUBLE_POINT    reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    DOUBLE_ARROW    reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ELLIPSIS        reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ARRAY           reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    CALLABLE        reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    ITERABLE        reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    BOOL            reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    FLOAT           reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    INT             reduce using rule 201 (relational_expression -> relational_expression GREATER_THAN_OR_EQUAL shift_expression .)
    SL              shift and go to state 364
    SR              shift and go to state 365


state 525

    (202) relational_expression -> relational_expression SPACESHIP shift_expression .
    (195) shift_expression -> shift_expression . SL additive_expression
    (196) shift_expression -> shift_expression . SR additive_expression

    LESS_THAN       reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    SPACESHIP       reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    EQUAL           reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_NOT_EQUAL    reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_IDENTICAL    reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    IS_NOT_IDENTICAL reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    AMPERSAND       reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    BITWISE_XOR     reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    BITWISE_OR      reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    COALESCE        reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    TERNARY_OPERATION reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    AND             reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    XOR             reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    OR              reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    SEMICOLON       reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    STRING          reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    INCLUDE         reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    INCLUDE_ONCE    reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    REQUIRE         reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    REQUIRE_ONCE    reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    PRINT           reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    YIELD           reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    YIELD_FROM      reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    COLON           reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    AS              reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ARROW           reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    RIGHT_CBRAC     reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    VARIABLE        reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    DOUBLE_POINT    reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    DOUBLE_ARROW    reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ELLIPSIS        reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ARRAY           reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    CALLABLE        reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    ITERABLE        reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    BOOL            reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    FLOAT           reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    INT             reduce using rule 202 (relational_expression -> relational_expression SPACESHIP shift_expression .)
    SL              shift and go to state 364
    SR              shift and go to state 365


state 526

    (195) shift_expression -> shift_expression SL additive_expression .
    (191) additive_expression -> additive_expression . PLUS multiplicative_expression
    (192) additive_expression -> additive_expression . LESS multiplicative_expression
    (193) additive_expression -> additive_expression . CONCAT multiplicative_expression

    SL              reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    SR              reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    LESS_THAN       reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    SPACESHIP       reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    EQUAL           reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    IS_NOT_EQUAL    reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    IS_IDENTICAL    reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    IS_NOT_IDENTICAL reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    AMPERSAND       reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    BITWISE_XOR     reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    BITWISE_OR      reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    COALESCE        reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    TERNARY_OPERATION reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    AND             reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    XOR             reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    OR              reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    SEMICOLON       reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    STRING          reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    INCLUDE         reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    INCLUDE_ONCE    reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    REQUIRE         reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    REQUIRE_ONCE    reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    PRINT           reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    YIELD           reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    YIELD_FROM      reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    COLON           reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    AS              reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    ARROW           reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    RIGHT_CBRAC     reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    VARIABLE        reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    DOUBLE_POINT    reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    DOUBLE_ARROW    reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    ELLIPSIS        reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    ARRAY           reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    CALLABLE        reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    ITERABLE        reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    BOOL            reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    FLOAT           reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    INT             reduce using rule 195 (shift_expression -> shift_expression SL additive_expression .)
    PLUS            shift and go to state 366
    LESS            shift and go to state 367
    CONCAT          shift and go to state 368


state 527

    (196) shift_expression -> shift_expression SR additive_expression .
    (191) additive_expression -> additive_expression . PLUS multiplicative_expression
    (192) additive_expression -> additive_expression . LESS multiplicative_expression
    (193) additive_expression -> additive_expression . CONCAT multiplicative_expression

    SL              reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    SR              reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    LESS_THAN       reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    SPACESHIP       reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    EQUAL           reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    IS_NOT_EQUAL    reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    IS_IDENTICAL    reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    IS_NOT_IDENTICAL reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    AMPERSAND       reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    BITWISE_XOR     reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    BITWISE_OR      reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    COALESCE        reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    TERNARY_OPERATION reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    AND             reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    XOR             reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    OR              reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    SEMICOLON       reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    STRING          reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    INCLUDE         reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    INCLUDE_ONCE    reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    REQUIRE         reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    REQUIRE_ONCE    reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    PRINT           reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    YIELD           reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    YIELD_FROM      reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    COLON           reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    AS              reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    ARROW           reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    RIGHT_CBRAC     reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    VARIABLE        reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    DOUBLE_POINT    reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    DOUBLE_ARROW    reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    ELLIPSIS        reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    ARRAY           reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    CALLABLE        reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    ITERABLE        reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    BOOL            reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    FLOAT           reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    INT             reduce using rule 196 (shift_expression -> shift_expression SR additive_expression .)
    PLUS            shift and go to state 366
    LESS            shift and go to state 367
    CONCAT          shift and go to state 368


state 528

    (191) additive_expression -> additive_expression PLUS multiplicative_expression .
    (187) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (188) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (189) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS            reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONCAT          reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SL              reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SR              reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SPACESHIP       reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMPERSAND       reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BITWISE_OR      reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COALESCE        reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INCLUDE         reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    REQUIRE         reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PRINT           reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    YIELD           reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    YIELD_FROM      reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AS              reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ARROW           reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    VARIABLE        reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELLIPSIS        reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ARRAY           reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CALLABLE        reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ITERABLE        reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BOOL            reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOAT           reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INT             reduce using rule 191 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        shift and go to state 369
    DIVIDE          shift and go to state 370
    MODULO          shift and go to state 371


state 529

    (192) additive_expression -> additive_expression LESS multiplicative_expression .
    (187) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (188) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (189) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    LESS            reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    CONCAT          reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SL              reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SR              reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    LESS_THAN       reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SPACESHIP       reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    EQUAL           reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    AMPERSAND       reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    BITWISE_XOR     reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    BITWISE_OR      reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    COALESCE        reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    AND             reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    XOR             reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    OR              reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    SEMICOLON       reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    STRING          reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    INCLUDE         reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    REQUIRE         reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    PRINT           reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    YIELD           reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    YIELD_FROM      reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    COLON           reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    AS              reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ARROW           reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    VARIABLE        reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ELLIPSIS        reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ARRAY           reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    CALLABLE        reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ITERABLE        reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    BOOL            reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    FLOAT           reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    INT             reduce using rule 192 (additive_expression -> additive_expression LESS multiplicative_expression .)
    ASTERISK        shift and go to state 369
    DIVIDE          shift and go to state 370
    MODULO          shift and go to state 371


state 530

    (193) additive_expression -> additive_expression CONCAT multiplicative_expression .
    (187) multiplicative_expression -> multiplicative_expression . ASTERISK logical_not_expression
    (188) multiplicative_expression -> multiplicative_expression . DIVIDE logical_not_expression
    (189) multiplicative_expression -> multiplicative_expression . MODULO logical_not_expression

    PLUS            reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    LESS            reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    CONCAT          reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SL              reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SR              reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    LESS_THAN       reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SPACESHIP       reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    EQUAL           reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_NOT_EQUAL    reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_IDENTICAL    reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    IS_NOT_IDENTICAL reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    AMPERSAND       reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    BITWISE_XOR     reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    BITWISE_OR      reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    COALESCE        reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    TERNARY_OPERATION reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    AND             reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    XOR             reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    OR              reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    SEMICOLON       reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    STRING          reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    INCLUDE         reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    INCLUDE_ONCE    reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    REQUIRE         reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    REQUIRE_ONCE    reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    PRINT           reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    YIELD           reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    YIELD_FROM      reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    COLON           reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    AS              reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ARROW           reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    RIGHT_CBRAC     reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    VARIABLE        reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    DOUBLE_POINT    reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    DOUBLE_ARROW    reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ELLIPSIS        reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ARRAY           reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    CALLABLE        reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ITERABLE        reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    BOOL            reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    FLOAT           reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    INT             reduce using rule 193 (additive_expression -> additive_expression CONCAT multiplicative_expression .)
    ASTERISK        shift and go to state 369
    DIVIDE          shift and go to state 370
    MODULO          shift and go to state 371


state 531

    (187) multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .

    ASTERISK        reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    DIVIDE          reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    MODULO          reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    PLUS            reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    LESS            reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    CONCAT          reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SL              reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SR              reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    LESS_THAN       reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SPACESHIP       reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    EQUAL           reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_IDENTICAL    reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    AMPERSAND       reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    BITWISE_XOR     reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    BITWISE_OR      reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    COALESCE        reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    TERNARY_OPERATION reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    AND             reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    XOR             reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    OR              reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    SEMICOLON       reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    STRING          reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    INCLUDE         reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    REQUIRE         reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    PRINT           reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    YIELD           reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    YIELD_FROM      reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    COLON           reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    AS              reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ARROW           reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    VARIABLE        reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    DOUBLE_POINT    reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ELLIPSIS        reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ARRAY           reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    CALLABLE        reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    ITERABLE        reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    BOOL            reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    FLOAT           reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)
    INT             reduce using rule 187 (multiplicative_expression -> multiplicative_expression ASTERISK logical_not_expression .)


state 532

    (188) multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .

    ASTERISK        reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    DIVIDE          reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    MODULO          reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    PLUS            reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    LESS            reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    CONCAT          reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SL              reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SR              reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    LESS_THAN       reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SPACESHIP       reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    EQUAL           reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_IDENTICAL    reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    AMPERSAND       reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    BITWISE_XOR     reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    BITWISE_OR      reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    COALESCE        reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    TERNARY_OPERATION reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    AND             reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    XOR             reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    OR              reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    SEMICOLON       reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    STRING          reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    INCLUDE         reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    REQUIRE         reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    PRINT           reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    YIELD           reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    YIELD_FROM      reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    COLON           reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    AS              reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ARROW           reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    VARIABLE        reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    DOUBLE_POINT    reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ELLIPSIS        reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ARRAY           reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    CALLABLE        reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    ITERABLE        reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    BOOL            reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    FLOAT           reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)
    INT             reduce using rule 188 (multiplicative_expression -> multiplicative_expression DIVIDE logical_not_expression .)


state 533

    (189) multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .

    ASTERISK        reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    DIVIDE          reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    MODULO          reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    PLUS            reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    LESS            reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    CONCAT          reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SL              reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SR              reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    LESS_THAN       reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SPACESHIP       reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    EQUAL           reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_NOT_EQUAL    reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_IDENTICAL    reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    IS_NOT_IDENTICAL reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    AMPERSAND       reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    BITWISE_XOR     reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    BITWISE_OR      reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    COALESCE        reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    TERNARY_OPERATION reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    AND             reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    XOR             reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    OR              reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    SEMICOLON       reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    STRING          reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    INCLUDE         reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    INCLUDE_ONCE    reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    REQUIRE         reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    REQUIRE_ONCE    reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    PRINT           reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    YIELD           reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    YIELD_FROM      reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    RIGHT_PARENTHESIS reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    COLON           reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    AS              reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ARROW           reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    RIGHT_CBRAC     reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    VARIABLE        reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    DOUBLE_POINT    reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    DOUBLE_ARROW    reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ELLIPSIS        reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ARRAY           reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    CALLABLE        reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    ITERABLE        reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    BOOL            reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    FLOAT           reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)
    INT             reduce using rule 189 (multiplicative_expression -> multiplicative_expression MODULO logical_not_expression .)


state 534

    (42) primary_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (47) dereferencable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (51) callable_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 658


state 535

    (241) byref_assignment_expression -> variable EQUAL . AMPERSAND variable

    AMPERSAND       shift and go to state 472


state 536

    (160) class_constant_access_expression -> scope_resolution_qualifier DOUBLE_COLON . NAME
    (157) scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON . simple_variable
    (158) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON . member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (145) member_name -> . NAME
    (146) member_name -> . simple_variable
    (147) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS

    NAME            shift and go to state 492
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_CBRAC      shift and go to state 493

    simple_variable                shift and go to state 490
    member_name                    shift and go to state 491

state 537

    (182) instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .

    ASTERISK        reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    DIVIDE          reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    MODULO          reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    PLUS            reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    LESS            reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    CONCAT          reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SL              reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SR              reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    LESS_THAN       reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_SMALLER_OR_EQUAL reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_GREATER_OR_EQUAL reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    GREATER_THAN_OR_EQUAL reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SPACESHIP       reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    EQUAL           reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_NOT_EQUAL    reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_IDENTICAL    reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    IS_NOT_IDENTICAL reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    AMPERSAND       reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    BITWISE_XOR     reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    BITWISE_OR      reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    COALESCE        reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    TERNARY_OPERATION reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    AND             reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    XOR             reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    OR              reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    SEMICOLON       reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    STRING          reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INCLUDE         reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INCLUDE_ONCE    reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    REQUIRE         reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    REQUIRE_ONCE    reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    PRINT           reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    YIELD           reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    YIELD_FROM      reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    RIGHT_PARENTHESIS reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    COLON           reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    AS              reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ARROW           reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    RIGHT_CBRAC     reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    VARIABLE        reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    DOUBLE_POINT    reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    DOUBLE_ARROW    reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ELLIPSIS        reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ARRAY           reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    CALLABLE        reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    ITERABLE        reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    BOOL            reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    FLOAT           reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INT             reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)
    INSTANCEOF      reduce using rule 182 (instanceof_expression -> instanceof_subj INSTANCEOF class_type_designator .)


state 538

    (170) exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .

    ASTERISK        reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    DIVIDE          reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    MODULO          reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    PLUS            reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    LESS            reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    CONCAT          reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SL              reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SR              reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    LESS_THAN       reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_SMALLER_OR_EQUAL reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_GREATER_OR_EQUAL reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    GREATER_THAN_OR_EQUAL reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SPACESHIP       reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    EQUAL           reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_NOT_EQUAL    reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_IDENTICAL    reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    IS_NOT_IDENTICAL reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    AMPERSAND       reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    BITWISE_XOR     reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    BITWISE_OR      reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    COALESCE        reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    TERNARY_OPERATION reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    AND             reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    XOR             reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    OR              reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    SEMICOLON       reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    STRING          reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INCLUDE         reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INCLUDE_ONCE    reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    REQUIRE         reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    REQUIRE_ONCE    reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    PRINT           reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    YIELD           reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    YIELD_FROM      reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    RIGHT_PARENTHESIS reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    COLON           reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    AS              reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ARROW           reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    RIGHT_CBRAC     reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    VARIABLE        reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    DOUBLE_POINT    reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    DOUBLE_ARROW    reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ELLIPSIS        reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ARRAY           reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    CALLABLE        reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    ITERABLE        reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    BOOL            reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    FLOAT           reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INT             reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)
    INSTANCEOF      reduce using rule 170 (exponentiation_expression -> clone_expression DOUBLEASTERISK exponentiation_expression .)


state 539

    (83) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt . LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement

    LEFT_PARENTHESIS shift and go to state 659


state 540

    (97) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS . argument_expression_list COLON RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> . argument_expression_list
    (103) argument_expression_list_opt -> .
    (139) argument_expression_list -> . argument_expression
    (140) argument_expression_list -> . argument_expression_list argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 103 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression_list_opt   shift and go to state 660
    argument_expression_list       shift and go to state 661
    argument_expression            shift and go to state 508
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 541

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> . argument_expression_list
    (103) argument_expression_list_opt -> .
    (139) argument_expression_list -> . argument_expression
    (140) argument_expression_list -> . argument_expression_list argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 103 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression_list_opt   shift and go to state 662
    argument_expression_list       shift and go to state 663
    argument_expression            shift and go to state 508
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 542

    (101) object_creation_expression -> NEW CLASS class_base_clause_opt . class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (106) class_interface_clause_opt -> . class_interface_clause
    (107) class_interface_clause_opt -> .
    (454) class_interface_clause -> . IMPLEMENTS qualified_name
    (455) class_interface_clause -> . class_interface_clause qualified_name

    LEFT_CBRAC      reduce using rule 107 (class_interface_clause_opt -> .)
    IMPLEMENTS      shift and go to state 572

    class_interface_clause_opt     shift and go to state 664
    class_interface_clause         shift and go to state 665

state 543

    (104) class_base_clause_opt -> class_base_clause .

    IMPLEMENTS      reduce using rule 104 (class_base_clause_opt -> class_base_clause .)
    LEFT_CBRAC      reduce using rule 104 (class_base_clause_opt -> class_base_clause .)


state 544

    (116) new_variable -> qualified_name DOUBLE_COLON . simple_variable
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    simple_variable                shift and go to state 666

state 545

    (113) new_variable -> new_variable LEFT_CBRAC . expression_opt RIGHT_CBRAC
    (114) new_variable -> new_variable LEFT_CBRAC . expression RIGHT_PARENTHESIS
    (119) expression_opt -> . expression
    (120) expression_opt -> .
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_CBRAC     reduce using rule 120 (expression_opt -> .)
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression_opt                 shift and go to state 667
    expression                     shift and go to state 668
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 546

    (115) new_variable -> new_variable ARROW . member_name
    (145) member_name -> . NAME
    (146) member_name -> . simple_variable
    (147) member_name -> . LEFT_CBRAC expression RIGHT_PARENTHESIS
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    NAME            shift and go to state 495
    LEFT_CBRAC      shift and go to state 493
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    member_name                    shift and go to state 669
    simple_variable                shift and go to state 496

state 547

    (118) new_variable -> new_variable DOUBLE_COLON . simple_variable
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    simple_variable                shift and go to state 670

state 548

    (117) new_variable -> relative_scope DOUBLE_COLON . simple_variable
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC

    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126

    simple_variable                shift and go to state 671

state 549

    (154) shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .

    DOUBLEASTERISK  reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ASTERISK        reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    DIVIDE          reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    MODULO          reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    PLUS            reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    LESS            reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    CONCAT          reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SL              reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SR              reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    LESS_THAN       reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_SMALLER_OR_EQUAL reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_GREATER_OR_EQUAL reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    GREATER_THAN_OR_EQUAL reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SPACESHIP       reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    EQUAL           reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_NOT_EQUAL    reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_IDENTICAL    reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    IS_NOT_IDENTICAL reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    AMPERSAND       reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    BITWISE_XOR     reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    BITWISE_OR      reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    COALESCE        reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    TERNARY_OPERATION reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    AND             reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    XOR             reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    OR              reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    SEMICOLON       reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    STRING          reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INCLUDE         reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INCLUDE_ONCE    reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    REQUIRE         reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    REQUIRE_ONCE    reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    PRINT           reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    YIELD           reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    YIELD_FROM      reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    RIGHT_PARENTHESIS reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    COLON           reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    AS              reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ARROW           reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    RIGHT_CBRAC     reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    VARIABLE        reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    DOUBLE_POINT    reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    DOUBLE_ARROW    reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ELLIPSIS        reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ARRAY           reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    CALLABLE        reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    ITERABLE        reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    BOOL            reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    FLOAT           reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INT             reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)
    INSTANCEOF      reduce using rule 154 (shell_command_expression -> BACKTICK dq_char_sequence_opt BACKTICK .)


state 550

    (73) empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 672


state 551

    (74) eval_intrinsic -> EVAL LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 673


state 552

    (76) exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 674


state 553

    (119) expression_opt -> expression .

    RIGHT_PARENTHESIS reduce using rule 119 (expression_opt -> expression .)


state 554

    (78) exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 675


state 555

    (79) isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 676


state 556

    (80) variable_list_opt -> variable_list .
    (82) variable_list -> variable_list . variable
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    RIGHT_PARENTHESIS reduce using rule 80 (variable_list_opt -> variable_list .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    variable                       shift and go to state 414
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 557

    (396) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list . VARIABLE RIGHT_PARENTHESIS compound_statement
    (398) catch_name_list -> catch_name_list .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 677

  ! VARIABLE        [ reduce using rule 398 (catch_name_list -> catch_name_list .) ]


state 558

    (397) catch_name_list -> qualified_name .

    VARIABLE        reduce using rule 397 (catch_name_list -> qualified_name .)


state 559

    (400) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 400 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement .)


state 560

    (401) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDDECLARE SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 678
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 561

    (402) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .
    (304) expression_statement -> SEMICOLON .

  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for TRY resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DECLARE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ECHO resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for UNSET resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INTERFACE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for TRAIT resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for NAMESPACE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for GLOBAL resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for STATIC resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for GOTO resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for THROW resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INCLUDE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INCLUDE_ONCE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for REQUIRE_ONCE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ABSTRACT resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FINAL resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for YIELD resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for YIELD_FROM resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for WHITESPACE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for OPEN_TAG resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for OPEN_TAG_WITH_ECHO resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for RIGHT_CBRAC resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ELSE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDDECLARE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDWHILE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDFOR resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CASE resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDSWITCH resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDFOREACH resolved using rule 304 (expression_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENDIF resolved using rule 304 (expression_statement -> SEMICOLON .)
    LEFT_CBRAC      reduce using rule 304 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 304 (expression_statement -> SEMICOLON .)
    TRY             reduce using rule 304 (expression_statement -> SEMICOLON .)
    DECLARE         reduce using rule 304 (expression_statement -> SEMICOLON .)
    ECHO            reduce using rule 304 (expression_statement -> SEMICOLON .)
    UNSET           reduce using rule 304 (expression_statement -> SEMICOLON .)
    CONST           reduce using rule 304 (expression_statement -> SEMICOLON .)
    INTERFACE       reduce using rule 304 (expression_statement -> SEMICOLON .)
    TRAIT           reduce using rule 304 (expression_statement -> SEMICOLON .)
    NAMESPACE       reduce using rule 304 (expression_statement -> SEMICOLON .)
    USE             reduce using rule 304 (expression_statement -> SEMICOLON .)
    GLOBAL          reduce using rule 304 (expression_statement -> SEMICOLON .)
    STATIC          reduce using rule 304 (expression_statement -> SEMICOLON .)
    STRING          reduce using rule 304 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 304 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 304 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 304 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 304 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 304 (expression_statement -> SEMICOLON .)
    FOREACH         reduce using rule 304 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 304 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 304 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 304 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 304 (expression_statement -> SEMICOLON .)
    THROW           reduce using rule 304 (expression_statement -> SEMICOLON .)
    FUNCTION        reduce using rule 304 (expression_statement -> SEMICOLON .)
    INCLUDE         reduce using rule 304 (expression_statement -> SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 304 (expression_statement -> SEMICOLON .)
    REQUIRE         reduce using rule 304 (expression_statement -> SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 304 (expression_statement -> SEMICOLON .)
    ABSTRACT        reduce using rule 304 (expression_statement -> SEMICOLON .)
    FINAL           reduce using rule 304 (expression_statement -> SEMICOLON .)
    PRINT           reduce using rule 304 (expression_statement -> SEMICOLON .)
    YIELD           reduce using rule 304 (expression_statement -> SEMICOLON .)
    YIELD_FROM      reduce using rule 304 (expression_statement -> SEMICOLON .)
    CLASS           reduce using rule 304 (expression_statement -> SEMICOLON .)
    CLOSE_TAG       reduce using rule 304 (expression_statement -> SEMICOLON .)
    WHITESPACE      reduce using rule 304 (expression_statement -> SEMICOLON .)
    $end            reduce using rule 304 (expression_statement -> SEMICOLON .)
    OPEN_TAG        reduce using rule 304 (expression_statement -> SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 304 (expression_statement -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 304 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 304 (expression_statement -> SEMICOLON .)
    ELSEIF          reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDDECLARE      reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDWHILE        reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDFOR          reduce using rule 304 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 304 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDSWITCH       reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDFOREACH      reduce using rule 304 (expression_statement -> SEMICOLON .)
    ENDIF           reduce using rule 304 (expression_statement -> SEMICOLON .)

  ! LEFT_CBRAC      [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! SEMICOLON       [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! TRY             [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! DECLARE         [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ECHO            [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! UNSET           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CONST           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! INTERFACE       [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! TRAIT           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! NAMESPACE       [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! USE             [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! GLOBAL          [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! STATIC          [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! STRING          [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! IF              [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! WHILE           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! DO              [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FOR             [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! GOTO            [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! BREAK           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! RETURN          [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! THROW           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! INCLUDE         [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! INCLUDE_ONCE    [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! REQUIRE         [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! REQUIRE_ONCE    [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ABSTRACT        [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! FINAL           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! PRINT           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! YIELD           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! YIELD_FROM      [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CLASS           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CLOSE_TAG       [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! WHITESPACE      [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! $end            [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! OPEN_TAG        [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! OPEN_TAG_WITH_ECHO [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! RIGHT_CBRAC     [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ELSE            [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ELSEIF          [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDDECLARE      [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDWHILE        [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDFOR          [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! CASE            [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! DEFAULT         [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDSWITCH       [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDFOREACH      [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]
  ! ENDIF           [ reduce using rule 402 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON .) ]


state 562

    (403) declare_directive -> TICKS EQUALS literal .

    RIGHT_PARENTHESIS reduce using rule 403 (declare_directive -> TICKS EQUALS literal .)


state 563

    (65) literal -> string_literal .

    RIGHT_PARENTHESIS reduce using rule 65 (literal -> string_literal .)


state 564

    (68) string_literal -> STRING .

    RIGHT_PARENTHESIS reduce using rule 68 (string_literal -> STRING .)


state 565

    (404) declare_directive -> ENCODING EQUALS literal .

    RIGHT_PARENTHESIS reduce using rule 404 (declare_directive -> ENCODING EQUALS literal .)


state 566

    (405) declare_directive -> STRICT_TYPES EQUALS literal .

    RIGHT_PARENTHESIS reduce using rule 405 (declare_directive -> STRICT_TYPES EQUALS literal .)


state 567

    (47) dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (51) callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    ARROW           reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 51 (callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 568

    (409) unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 679


state 569

    (410) unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .

    LEFT_CBRAC      reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    TRY             reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    DECLARE         reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    UNSET           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    TRAIT           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    NAMESPACE       reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    USE             reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    GLOBAL          reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    STATIC          reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    GOTO            reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    THROW           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE         reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE         reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ABSTRACT        reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    YIELD           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    YIELD_FROM      reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CLOSE_TAG       reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    WHITESPACE      reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    OPEN_TAG        reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ELSEIF          reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDDECLARE      reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDWHILE        reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOR          reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    CASE            reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDSWITCH       reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOREACH      reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)
    ENDIF           reduce using rule 410 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON .)


state 570

    (442) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt . LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 680


state 571

    (447) class_interface_clauseopt -> class_interface_clause .
    (455) class_interface_clause -> class_interface_clause . qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    LEFT_CBRAC      reduce using rule 447 (class_interface_clauseopt -> class_interface_clause .)
    STRING          shift and go to state 109

    qualified_name                 shift and go to state 681
    name                           shift and go to state 188

state 572

    (454) class_interface_clause -> IMPLEMENTS . qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    qualified_name                 shift and go to state 682
    name                           shift and go to state 188

state 573

    (453) class_base_clause -> EXTENDS qualified_name .

    IMPLEMENTS      reduce using rule 453 (class_base_clause -> EXTENDS qualified_name .)
    LEFT_CBRAC      reduce using rule 453 (class_base_clause -> EXTENDS qualified_name .)


state 574

    (498) interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 683


state 575

    (501) interface_member_declarationsopt -> interface_member_declarations .
    (506) interface_member_declarations -> interface_member_declarations . interface_member_declaration
    (507) interface_member_declaration -> . class_const_declaration
    (508) interface_member_declaration -> . method_declaration
    (465) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (478) static_modifier -> . STATIC
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 501 (interface_member_declarationsopt -> interface_member_declarations .)
    CONST           reduce using rule 536 (visibility_modifier_opt -> .)
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    interface_member_declaration   shift and go to state 684
    class_const_declaration        shift and go to state 577
    method_declaration             shift and go to state 578
    visibility_modifier_opt        shift and go to state 579
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 580
    visibility_modifier            shift and go to state 581
    method_modifier                shift and go to state 439
    static_modifier                shift and go to state 582
    class_modifier                 shift and go to state 445

state 576

    (505) interface_member_declarations -> interface_member_declaration .

    PUBLIC          reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    PROTECTED       reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    PRIVATE         reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    STATIC          reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    ABSTRACT        reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    FINAL           reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    CONST           reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    FUNCTION        reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)
    RIGHT_CBRAC     reduce using rule 505 (interface_member_declarations -> interface_member_declaration .)


state 577

    (507) interface_member_declaration -> class_const_declaration .

    PUBLIC          reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    PROTECTED       reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    PRIVATE         reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    STATIC          reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    ABSTRACT        reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    FINAL           reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    CONST           reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    FUNCTION        reduce using rule 507 (interface_member_declaration -> class_const_declaration .)
    RIGHT_CBRAC     reduce using rule 507 (interface_member_declaration -> class_const_declaration .)


state 578

    (508) interface_member_declaration -> method_declaration .

    PUBLIC          reduce using rule 508 (interface_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 508 (interface_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 508 (interface_member_declaration -> method_declaration .)
    STATIC          reduce using rule 508 (interface_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 508 (interface_member_declaration -> method_declaration .)
    FINAL           reduce using rule 508 (interface_member_declaration -> method_declaration .)
    CONST           reduce using rule 508 (interface_member_declaration -> method_declaration .)
    FUNCTION        reduce using rule 508 (interface_member_declaration -> method_declaration .)
    RIGHT_CBRAC     reduce using rule 508 (interface_member_declaration -> method_declaration .)


state 579

    (465) class_const_declaration -> visibility_modifier_opt . CONST const_elements SEMICOLON

    CONST           shift and go to state 685


state 580

    (486) method_declaration -> method_modifiers . function_definition_header SEMICOLON
    (487) method_modifiersopt -> method_modifiers .
    (490) method_modifiers -> method_modifiers . method_modifier
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

  ! shift/reduce conflict for FUNCTION resolved as shift
    FUNCTION        shift and go to state 77
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

  ! FUNCTION        [ reduce using rule 487 (method_modifiersopt -> method_modifiers .) ]

    function_definition_header     shift and go to state 590
    method_modifier                shift and go to state 592
    visibility_modifier            shift and go to state 593
    static_modifier                shift and go to state 582
    class_modifier                 shift and go to state 445

state 581

    (535) visibility_modifier_opt -> visibility_modifier .
    (491) method_modifier -> visibility_modifier .

    CONST           reduce using rule 535 (visibility_modifier_opt -> visibility_modifier .)
    FUNCTION        reduce using rule 491 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 491 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 491 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 491 (method_modifier -> visibility_modifier .)
    STATIC          reduce using rule 491 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 491 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 491 (method_modifier -> visibility_modifier .)


state 582

    (492) method_modifier -> static_modifier .

    FUNCTION        reduce using rule 492 (method_modifier -> static_modifier .)
    PUBLIC          reduce using rule 492 (method_modifier -> static_modifier .)
    PROTECTED       reduce using rule 492 (method_modifier -> static_modifier .)
    PRIVATE         reduce using rule 492 (method_modifier -> static_modifier .)
    STATIC          reduce using rule 492 (method_modifier -> static_modifier .)
    ABSTRACT        reduce using rule 492 (method_modifier -> static_modifier .)
    FINAL           reduce using rule 492 (method_modifier -> static_modifier .)


state 583

    (509) trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    TRY             reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    DECLARE         reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ECHO            reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    UNSET           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CONST           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    INTERFACE       reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    TRAIT           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    USE             reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    GLOBAL          reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    STATIC          reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    STRING          reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    IF              reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    SWITCH          reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    WHILE           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    DO              reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FOR             reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FOREACH         reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    GOTO            reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CONTINUE        reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    BREAK           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    RETURN          reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    THROW           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    FINAL           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    PRINT           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    YIELD           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CLASS           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CLOSE_TAG       reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    WHITESPACE      reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    $end            reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    OPEN_TAG        reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    OPEN_TAG_WITH_ECHO reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ELSE            reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ELSEIF          reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDFOR          reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    CASE            reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    DEFAULT         reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)
    ENDIF           reduce using rule 509 (trait_declaration -> TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC .)


state 584

    (513) trait_member_declarations -> trait_member_declarations trait_member_declaration .

    VAR             reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    USE             reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    PUBLIC          reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    PROTECTED       reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    PRIVATE         reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    STATIC          reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    ABSTRACT        reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    FINAL           reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    FUNCTION        reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)
    RIGHT_CBRAC     reduce using rule 513 (trait_member_declarations -> trait_member_declarations trait_member_declaration .)


state 585

    (520) trait_use_clauses -> trait_use_clauses trait_use_clause .

    USE             reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    VAR             reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    PUBLIC          reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    PROTECTED       reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    PRIVATE         reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    STATIC          reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    ABSTRACT        reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    FINAL           reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    FUNCTION        reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)
    RIGHT_CBRAC     reduce using rule 520 (trait_use_clauses -> trait_use_clauses trait_use_clause .)


state 586

    (469) property_declaration -> property_modifier property_elements . SEMICOLON
    (480) property_elements -> property_elements . property_element
    (481) property_element -> . VARIABLE property_initializeropt SEMICOLON

    SEMICOLON       shift and go to state 686
    VARIABLE        shift and go to state 588

    property_element               shift and go to state 687

state 587

    (479) property_elements -> property_element .

    SEMICOLON       reduce using rule 479 (property_elements -> property_element .)
    VARIABLE        reduce using rule 479 (property_elements -> property_element .)


state 588

    (481) property_element -> VARIABLE . property_initializeropt SEMICOLON
    (482) property_initializeropt -> . property_initializer
    (483) property_initializeropt -> .
    (484) property_initializer -> . EQUAL constant_expression

    SEMICOLON       reduce using rule 483 (property_initializeropt -> .)
    EQUAL           shift and go to state 690

    property_initializeropt        shift and go to state 688
    property_initializer           shift and go to state 689

state 589

    (485) method_declaration -> method_modifiersopt function_definition .

    VAR             reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    USE             reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    PUBLIC          reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    PROTECTED       reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    PRIVATE         reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    STATIC          reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    ABSTRACT        reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    FINAL           reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    FUNCTION        reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    RIGHT_CBRAC     reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    CONST           reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)
    RIGHT_PARENTHESIS reduce using rule 485 (method_declaration -> method_modifiersopt function_definition .)


state 590

    (486) method_declaration -> method_modifiers function_definition_header . SEMICOLON

    SEMICOLON       shift and go to state 691


state 591

    (494) constructor_declaration -> method_modifiers FUNCTION . name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> method_modifiers FUNCTION . name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (412) function_definition_header -> FUNCTION . ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (564) name -> . STRING
    (413) ampersandopt -> . AMPERSAND
    (414) ampersandopt -> .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 109
    AMPERSAND       shift and go to state 149

  ! STRING          [ reduce using rule 414 (ampersandopt -> .) ]

    name                           shift and go to state 692
    ampersandopt                   shift and go to state 148

state 592

    (490) method_modifiers -> method_modifiers method_modifier .

    FUNCTION        reduce using rule 490 (method_modifiers -> method_modifiers method_modifier .)
    PUBLIC          reduce using rule 490 (method_modifiers -> method_modifiers method_modifier .)
    PROTECTED       reduce using rule 490 (method_modifiers -> method_modifiers method_modifier .)
    PRIVATE         reduce using rule 490 (method_modifiers -> method_modifiers method_modifier .)
    STATIC          reduce using rule 490 (method_modifiers -> method_modifiers method_modifier .)
    ABSTRACT        reduce using rule 490 (method_modifiers -> method_modifiers method_modifier .)
    FINAL           reduce using rule 490 (method_modifiers -> method_modifiers method_modifier .)


state 593

    (491) method_modifier -> visibility_modifier .

    FUNCTION        reduce using rule 491 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 491 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 491 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 491 (method_modifier -> visibility_modifier .)
    STATIC          reduce using rule 491 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 491 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 491 (method_modifier -> visibility_modifier .)


state 594

    (471) property_modifier -> visibility_modifier static_modifieropt .

    VARIABLE        reduce using rule 471 (property_modifier -> visibility_modifier static_modifieropt .)


state 595

    (473) static_modifieropt -> static_modifier .

    VARIABLE        reduce using rule 473 (static_modifieropt -> static_modifier .)


state 596

    (472) property_modifier -> static_modifier visibility_modifier_opt .

    VARIABLE        reduce using rule 472 (property_modifier -> static_modifier visibility_modifier_opt .)


state 597

    (535) visibility_modifier_opt -> visibility_modifier .

    VARIABLE        reduce using rule 535 (visibility_modifier_opt -> visibility_modifier .)


state 598

    (521) trait_use_clause -> USE trait_name_list . trait_use_specification
    (523) trait_name_list -> trait_name_list . qualified_name
    (524) trait_use_specification -> . SEMICOLON
    (525) trait_use_specification -> . LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC
    (554) qualified_name -> . name
    (564) name -> . STRING

    SEMICOLON       shift and go to state 695
    LEFT_CBRAC      shift and go to state 696
    STRING          shift and go to state 109

    trait_use_specification        shift and go to state 693
    qualified_name                 shift and go to state 694
    name                           shift and go to state 188

state 599

    (522) trait_name_list -> qualified_name .

    SEMICOLON       reduce using rule 522 (trait_name_list -> qualified_name .)
    LEFT_CBRAC      reduce using rule 522 (trait_name_list -> qualified_name .)
    STRING          reduce using rule 522 (trait_name_list -> qualified_name .)


state 600

    (555) namespace_aliasing_clause -> AS name .

    SEMICOLON       reduce using rule 555 (namespace_aliasing_clause -> AS name .)
    STRING          reduce using rule 555 (namespace_aliasing_clause -> AS name .)
    RIGHT_CBRAC     reduce using rule 555 (namespace_aliasing_clause -> AS name .)
    NAME            reduce using rule 555 (namespace_aliasing_clause -> AS name .)
    FUNCTION        reduce using rule 555 (namespace_aliasing_clause -> AS name .)
    CONST           reduce using rule 555 (namespace_aliasing_clause -> AS name .)


state 601

    (544) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR . LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (16) namespace_name -> namespace_name NS_SEPARATOR . NAME

    LEFT_CBRAC      shift and go to state 697
    NAME            shift and go to state 446


state 602

    (545) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC . namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (561) namespace_use_group_clauses_2 -> . namespace_use_group_clause_2
    (562) namespace_use_group_clauses_2 -> . namespace_use_group_clauses_2 namespace_use_group_clause_2
    (563) namespace_use_group_clause_2 -> . namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt
    (546) namespace_function_or_constopt -> . namespace_function_or_const
    (547) namespace_function_or_constopt -> .
    (556) namespace_function_or_const -> . FUNCTION
    (557) namespace_function_or_const -> . CONST

    NAME            reduce using rule 547 (namespace_function_or_constopt -> .)
    FUNCTION        shift and go to state 121
    CONST           shift and go to state 122

    namespace_use_group_clauses_2  shift and go to state 698
    namespace_use_group_clause_2   shift and go to state 699
    namespace_function_or_constopt shift and go to state 700
    namespace_function_or_const    shift and go to state 701

state 603

    (45) simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .

    SEMICOLON       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    VARIABLE        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOLLAR          reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    EQUAL           reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLEPLUS      reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLELESS      reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    POW_EQUAL       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MUL_EQUAL       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DIV_EQUAL       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MOD_EQUAL       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PLUS_EQUAL      reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MINUS_EQUAL     reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    CONCAT_EQUAL    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SL_EQUAL        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SR_EQUAL        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AND_EQUAL       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    XOR_EQUAL       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    OR_EQUAL        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ARROW           reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LEFT_CBRAC      reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ASTERISK        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DIVIDE          reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    MODULO          reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PLUS            reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LESS            reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    CONCAT          reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SL              reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SR              reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    COALESCE        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AND             reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    XOR             reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    OR              reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    STRING          reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INCLUDE         reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    REQUIRE         reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PRINT           reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    YIELD           reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    COLON           reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    AS              reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ARRAY           reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    CALLABLE        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    ITERABLE        reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    BOOL            reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    FLOAT           reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INT             reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    SELF            reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    PARENT          reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)
    STATIC          reduce using rule 45 (simple_variable -> DOLLAR LEFT_CBRAC expression RIGHT_CBRAC .)


state 604

    (307) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . elseif_clauses_1 else_clause_1
    (308) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . elseif_clauses_1
    (309) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . else_clause_1
    (310) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .
    (314) elseif_clauses_1 -> . elseif_clause_1
    (315) elseif_clauses_1 -> . elseif_clauses_1 elseif_clause_1
    (317) else_clause_1 -> . ELSE statement
    (316) elseif_clause_1 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    LEFT_CBRAC      reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            shift and go to state 705
    ELSEIF          shift and go to state 706

  ! ELSE            [ reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]
  ! ELSEIF          [ reduce using rule 310 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]

    elseif_clauses_1               shift and go to state 702
    else_clause_1                  shift and go to state 703
    elseif_clause_1                shift and go to state 704

state 605

    (311) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list else_clause_2 ENDIF SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement_list                 shift and go to state 707
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 606

    (322) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC . case_statements RIGHT_CBRAC
    (323) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC . RIGHT_CBRAC
    (326) case_statements -> . case_statement case_statements
    (327) case_statements -> . case_statement
    (328) case_statements -> . default_statement case_statements
    (329) case_statements -> . default_statement
    (330) case_statement -> . CASE expression case_default_label_terminator statement_list
    (331) case_statement -> . CASE expression case_default_label_terminator
    (332) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (333) default_statement -> . DEFAULT case_default_label_terminator

    RIGHT_CBRAC     shift and go to state 709
    CASE            shift and go to state 712
    DEFAULT         shift and go to state 713

    case_statements                shift and go to state 708
    case_statement                 shift and go to state 710
    default_statement              shift and go to state 711

state 607

    (324) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . ENDSWITCH SEMICOLON
    (326) case_statements -> . case_statement case_statements
    (327) case_statements -> . case_statement
    (328) case_statements -> . default_statement case_statements
    (329) case_statements -> . default_statement
    (330) case_statement -> . CASE expression case_default_label_terminator statement_list
    (331) case_statement -> . CASE expression case_default_label_terminator
    (332) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (333) default_statement -> . DEFAULT case_default_label_terminator

    ENDSWITCH       shift and go to state 715
    CASE            shift and go to state 712
    DEFAULT         shift and go to state 713

    case_statements                shift and go to state 714
    case_statement                 shift and go to state 710
    default_statement              shift and go to state 711

state 608

    (340) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 340 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)


state 609

    (341) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDWHILE SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement_list                 shift and go to state 716
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 610

    (342) do_statement -> DO statement WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 717


state 611

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . RIGHT_PARENTHESIS statement
    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (361) for_end_of_loop -> . for_expression_group
    (362) for_expression_group -> . expression
    (363) for_expression_group -> . for_expression_group COLON expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 719
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    for_end_of_loop                shift and go to state 718
    for_expression_group           shift and go to state 615
    expression                     shift and go to state 301
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 612

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control . SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    SEMICOLON       shift and go to state 720


state 613

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 721


state 614

    (350) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS . statement
    (358) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 723
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 722
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 615

    (361) for_end_of_loop -> for_expression_group .
    (363) for_expression_group -> for_expression_group . COLON expression

    RIGHT_PARENTHESIS reduce using rule 361 (for_end_of_loop -> for_expression_group .)
    COLON           shift and go to state 464


state 616

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS statement
    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (361) for_end_of_loop -> . for_expression_group
    (362) for_expression_group -> . expression
    (363) for_expression_group -> . for_expression_group COLON expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 725
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    for_end_of_loop                shift and go to state 724
    for_expression_group           shift and go to state 615
    expression                     shift and go to state 301
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 617

    (363) for_expression_group -> for_expression_group COLON expression .

    COLON           reduce using rule 363 (for_expression_group -> for_expression_group COLON expression .)
    SEMICOLON       reduce using rule 363 (for_expression_group -> for_expression_group COLON expression .)
    RIGHT_PARENTHESIS reduce using rule 363 (for_expression_group -> for_expression_group COLON expression .)


state 618

    (364) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key . foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key . foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (370) foreach_value -> . AMPERSAND_opt expression
    (371) foreach_value -> . AMPERSAND expression
    (372) foreach_value -> . list_intrinsic
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS

    AMPERSAND       shift and go to state 622
    STRING          reduce using rule 87 (AMPERSAND_opt -> .)
    INCLUDE         reduce using rule 87 (AMPERSAND_opt -> .)
    INCLUDE_ONCE    reduce using rule 87 (AMPERSAND_opt -> .)
    REQUIRE         reduce using rule 87 (AMPERSAND_opt -> .)
    REQUIRE_ONCE    reduce using rule 87 (AMPERSAND_opt -> .)
    PRINT           reduce using rule 87 (AMPERSAND_opt -> .)
    YIELD           reduce using rule 87 (AMPERSAND_opt -> .)
    YIELD_FROM      reduce using rule 87 (AMPERSAND_opt -> .)
    LIST            shift and go to state 170

    foreach_value                  shift and go to state 726
    AMPERSAND_opt                  shift and go to state 621
    list_intrinsic                 shift and go to state 623

state 619

    (365) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value . RIGHT_PARENTHESIS statement
    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 727


state 620

    (369) foreach_key -> expression . DOUBLE_ARROW

    DOUBLE_ARROW    shift and go to state 728


state 621

    (370) foreach_value -> AMPERSAND_opt . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 729
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 622

    (371) foreach_value -> AMPERSAND . expression
    (86) AMPERSAND_opt -> AMPERSAND .
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INCLUDE resolved as shift
  ! shift/reduce conflict for INCLUDE_ONCE resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for REQUIRE_ONCE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for YIELD resolved as shift
  ! shift/reduce conflict for YIELD_FROM resolved as shift
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! STRING          [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]
  ! INCLUDE         [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]
  ! INCLUDE_ONCE    [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]
  ! REQUIRE         [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]
  ! REQUIRE_ONCE    [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]
  ! PRINT           [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]
  ! YIELD           [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]
  ! YIELD_FROM      [ reduce using rule 86 (AMPERSAND_opt -> AMPERSAND .) ]

    expression                     shift and go to state 730
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 623

    (372) foreach_value -> list_intrinsic .

    RIGHT_PARENTHESIS reduce using rule 372 (foreach_value -> list_intrinsic .)


state 624

    (412) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt . RIGHT_PARENTHESIS return_type_opt

    RIGHT_PARENTHESIS shift and go to state 731


state 625

    (496) parameter_declaration_listopt -> parameter_declaration_list .
    (418) simple_parameter_declaration_list -> parameter_declaration_list . parameter_declaration
    (421) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (425) type_declarationopt -> . type_declaration
    (426) type_declarationopt -> .
    (427) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (428) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (429) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 496 (parameter_declaration_listopt -> parameter_declaration_list .)
    AMPERSAND       reduce using rule 426 (type_declarationopt -> .)
    VARIABLE        reduce using rule 426 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 633
    ARRAY           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 429 (TERNARY_OPERATIONopt -> .)

    parameter_declaration          shift and go to state 732
    type_declarationopt            shift and go to state 733
    type_declaration               shift and go to state 631
    TERNARY_OPERATIONopt           shift and go to state 632

state 626

    (415) parameter_declaration_list -> simple_parameter_declaration_list .
    (419) variadic_declaration_list -> simple_parameter_declaration_list . variadic_parameter
    (422) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (425) type_declarationopt -> . type_declaration
    (426) type_declarationopt -> .
    (427) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (428) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (429) TERNARY_OPERATIONopt -> .

  ! reduce/reduce conflict for AMPERSAND resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! shift/reduce conflict for TERNARY_OPERATION resolved as shift
  ! reduce/reduce conflict for ARRAY resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for CALLABLE resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for ITERABLE resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for BOOL resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for FLOAT resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for INT resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
  ! reduce/reduce conflict for STRING resolved using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    AMPERSAND       reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    VARIABLE        reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    ARRAY           reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    CALLABLE        reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    ITERABLE        reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    BOOL            reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    FLOAT           reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    INT             reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    STRING          reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    RIGHT_PARENTHESIS reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .)
    ELLIPSIS        reduce using rule 426 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 633

  ! TERNARY_OPERATION [ reduce using rule 415 (parameter_declaration_list -> simple_parameter_declaration_list .) ]
  ! AMPERSAND       [ reduce using rule 426 (type_declarationopt -> .) ]
  ! ARRAY           [ reduce using rule 429 (TERNARY_OPERATIONopt -> .) ]
  ! CALLABLE        [ reduce using rule 429 (TERNARY_OPERATIONopt -> .) ]
  ! ITERABLE        [ reduce using rule 429 (TERNARY_OPERATIONopt -> .) ]
  ! BOOL            [ reduce using rule 429 (TERNARY_OPERATIONopt -> .) ]
  ! FLOAT           [ reduce using rule 429 (TERNARY_OPERATIONopt -> .) ]
  ! INT             [ reduce using rule 429 (TERNARY_OPERATIONopt -> .) ]
  ! STRING          [ reduce using rule 429 (TERNARY_OPERATIONopt -> .) ]

    variadic_parameter             shift and go to state 734
    type_declarationopt            shift and go to state 735
    type_declaration               shift and go to state 631
    TERNARY_OPERATIONopt           shift and go to state 632

state 627

    (416) parameter_declaration_list -> variadic_declaration_list .

    TERNARY_OPERATION reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    AMPERSAND       reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    VARIABLE        reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    ARRAY           reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    CALLABLE        reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    ITERABLE        reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    BOOL            reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    FLOAT           reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    INT             reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    STRING          reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)
    RIGHT_PARENTHESIS reduce using rule 416 (parameter_declaration_list -> variadic_declaration_list .)


state 628

    (417) simple_parameter_declaration_list -> parameter_declaration .

    TERNARY_OPERATION reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    AMPERSAND       reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    ELLIPSIS        reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    ARRAY           reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    CALLABLE        reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    ITERABLE        reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    BOOL            reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    FLOAT           reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    INT             reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    STRING          reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    VARIABLE        reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)
    RIGHT_PARENTHESIS reduce using rule 417 (simple_parameter_declaration_list -> parameter_declaration .)


state 629

    (420) variadic_declaration_list -> variadic_parameter .

    TERNARY_OPERATION reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    AMPERSAND       reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    VARIABLE        reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    ARRAY           reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    CALLABLE        reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    ITERABLE        reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    BOOL            reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    FLOAT           reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    INT             reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    STRING          reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)
    RIGHT_PARENTHESIS reduce using rule 420 (variadic_declaration_list -> variadic_parameter .)


state 630

    (421) parameter_declaration -> type_declarationopt . ampersandopt VARIABLE default_argument_specifieropt
    (422) variadic_parameter -> type_declarationopt . ampersandopt ELLIPSIS VARIABLE
    (413) ampersandopt -> . AMPERSAND
    (414) ampersandopt -> .

    AMPERSAND       shift and go to state 149
    VARIABLE        reduce using rule 414 (ampersandopt -> .)
    ELLIPSIS        reduce using rule 414 (ampersandopt -> .)

    ampersandopt                   shift and go to state 736

state 631

    (425) type_declarationopt -> type_declaration .

    AMPERSAND       reduce using rule 425 (type_declarationopt -> type_declaration .)
    VARIABLE        reduce using rule 425 (type_declarationopt -> type_declaration .)
    ELLIPSIS        reduce using rule 425 (type_declarationopt -> type_declaration .)


state 632

    (427) type_declaration -> TERNARY_OPERATIONopt . base_type_declaration
    (430) base_type_declaration -> . ARRAY
    (431) base_type_declaration -> . CALLABLE
    (432) base_type_declaration -> . ITERABLE
    (433) base_type_declaration -> . scalar_type
    (434) base_type_declaration -> . qualified_name
    (435) scalar_type -> . BOOL
    (436) scalar_type -> . FLOAT
    (437) scalar_type -> . INT
    (438) scalar_type -> . STRING
    (554) qualified_name -> . name
    (564) name -> . STRING

    ARRAY           shift and go to state 738
    CALLABLE        shift and go to state 739
    ITERABLE        shift and go to state 740
    BOOL            shift and go to state 743
    FLOAT           shift and go to state 744
    INT             shift and go to state 745
    STRING          shift and go to state 746

    base_type_declaration          shift and go to state 737
    scalar_type                    shift and go to state 741
    qualified_name                 shift and go to state 742
    name                           shift and go to state 188

state 633

    (428) TERNARY_OPERATIONopt -> TERNARY_OPERATION .

    ARRAY           reduce using rule 428 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    CALLABLE        reduce using rule 428 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    ITERABLE        reduce using rule 428 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    BOOL            reduce using rule 428 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    FLOAT           reduce using rule 428 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    INT             reduce using rule 428 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)
    STRING          reduce using rule 428 (TERNARY_OPERATIONopt -> TERNARY_OPERATION .)


state 634

    (221) conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT . coalesce_expression
    (218) coalesce_expression -> . logical_inc_OR_expression_1
    (219) coalesce_expression -> . logical_inc_OR_expression_1 COALESCE coalesce_expression
    (216) logical_inc_OR_expression_1 -> . logical_AND_expression_1
    (217) logical_inc_OR_expression_1 -> . logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1
    (214) logical_AND_expression_1 -> . bitwise_inc_OR_expression
    (215) logical_AND_expression_1 -> . logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression
    (212) bitwise_inc_OR_expression -> . bitwise_exc_OR_expression
    (213) bitwise_inc_OR_expression -> . bitwise_inc_OR_expression BITWISE_OR bitwise_exc_OR_expression
    (210) bitwise_exc_OR_expression -> . bitwise_AND_expression
    (211) bitwise_exc_OR_expression -> . bitwise_exc_OR_expression BITWISE_XOR bitwise_AND_expression
    (208) bitwise_AND_expression -> . equality_expression
    (209) bitwise_AND_expression -> . bitwise_AND_expression AMPERSAND equality_expression
    (203) equality_expression -> . relational_expression
    (204) equality_expression -> . equality_expression EQUAL relational_expression
    (205) equality_expression -> . equality_expression IS_NOT_EQUAL relational_expression
    (206) equality_expression -> . equality_expression IS_IDENTICAL relational_expression
    (207) equality_expression -> . equality_expression IS_NOT_IDENTICAL relational_expression
    (197) relational_expression -> . shift_expression
    (198) relational_expression -> . relational_expression LESS_THAN shift_expression
    (199) relational_expression -> . relational_expression IS_SMALLER_OR_EQUAL shift_expression
    (200) relational_expression -> . relational_expression IS_GREATER_OR_EQUAL shift_expression
    (201) relational_expression -> . relational_expression GREATER_THAN_OR_EQUAL shift_expression
    (202) relational_expression -> . relational_expression SPACESHIP shift_expression
    (194) shift_expression -> . additive_expression
    (195) shift_expression -> . shift_expression SL additive_expression
    (196) shift_expression -> . shift_expression SR additive_expression
    (190) additive_expression -> . multiplicative_expression
    (191) additive_expression -> . additive_expression PLUS multiplicative_expression
    (192) additive_expression -> . additive_expression LESS multiplicative_expression
    (193) additive_expression -> . additive_expression CONCAT multiplicative_expression
    (186) multiplicative_expression -> . logical_not_expression
    (187) multiplicative_expression -> . multiplicative_expression ASTERISK logical_not_expression
    (188) multiplicative_expression -> . multiplicative_expression DIVIDE logical_not_expression
    (189) multiplicative_expression -> . multiplicative_expression MODULO logical_not_expression
    (184) logical_not_expression -> . instanceof_expression
    (185) logical_not_expression -> . NEGATION instanceof_expression
    (181) instanceof_expression -> . unary_expression
    (182) instanceof_expression -> . instanceof_subj INSTANCEOF class_type_designator
    (171) unary_expression -> . exponentiation_expression
    (172) unary_expression -> . unary_op_expression
    (173) unary_expression -> . error_control_expression
    (174) unary_expression -> . cast_expression
    (183) instanceof_subj -> . instanceof_expression
    (169) exponentiation_expression -> . clone_expression
    (170) exponentiation_expression -> . clone_expression DOUBLEASTERISK exponentiation_expression
    (175) unary_op_expression -> . unary_operator unary_expression
    (179) error_control_expression -> . AT unary_expression
    (180) cast_expression -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS unary_expression
    (167) clone_expression -> . primary_expression
    (168) clone_expression -> . CLONE primary_expression
    (176) unary_operator -> . PLUS
    (177) unary_operator -> . LESS
    (178) unary_operator -> . BITWISE_NOT
    (28) primary_expression -> . variable
    (29) primary_expression -> . class_constant_access_expression
    (30) primary_expression -> . constant_access_expression
    (31) primary_expression -> . literal
    (32) primary_expression -> . array_creation_expression
    (33) primary_expression -> . intrinsic
    (34) primary_expression -> . anonymous_function_creation_expression
    (35) primary_expression -> . object_creation_expression
    (36) primary_expression -> . postfix_increment_expression
    (37) primary_expression -> . postfix_decrement_expression
    (38) primary_expression -> . prefix_increment_expression
    (39) primary_expression -> . prefix_decrement_expression
    (40) primary_expression -> . byref_assignment_expression
    (41) primary_expression -> . shell_command_expression
    (42) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (160) class_constant_access_expression -> . scope_resolution_qualifier DOUBLE_COLON NAME
    (62) constant_access_expression -> . qualified_name
    (63) literal -> . integer_literal
    (64) literal -> . floating_literal
    (65) literal -> . string_literal
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (69) intrinsic -> . empty_intrinsic
    (70) intrinsic -> . eval_intrinsic
    (71) intrinsic -> . exit_intrinsic
    (72) intrinsic -> . isset_intrinsic
    (83) anonymous_function_creation_expression -> . static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (97) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (98) object_creation_expression -> . NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS
    (99) object_creation_expression -> . NEW class_type_designator
    (100) object_creation_expression -> . NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (101) object_creation_expression -> . NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (150) postfix_increment_expression -> . variable DOUBLEPLUS
    (151) postfix_decrement_expression -> . variable DOUBLELESS
    (152) prefix_increment_expression -> . DOUBLEPLUS variable
    (153) prefix_decrement_expression -> . DOUBLELESS variable
    (241) byref_assignment_expression -> . variable EQUAL AMPERSAND variable
    (154) shell_command_expression -> . BACKTICK dq_char_sequence_opt BACKTICK
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (554) qualified_name -> . name
    (66) integer_literal -> . LNUMBER
    (67) floating_literal -> . DNUMBER
    (68) string_literal -> . STRING
    (73) empty_intrinsic -> . EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (74) eval_intrinsic -> . EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (75) exit_intrinsic -> . EXIT
    (76) exit_intrinsic -> . EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (77) exit_intrinsic -> . DIE
    (78) exit_intrinsic -> . DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS
    (79) isset_intrinsic -> . ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS
    (84) static_opt -> . STATIC
    (85) static_opt -> .
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (564) name -> . STRING
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal

    NEGATION        shift and go to state 204
    AT              shift and go to state 213
    LEFT_PARENTHESIS shift and go to state 373
    CLONE           shift and go to state 215
    PLUS            shift and go to state 200
    LESS            shift and go to state 201
    BITWISE_NOT     shift and go to state 216
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    NEW             shift and go to state 236
    DOUBLEPLUS      shift and go to state 237
    DOUBLELESS      shift and go to state 238
    BACKTICK        shift and go to state 239
    LNUMBER         shift and go to state 240
    DNUMBER         shift and go to state 241
    STRING          shift and go to state 193
    EMPTY           shift and go to state 242
    EVAL            shift and go to state 243
    EXIT            shift and go to state 244
    DIE             shift and go to state 245
    ISSET           shift and go to state 246
    STATIC          shift and go to state 380
    FUNCTION        reduce using rule 85 (static_opt -> .)
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    SELF            shift and go to state 189
    PARENT          shift and go to state 190

    coalesce_expression            shift and go to state 747
    logical_inc_OR_expression_1    shift and go to state 166
    logical_AND_expression_1       shift and go to state 172
    bitwise_inc_OR_expression      shift and go to state 180
    bitwise_exc_OR_expression      shift and go to state 187
    bitwise_AND_expression         shift and go to state 194
    equality_expression            shift and go to state 195
    relational_expression          shift and go to state 196
    shift_expression               shift and go to state 197
    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 199
    logical_not_expression         shift and go to state 202
    instanceof_expression          shift and go to state 203
    unary_expression               shift and go to state 205
    instanceof_subj                shift and go to state 206
    exponentiation_expression      shift and go to state 207
    unary_op_expression            shift and go to state 208
    error_control_expression       shift and go to state 209
    cast_expression                shift and go to state 210
    clone_expression               shift and go to state 211
    unary_operator                 shift and go to state 212
    primary_expression             shift and go to state 214
    variable                       shift and go to state 374
    class_constant_access_expression shift and go to state 217
    constant_access_expression     shift and go to state 218
    literal                        shift and go to state 219
    array_creation_expression      shift and go to state 375
    intrinsic                      shift and go to state 220
    anonymous_function_creation_expression shift and go to state 221
    object_creation_expression     shift and go to state 222
    postfix_increment_expression   shift and go to state 223
    postfix_decrement_expression   shift and go to state 224
    prefix_increment_expression    shift and go to state 225
    prefix_decrement_expression    shift and go to state 226
    byref_assignment_expression    shift and go to state 227
    shell_command_expression       shift and go to state 228
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    scope_resolution_qualifier     shift and go to state 376
    qualified_name                 shift and go to state 377
    integer_literal                shift and go to state 229
    floating_literal               shift and go to state 230
    string_literal                 shift and go to state 378
    empty_intrinsic                shift and go to state 231
    eval_intrinsic                 shift and go to state 232
    exit_intrinsic                 shift and go to state 233
    isset_intrinsic                shift and go to state 234
    static_opt                     shift and go to state 235
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    dereferencable_expression      shift and go to state 379
    relative_scope                 shift and go to state 184
    name                           shift and go to state 188
    callable_expression            shift and go to state 183

state 635

    (222) conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .

    TERNARY_OPERATION reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    AND             reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    XOR             reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    OR              reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    SEMICOLON       reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    STRING          reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    INCLUDE         reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    REQUIRE         reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    PRINT           reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    YIELD           reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    YIELD_FROM      reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    COLON           reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    AS              reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ARROW           reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    VARIABLE        reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    DOUBLE_POINT    reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ELLIPSIS        reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    AMPERSAND       reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ARRAY           reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    CALLABLE        reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    ITERABLE        reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    BOOL            reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    FLOAT           reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)
    INT             reduce using rule 222 (conditional_expression -> conditional_expression TERNARY_OPERATION DOUBLE_POINT coalesce_expression .)


state 636

    (241) byref_assignment_expression -> variable EQUAL AMPERSAND variable .
    (46) dereferencable_expression -> variable .

  ! reduce/reduce conflict for ARROW resolved using rule 46 (dereferencable_expression -> variable .)
    DOUBLEASTERISK  reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ASTERISK        reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    DIVIDE          reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    MODULO          reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    PLUS            reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    LESS            reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    CONCAT          reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SL              reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SR              reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    LESS_THAN       reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_GREATER_OR_EQUAL reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SPACESHIP       reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    EQUAL           reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_NOT_EQUAL    reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_IDENTICAL    reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    IS_NOT_IDENTICAL reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    AMPERSAND       reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    BITWISE_XOR     reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    BITWISE_OR      reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    COALESCE        reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    TERNARY_OPERATION reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    AND             reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    XOR             reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    OR              reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    SEMICOLON       reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    STRING          reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INCLUDE         reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INCLUDE_ONCE    reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    REQUIRE         reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    REQUIRE_ONCE    reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    PRINT           reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    YIELD           reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    YIELD_FROM      reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    RIGHT_PARENTHESIS reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    COLON           reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    AS              reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    RIGHT_CBRAC     reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    VARIABLE        reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    DOUBLE_POINT    reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    DOUBLE_ARROW    reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ELLIPSIS        reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ARRAY           reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    CALLABLE        reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ITERABLE        reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    BOOL            reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    FLOAT           reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INT             reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    INSTANCEOF      reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .)
    ARROW           reduce using rule 46 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)

  ! ARROW           [ reduce using rule 241 (byref_assignment_expression -> variable EQUAL AMPERSAND variable .) ]


state 637

    (217) logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .
    (215) logical_AND_expression_1 -> logical_AND_expression_1 . AMPERSAND AMPERSAND bitwise_inc_OR_expression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    COALESCE        reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    BITWISE_OR      reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    TERNARY_OPERATION reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    AND             reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    XOR             reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    OR              reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    SEMICOLON       reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    STRING          reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    INCLUDE         reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    INCLUDE_ONCE    reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    REQUIRE         reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    REQUIRE_ONCE    reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    PRINT           reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    YIELD           reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    YIELD_FROM      reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    RIGHT_PARENTHESIS reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    COLON           reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    AS              reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ARROW           reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    RIGHT_CBRAC     reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    VARIABLE        reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    DOUBLE_POINT    reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    DOUBLE_ARROW    reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ELLIPSIS        reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ARRAY           reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    CALLABLE        reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    ITERABLE        reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    BOOL            reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    FLOAT           reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    INT             reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .)
    AMPERSAND       shift and go to state 337

  ! AMPERSAND       [ reduce using rule 217 (logical_inc_OR_expression_1 -> logical_inc_OR_expression_1 BITWISE_OR BITWISE_OR logical_AND_expression_1 .) ]


state 638

    (228) list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 228 (list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 228 (list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 228 (list_intrinsic -> LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS .)


state 639

    (234) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON . list_or_variable COLON
    (235) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON . list_or_variable
    (238) list_or_variable -> . list_intrinsic
    (239) list_or_variable -> . AMPERSAND variable
    (240) list_or_variable -> . variable
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    AMPERSAND       shift and go to state 484
    LIST            shift and go to state 170
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    list_or_variable               shift and go to state 748
    list_intrinsic                 shift and go to state 483
    variable                       shift and go to state 485
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 640

    (230) list_expression_list -> keyed_list_expression_list COLON .
    (237) keyed_list_expression_list -> keyed_list_expression_list COLON . expression DOUBLE_ARROW list_or_variable
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 230 (list_expression_list -> keyed_list_expression_list COLON .)
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 749
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 641

    (236) keyed_list_expression_list -> expression DOUBLE_ARROW . list_or_variable
    (238) list_or_variable -> . list_intrinsic
    (239) list_or_variable -> . AMPERSAND variable
    (240) list_or_variable -> . variable
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    AMPERSAND       shift and go to state 484
    LIST            shift and go to state 170
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    list_or_variable               shift and go to state 750
    list_intrinsic                 shift and go to state 483
    variable                       shift and go to state 485
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 642

    (239) list_or_variable -> AMPERSAND variable .
    (46) dereferencable_expression -> variable .

    COLON           reduce using rule 239 (list_or_variable -> AMPERSAND variable .)
    RIGHT_PARENTHESIS reduce using rule 239 (list_or_variable -> AMPERSAND variable .)
    ARROW           reduce using rule 46 (dereferencable_expression -> variable .)
    LEFT_CBRAC      reduce using rule 46 (dereferencable_expression -> variable .)
    DOUBLE_COLON    reduce using rule 46 (dereferencable_expression -> variable .)


state 643

    (215) logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .
    (213) bitwise_inc_OR_expression -> bitwise_inc_OR_expression . BITWISE_OR bitwise_exc_OR_expression

  ! shift/reduce conflict for BITWISE_OR resolved as shift
    AMPERSAND       reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    COALESCE        reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    TERNARY_OPERATION reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    AND             reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    XOR             reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    OR              reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    SEMICOLON       reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    STRING          reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    INCLUDE         reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    INCLUDE_ONCE    reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    REQUIRE         reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    REQUIRE_ONCE    reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    PRINT           reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    YIELD           reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    YIELD_FROM      reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    RIGHT_PARENTHESIS reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    COLON           reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    AS              reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ARROW           reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    RIGHT_CBRAC     reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    VARIABLE        reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    DOUBLE_POINT    reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    DOUBLE_ARROW    reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ELLIPSIS        reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ARRAY           reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    CALLABLE        reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    ITERABLE        reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    BOOL            reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    FLOAT           reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    INT             reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .)
    BITWISE_OR      shift and go to state 341

  ! BITWISE_OR      [ reduce using rule 215 (logical_AND_expression_1 -> logical_AND_expression_1 AMPERSAND AMPERSAND bitwise_inc_OR_expression .) ]


state 644

    (158) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> . argument_expression_list
    (103) argument_expression_list_opt -> .
    (139) argument_expression_list -> . argument_expression
    (140) argument_expression_list -> . argument_expression_list argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 103 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression_list_opt   shift and go to state 751
    argument_expression_list       shift and go to state 752
    argument_expression            shift and go to state 508
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 645

    (147) member_name -> LEFT_CBRAC expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 753


state 646

    (148) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS . argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> . argument_expression_list
    (103) argument_expression_list_opt -> .
    (139) argument_expression_list -> . argument_expression
    (140) argument_expression_list -> . argument_expression_list argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 103 (argument_expression_list_opt -> .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression_list_opt   shift and go to state 754
    argument_expression_list       shift and go to state 755
    argument_expression            shift and go to state 508
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 647

    (133) subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .

    EQUAL           reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLEPLUS      reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLELESS      reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    POW_EQUAL       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MUL_EQUAL       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DIV_EQUAL       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MOD_EQUAL       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PLUS_EQUAL      reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MINUS_EQUAL     reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CONCAT_EQUAL    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SL_EQUAL        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SR_EQUAL        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AND_EQUAL       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    XOR_EQUAL       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    OR_EQUAL        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARROW           reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LEFT_CBRAC      reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ASTERISK        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DIVIDE          reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MODULO          reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PLUS            reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS            reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CONCAT          reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SL              reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SR              reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COALESCE        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AND             reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    XOR             reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    OR              reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    STRING          reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PRINT           reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD           reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COLON           reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AS              reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    VARIABLE        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARRAY           reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CALLABLE        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ITERABLE        reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BOOL            reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    FLOAT           reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INT             reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOLLAR          reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SELF            reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PARENT          reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    STATIC          reduce using rule 133 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC .)


state 648

    (134) subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SELF            reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 134 (subscript_expression -> dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS .)


state 649

    (128) array_initializer_list -> array_element_initializer COLON array_element_initializer .

    COLON           reduce using rule 128 (array_initializer_list -> array_element_initializer COLON array_element_initializer .)
    RIGHT_CBRAC     reduce using rule 128 (array_initializer_list -> array_element_initializer COLON array_element_initializer .)
    RIGHT_PARENTHESIS reduce using rule 128 (array_initializer_list -> array_element_initializer COLON array_element_initializer .)


state 650

    (130) array_element_initializer -> element_key ARROW AMPERSAND_opt . element_value
    (132) element_value -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    element_value                  shift and go to state 756
    expression                     shift and go to state 504
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 651

    (135) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 135 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 652

    (136) function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 136 (function_call_expression -> qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 653

    (140) argument_expression_list -> argument_expression_list argument_expression .

    RIGHT_PARENTHESIS reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    ELLIPSIS        reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    STRING          reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    INCLUDE         reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    INCLUDE_ONCE    reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    REQUIRE         reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    REQUIRE_ONCE    reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    PRINT           reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    YIELD           reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    YIELD_FROM      reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)
    COLON           reduce using rule 140 (argument_expression_list -> argument_expression_list argument_expression .)


state 654

    (143) variadic_unpacking -> ELLIPSIS expression .

    RIGHT_PARENTHESIS reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    ELLIPSIS        reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    STRING          reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    INCLUDE         reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    INCLUDE_ONCE    reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    REQUIRE         reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    REQUIRE_ONCE    reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    PRINT           reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    YIELD           reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    YIELD_FROM      reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)
    COLON           reduce using rule 143 (variadic_unpacking -> ELLIPSIS expression .)


state 655

    (137) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 137 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 656

    (138) function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 138 (function_call_expression -> callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 657

    (121) array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .

    ARROW           reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 121 (array_creation_expression -> ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS .)


state 658

    (42) primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (47) dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .
    (51) callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

  ! reduce/reduce conflict for ARROW resolved using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 42 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 51 (callable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)

  ! ARROW           [ reduce using rule 47 (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .) ]


state 659

    (83) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS . parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement
    (88) parameter_declaration_list_opt -> . parameter_declaration_list
    (89) parameter_declaration_list_opt -> .
    (415) parameter_declaration_list -> . simple_parameter_declaration_list
    (416) parameter_declaration_list -> . variadic_declaration_list
    (417) simple_parameter_declaration_list -> . parameter_declaration
    (418) simple_parameter_declaration_list -> . parameter_declaration_list parameter_declaration
    (419) variadic_declaration_list -> . simple_parameter_declaration_list variadic_parameter
    (420) variadic_declaration_list -> . variadic_parameter
    (421) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (422) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (425) type_declarationopt -> . type_declaration
    (426) type_declarationopt -> .
    (427) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (428) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (429) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 89 (parameter_declaration_list_opt -> .)
    AMPERSAND       reduce using rule 426 (type_declarationopt -> .)
    VARIABLE        reduce using rule 426 (type_declarationopt -> .)
    ELLIPSIS        reduce using rule 426 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 633
    ARRAY           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 429 (TERNARY_OPERATIONopt -> .)

    parameter_declaration_list_opt shift and go to state 757
    parameter_declaration_list     shift and go to state 758
    simple_parameter_declaration_list shift and go to state 626
    variadic_declaration_list      shift and go to state 627
    parameter_declaration          shift and go to state 628
    variadic_parameter             shift and go to state 629
    type_declarationopt            shift and go to state 630
    type_declaration               shift and go to state 631
    TERNARY_OPERATIONopt           shift and go to state 632

state 660

    (97) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 759


state 661

    (98) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list . COLON RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> argument_expression_list .
    (140) argument_expression_list -> argument_expression_list . argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    COLON           shift and go to state 760
    RIGHT_PARENTHESIS reduce using rule 102 (argument_expression_list_opt -> argument_expression_list .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression            shift and go to state 653
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 662

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 761


state 663

    (102) argument_expression_list_opt -> argument_expression_list .
    (140) argument_expression_list -> argument_expression_list . argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS reduce using rule 102 (argument_expression_list_opt -> argument_expression_list .)
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    argument_expression            shift and go to state 653
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 664

    (101) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt . LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS

    LEFT_CBRAC      shift and go to state 762


state 665

    (106) class_interface_clause_opt -> class_interface_clause .
    (455) class_interface_clause -> class_interface_clause . qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    LEFT_CBRAC      reduce using rule 106 (class_interface_clause_opt -> class_interface_clause .)
    STRING          shift and go to state 109

    qualified_name                 shift and go to state 681
    name                           shift and go to state 188

state 666

    (116) new_variable -> qualified_name DOUBLE_COLON simple_variable .

    LEFT_CBRAC      reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SL              reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SR              reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    EQUAL           reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    AND             reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    OR              reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    AS              reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INT             reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 116 (new_variable -> qualified_name DOUBLE_COLON simple_variable .)


state 667

    (113) new_variable -> new_variable LEFT_CBRAC expression_opt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 763


state 668

    (114) new_variable -> new_variable LEFT_CBRAC expression . RIGHT_PARENTHESIS
    (119) expression_opt -> expression .

    RIGHT_PARENTHESIS shift and go to state 764
    RIGHT_CBRAC     reduce using rule 119 (expression_opt -> expression .)


state 669

    (115) new_variable -> new_variable ARROW member_name .

    LEFT_CBRAC      reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    ARROW           reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    DOUBLE_COLON    reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    LEFT_PARENTHESIS reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    DOUBLEASTERISK  reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    ASTERISK        reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    DIVIDE          reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    MODULO          reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    PLUS            reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    LESS            reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    CONCAT          reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    SL              reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    SR              reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    LESS_THAN       reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    IS_SMALLER_OR_EQUAL reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    IS_GREATER_OR_EQUAL reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    GREATER_THAN_OR_EQUAL reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    SPACESHIP       reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    EQUAL           reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    IS_NOT_EQUAL    reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    IS_IDENTICAL    reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    IS_NOT_IDENTICAL reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    AMPERSAND       reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    BITWISE_XOR     reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    BITWISE_OR      reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    COALESCE        reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    TERNARY_OPERATION reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    AND             reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    XOR             reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    OR              reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    SEMICOLON       reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    STRING          reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    INCLUDE         reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    INCLUDE_ONCE    reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    REQUIRE         reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    REQUIRE_ONCE    reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    PRINT           reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    YIELD           reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    YIELD_FROM      reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    RIGHT_PARENTHESIS reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    COLON           reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    AS              reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    RIGHT_CBRAC     reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    VARIABLE        reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    DOUBLE_POINT    reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    DOUBLE_ARROW    reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    ELLIPSIS        reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    ARRAY           reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    CALLABLE        reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    ITERABLE        reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    BOOL            reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    FLOAT           reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    INT             reduce using rule 115 (new_variable -> new_variable ARROW member_name .)
    INSTANCEOF      reduce using rule 115 (new_variable -> new_variable ARROW member_name .)


state 670

    (118) new_variable -> new_variable DOUBLE_COLON simple_variable .

    LEFT_CBRAC      reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SL              reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SR              reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    EQUAL           reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    AND             reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    OR              reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    AS              reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INT             reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 118 (new_variable -> new_variable DOUBLE_COLON simple_variable .)


state 671

    (117) new_variable -> relative_scope DOUBLE_COLON simple_variable .

    LEFT_CBRAC      reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ARROW           reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLE_COLON    reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    LEFT_PARENTHESIS reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLEASTERISK  reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ASTERISK        reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DIVIDE          reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    MODULO          reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    PLUS            reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    LESS            reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    CONCAT          reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SL              reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SR              reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    LESS_THAN       reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_SMALLER_OR_EQUAL reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_GREATER_OR_EQUAL reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    GREATER_THAN_OR_EQUAL reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SPACESHIP       reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    EQUAL           reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_NOT_EQUAL    reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_IDENTICAL    reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    IS_NOT_IDENTICAL reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    AMPERSAND       reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    BITWISE_XOR     reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    BITWISE_OR      reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    COALESCE        reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    TERNARY_OPERATION reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    AND             reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    XOR             reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    OR              reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    SEMICOLON       reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    STRING          reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INCLUDE         reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INCLUDE_ONCE    reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    REQUIRE         reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    REQUIRE_ONCE    reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    PRINT           reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    YIELD           reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    YIELD_FROM      reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    RIGHT_PARENTHESIS reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    COLON           reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    AS              reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    RIGHT_CBRAC     reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    VARIABLE        reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLE_POINT    reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    DOUBLE_ARROW    reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ELLIPSIS        reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ARRAY           reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    CALLABLE        reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    ITERABLE        reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    BOOL            reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    FLOAT           reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INT             reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)
    INSTANCEOF      reduce using rule 117 (new_variable -> relative_scope DOUBLE_COLON simple_variable .)


state 672

    (73) empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 73 (empty_intrinsic -> EMPTY LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 673

    (74) eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 74 (eval_intrinsic -> EVAL LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 674

    (76) exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 76 (exit_intrinsic -> EXIT LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)


state 675

    (78) exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 78 (exit_intrinsic -> DIE LEFT_PARENTHESIS expression_opt RIGHT_PARENTHESIS .)


state 676

    (79) isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 79 (isset_intrinsic -> ISSET LEFT_PARENTHESIS variable_list_opt RIGHT_PARENTHESIS .)


state 677

    (396) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE . RIGHT_PARENTHESIS compound_statement

    RIGHT_PARENTHESIS shift and go to state 765


state 678

    (401) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDDECLARE SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDDECLARE      shift and go to state 766
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 679

    (409) unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .

    LEFT_CBRAC      reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    TRY             reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    DECLARE         reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    UNSET           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    TRAIT           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    NAMESPACE       reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    USE             reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    GLOBAL          reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    STATIC          reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    GOTO            reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    THROW           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE         reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE         reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ABSTRACT        reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    YIELD           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    YIELD_FROM      reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CLOSE_TAG       reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    WHITESPACE      reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    OPEN_TAG        reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ELSEIF          reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDDECLARE      reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDWHILE        reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOR          reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    CASE            reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDSWITCH       reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOREACH      reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)
    ENDIF           reduce using rule 409 (unset_statement -> UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON .)


state 680

    (442) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC . class_member_declarationsopt RIGHT_CBRAC
    (449) class_member_declarationsopt -> . class_member_declarations
    (450) class_member_declarationsopt -> .
    (456) class_member_declarations -> . class_member_declaration
    (457) class_member_declarations -> . class_member_declarations class_member_declaration
    (458) class_member_declaration -> . class_const_declaration
    (459) class_member_declaration -> . property_declaration
    (460) class_member_declaration -> . method_declaration
    (461) class_member_declaration -> . constructor_declaration
    (462) class_member_declaration -> . destructor_declaration
    (463) class_member_declaration -> . trait_use_clause
    (465) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (469) property_declaration -> . property_modifier property_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (494) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (470) property_modifier -> . VAR
    (471) property_modifier -> . visibility_modifier static_modifieropt
    (472) property_modifier -> . static_modifier visibility_modifier_opt
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 450 (class_member_declarationsopt -> .)
    USE             shift and go to state 440
    CONST           reduce using rule 536 (visibility_modifier_opt -> .)
    VAR             shift and go to state 436
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    class_member_declarationsopt   shift and go to state 767
    class_member_declarations      shift and go to state 768
    class_member_declaration       shift and go to state 769
    class_const_declaration        shift and go to state 770
    property_declaration           shift and go to state 771
    method_declaration             shift and go to state 772
    constructor_declaration        shift and go to state 773
    destructor_declaration         shift and go to state 774
    trait_use_clause               shift and go to state 775
    visibility_modifier_opt        shift and go to state 579
    property_modifier              shift and go to state 432
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 434
    visibility_modifier            shift and go to state 776
    static_modifier                shift and go to state 438
    method_modifier                shift and go to state 439
    class_modifier                 shift and go to state 445

state 681

    (455) class_interface_clause -> class_interface_clause qualified_name .

    STRING          reduce using rule 455 (class_interface_clause -> class_interface_clause qualified_name .)
    LEFT_CBRAC      reduce using rule 455 (class_interface_clause -> class_interface_clause qualified_name .)


state 682

    (454) class_interface_clause -> IMPLEMENTS qualified_name .

    STRING          reduce using rule 454 (class_interface_clause -> IMPLEMENTS qualified_name .)
    LEFT_CBRAC      reduce using rule 454 (class_interface_clause -> IMPLEMENTS qualified_name .)


state 683

    (498) interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    TRY             reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    DECLARE         reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ECHO            reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    UNSET           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CONST           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    INTERFACE       reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    TRAIT           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    USE             reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    GLOBAL          reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    STATIC          reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    STRING          reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    IF              reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    SWITCH          reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    WHILE           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    DO              reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FOR             reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FOREACH         reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    GOTO            reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CONTINUE        reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    BREAK           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    RETURN          reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    THROW           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    FINAL           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    PRINT           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    YIELD           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CLASS           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CLOSE_TAG       reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    WHITESPACE      reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    $end            reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    OPEN_TAG        reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    OPEN_TAG_WITH_ECHO reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ELSE            reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ELSEIF          reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDFOR          reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    CASE            reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    DEFAULT         reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)
    ENDIF           reduce using rule 498 (interface_declaration -> INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC .)


state 684

    (506) interface_member_declarations -> interface_member_declarations interface_member_declaration .

    PUBLIC          reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PROTECTED       reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PRIVATE         reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    STATIC          reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    ABSTRACT        reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FINAL           reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    CONST           reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FUNCTION        reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    RIGHT_CBRAC     reduce using rule 506 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)


state 685

    (465) class_const_declaration -> visibility_modifier_opt CONST . const_elements SEMICOLON
    (466) const_elements -> . const_element
    (467) const_elements -> . const_elements const_element
    (468) const_element -> . name EQUAL constant_expression
    (564) name -> . STRING

    STRING          shift and go to state 109

    const_elements                 shift and go to state 777
    const_element                  shift and go to state 107
    name                           shift and go to state 108

state 686

    (469) property_declaration -> property_modifier property_elements SEMICOLON .

    VAR             reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    USE             reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    PUBLIC          reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    PROTECTED       reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    PRIVATE         reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    STATIC          reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    ABSTRACT        reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    FINAL           reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    FUNCTION        reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    CONST           reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 469 (property_declaration -> property_modifier property_elements SEMICOLON .)


state 687

    (480) property_elements -> property_elements property_element .

    SEMICOLON       reduce using rule 480 (property_elements -> property_elements property_element .)
    VARIABLE        reduce using rule 480 (property_elements -> property_elements property_element .)


state 688

    (481) property_element -> VARIABLE property_initializeropt . SEMICOLON

    SEMICOLON       shift and go to state 778


state 689

    (482) property_initializeropt -> property_initializer .

    SEMICOLON       reduce using rule 482 (property_initializeropt -> property_initializer .)


state 690

    (484) property_initializer -> EQUAL . constant_expression
    (278) constant_expression -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    constant_expression            shift and go to state 779
    expression                     shift and go to state 417
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 691

    (486) method_declaration -> method_modifiers function_definition_header SEMICOLON .

    VAR             reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    USE             reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    PUBLIC          reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    PROTECTED       reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    PRIVATE         reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    STATIC          reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    ABSTRACT        reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    FINAL           reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    FUNCTION        reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    CONST           reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 486 (method_declaration -> method_modifiers function_definition_header SEMICOLON .)


state 692

    (494) constructor_declaration -> method_modifiers FUNCTION name . AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> method_modifiers FUNCTION name . AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 348
    CONSTRUCT       reduce using rule 87 (AMPERSAND_opt -> .)
    DESTRUCT        reduce using rule 87 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 780

state 693

    (521) trait_use_clause -> USE trait_name_list trait_use_specification .

    USE             reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    VAR             reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    PUBLIC          reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    PROTECTED       reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    PRIVATE         reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    STATIC          reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    ABSTRACT        reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    FINAL           reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    FUNCTION        reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    RIGHT_CBRAC     reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    CONST           reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)
    RIGHT_PARENTHESIS reduce using rule 521 (trait_use_clause -> USE trait_name_list trait_use_specification .)


state 694

    (523) trait_name_list -> trait_name_list qualified_name .

    SEMICOLON       reduce using rule 523 (trait_name_list -> trait_name_list qualified_name .)
    LEFT_CBRAC      reduce using rule 523 (trait_name_list -> trait_name_list qualified_name .)
    STRING          reduce using rule 523 (trait_name_list -> trait_name_list qualified_name .)


state 695

    (524) trait_use_specification -> SEMICOLON .

    USE             reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    VAR             reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    PUBLIC          reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    PROTECTED       reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    PRIVATE         reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    STATIC          reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    ABSTRACT        reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    FINAL           reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    FUNCTION        reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    CONST           reduce using rule 524 (trait_use_specification -> SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 524 (trait_use_specification -> SEMICOLON .)


state 696

    (525) trait_use_specification -> LEFT_CBRAC . trait_select_and_alias_clausesopt RIGHT_CBRAC
    (526) trait_select_and_alias_clausesopt -> . trait_select_and_alias_clauses
    (527) trait_select_and_alias_clausesopt -> .
    (528) trait_select_and_alias_clauses -> . trait_select_and_alias_clause
    (529) trait_select_and_alias_clauses -> . trait_select_and_alias_clauses trait_select_and_alias_clause
    (530) trait_select_and_alias_clause -> . trait_select_insteadof_clause SEMICOLON
    (531) trait_select_and_alias_clause -> . trait_alias_as_clause SEMICOLON
    (532) trait_select_insteadof_clause -> . qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
    (533) trait_alias_as_clause -> . name AS visibility_modifier_opt name
    (534) trait_alias_as_clause -> . name AS visibility_modifier nameopt
    (554) qualified_name -> . name
    (564) name -> . STRING

    RIGHT_CBRAC     reduce using rule 527 (trait_select_and_alias_clausesopt -> .)
    STRING          shift and go to state 109

    trait_select_and_alias_clausesopt shift and go to state 781
    trait_select_and_alias_clauses shift and go to state 782
    trait_select_and_alias_clause  shift and go to state 783
    trait_select_insteadof_clause  shift and go to state 784
    trait_alias_as_clause          shift and go to state 785
    qualified_name                 shift and go to state 786
    name                           shift and go to state 787

state 697

    (544) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC . namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (558) namespace_use_group_clauses_1 -> . namespace_use_group_clause_1
    (559) namespace_use_group_clauses_1 -> . namespace_use_group_clauses_1 namespace_use_group_clause_1
    (560) namespace_use_group_clause_1 -> . namespace_name namespace_aliasing_clause_opt
    (15) namespace_name -> . NAME
    (16) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 116

    namespace_name                 shift and go to state 788
    namespace_use_group_clauses_1  shift and go to state 789
    namespace_use_group_clause_1   shift and go to state 790

state 698

    (545) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 . RIGHT_CBRAC SEMICOLON
    (562) namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 . namespace_use_group_clause_2
    (563) namespace_use_group_clause_2 -> . namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt
    (546) namespace_function_or_constopt -> . namespace_function_or_const
    (547) namespace_function_or_constopt -> .
    (556) namespace_function_or_const -> . FUNCTION
    (557) namespace_function_or_const -> . CONST

    RIGHT_CBRAC     shift and go to state 791
    NAME            reduce using rule 547 (namespace_function_or_constopt -> .)
    FUNCTION        shift and go to state 121
    CONST           shift and go to state 122

    namespace_use_group_clause_2   shift and go to state 792
    namespace_function_or_constopt shift and go to state 700
    namespace_function_or_const    shift and go to state 701

state 699

    (561) namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .

    RIGHT_CBRAC     reduce using rule 561 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)
    FUNCTION        reduce using rule 561 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)
    CONST           reduce using rule 561 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)
    NAME            reduce using rule 561 (namespace_use_group_clauses_2 -> namespace_use_group_clause_2 .)


state 700

    (563) namespace_use_group_clause_2 -> namespace_function_or_constopt . namespace_name namespace_aliasing_clause_opt
    (15) namespace_name -> . NAME
    (16) namespace_name -> . namespace_name NS_SEPARATOR NAME

    NAME            shift and go to state 116

    namespace_name                 shift and go to state 793

state 701

    (546) namespace_function_or_constopt -> namespace_function_or_const .

    NAME            reduce using rule 546 (namespace_function_or_constopt -> namespace_function_or_const .)


state 702

    (307) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 . else_clause_1
    (308) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .
    (315) elseif_clauses_1 -> elseif_clauses_1 . elseif_clause_1
    (317) else_clause_1 -> . ELSE statement
    (316) elseif_clause_1 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    LEFT_CBRAC      reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    SEMICOLON       reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    TRY             reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    DECLARE         reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ECHO            reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    UNSET           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CONST           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    INTERFACE       reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    TRAIT           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    NAMESPACE       reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    USE             reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    GLOBAL          reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    STATIC          reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    STRING          reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    IF              reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    SWITCH          reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    WHILE           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    DO              reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FOR             reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FOREACH         reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    GOTO            reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CONTINUE        reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    BREAK           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    RETURN          reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    THROW           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FUNCTION        reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    INCLUDE         reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    INCLUDE_ONCE    reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    REQUIRE         reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    REQUIRE_ONCE    reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ABSTRACT        reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    FINAL           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    PRINT           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    YIELD           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    YIELD_FROM      reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CLASS           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CLOSE_TAG       reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    WHITESPACE      reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    $end            reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    OPEN_TAG        reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    OPEN_TAG_WITH_ECHO reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    RIGHT_CBRAC     reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDDECLARE      reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDWHILE        reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDFOR          reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    CASE            reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    DEFAULT         reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDSWITCH       reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDFOREACH      reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ENDIF           reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .)
    ELSE            shift and go to state 705
    ELSEIF          shift and go to state 706

  ! ELSE            [ reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .) ]
  ! ELSEIF          [ reduce using rule 308 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 .) ]

    else_clause_1                  shift and go to state 794
    elseif_clause_1                shift and go to state 795

state 703

    (309) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .

    LEFT_CBRAC      reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    SEMICOLON       reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    TRY             reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    DECLARE         reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ECHO            reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    UNSET           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CONST           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    INTERFACE       reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    TRAIT           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    NAMESPACE       reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    USE             reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    GLOBAL          reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    STATIC          reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    STRING          reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    IF              reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    SWITCH          reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    WHILE           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    DO              reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FOR             reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FOREACH         reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    GOTO            reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CONTINUE        reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    BREAK           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    RETURN          reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    THROW           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FUNCTION        reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    INCLUDE         reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    INCLUDE_ONCE    reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    REQUIRE         reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    REQUIRE_ONCE    reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ABSTRACT        reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    FINAL           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    PRINT           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    YIELD           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    YIELD_FROM      reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CLASS           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CLOSE_TAG       reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    WHITESPACE      reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    $end            reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    OPEN_TAG        reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    OPEN_TAG_WITH_ECHO reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    RIGHT_CBRAC     reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ELSE            reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ELSEIF          reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDDECLARE      reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDWHILE        reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDFOR          reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    CASE            reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    DEFAULT         reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDSWITCH       reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDFOREACH      reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)
    ENDIF           reduce using rule 309 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1 .)


state 704

    (314) elseif_clauses_1 -> elseif_clause_1 .

    LEFT_CBRAC      reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    SEMICOLON       reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    TRY             reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    DECLARE         reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ECHO            reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    UNSET           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    CONST           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    INTERFACE       reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    TRAIT           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    NAMESPACE       reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    USE             reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    GLOBAL          reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    STATIC          reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    STRING          reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    IF              reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    SWITCH          reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    WHILE           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    DO              reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    FOR             reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    FOREACH         reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    GOTO            reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    CONTINUE        reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    BREAK           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    RETURN          reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    THROW           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    FUNCTION        reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    INCLUDE         reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    INCLUDE_ONCE    reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    REQUIRE         reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    REQUIRE_ONCE    reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ABSTRACT        reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    FINAL           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    PRINT           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    YIELD           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    YIELD_FROM      reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    CLASS           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    CLOSE_TAG       reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    WHITESPACE      reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    $end            reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    OPEN_TAG        reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    OPEN_TAG_WITH_ECHO reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    RIGHT_CBRAC     reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ELSE            reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ELSEIF          reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDDECLARE      reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDWHILE        reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDFOR          reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    CASE            reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    DEFAULT         reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDSWITCH       reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDFOREACH      reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)
    ENDIF           reduce using rule 314 (elseif_clauses_1 -> elseif_clause_1 .)


state 705

    (317) else_clause_1 -> ELSE . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 796
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 706

    (316) elseif_clause_1 -> ELSEIF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement

    LEFT_PARENTHESIS shift and go to state 797


state 707

    (311) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . else_clause_2 ENDIF SEMICOLON
    (301) statement_list -> statement_list . statement
    (318) elseif_clauses_2 -> . elseif_clause_2
    (319) elseif_clauses_2 -> . elseif_clauses_2 elseif_clause_2
    (321) else_clause_2 -> . ELSE DOUBLE_POINT statement_list
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (320) elseif_clause_2 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ELSE            shift and go to state 801
    ELSEIF          shift and go to state 802
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    elseif_clauses_2               shift and go to state 798
    else_clause_2                  shift and go to state 799
    statement                      shift and go to state 95
    elseif_clause_2                shift and go to state 800
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 708

    (322) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 803


state 709

    (323) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    TRY             reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    DECLARE         reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ECHO            reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    UNSET           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CONST           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    INTERFACE       reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    TRAIT           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    USE             reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    GLOBAL          reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    STATIC          reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    STRING          reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    IF              reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    SWITCH          reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    WHILE           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    DO              reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FOR             reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FOREACH         reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    GOTO            reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CONTINUE        reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    BREAK           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    RETURN          reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    THROW           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FUNCTION        reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE         reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE         reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    FINAL           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    PRINT           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    YIELD           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CLASS           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CLOSE_TAG       reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    WHITESPACE      reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    $end            reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    OPEN_TAG        reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    OPEN_TAG_WITH_ECHO reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ELSE            reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ELSEIF          reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOR          reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    CASE            reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    DEFAULT         reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)
    ENDIF           reduce using rule 323 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC .)


state 710

    (326) case_statements -> case_statement . case_statements
    (327) case_statements -> case_statement .
    (326) case_statements -> . case_statement case_statements
    (327) case_statements -> . case_statement
    (328) case_statements -> . default_statement case_statements
    (329) case_statements -> . default_statement
    (330) case_statement -> . CASE expression case_default_label_terminator statement_list
    (331) case_statement -> . CASE expression case_default_label_terminator
    (332) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (333) default_statement -> . DEFAULT case_default_label_terminator

    RIGHT_CBRAC     reduce using rule 327 (case_statements -> case_statement .)
    ENDSWITCH       reduce using rule 327 (case_statements -> case_statement .)
    CASE            shift and go to state 712
    DEFAULT         shift and go to state 713

    case_statement                 shift and go to state 710
    case_statements                shift and go to state 804
    default_statement              shift and go to state 711

state 711

    (328) case_statements -> default_statement . case_statements
    (329) case_statements -> default_statement .
    (326) case_statements -> . case_statement case_statements
    (327) case_statements -> . case_statement
    (328) case_statements -> . default_statement case_statements
    (329) case_statements -> . default_statement
    (330) case_statement -> . CASE expression case_default_label_terminator statement_list
    (331) case_statement -> . CASE expression case_default_label_terminator
    (332) default_statement -> . DEFAULT case_default_label_terminator statement_list
    (333) default_statement -> . DEFAULT case_default_label_terminator

    RIGHT_CBRAC     reduce using rule 329 (case_statements -> default_statement .)
    ENDSWITCH       reduce using rule 329 (case_statements -> default_statement .)
    CASE            shift and go to state 712
    DEFAULT         shift and go to state 713

    default_statement              shift and go to state 711
    case_statements                shift and go to state 805
    case_statement                 shift and go to state 710

state 712

    (330) case_statement -> CASE . expression case_default_label_terminator statement_list
    (331) case_statement -> CASE . expression case_default_label_terminator
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 806
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 713

    (332) default_statement -> DEFAULT . case_default_label_terminator statement_list
    (333) default_statement -> DEFAULT . case_default_label_terminator
    (334) case_default_label_terminator -> . DOUBLE_POINT
    (335) case_default_label_terminator -> . SEMICOLON

    DOUBLE_POINT    shift and go to state 808
    SEMICOLON       shift and go to state 809

    case_default_label_terminator  shift and go to state 807

state 714

    (324) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements . ENDSWITCH SEMICOLON

    ENDSWITCH       shift and go to state 810


state 715

    (325) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 811


state 716

    (341) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDWHILE SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDWHILE        shift and go to state 812
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 717

    (342) do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 813


state 718

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 814


state 719

    (346) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS . statement
    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 816
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 815
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 720

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS statement
    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (361) for_end_of_loop -> . for_expression_group
    (362) for_expression_group -> . expression
    (363) for_expression_group -> . for_expression_group COLON expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    RIGHT_PARENTHESIS shift and go to state 818
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    for_end_of_loop                shift and go to state 817
    for_expression_group           shift and go to state 615
    expression                     shift and go to state 301
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 721

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 820
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 819
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 722

    (350) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 350 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)


state 723

    (358) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 821
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 724

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 822


state 725

    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . statement
    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 824
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 823
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 726

    (364) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value . RIGHT_PARENTHESIS statement
    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 825


state 727

    (365) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS . statement
    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 827
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 826
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 728

    (369) foreach_key -> expression DOUBLE_ARROW .

    AMPERSAND       reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    LIST            reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    STRING          reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    INCLUDE         reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    INCLUDE_ONCE    reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    REQUIRE         reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    REQUIRE_ONCE    reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    PRINT           reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    YIELD           reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)
    YIELD_FROM      reduce using rule 369 (foreach_key -> expression DOUBLE_ARROW .)


state 729

    (370) foreach_value -> AMPERSAND_opt expression .

    RIGHT_PARENTHESIS reduce using rule 370 (foreach_value -> AMPERSAND_opt expression .)


state 730

    (371) foreach_value -> AMPERSAND expression .

    RIGHT_PARENTHESIS reduce using rule 371 (foreach_value -> AMPERSAND expression .)


state 731

    (412) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS . return_type_opt
    (92) return_type_opt -> . return_type
    (93) return_type_opt -> .
    (423) return_type -> . DOUBLE_POINT type_declaration
    (424) return_type -> . DOUBLE_POINT VOID

    LEFT_CBRAC      reduce using rule 93 (return_type_opt -> .)
    SEMICOLON       reduce using rule 93 (return_type_opt -> .)
    DOUBLE_POINT    shift and go to state 830

    return_type_opt                shift and go to state 828
    return_type                    shift and go to state 829

state 732

    (418) simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .

    TERNARY_OPERATION reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    AMPERSAND       reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    ELLIPSIS        reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    ARRAY           reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    CALLABLE        reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    ITERABLE        reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    BOOL            reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    FLOAT           reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    INT             reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    STRING          reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    VARIABLE        reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)
    RIGHT_PARENTHESIS reduce using rule 418 (simple_parameter_declaration_list -> parameter_declaration_list parameter_declaration .)


state 733

    (421) parameter_declaration -> type_declarationopt . ampersandopt VARIABLE default_argument_specifieropt
    (413) ampersandopt -> . AMPERSAND
    (414) ampersandopt -> .

    AMPERSAND       shift and go to state 149
    VARIABLE        reduce using rule 414 (ampersandopt -> .)

    ampersandopt                   shift and go to state 831

state 734

    (419) variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .

    TERNARY_OPERATION reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    AMPERSAND       reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    VARIABLE        reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    ARRAY           reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    CALLABLE        reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    ITERABLE        reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    BOOL            reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    FLOAT           reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    INT             reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    STRING          reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)
    RIGHT_PARENTHESIS reduce using rule 419 (variadic_declaration_list -> simple_parameter_declaration_list variadic_parameter .)


state 735

    (422) variadic_parameter -> type_declarationopt . ampersandopt ELLIPSIS VARIABLE
    (413) ampersandopt -> . AMPERSAND
    (414) ampersandopt -> .

    AMPERSAND       shift and go to state 149
    ELLIPSIS        reduce using rule 414 (ampersandopt -> .)

    ampersandopt                   shift and go to state 832

state 736

    (421) parameter_declaration -> type_declarationopt ampersandopt . VARIABLE default_argument_specifieropt
    (422) variadic_parameter -> type_declarationopt ampersandopt . ELLIPSIS VARIABLE

    VARIABLE        shift and go to state 833
    ELLIPSIS        shift and go to state 834


state 737

    (427) type_declaration -> TERNARY_OPERATIONopt base_type_declaration .

    AMPERSAND       reduce using rule 427 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    VARIABLE        reduce using rule 427 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    ELLIPSIS        reduce using rule 427 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    LEFT_CBRAC      reduce using rule 427 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)
    SEMICOLON       reduce using rule 427 (type_declaration -> TERNARY_OPERATIONopt base_type_declaration .)


state 738

    (430) base_type_declaration -> ARRAY .

    AMPERSAND       reduce using rule 430 (base_type_declaration -> ARRAY .)
    VARIABLE        reduce using rule 430 (base_type_declaration -> ARRAY .)
    ELLIPSIS        reduce using rule 430 (base_type_declaration -> ARRAY .)
    LEFT_CBRAC      reduce using rule 430 (base_type_declaration -> ARRAY .)
    SEMICOLON       reduce using rule 430 (base_type_declaration -> ARRAY .)


state 739

    (431) base_type_declaration -> CALLABLE .

    AMPERSAND       reduce using rule 431 (base_type_declaration -> CALLABLE .)
    VARIABLE        reduce using rule 431 (base_type_declaration -> CALLABLE .)
    ELLIPSIS        reduce using rule 431 (base_type_declaration -> CALLABLE .)
    LEFT_CBRAC      reduce using rule 431 (base_type_declaration -> CALLABLE .)
    SEMICOLON       reduce using rule 431 (base_type_declaration -> CALLABLE .)


state 740

    (432) base_type_declaration -> ITERABLE .

    AMPERSAND       reduce using rule 432 (base_type_declaration -> ITERABLE .)
    VARIABLE        reduce using rule 432 (base_type_declaration -> ITERABLE .)
    ELLIPSIS        reduce using rule 432 (base_type_declaration -> ITERABLE .)
    LEFT_CBRAC      reduce using rule 432 (base_type_declaration -> ITERABLE .)
    SEMICOLON       reduce using rule 432 (base_type_declaration -> ITERABLE .)


state 741

    (433) base_type_declaration -> scalar_type .

    AMPERSAND       reduce using rule 433 (base_type_declaration -> scalar_type .)
    VARIABLE        reduce using rule 433 (base_type_declaration -> scalar_type .)
    ELLIPSIS        reduce using rule 433 (base_type_declaration -> scalar_type .)
    LEFT_CBRAC      reduce using rule 433 (base_type_declaration -> scalar_type .)
    SEMICOLON       reduce using rule 433 (base_type_declaration -> scalar_type .)


state 742

    (434) base_type_declaration -> qualified_name .

    AMPERSAND       reduce using rule 434 (base_type_declaration -> qualified_name .)
    VARIABLE        reduce using rule 434 (base_type_declaration -> qualified_name .)
    ELLIPSIS        reduce using rule 434 (base_type_declaration -> qualified_name .)
    LEFT_CBRAC      reduce using rule 434 (base_type_declaration -> qualified_name .)
    SEMICOLON       reduce using rule 434 (base_type_declaration -> qualified_name .)


state 743

    (435) scalar_type -> BOOL .

    AMPERSAND       reduce using rule 435 (scalar_type -> BOOL .)
    VARIABLE        reduce using rule 435 (scalar_type -> BOOL .)
    ELLIPSIS        reduce using rule 435 (scalar_type -> BOOL .)
    LEFT_CBRAC      reduce using rule 435 (scalar_type -> BOOL .)
    SEMICOLON       reduce using rule 435 (scalar_type -> BOOL .)


state 744

    (436) scalar_type -> FLOAT .

    AMPERSAND       reduce using rule 436 (scalar_type -> FLOAT .)
    VARIABLE        reduce using rule 436 (scalar_type -> FLOAT .)
    ELLIPSIS        reduce using rule 436 (scalar_type -> FLOAT .)
    LEFT_CBRAC      reduce using rule 436 (scalar_type -> FLOAT .)
    SEMICOLON       reduce using rule 436 (scalar_type -> FLOAT .)


state 745

    (437) scalar_type -> INT .

    AMPERSAND       reduce using rule 437 (scalar_type -> INT .)
    VARIABLE        reduce using rule 437 (scalar_type -> INT .)
    ELLIPSIS        reduce using rule 437 (scalar_type -> INT .)
    LEFT_CBRAC      reduce using rule 437 (scalar_type -> INT .)
    SEMICOLON       reduce using rule 437 (scalar_type -> INT .)


state 746

    (438) scalar_type -> STRING .
    (564) name -> STRING .

  ! reduce/reduce conflict for AMPERSAND resolved using rule 438 (scalar_type -> STRING .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 438 (scalar_type -> STRING .)
  ! reduce/reduce conflict for ELLIPSIS resolved using rule 438 (scalar_type -> STRING .)
  ! reduce/reduce conflict for LEFT_CBRAC resolved using rule 438 (scalar_type -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 438 (scalar_type -> STRING .)
    AMPERSAND       reduce using rule 438 (scalar_type -> STRING .)
    VARIABLE        reduce using rule 438 (scalar_type -> STRING .)
    ELLIPSIS        reduce using rule 438 (scalar_type -> STRING .)
    LEFT_CBRAC      reduce using rule 438 (scalar_type -> STRING .)
    SEMICOLON       reduce using rule 438 (scalar_type -> STRING .)

  ! AMPERSAND       [ reduce using rule 564 (name -> STRING .) ]
  ! VARIABLE        [ reduce using rule 564 (name -> STRING .) ]
  ! ELLIPSIS        [ reduce using rule 564 (name -> STRING .) ]
  ! LEFT_CBRAC      [ reduce using rule 564 (name -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 564 (name -> STRING .) ]


state 747

    (221) conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .

    TERNARY_OPERATION reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    AND             reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    XOR             reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    OR              reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    SEMICOLON       reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    STRING          reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    INCLUDE         reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    INCLUDE_ONCE    reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    REQUIRE         reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    REQUIRE_ONCE    reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    PRINT           reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    YIELD           reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    YIELD_FROM      reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    RIGHT_PARENTHESIS reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    COLON           reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    AS              reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ARROW           reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    RIGHT_CBRAC     reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    VARIABLE        reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    DOUBLE_POINT    reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    DOUBLE_ARROW    reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ELLIPSIS        reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    AMPERSAND       reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ARRAY           reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    CALLABLE        reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    ITERABLE        reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    BOOL            reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    FLOAT           reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)
    INT             reduce using rule 221 (conditional_expression -> conditional_expression TERNARY_OPERATION expression DOUBLE_POINT coalesce_expression .)


state 748

    (234) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable . COLON
    (235) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 835
    RIGHT_PARENTHESIS reduce using rule 235 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable .)

  ! COLON           [ reduce using rule 235 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable .) ]


state 749

    (237) keyed_list_expression_list -> keyed_list_expression_list COLON expression . DOUBLE_ARROW list_or_variable

    DOUBLE_ARROW    shift and go to state 836


state 750

    (236) keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable .

    COLON           reduce using rule 236 (keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable .)
    RIGHT_PARENTHESIS reduce using rule 236 (keyed_list_expression_list -> expression DOUBLE_ARROW list_or_variable .)


state 751

    (158) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 837


state 752

    (159) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> argument_expression_list .
    (140) argument_expression_list -> argument_expression_list . argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 838
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! RIGHT_PARENTHESIS [ reduce using rule 102 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 653
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 753

    (147) member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .

    LEFT_PARENTHESIS reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SELF            reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 147 (member_name -> LEFT_CBRAC expression RIGHT_PARENTHESIS .)


state 754

    (148) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 839


state 755

    (149) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (102) argument_expression_list_opt -> argument_expression_list .
    (140) argument_expression_list -> argument_expression_list . argument_expression
    (141) argument_expression -> . variadic_unpacking
    (142) argument_expression -> . expression
    (143) variadic_unpacking -> . ELLIPSIS expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

  ! shift/reduce conflict for RIGHT_PARENTHESIS resolved as shift
    RIGHT_PARENTHESIS shift and go to state 840
    ELLIPSIS        shift and go to state 511
    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

  ! RIGHT_PARENTHESIS [ reduce using rule 102 (argument_expression_list_opt -> argument_expression_list .) ]

    argument_expression            shift and go to state 653
    variadic_unpacking             shift and go to state 509
    expression                     shift and go to state 510
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 756

    (130) array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .

    COLON           reduce using rule 130 (array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .)
    RIGHT_CBRAC     reduce using rule 130 (array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .)
    RIGHT_PARENTHESIS reduce using rule 130 (array_element_initializer -> element_key ARROW AMPERSAND_opt element_value .)


state 757

    (83) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt . RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement

    RIGHT_PARENTHESIS shift and go to state 841


state 758

    (88) parameter_declaration_list_opt -> parameter_declaration_list .
    (418) simple_parameter_declaration_list -> parameter_declaration_list . parameter_declaration
    (421) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (425) type_declarationopt -> . type_declaration
    (426) type_declarationopt -> .
    (427) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (428) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (429) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 88 (parameter_declaration_list_opt -> parameter_declaration_list .)
    AMPERSAND       reduce using rule 426 (type_declarationopt -> .)
    VARIABLE        reduce using rule 426 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 633
    ARRAY           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 429 (TERNARY_OPERATIONopt -> .)

    parameter_declaration          shift and go to state 732
    type_declarationopt            shift and go to state 733
    type_declaration               shift and go to state 631
    TERNARY_OPERATIONopt           shift and go to state 632

state 759

    (97) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 97 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 760

    (98) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 842


state 761

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS . class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (104) class_base_clause_opt -> . class_base_clause
    (105) class_base_clause_opt -> .
    (453) class_base_clause -> . EXTENDS qualified_name

    IMPLEMENTS      reduce using rule 105 (class_base_clause_opt -> .)
    LEFT_CBRAC      reduce using rule 105 (class_base_clause_opt -> .)
    EXTENDS         shift and go to state 420

    class_base_clause_opt          shift and go to state 843
    class_base_clause              shift and go to state 543

state 762

    (101) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC . class_member_declarations_opt RIGHT_PARENTHESIS
    (108) class_member_declarations_opt -> . class_member_declarations
    (109) class_member_declarations_opt -> .
    (456) class_member_declarations -> . class_member_declaration
    (457) class_member_declarations -> . class_member_declarations class_member_declaration
    (458) class_member_declaration -> . class_const_declaration
    (459) class_member_declaration -> . property_declaration
    (460) class_member_declaration -> . method_declaration
    (461) class_member_declaration -> . constructor_declaration
    (462) class_member_declaration -> . destructor_declaration
    (463) class_member_declaration -> . trait_use_clause
    (465) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (469) property_declaration -> . property_modifier property_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (494) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (470) property_modifier -> . VAR
    (471) property_modifier -> . visibility_modifier static_modifieropt
    (472) property_modifier -> . static_modifier visibility_modifier_opt
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_PARENTHESIS reduce using rule 109 (class_member_declarations_opt -> .)
    USE             shift and go to state 440
    CONST           reduce using rule 536 (visibility_modifier_opt -> .)
    VAR             shift and go to state 436
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    class_member_declarations_opt  shift and go to state 844
    class_member_declarations      shift and go to state 845
    class_member_declaration       shift and go to state 769
    class_const_declaration        shift and go to state 770
    property_declaration           shift and go to state 771
    method_declaration             shift and go to state 772
    constructor_declaration        shift and go to state 773
    destructor_declaration         shift and go to state 774
    trait_use_clause               shift and go to state 775
    visibility_modifier_opt        shift and go to state 579
    property_modifier              shift and go to state 432
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 434
    visibility_modifier            shift and go to state 776
    static_modifier                shift and go to state 438
    method_modifier                shift and go to state 439
    class_modifier                 shift and go to state 445

state 763

    (113) new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARROW           reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_COLON    reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LEFT_PARENTHESIS reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLEASTERISK  reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ASTERISK        reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DIVIDE          reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    MODULO          reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PLUS            reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS            reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CONCAT          reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SL              reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SR              reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    LESS_THAN       reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    GREATER_THAN_OR_EQUAL reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SPACESHIP       reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    EQUAL           reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_EQUAL    reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_IDENTICAL    reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    IS_NOT_IDENTICAL reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AMPERSAND       reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_XOR     reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BITWISE_OR      reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COALESCE        reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    TERNARY_OPERATION reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AND             reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    XOR             reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    OR              reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    STRING          reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    PRINT           reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD           reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    COLON           reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    AS              reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    VARIABLE        reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_POINT    reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    DOUBLE_ARROW    reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ELLIPSIS        reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ARRAY           reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    CALLABLE        reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    ITERABLE        reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    BOOL            reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    FLOAT           reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INT             reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)
    INSTANCEOF      reduce using rule 113 (new_variable -> new_variable LEFT_CBRAC expression_opt RIGHT_CBRAC .)


state 764

    (114) new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .

    LEFT_CBRAC      reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS            reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SL              reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SR              reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    STRING          reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    AS              reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INT             reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 114 (new_variable -> new_variable LEFT_CBRAC expression RIGHT_PARENTHESIS .)


state 765

    (396) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS . compound_statement
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 846

state 766

    (401) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE . SEMICOLON

    SEMICOLON       shift and go to state 847


state 767

    (442) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 848


state 768

    (449) class_member_declarationsopt -> class_member_declarations .
    (457) class_member_declarations -> class_member_declarations . class_member_declaration
    (458) class_member_declaration -> . class_const_declaration
    (459) class_member_declaration -> . property_declaration
    (460) class_member_declaration -> . method_declaration
    (461) class_member_declaration -> . constructor_declaration
    (462) class_member_declaration -> . destructor_declaration
    (463) class_member_declaration -> . trait_use_clause
    (465) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (469) property_declaration -> . property_modifier property_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (494) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (470) property_modifier -> . VAR
    (471) property_modifier -> . visibility_modifier static_modifieropt
    (472) property_modifier -> . static_modifier visibility_modifier_opt
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_CBRAC     reduce using rule 449 (class_member_declarationsopt -> class_member_declarations .)
    USE             shift and go to state 440
    CONST           reduce using rule 536 (visibility_modifier_opt -> .)
    VAR             shift and go to state 436
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    class_member_declaration       shift and go to state 849
    class_const_declaration        shift and go to state 770
    property_declaration           shift and go to state 771
    method_declaration             shift and go to state 772
    constructor_declaration        shift and go to state 773
    destructor_declaration         shift and go to state 774
    trait_use_clause               shift and go to state 775
    visibility_modifier_opt        shift and go to state 579
    property_modifier              shift and go to state 432
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 434
    visibility_modifier            shift and go to state 776
    static_modifier                shift and go to state 438
    method_modifier                shift and go to state 439
    class_modifier                 shift and go to state 445

state 769

    (456) class_member_declarations -> class_member_declaration .

    USE             reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    VAR             reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    PUBLIC          reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    PROTECTED       reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    PRIVATE         reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    STATIC          reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    ABSTRACT        reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    FINAL           reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    CONST           reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    FUNCTION        reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    RIGHT_CBRAC     reduce using rule 456 (class_member_declarations -> class_member_declaration .)
    RIGHT_PARENTHESIS reduce using rule 456 (class_member_declarations -> class_member_declaration .)


state 770

    (458) class_member_declaration -> class_const_declaration .

    USE             reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    VAR             reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    PUBLIC          reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    PROTECTED       reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    PRIVATE         reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    STATIC          reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    ABSTRACT        reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    FINAL           reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    CONST           reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    FUNCTION        reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    RIGHT_CBRAC     reduce using rule 458 (class_member_declaration -> class_const_declaration .)
    RIGHT_PARENTHESIS reduce using rule 458 (class_member_declaration -> class_const_declaration .)


state 771

    (459) class_member_declaration -> property_declaration .

    USE             reduce using rule 459 (class_member_declaration -> property_declaration .)
    VAR             reduce using rule 459 (class_member_declaration -> property_declaration .)
    PUBLIC          reduce using rule 459 (class_member_declaration -> property_declaration .)
    PROTECTED       reduce using rule 459 (class_member_declaration -> property_declaration .)
    PRIVATE         reduce using rule 459 (class_member_declaration -> property_declaration .)
    STATIC          reduce using rule 459 (class_member_declaration -> property_declaration .)
    ABSTRACT        reduce using rule 459 (class_member_declaration -> property_declaration .)
    FINAL           reduce using rule 459 (class_member_declaration -> property_declaration .)
    CONST           reduce using rule 459 (class_member_declaration -> property_declaration .)
    FUNCTION        reduce using rule 459 (class_member_declaration -> property_declaration .)
    RIGHT_CBRAC     reduce using rule 459 (class_member_declaration -> property_declaration .)
    RIGHT_PARENTHESIS reduce using rule 459 (class_member_declaration -> property_declaration .)


state 772

    (460) class_member_declaration -> method_declaration .

    USE             reduce using rule 460 (class_member_declaration -> method_declaration .)
    VAR             reduce using rule 460 (class_member_declaration -> method_declaration .)
    PUBLIC          reduce using rule 460 (class_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 460 (class_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 460 (class_member_declaration -> method_declaration .)
    STATIC          reduce using rule 460 (class_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 460 (class_member_declaration -> method_declaration .)
    FINAL           reduce using rule 460 (class_member_declaration -> method_declaration .)
    CONST           reduce using rule 460 (class_member_declaration -> method_declaration .)
    FUNCTION        reduce using rule 460 (class_member_declaration -> method_declaration .)
    RIGHT_CBRAC     reduce using rule 460 (class_member_declaration -> method_declaration .)
    RIGHT_PARENTHESIS reduce using rule 460 (class_member_declaration -> method_declaration .)


state 773

    (461) class_member_declaration -> constructor_declaration .

    USE             reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    VAR             reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    PUBLIC          reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    PROTECTED       reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    PRIVATE         reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    STATIC          reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    ABSTRACT        reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    FINAL           reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    CONST           reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    FUNCTION        reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    RIGHT_CBRAC     reduce using rule 461 (class_member_declaration -> constructor_declaration .)
    RIGHT_PARENTHESIS reduce using rule 461 (class_member_declaration -> constructor_declaration .)


state 774

    (462) class_member_declaration -> destructor_declaration .

    USE             reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    VAR             reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    PUBLIC          reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    PROTECTED       reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    PRIVATE         reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    STATIC          reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    ABSTRACT        reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    FINAL           reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    CONST           reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    FUNCTION        reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    RIGHT_CBRAC     reduce using rule 462 (class_member_declaration -> destructor_declaration .)
    RIGHT_PARENTHESIS reduce using rule 462 (class_member_declaration -> destructor_declaration .)


state 775

    (463) class_member_declaration -> trait_use_clause .

    USE             reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    VAR             reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    PUBLIC          reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    PROTECTED       reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    PRIVATE         reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    STATIC          reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    ABSTRACT        reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    FINAL           reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    CONST           reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    FUNCTION        reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    RIGHT_CBRAC     reduce using rule 463 (class_member_declaration -> trait_use_clause .)
    RIGHT_PARENTHESIS reduce using rule 463 (class_member_declaration -> trait_use_clause .)


state 776

    (535) visibility_modifier_opt -> visibility_modifier .
    (471) property_modifier -> visibility_modifier . static_modifieropt
    (491) method_modifier -> visibility_modifier .
    (473) static_modifieropt -> . static_modifier
    (474) static_modifieropt -> .
    (478) static_modifier -> . STATIC

  ! shift/reduce conflict for STATIC resolved as shift
    CONST           reduce using rule 535 (visibility_modifier_opt -> visibility_modifier .)
    FUNCTION        reduce using rule 491 (method_modifier -> visibility_modifier .)
    PUBLIC          reduce using rule 491 (method_modifier -> visibility_modifier .)
    PROTECTED       reduce using rule 491 (method_modifier -> visibility_modifier .)
    PRIVATE         reduce using rule 491 (method_modifier -> visibility_modifier .)
    ABSTRACT        reduce using rule 491 (method_modifier -> visibility_modifier .)
    FINAL           reduce using rule 491 (method_modifier -> visibility_modifier .)
    VARIABLE        reduce using rule 474 (static_modifieropt -> .)
    STATIC          shift and go to state 444

  ! STATIC          [ reduce using rule 491 (method_modifier -> visibility_modifier .) ]

    static_modifieropt             shift and go to state 594
    static_modifier                shift and go to state 595

state 777

    (465) class_const_declaration -> visibility_modifier_opt CONST const_elements . SEMICOLON
    (467) const_elements -> const_elements . const_element
    (468) const_element -> . name EQUAL constant_expression
    (564) name -> . STRING

    SEMICOLON       shift and go to state 850
    STRING          shift and go to state 109

    const_element                  shift and go to state 269
    name                           shift and go to state 108

state 778

    (481) property_element -> VARIABLE property_initializeropt SEMICOLON .

    SEMICOLON       reduce using rule 481 (property_element -> VARIABLE property_initializeropt SEMICOLON .)
    VARIABLE        reduce using rule 481 (property_element -> VARIABLE property_initializeropt SEMICOLON .)


state 779

    (484) property_initializer -> EQUAL constant_expression .

    SEMICOLON       reduce using rule 484 (property_initializer -> EQUAL constant_expression .)


state 780

    (494) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt . CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt . DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement

    CONSTRUCT       shift and go to state 851
    DESTRUCT        shift and go to state 852


state 781

    (525) trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt . RIGHT_CBRAC

    RIGHT_CBRAC     shift and go to state 853


state 782

    (526) trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses .
    (529) trait_select_and_alias_clauses -> trait_select_and_alias_clauses . trait_select_and_alias_clause
    (530) trait_select_and_alias_clause -> . trait_select_insteadof_clause SEMICOLON
    (531) trait_select_and_alias_clause -> . trait_alias_as_clause SEMICOLON
    (532) trait_select_insteadof_clause -> . qualified_name DOUBLE_COLON name INSTEADOF trait_name_list
    (533) trait_alias_as_clause -> . name AS visibility_modifier_opt name
    (534) trait_alias_as_clause -> . name AS visibility_modifier nameopt
    (554) qualified_name -> . name
    (564) name -> . STRING

    RIGHT_CBRAC     reduce using rule 526 (trait_select_and_alias_clausesopt -> trait_select_and_alias_clauses .)
    STRING          shift and go to state 109

    trait_select_and_alias_clause  shift and go to state 854
    trait_select_insteadof_clause  shift and go to state 784
    trait_alias_as_clause          shift and go to state 785
    qualified_name                 shift and go to state 786
    name                           shift and go to state 787

state 783

    (528) trait_select_and_alias_clauses -> trait_select_and_alias_clause .

    STRING          reduce using rule 528 (trait_select_and_alias_clauses -> trait_select_and_alias_clause .)
    RIGHT_CBRAC     reduce using rule 528 (trait_select_and_alias_clauses -> trait_select_and_alias_clause .)


state 784

    (530) trait_select_and_alias_clause -> trait_select_insteadof_clause . SEMICOLON

    SEMICOLON       shift and go to state 855


state 785

    (531) trait_select_and_alias_clause -> trait_alias_as_clause . SEMICOLON

    SEMICOLON       shift and go to state 856


state 786

    (532) trait_select_insteadof_clause -> qualified_name . DOUBLE_COLON name INSTEADOF trait_name_list

    DOUBLE_COLON    shift and go to state 857


state 787

    (533) trait_alias_as_clause -> name . AS visibility_modifier_opt name
    (534) trait_alias_as_clause -> name . AS visibility_modifier nameopt
    (554) qualified_name -> name .

    AS              shift and go to state 858
    DOUBLE_COLON    reduce using rule 554 (qualified_name -> name .)


state 788

    (560) namespace_use_group_clause_1 -> namespace_name . namespace_aliasing_clause_opt
    (16) namespace_name -> namespace_name . NS_SEPARATOR NAME
    (553) namespace_aliasing_clause_opt -> . namespace_aliasing_clause
    (555) namespace_aliasing_clause -> . AS name

    NS_SEPARATOR    shift and go to state 277
    AS              shift and go to state 451

    namespace_aliasing_clause_opt  shift and go to state 859
    namespace_aliasing_clause      shift and go to state 450

state 789

    (544) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 . RIGHT_CBRAC SEMICOLON
    (559) namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 . namespace_use_group_clause_1
    (560) namespace_use_group_clause_1 -> . namespace_name namespace_aliasing_clause_opt
    (15) namespace_name -> . NAME
    (16) namespace_name -> . namespace_name NS_SEPARATOR NAME

    RIGHT_CBRAC     shift and go to state 860
    NAME            shift and go to state 116

    namespace_name                 shift and go to state 788
    namespace_use_group_clause_1   shift and go to state 861

state 790

    (558) namespace_use_group_clauses_1 -> namespace_use_group_clause_1 .

    RIGHT_CBRAC     reduce using rule 558 (namespace_use_group_clauses_1 -> namespace_use_group_clause_1 .)
    NAME            reduce using rule 558 (namespace_use_group_clauses_1 -> namespace_use_group_clause_1 .)


state 791

    (545) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC . SEMICOLON

    SEMICOLON       shift and go to state 862


state 792

    (562) namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .

    RIGHT_CBRAC     reduce using rule 562 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)
    FUNCTION        reduce using rule 562 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)
    CONST           reduce using rule 562 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)
    NAME            reduce using rule 562 (namespace_use_group_clauses_2 -> namespace_use_group_clauses_2 namespace_use_group_clause_2 .)


state 793

    (563) namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name . namespace_aliasing_clause_opt
    (16) namespace_name -> namespace_name . NS_SEPARATOR NAME
    (553) namespace_aliasing_clause_opt -> . namespace_aliasing_clause
    (555) namespace_aliasing_clause -> . AS name

    NS_SEPARATOR    shift and go to state 277
    AS              shift and go to state 451

    namespace_aliasing_clause_opt  shift and go to state 863
    namespace_aliasing_clause      shift and go to state 450

state 794

    (307) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .

    LEFT_CBRAC      reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    SEMICOLON       reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    TRY             reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    DECLARE         reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ECHO            reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    UNSET           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CONST           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    INTERFACE       reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    TRAIT           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    NAMESPACE       reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    USE             reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    GLOBAL          reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    STATIC          reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    STRING          reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    IF              reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    SWITCH          reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    WHILE           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    DO              reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FOR             reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FOREACH         reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    GOTO            reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CONTINUE        reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    BREAK           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    RETURN          reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    THROW           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FUNCTION        reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    INCLUDE         reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    INCLUDE_ONCE    reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    REQUIRE         reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    REQUIRE_ONCE    reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ABSTRACT        reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    FINAL           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    PRINT           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    YIELD           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    YIELD_FROM      reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CLASS           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CLOSE_TAG       reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    WHITESPACE      reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    $end            reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    OPEN_TAG        reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    OPEN_TAG_WITH_ECHO reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    RIGHT_CBRAC     reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ELSE            reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ELSEIF          reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDDECLARE      reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDWHILE        reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDFOR          reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    CASE            reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    DEFAULT         reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDSWITCH       reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDFOREACH      reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)
    ENDIF           reduce using rule 307 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1 .)


state 795

    (315) elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .

    LEFT_CBRAC      reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    SEMICOLON       reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    TRY             reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    DECLARE         reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ECHO            reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    UNSET           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CONST           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    INTERFACE       reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    TRAIT           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    NAMESPACE       reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    USE             reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    GLOBAL          reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    STATIC          reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    STRING          reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    IF              reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    SWITCH          reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    WHILE           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    DO              reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FOR             reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FOREACH         reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    GOTO            reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CONTINUE        reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    BREAK           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    RETURN          reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    THROW           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FUNCTION        reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    INCLUDE         reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    INCLUDE_ONCE    reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    REQUIRE         reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    REQUIRE_ONCE    reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ABSTRACT        reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    FINAL           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    PRINT           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    YIELD           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    YIELD_FROM      reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CLASS           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CLOSE_TAG       reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    WHITESPACE      reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    $end            reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    OPEN_TAG        reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    OPEN_TAG_WITH_ECHO reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    RIGHT_CBRAC     reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ELSE            reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ELSEIF          reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDDECLARE      reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDWHILE        reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDFOR          reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    CASE            reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    DEFAULT         reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDSWITCH       reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDFOREACH      reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)
    ENDIF           reduce using rule 315 (elseif_clauses_1 -> elseif_clauses_1 elseif_clause_1 .)


state 796

    (317) else_clause_1 -> ELSE statement .

    LEFT_CBRAC      reduce using rule 317 (else_clause_1 -> ELSE statement .)
    SEMICOLON       reduce using rule 317 (else_clause_1 -> ELSE statement .)
    TRY             reduce using rule 317 (else_clause_1 -> ELSE statement .)
    DECLARE         reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ECHO            reduce using rule 317 (else_clause_1 -> ELSE statement .)
    UNSET           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    CONST           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    INTERFACE       reduce using rule 317 (else_clause_1 -> ELSE statement .)
    TRAIT           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    NAMESPACE       reduce using rule 317 (else_clause_1 -> ELSE statement .)
    USE             reduce using rule 317 (else_clause_1 -> ELSE statement .)
    GLOBAL          reduce using rule 317 (else_clause_1 -> ELSE statement .)
    STATIC          reduce using rule 317 (else_clause_1 -> ELSE statement .)
    STRING          reduce using rule 317 (else_clause_1 -> ELSE statement .)
    IF              reduce using rule 317 (else_clause_1 -> ELSE statement .)
    SWITCH          reduce using rule 317 (else_clause_1 -> ELSE statement .)
    WHILE           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    DO              reduce using rule 317 (else_clause_1 -> ELSE statement .)
    FOR             reduce using rule 317 (else_clause_1 -> ELSE statement .)
    FOREACH         reduce using rule 317 (else_clause_1 -> ELSE statement .)
    GOTO            reduce using rule 317 (else_clause_1 -> ELSE statement .)
    CONTINUE        reduce using rule 317 (else_clause_1 -> ELSE statement .)
    BREAK           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    RETURN          reduce using rule 317 (else_clause_1 -> ELSE statement .)
    THROW           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    FUNCTION        reduce using rule 317 (else_clause_1 -> ELSE statement .)
    INCLUDE         reduce using rule 317 (else_clause_1 -> ELSE statement .)
    INCLUDE_ONCE    reduce using rule 317 (else_clause_1 -> ELSE statement .)
    REQUIRE         reduce using rule 317 (else_clause_1 -> ELSE statement .)
    REQUIRE_ONCE    reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ABSTRACT        reduce using rule 317 (else_clause_1 -> ELSE statement .)
    FINAL           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    PRINT           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    YIELD           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    YIELD_FROM      reduce using rule 317 (else_clause_1 -> ELSE statement .)
    CLASS           reduce using rule 317 (else_clause_1 -> ELSE statement .)
    CLOSE_TAG       reduce using rule 317 (else_clause_1 -> ELSE statement .)
    WHITESPACE      reduce using rule 317 (else_clause_1 -> ELSE statement .)
    $end            reduce using rule 317 (else_clause_1 -> ELSE statement .)
    OPEN_TAG        reduce using rule 317 (else_clause_1 -> ELSE statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 317 (else_clause_1 -> ELSE statement .)
    RIGHT_CBRAC     reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ELSE            reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ELSEIF          reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ENDDECLARE      reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ENDWHILE        reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ENDFOR          reduce using rule 317 (else_clause_1 -> ELSE statement .)
    CASE            reduce using rule 317 (else_clause_1 -> ELSE statement .)
    DEFAULT         reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ENDSWITCH       reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ENDFOREACH      reduce using rule 317 (else_clause_1 -> ELSE statement .)
    ENDIF           reduce using rule 317 (else_clause_1 -> ELSE statement .)


state 797

    (316) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 864
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 798

    (311) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 . else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 . ENDIF SEMICOLON
    (319) elseif_clauses_2 -> elseif_clauses_2 . elseif_clause_2
    (321) else_clause_2 -> . ELSE DOUBLE_POINT statement_list
    (320) elseif_clause_2 -> . ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list

    ENDIF           shift and go to state 866
    ELSE            shift and go to state 801
    ELSEIF          shift and go to state 802

    else_clause_2                  shift and go to state 865
    elseif_clause_2                shift and go to state 867

state 799

    (313) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 . ENDIF SEMICOLON

    ENDIF           shift and go to state 868


state 800

    (318) elseif_clauses_2 -> elseif_clause_2 .

    ENDIF           reduce using rule 318 (elseif_clauses_2 -> elseif_clause_2 .)
    ELSE            reduce using rule 318 (elseif_clauses_2 -> elseif_clause_2 .)
    ELSEIF          reduce using rule 318 (elseif_clauses_2 -> elseif_clause_2 .)


state 801

    (321) else_clause_2 -> ELSE . DOUBLE_POINT statement_list

    DOUBLE_POINT    shift and go to state 869


state 802

    (320) elseif_clause_2 -> ELSEIF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list

    LEFT_PARENTHESIS shift and go to state 870


state 803

    (322) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    TRY             reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    DECLARE         reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ECHO            reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    UNSET           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CONST           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    INTERFACE       reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    TRAIT           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    USE             reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    GLOBAL          reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    STATIC          reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    STRING          reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    IF              reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    SWITCH          reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    WHILE           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    DO              reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FOR             reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FOREACH         reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    GOTO            reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CONTINUE        reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    BREAK           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    RETURN          reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    THROW           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FUNCTION        reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    INCLUDE         reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    REQUIRE         reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    FINAL           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    PRINT           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    YIELD           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CLASS           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CLOSE_TAG       reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    WHITESPACE      reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    $end            reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    OPEN_TAG        reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    OPEN_TAG_WITH_ECHO reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ELSE            reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ELSEIF          reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDFOR          reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    CASE            reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    DEFAULT         reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)
    ENDIF           reduce using rule 322 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC .)


state 804

    (326) case_statements -> case_statement case_statements .

    RIGHT_CBRAC     reduce using rule 326 (case_statements -> case_statement case_statements .)
    ENDSWITCH       reduce using rule 326 (case_statements -> case_statement case_statements .)


state 805

    (328) case_statements -> default_statement case_statements .

    RIGHT_CBRAC     reduce using rule 328 (case_statements -> default_statement case_statements .)
    ENDSWITCH       reduce using rule 328 (case_statements -> default_statement case_statements .)


state 806

    (330) case_statement -> CASE expression . case_default_label_terminator statement_list
    (331) case_statement -> CASE expression . case_default_label_terminator
    (334) case_default_label_terminator -> . DOUBLE_POINT
    (335) case_default_label_terminator -> . SEMICOLON

    DOUBLE_POINT    shift and go to state 808
    SEMICOLON       shift and go to state 809

    case_default_label_terminator  shift and go to state 871

state 807

    (332) default_statement -> DEFAULT case_default_label_terminator . statement_list
    (333) default_statement -> DEFAULT case_default_label_terminator .
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 333 (default_statement -> DEFAULT case_default_label_terminator .)
    DEFAULT         reduce using rule 333 (default_statement -> DEFAULT case_default_label_terminator .)
    RIGHT_CBRAC     reduce using rule 333 (default_statement -> DEFAULT case_default_label_terminator .)
    ENDSWITCH       reduce using rule 333 (default_statement -> DEFAULT case_default_label_terminator .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 872
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 808

    (334) case_default_label_terminator -> DOUBLE_POINT .

    LEFT_CBRAC      reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    SEMICOLON       reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    TRY             reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    DECLARE         reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    ECHO            reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    UNSET           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    CONST           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    INTERFACE       reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    TRAIT           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    NAMESPACE       reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    USE             reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    GLOBAL          reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    STATIC          reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    STRING          reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    IF              reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    SWITCH          reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    WHILE           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    DO              reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    FOR             reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    FOREACH         reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    GOTO            reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    CONTINUE        reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    BREAK           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    RETURN          reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    THROW           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    FUNCTION        reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    INCLUDE         reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    INCLUDE_ONCE    reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    REQUIRE         reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    REQUIRE_ONCE    reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    ABSTRACT        reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    FINAL           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    PRINT           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    YIELD           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    YIELD_FROM      reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    CLASS           reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    CASE            reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    DEFAULT         reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    RIGHT_CBRAC     reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)
    ENDSWITCH       reduce using rule 334 (case_default_label_terminator -> DOUBLE_POINT .)


state 809

    (335) case_default_label_terminator -> SEMICOLON .

    LEFT_CBRAC      reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    SEMICOLON       reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    TRY             reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    DECLARE         reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    ECHO            reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    UNSET           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    CONST           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    INTERFACE       reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    TRAIT           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    NAMESPACE       reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    USE             reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    GLOBAL          reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    STATIC          reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    STRING          reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    IF              reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    SWITCH          reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    WHILE           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    DO              reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    FOR             reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    FOREACH         reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    GOTO            reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    CONTINUE        reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    BREAK           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    RETURN          reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    THROW           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    FUNCTION        reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    INCLUDE         reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    REQUIRE         reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    ABSTRACT        reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    FINAL           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    PRINT           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    YIELD           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    YIELD_FROM      reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    CLASS           reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    CASE            reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    DEFAULT         reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)
    ENDSWITCH       reduce using rule 335 (case_default_label_terminator -> SEMICOLON .)


state 810

    (324) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH . SEMICOLON

    SEMICOLON       shift and go to state 873


state 811

    (325) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .

    LEFT_CBRAC      reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    SEMICOLON       reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    DECLARE         reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    UNSET           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CONST           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    INTERFACE       reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    TRAIT           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    NAMESPACE       reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    USE             reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    GLOBAL          reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    STATIC          reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    IF              reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    DO              reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    GOTO            reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CONTINUE        reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    THROW           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    INCLUDE         reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    REQUIRE         reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ABSTRACT        reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    FINAL           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    YIELD           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    YIELD_FROM      reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CLASS           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CLOSE_TAG       reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    WHITESPACE      reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    $end            reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    OPEN_TAG        reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ELSE            reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ELSEIF          reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDDECLARE      reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDWHILE        reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDFOR          reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDFOREACH      reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)
    ENDIF           reduce using rule 325 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON .)


state 812

    (341) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE . SEMICOLON

    SEMICOLON       shift and go to state 874


state 813

    (342) do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .

    LEFT_CBRAC      reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TRY             reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    DECLARE         reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ECHO            reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    UNSET           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CONST           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INTERFACE       reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TRAIT           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NAMESPACE       reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    USE             reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    GLOBAL          reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STATIC          reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STRING          reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SWITCH          reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    DO              reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FOREACH         reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    GOTO            reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    THROW           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FUNCTION        reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE         reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE         reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ABSTRACT        reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FINAL           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    PRINT           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    YIELD           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    YIELD_FROM      reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CLASS           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CLOSE_TAG       reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WHITESPACE      reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    $end            reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    OPEN_TAG        reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSEIF          reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDDECLARE      reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDWHILE        reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOR          reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CASE            reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    DEFAULT         reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDSWITCH       reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDFOREACH      reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ENDIF           reduce using rule 342 (do_statement -> DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)


state 814

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 876
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 875
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 815

    (346) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 346 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement .)


state 816

    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 877
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 817

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS statement
    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop . RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON

    RIGHT_PARENTHESIS shift and go to state 878


state 818

    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . statement
    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 880
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 879
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 819

    (349) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 349 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 820

    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 881
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 821

    (358) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 882
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 822

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 884
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 883
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 823

    (348) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 348 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)


state 824

    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 885
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 825

    (364) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS . statement
    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 887
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 886
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 826

    (365) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 365 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement .)


state 827

    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOREACH SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 888
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 828

    (412) function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt .

    LEFT_CBRAC      reduce using rule 412 (function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt .)
    SEMICOLON       reduce using rule 412 (function_definition_header -> FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt .)


state 829

    (92) return_type_opt -> return_type .

    LEFT_CBRAC      reduce using rule 92 (return_type_opt -> return_type .)
    SEMICOLON       reduce using rule 92 (return_type_opt -> return_type .)


state 830

    (423) return_type -> DOUBLE_POINT . type_declaration
    (424) return_type -> DOUBLE_POINT . VOID
    (427) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (428) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (429) TERNARY_OPERATIONopt -> .

    VOID            shift and go to state 890
    TERNARY_OPERATION shift and go to state 633
    ARRAY           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 429 (TERNARY_OPERATIONopt -> .)

    type_declaration               shift and go to state 889
    TERNARY_OPERATIONopt           shift and go to state 632

state 831

    (421) parameter_declaration -> type_declarationopt ampersandopt . VARIABLE default_argument_specifieropt

    VARIABLE        shift and go to state 833


state 832

    (422) variadic_parameter -> type_declarationopt ampersandopt . ELLIPSIS VARIABLE

    ELLIPSIS        shift and go to state 834


state 833

    (421) parameter_declaration -> type_declarationopt ampersandopt VARIABLE . default_argument_specifieropt
    (439) default_argument_specifieropt -> . default_argument_specifier
    (440) default_argument_specifieropt -> .
    (441) default_argument_specifier -> . EQUAL constant_expression

    TERNARY_OPERATION reduce using rule 440 (default_argument_specifieropt -> .)
    AMPERSAND       reduce using rule 440 (default_argument_specifieropt -> .)
    ELLIPSIS        reduce using rule 440 (default_argument_specifieropt -> .)
    ARRAY           reduce using rule 440 (default_argument_specifieropt -> .)
    CALLABLE        reduce using rule 440 (default_argument_specifieropt -> .)
    ITERABLE        reduce using rule 440 (default_argument_specifieropt -> .)
    BOOL            reduce using rule 440 (default_argument_specifieropt -> .)
    FLOAT           reduce using rule 440 (default_argument_specifieropt -> .)
    INT             reduce using rule 440 (default_argument_specifieropt -> .)
    STRING          reduce using rule 440 (default_argument_specifieropt -> .)
    VARIABLE        reduce using rule 440 (default_argument_specifieropt -> .)
    RIGHT_PARENTHESIS reduce using rule 440 (default_argument_specifieropt -> .)
    EQUAL           shift and go to state 893

    default_argument_specifieropt  shift and go to state 891
    default_argument_specifier     shift and go to state 892

state 834

    (422) variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS . VARIABLE

    VARIABLE        shift and go to state 894


state 835

    (234) unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON .

    COLON           reduce using rule 234 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON .)
    RIGHT_PARENTHESIS reduce using rule 234 (unkeyed_list_expression_list -> unkeyed_list_expression_list COLON list_or_variable COLON .)


state 836

    (237) keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW . list_or_variable
    (238) list_or_variable -> . list_intrinsic
    (239) list_or_variable -> . AMPERSAND variable
    (240) list_or_variable -> . variable
    (228) list_intrinsic -> . LIST LEFT_PARENTHESIS list_expression_list RIGHT_PARENTHESIS
    (59) variable -> . callable_variable
    (60) variable -> . scoped_property_access_expression
    (61) variable -> . member_access_expression
    (54) callable_variable -> . simple_variable
    (55) callable_variable -> . subscript_expression
    (56) callable_variable -> . member_call_expression
    (57) callable_variable -> . scoped_call_expression
    (58) callable_variable -> . function_call_expression
    (157) scoped_property_access_expression -> . scope_resolution_qualifier DOUBLE_COLON simple_variable
    (144) member_access_expression -> . dereferencable_expression ARROW member_name
    (43) simple_variable -> . VARIABLE
    (44) simple_variable -> . DOLLAR simple_variable
    (45) simple_variable -> . DOLLAR LEFT_CBRAC expression RIGHT_CBRAC
    (133) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression_opt RIGHT_CBRAC
    (134) subscript_expression -> . dereferencable_expression LEFT_CBRAC expression RIGHT_PARENTHESIS
    (148) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (149) member_call_expression -> . dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (158) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (159) scoped_call_expression -> . scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (135) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (136) function_call_expression -> . qualified_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (137) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS
    (138) function_call_expression -> . callable_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (161) scope_resolution_qualifier -> . relative_scope
    (162) scope_resolution_qualifier -> . qualified_name
    (163) scope_resolution_qualifier -> . dereferencable_expression
    (46) dereferencable_expression -> . variable
    (47) dereferencable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (48) dereferencable_expression -> . array_creation_expression
    (49) dereferencable_expression -> . string_literal
    (554) qualified_name -> . name
    (50) callable_expression -> . callable_variable
    (51) callable_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (52) callable_expression -> . array_creation_expression
    (53) callable_expression -> . string_literal
    (164) relative_scope -> . SELF
    (165) relative_scope -> . PARENT
    (166) relative_scope -> . STATIC
    (121) array_creation_expression -> . ARRAY LEFT_PARENTHESIS array_initializer_opt RIGHT_PARENTHESIS
    (122) array_creation_expression -> . LEFT_CBRAC array_initializer_opt RIGHT_CBRAC
    (68) string_literal -> . STRING
    (564) name -> . STRING

    AMPERSAND       shift and go to state 484
    LIST            shift and go to state 170
    VARIABLE        shift and go to state 125
    DOLLAR          shift and go to state 126
    LEFT_PARENTHESIS shift and go to state 260
    SELF            shift and go to state 189
    PARENT          shift and go to state 190
    STATIC          shift and go to state 267
    ARRAY           shift and go to state 192
    LEFT_CBRAC      shift and go to state 181
    STRING          shift and go to state 193

    list_or_variable               shift and go to state 895
    list_intrinsic                 shift and go to state 483
    variable                       shift and go to state 485
    callable_variable              shift and go to state 167
    scoped_property_access_expression shift and go to state 168
    member_access_expression       shift and go to state 169
    simple_variable                shift and go to state 173
    subscript_expression           shift and go to state 174
    member_call_expression         shift and go to state 175
    scoped_call_expression         shift and go to state 176
    function_call_expression       shift and go to state 177
    scope_resolution_qualifier     shift and go to state 263
    dereferencable_expression      shift and go to state 179
    qualified_name                 shift and go to state 264
    callable_expression            shift and go to state 183
    relative_scope                 shift and go to state 184
    array_creation_expression      shift and go to state 265
    string_literal                 shift and go to state 266
    name                           shift and go to state 188

state 837

    (158) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 158 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 838

    (159) scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 159 (scoped_call_expression -> scope_resolution_qualifier DOUBLE_COLON member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 839

    (148) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    SELF            reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 148 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS .)


state 840

    (149) member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    EQUAL           reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEPLUS      reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLELESS      reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    POW_EQUAL       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MUL_EQUAL       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIV_EQUAL       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MOD_EQUAL       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUAL      reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUAL     reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT_EQUAL    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL_EQUAL        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR_EQUAL        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUAL       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUAL       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUAL        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_COLON    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLEASTERISK  reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS            reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SL              reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SR              reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AS              reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOLLAR          reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SELF            reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PARENT          reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STATIC          reduce using rule 149 (member_call_expression -> dereferencable_expression ARROW member_name LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 841

    (83) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS . anonymous_function_use_clause_opt return_type_opt compound_statement
    (90) anonymous_function_use_clause_opt -> . anonymous_function_use_clause
    (91) anonymous_function_use_clause_opt -> .
    (94) anonymous_function_use_clause -> . USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS

    DOUBLE_POINT    reduce using rule 91 (anonymous_function_use_clause_opt -> .)
    LEFT_CBRAC      reduce using rule 91 (anonymous_function_use_clause_opt -> .)
    USE             shift and go to state 898

    anonymous_function_use_clause_opt shift and go to state 896
    anonymous_function_use_clause  shift and go to state 897

state 842

    (98) object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    LESS            reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SL              reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SR              reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    AND             reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    XOR             reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    OR              reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    STRING          reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    COLON           reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    AS              reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INT             reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 98 (object_creation_expression -> NEW class_type_designator LEFT_PARENTHESIS argument_expression_list COLON RIGHT_PARENTHESIS .)


state 843

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt . class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS
    (106) class_interface_clause_opt -> . class_interface_clause
    (107) class_interface_clause_opt -> .
    (454) class_interface_clause -> . IMPLEMENTS qualified_name
    (455) class_interface_clause -> . class_interface_clause qualified_name

    LEFT_CBRAC      reduce using rule 107 (class_interface_clause_opt -> .)
    IMPLEMENTS      shift and go to state 572

    class_interface_clause_opt     shift and go to state 899
    class_interface_clause         shift and go to state 665

state 844

    (101) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 900


state 845

    (108) class_member_declarations_opt -> class_member_declarations .
    (457) class_member_declarations -> class_member_declarations . class_member_declaration
    (458) class_member_declaration -> . class_const_declaration
    (459) class_member_declaration -> . property_declaration
    (460) class_member_declaration -> . method_declaration
    (461) class_member_declaration -> . constructor_declaration
    (462) class_member_declaration -> . destructor_declaration
    (463) class_member_declaration -> . trait_use_clause
    (465) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (469) property_declaration -> . property_modifier property_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (494) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (470) property_modifier -> . VAR
    (471) property_modifier -> . visibility_modifier static_modifieropt
    (472) property_modifier -> . static_modifier visibility_modifier_opt
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_PARENTHESIS reduce using rule 108 (class_member_declarations_opt -> class_member_declarations .)
    USE             shift and go to state 440
    CONST           reduce using rule 536 (visibility_modifier_opt -> .)
    VAR             shift and go to state 436
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    class_member_declaration       shift and go to state 849
    class_const_declaration        shift and go to state 770
    property_declaration           shift and go to state 771
    method_declaration             shift and go to state 772
    constructor_declaration        shift and go to state 773
    destructor_declaration         shift and go to state 774
    trait_use_clause               shift and go to state 775
    visibility_modifier_opt        shift and go to state 579
    property_modifier              shift and go to state 432
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 434
    visibility_modifier            shift and go to state 776
    static_modifier                shift and go to state 438
    method_modifier                shift and go to state 439
    class_modifier                 shift and go to state 445

state 846

    (396) catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .

    FINALLY         reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CATCH           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    LEFT_CBRAC      reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    TRY             reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    DECLARE         reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ECHO            reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    UNSET           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CONST           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    INTERFACE       reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    TRAIT           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    NAMESPACE       reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    USE             reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    GLOBAL          reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    STATIC          reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    STRING          reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    SWITCH          reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    DO              reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FOREACH         reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    THROW           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FUNCTION        reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    INCLUDE         reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    INCLUDE_ONCE    reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    REQUIRE         reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    REQUIRE_ONCE    reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ABSTRACT        reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    FINAL           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    PRINT           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    YIELD           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    YIELD_FROM      reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CLASS           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CLOSE_TAG       reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    WHITESPACE      reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    $end            reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    OPEN_TAG        reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    RIGHT_CBRAC     reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ELSEIF          reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDDECLARE      reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDWHILE        reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDFOR          reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    CASE            reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    DEFAULT         reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDSWITCH       reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDFOREACH      reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)
    ENDIF           reduce using rule 396 (catch_clause -> CATCH LEFT_PARENTHESIS catch_name_list VARIABLE RIGHT_PARENTHESIS compound_statement .)


state 847

    (401) declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .

    LEFT_CBRAC      reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    SEMICOLON       reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    TRY             reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    DECLARE         reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ECHO            reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    UNSET           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CONST           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    INTERFACE       reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    TRAIT           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    NAMESPACE       reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    USE             reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    GLOBAL          reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    STATIC          reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    STRING          reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    IF              reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    SWITCH          reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    WHILE           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    DO              reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FOR             reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FOREACH         reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    GOTO            reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CONTINUE        reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    BREAK           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    RETURN          reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    THROW           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FUNCTION        reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    INCLUDE         reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    REQUIRE         reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ABSTRACT        reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    FINAL           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    PRINT           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    YIELD           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    YIELD_FROM      reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CLASS           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CLOSE_TAG       reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    WHITESPACE      reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    $end            reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    OPEN_TAG        reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ELSE            reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ELSEIF          reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDDECLARE      reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDWHILE        reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDFOR          reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    CASE            reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    DEFAULT         reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDSWITCH       reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDFOREACH      reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)
    ENDIF           reduce using rule 401 (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON .)


state 848

    (442) class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .

    LEFT_CBRAC      reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    SEMICOLON       reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    TRY             reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    DECLARE         reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ECHO            reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    UNSET           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CONST           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    INTERFACE       reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    TRAIT           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    NAMESPACE       reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    USE             reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    GLOBAL          reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    STATIC          reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    STRING          reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    IF              reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    SWITCH          reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    WHILE           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    DO              reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FOR             reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FOREACH         reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    GOTO            reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CONTINUE        reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    BREAK           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    RETURN          reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    THROW           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE         reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    INCLUDE_ONCE    reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE         reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    REQUIRE_ONCE    reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    FINAL           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    PRINT           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    YIELD           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    YIELD_FROM      reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CLASS           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CLOSE_TAG       reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    WHITESPACE      reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    $end            reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    OPEN_TAG        reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    OPEN_TAG_WITH_ECHO reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ELSE            reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ELSEIF          reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDDECLARE      reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDWHILE        reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDFOR          reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    CASE            reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    DEFAULT         reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDSWITCH       reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDFOREACH      reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)
    ENDIF           reduce using rule 442 (class_declaration -> class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC .)


state 849

    (457) class_member_declarations -> class_member_declarations class_member_declaration .

    USE             reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    VAR             reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    PUBLIC          reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    PROTECTED       reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    PRIVATE         reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    STATIC          reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    ABSTRACT        reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    FINAL           reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    CONST           reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    FUNCTION        reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    RIGHT_CBRAC     reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)
    RIGHT_PARENTHESIS reduce using rule 457 (class_member_declarations -> class_member_declarations class_member_declaration .)


state 850

    (465) class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .

    PUBLIC          reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    PROTECTED       reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    PRIVATE         reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    STATIC          reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    ABSTRACT        reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    FINAL           reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    CONST           reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    FUNCTION        reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    USE             reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    VAR             reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 465 (class_const_declaration -> visibility_modifier_opt CONST const_elements SEMICOLON .)


state 851

    (494) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT . LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 901


state 852

    (495) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT . LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 902


state 853

    (525) trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .

    USE             reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    VAR             reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    PUBLIC          reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    PROTECTED       reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    PRIVATE         reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    STATIC          reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    ABSTRACT        reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    FINAL           reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    FUNCTION        reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    RIGHT_CBRAC     reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    CONST           reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)
    RIGHT_PARENTHESIS reduce using rule 525 (trait_use_specification -> LEFT_CBRAC trait_select_and_alias_clausesopt RIGHT_CBRAC .)


state 854

    (529) trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause .

    STRING          reduce using rule 529 (trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause .)
    RIGHT_CBRAC     reduce using rule 529 (trait_select_and_alias_clauses -> trait_select_and_alias_clauses trait_select_and_alias_clause .)


state 855

    (530) trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON .

    STRING          reduce using rule 530 (trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 530 (trait_select_and_alias_clause -> trait_select_insteadof_clause SEMICOLON .)


state 856

    (531) trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON .

    STRING          reduce using rule 531 (trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 531 (trait_select_and_alias_clause -> trait_alias_as_clause SEMICOLON .)


state 857

    (532) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON . name INSTEADOF trait_name_list
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 903

state 858

    (533) trait_alias_as_clause -> name AS . visibility_modifier_opt name
    (534) trait_alias_as_clause -> name AS . visibility_modifier nameopt
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE

    STRING          reduce using rule 536 (visibility_modifier_opt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443

    visibility_modifier_opt        shift and go to state 904
    visibility_modifier            shift and go to state 905

state 859

    (560) namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt .

    RIGHT_CBRAC     reduce using rule 560 (namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt .)
    NAME            reduce using rule 560 (namespace_use_group_clause_1 -> namespace_name namespace_aliasing_clause_opt .)


state 860

    (544) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC . SEMICOLON

    SEMICOLON       shift and go to state 906


state 861

    (559) namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1 .

    RIGHT_CBRAC     reduce using rule 559 (namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1 .)
    NAME            reduce using rule 559 (namespace_use_group_clauses_1 -> namespace_use_group_clauses_1 namespace_use_group_clause_1 .)


state 862

    (545) namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .

    LEFT_CBRAC      reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    SEMICOLON       reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    TRY             reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    DECLARE         reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ECHO            reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    UNSET           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CONST           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    INTERFACE       reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    TRAIT           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    NAMESPACE       reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    USE             reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    GLOBAL          reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    STATIC          reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    STRING          reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    IF              reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    SWITCH          reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    WHILE           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    DO              reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FOR             reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FOREACH         reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    GOTO            reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CONTINUE        reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    BREAK           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    RETURN          reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    THROW           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FUNCTION        reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    INCLUDE         reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    REQUIRE         reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ABSTRACT        reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    FINAL           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    PRINT           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    YIELD           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    YIELD_FROM      reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CLASS           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CLOSE_TAG       reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    WHITESPACE      reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    $end            reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    OPEN_TAG        reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ELSE            reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ELSEIF          reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDDECLARE      reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDWHILE        reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDFOR          reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    CASE            reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    DEFAULT         reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDSWITCH       reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDFOREACH      reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)
    ENDIF           reduce using rule 545 (namespace_use_declaration -> USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON .)


state 863

    (563) namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .

    RIGHT_CBRAC     reduce using rule 563 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)
    FUNCTION        reduce using rule 563 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)
    CONST           reduce using rule 563 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)
    NAME            reduce using rule 563 (namespace_use_group_clause_2 -> namespace_function_or_constopt namespace_name namespace_aliasing_clause_opt .)


state 864

    (316) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement

    RIGHT_PARENTHESIS shift and go to state 907


state 865

    (311) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 . ENDIF SEMICOLON

    ENDIF           shift and go to state 908


state 866

    (312) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 909


state 867

    (319) elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .

    ENDIF           reduce using rule 319 (elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .)
    ELSE            reduce using rule 319 (elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .)
    ELSEIF          reduce using rule 319 (elseif_clauses_2 -> elseif_clauses_2 elseif_clause_2 .)


state 868

    (313) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 910


state 869

    (321) else_clause_2 -> ELSE DOUBLE_POINT . statement_list
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 911
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 870

    (320) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 912
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 871

    (330) case_statement -> CASE expression case_default_label_terminator . statement_list
    (331) case_statement -> CASE expression case_default_label_terminator .
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 331 (case_statement -> CASE expression case_default_label_terminator .)
    DEFAULT         reduce using rule 331 (case_statement -> CASE expression case_default_label_terminator .)
    RIGHT_CBRAC     reduce using rule 331 (case_statement -> CASE expression case_default_label_terminator .)
    ENDSWITCH       reduce using rule 331 (case_statement -> CASE expression case_default_label_terminator .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement_list                 shift and go to state 913
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 872

    (332) default_statement -> DEFAULT case_default_label_terminator statement_list .
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 332 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    DEFAULT         reduce using rule 332 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    RIGHT_CBRAC     reduce using rule 332 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    ENDSWITCH       reduce using rule 332 (default_statement -> DEFAULT case_default_label_terminator statement_list .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 873

    (324) switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .

    LEFT_CBRAC      reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    SEMICOLON       reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    TRY             reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    DECLARE         reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ECHO            reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    UNSET           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CONST           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    INTERFACE       reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    TRAIT           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    NAMESPACE       reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    USE             reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    GLOBAL          reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    STATIC          reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    STRING          reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    IF              reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    SWITCH          reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    WHILE           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    DO              reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FOR             reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FOREACH         reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    GOTO            reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CONTINUE        reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    BREAK           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    RETURN          reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    THROW           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FUNCTION        reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    INCLUDE         reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    REQUIRE         reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ABSTRACT        reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    FINAL           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    PRINT           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    YIELD           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    YIELD_FROM      reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CLASS           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CLOSE_TAG       reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    WHITESPACE      reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    $end            reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    OPEN_TAG        reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ELSE            reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ELSEIF          reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDDECLARE      reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDWHILE        reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDFOR          reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    CASE            reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    DEFAULT         reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDSWITCH       reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDFOREACH      reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)
    ENDIF           reduce using rule 324 (switch_statement -> SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON .)


state 874

    (341) while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .

    LEFT_CBRAC      reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    SEMICOLON       reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    TRY             reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    DECLARE         reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ECHO            reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    UNSET           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CONST           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    INTERFACE       reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    TRAIT           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    NAMESPACE       reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    USE             reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    GLOBAL          reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    STATIC          reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    STRING          reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    IF              reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    SWITCH          reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    WHILE           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    DO              reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FOR             reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FOREACH         reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    GOTO            reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CONTINUE        reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    BREAK           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    RETURN          reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    THROW           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FUNCTION        reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    INCLUDE         reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    REQUIRE         reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ABSTRACT        reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    FINAL           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    PRINT           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    YIELD           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    YIELD_FROM      reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CLASS           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CLOSE_TAG       reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    WHITESPACE      reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    $end            reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    OPEN_TAG        reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ELSE            reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ELSEIF          reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDDECLARE      reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDWHILE        reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDFOR          reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    CASE            reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    DEFAULT         reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDSWITCH       reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDFOREACH      reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)
    ENDIF           reduce using rule 341 (while_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON .)


state 875

    (345) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 345 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 876

    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 914
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 877

    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 915
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 878

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . statement
    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS . DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    DOUBLE_POINT    shift and go to state 917
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 916
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 879

    (344) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 344 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement .)


state 880

    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 918
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 881

    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 919
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 882

    (358) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 920


state 883

    (347) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 347 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 884

    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 921
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 885

    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 922
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 886

    (364) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 364 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement .)


state 887

    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOREACH SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 923
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 888

    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOREACH SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOREACH      shift and go to state 924
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 889

    (423) return_type -> DOUBLE_POINT type_declaration .

    LEFT_CBRAC      reduce using rule 423 (return_type -> DOUBLE_POINT type_declaration .)
    SEMICOLON       reduce using rule 423 (return_type -> DOUBLE_POINT type_declaration .)


state 890

    (424) return_type -> DOUBLE_POINT VOID .

    LEFT_CBRAC      reduce using rule 424 (return_type -> DOUBLE_POINT VOID .)
    SEMICOLON       reduce using rule 424 (return_type -> DOUBLE_POINT VOID .)


state 891

    (421) parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .

    TERNARY_OPERATION reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    AMPERSAND       reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    ELLIPSIS        reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    ARRAY           reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    CALLABLE        reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    ITERABLE        reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    BOOL            reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    FLOAT           reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    INT             reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    STRING          reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    VARIABLE        reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)
    RIGHT_PARENTHESIS reduce using rule 421 (parameter_declaration -> type_declarationopt ampersandopt VARIABLE default_argument_specifieropt .)


state 892

    (439) default_argument_specifieropt -> default_argument_specifier .

    TERNARY_OPERATION reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    AMPERSAND       reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    ELLIPSIS        reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    ARRAY           reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    CALLABLE        reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    ITERABLE        reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    BOOL            reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    FLOAT           reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    INT             reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    STRING          reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    VARIABLE        reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)
    RIGHT_PARENTHESIS reduce using rule 439 (default_argument_specifieropt -> default_argument_specifier .)


state 893

    (441) default_argument_specifier -> EQUAL . constant_expression
    (278) constant_expression -> . expression
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    STRING          shift and go to state 104
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    constant_expression            shift and go to state 925
    expression                     shift and go to state 417
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 894

    (422) variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .

    TERNARY_OPERATION reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    AMPERSAND       reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    VARIABLE        reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    ARRAY           reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    CALLABLE        reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    ITERABLE        reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    BOOL            reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    FLOAT           reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    INT             reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    STRING          reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)
    RIGHT_PARENTHESIS reduce using rule 422 (variadic_parameter -> type_declarationopt ampersandopt ELLIPSIS VARIABLE .)


state 895

    (237) keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable .

    COLON           reduce using rule 237 (keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable .)
    RIGHT_PARENTHESIS reduce using rule 237 (keyed_list_expression_list -> keyed_list_expression_list COLON expression DOUBLE_ARROW list_or_variable .)


state 896

    (83) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt . return_type_opt compound_statement
    (92) return_type_opt -> . return_type
    (93) return_type_opt -> .
    (423) return_type -> . DOUBLE_POINT type_declaration
    (424) return_type -> . DOUBLE_POINT VOID

    LEFT_CBRAC      reduce using rule 93 (return_type_opt -> .)
    DOUBLE_POINT    shift and go to state 830

    return_type_opt                shift and go to state 926
    return_type                    shift and go to state 829

state 897

    (90) anonymous_function_use_clause_opt -> anonymous_function_use_clause .

    DOUBLE_POINT    reduce using rule 90 (anonymous_function_use_clause_opt -> anonymous_function_use_clause .)
    LEFT_CBRAC      reduce using rule 90 (anonymous_function_use_clause_opt -> anonymous_function_use_clause .)


state 898

    (94) anonymous_function_use_clause -> USE . LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 927


state 899

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt . LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS

    LEFT_CBRAC      shift and go to state 928


state 900

    (101) object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 101 (object_creation_expression -> NEW CLASS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)


state 901

    (494) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS . parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (496) parameter_declaration_listopt -> . parameter_declaration_list
    (497) parameter_declaration_listopt -> .
    (415) parameter_declaration_list -> . simple_parameter_declaration_list
    (416) parameter_declaration_list -> . variadic_declaration_list
    (417) simple_parameter_declaration_list -> . parameter_declaration
    (418) simple_parameter_declaration_list -> . parameter_declaration_list parameter_declaration
    (419) variadic_declaration_list -> . simple_parameter_declaration_list variadic_parameter
    (420) variadic_declaration_list -> . variadic_parameter
    (421) parameter_declaration -> . type_declarationopt ampersandopt VARIABLE default_argument_specifieropt
    (422) variadic_parameter -> . type_declarationopt ampersandopt ELLIPSIS VARIABLE
    (425) type_declarationopt -> . type_declaration
    (426) type_declarationopt -> .
    (427) type_declaration -> . TERNARY_OPERATIONopt base_type_declaration
    (428) TERNARY_OPERATIONopt -> . TERNARY_OPERATION
    (429) TERNARY_OPERATIONopt -> .

    RIGHT_PARENTHESIS reduce using rule 497 (parameter_declaration_listopt -> .)
    AMPERSAND       reduce using rule 426 (type_declarationopt -> .)
    VARIABLE        reduce using rule 426 (type_declarationopt -> .)
    ELLIPSIS        reduce using rule 426 (type_declarationopt -> .)
    TERNARY_OPERATION shift and go to state 633
    ARRAY           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    CALLABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    ITERABLE        reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    BOOL            reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    FLOAT           reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    INT             reduce using rule 429 (TERNARY_OPERATIONopt -> .)
    STRING          reduce using rule 429 (TERNARY_OPERATIONopt -> .)

    parameter_declaration_listopt  shift and go to state 929
    parameter_declaration_list     shift and go to state 625
    simple_parameter_declaration_list shift and go to state 626
    variadic_declaration_list      shift and go to state 627
    parameter_declaration          shift and go to state 628
    variadic_parameter             shift and go to state 629
    type_declarationopt            shift and go to state 630
    type_declaration               shift and go to state 631
    TERNARY_OPERATIONopt           shift and go to state 632

state 902

    (495) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS . RIGHT_PARENTHESIS compound_statement

    RIGHT_PARENTHESIS shift and go to state 930


state 903

    (532) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name . INSTEADOF trait_name_list

    INSTEADOF       shift and go to state 931


state 904

    (533) trait_alias_as_clause -> name AS visibility_modifier_opt . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    name                           shift and go to state 932

state 905

    (534) trait_alias_as_clause -> name AS visibility_modifier . nameopt
    (535) visibility_modifier_opt -> visibility_modifier .
    (537) nameopt -> . name
    (538) nameopt -> .
    (564) name -> . STRING

  ! shift/reduce conflict for STRING resolved as shift
    SEMICOLON       reduce using rule 538 (nameopt -> .)
    STRING          shift and go to state 109

  ! STRING          [ reduce using rule 535 (visibility_modifier_opt -> visibility_modifier .) ]

    name                           shift and go to state 933
    nameopt                        shift and go to state 934

state 906

    (544) namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .

    LEFT_CBRAC      reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    SEMICOLON       reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    TRY             reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    DECLARE         reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ECHO            reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    UNSET           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CONST           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    INTERFACE       reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    TRAIT           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    NAMESPACE       reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    USE             reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    GLOBAL          reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    STATIC          reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    STRING          reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    IF              reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    SWITCH          reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    WHILE           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    DO              reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FOR             reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FOREACH         reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    GOTO            reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CONTINUE        reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    BREAK           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    RETURN          reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    THROW           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FUNCTION        reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    INCLUDE         reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    REQUIRE         reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ABSTRACT        reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    FINAL           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    PRINT           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    YIELD           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    YIELD_FROM      reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CLASS           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CLOSE_TAG       reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    WHITESPACE      reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    $end            reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    OPEN_TAG        reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ELSE            reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ELSEIF          reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDDECLARE      reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDWHILE        reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDFOR          reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    CASE            reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    DEFAULT         reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDSWITCH       reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDFOREACH      reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)
    ENDIF           reduce using rule 544 (namespace_use_declaration -> USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON .)


state 907

    (316) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement                      shift and go to state 935
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 908

    (311) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF . SEMICOLON

    SEMICOLON       shift and go to state 936


state 909

    (312) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .

    LEFT_CBRAC      reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    SEMICOLON       reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    TRY             reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    DECLARE         reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ECHO            reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    UNSET           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CONST           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    INTERFACE       reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    TRAIT           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    NAMESPACE       reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    USE             reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    GLOBAL          reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    STATIC          reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    STRING          reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    IF              reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    SWITCH          reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    WHILE           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    DO              reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FOR             reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FOREACH         reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    GOTO            reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CONTINUE        reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    BREAK           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    RETURN          reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    THROW           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    INCLUDE         reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    REQUIRE         reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ABSTRACT        reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    FINAL           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    PRINT           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    YIELD           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    YIELD_FROM      reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CLASS           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CLOSE_TAG       reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    WHITESPACE      reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    $end            reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    OPEN_TAG        reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ELSE            reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDDECLARE      reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDFOR          reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    CASE            reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    DEFAULT         reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDSWITCH       reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDFOREACH      reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)
    ENDIF           reduce using rule 312 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON .)


state 910

    (313) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .

    LEFT_CBRAC      reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    SEMICOLON       reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    TRY             reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    DECLARE         reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ECHO            reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    UNSET           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CONST           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    INTERFACE       reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    TRAIT           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    NAMESPACE       reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    USE             reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    GLOBAL          reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    STATIC          reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    STRING          reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    IF              reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    SWITCH          reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    WHILE           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    DO              reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FOR             reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FOREACH         reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    GOTO            reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CONTINUE        reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    BREAK           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    RETURN          reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    THROW           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    INCLUDE         reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    REQUIRE         reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ABSTRACT        reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    FINAL           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    PRINT           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    YIELD           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    YIELD_FROM      reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CLASS           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CLOSE_TAG       reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    WHITESPACE      reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    $end            reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    OPEN_TAG        reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ELSE            reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDDECLARE      reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDFOR          reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    CASE            reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    DEFAULT         reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDSWITCH       reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDFOREACH      reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)
    ENDIF           reduce using rule 313 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON .)


state 911

    (321) else_clause_2 -> ELSE DOUBLE_POINT statement_list .
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDIF           reduce using rule 321 (else_clause_2 -> ELSE DOUBLE_POINT statement_list .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 912

    (320) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS DOUBLE_POINT statement_list

    RIGHT_PARENTHESIS shift and go to state 937


state 913

    (330) case_statement -> CASE expression case_default_label_terminator statement_list .
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    CASE            reduce using rule 330 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    DEFAULT         reduce using rule 330 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    RIGHT_CBRAC     reduce using rule 330 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    ENDSWITCH       reduce using rule 330 (case_statement -> CASE expression case_default_label_terminator statement_list .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 914

    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 938
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 915

    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 939


state 916

    (343) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 343 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement .)


state 917

    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT . statement_list ENDFOR SEMICOLON
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement_list                 shift and go to state 940
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 918

    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 941
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 919

    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 942


state 920

    (358) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 358 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 921

    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 943
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 922

    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 944


state 923

    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOREACH SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOREACH      shift and go to state 945
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 924

    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH . SEMICOLON

    SEMICOLON       shift and go to state 946


state 925

    (441) default_argument_specifier -> EQUAL constant_expression .

    TERNARY_OPERATION reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    AMPERSAND       reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    ELLIPSIS        reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    ARRAY           reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    CALLABLE        reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    ITERABLE        reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    BOOL            reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    FLOAT           reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    INT             reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    STRING          reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    VARIABLE        reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)
    RIGHT_PARENTHESIS reduce using rule 441 (default_argument_specifier -> EQUAL constant_expression .)


state 926

    (83) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt . compound_statement
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 947

state 927

    (94) anonymous_function_use_clause -> USE LEFT_PARENTHESIS . use_variable_name_list RIGHT_PARENTHESIS
    (95) use_variable_name_list -> . AMPERSAND_opt VARIABLE
    (96) use_variable_name_list -> . use_variable_name_list AMPERSAND_opt VARIABLE
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .

    AMPERSAND       shift and go to state 348
    VARIABLE        reduce using rule 87 (AMPERSAND_opt -> .)

    use_variable_name_list         shift and go to state 948
    AMPERSAND_opt                  shift and go to state 949

state 928

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC . class_member_declarations_opt RIGHT_PARENTHESIS
    (108) class_member_declarations_opt -> . class_member_declarations
    (109) class_member_declarations_opt -> .
    (456) class_member_declarations -> . class_member_declaration
    (457) class_member_declarations -> . class_member_declarations class_member_declaration
    (458) class_member_declaration -> . class_const_declaration
    (459) class_member_declaration -> . property_declaration
    (460) class_member_declaration -> . method_declaration
    (461) class_member_declaration -> . constructor_declaration
    (462) class_member_declaration -> . destructor_declaration
    (463) class_member_declaration -> . trait_use_clause
    (465) class_const_declaration -> . visibility_modifier_opt CONST const_elements SEMICOLON
    (469) property_declaration -> . property_modifier property_elements SEMICOLON
    (485) method_declaration -> . method_modifiersopt function_definition
    (486) method_declaration -> . method_modifiers function_definition_header SEMICOLON
    (494) constructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement
    (495) destructor_declaration -> . method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement
    (521) trait_use_clause -> . USE trait_name_list trait_use_specification
    (535) visibility_modifier_opt -> . visibility_modifier
    (536) visibility_modifier_opt -> .
    (470) property_modifier -> . VAR
    (471) property_modifier -> . visibility_modifier static_modifieropt
    (472) property_modifier -> . static_modifier visibility_modifier_opt
    (487) method_modifiersopt -> . method_modifiers
    (488) method_modifiersopt -> .
    (489) method_modifiers -> . method_modifier
    (490) method_modifiers -> . method_modifiers method_modifier
    (475) visibility_modifier -> . PUBLIC
    (476) visibility_modifier -> . PROTECTED
    (477) visibility_modifier -> . PRIVATE
    (478) static_modifier -> . STATIC
    (491) method_modifier -> . visibility_modifier
    (492) method_modifier -> . static_modifier
    (493) method_modifier -> . class_modifier
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL

    RIGHT_PARENTHESIS reduce using rule 109 (class_member_declarations_opt -> .)
    USE             shift and go to state 440
    CONST           reduce using rule 536 (visibility_modifier_opt -> .)
    VAR             shift and go to state 436
    FUNCTION        reduce using rule 488 (method_modifiersopt -> .)
    PUBLIC          shift and go to state 441
    PROTECTED       shift and go to state 442
    PRIVATE         shift and go to state 443
    STATIC          shift and go to state 444
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85

    class_member_declarations_opt  shift and go to state 950
    class_member_declarations      shift and go to state 845
    class_member_declaration       shift and go to state 769
    class_const_declaration        shift and go to state 770
    property_declaration           shift and go to state 771
    method_declaration             shift and go to state 772
    constructor_declaration        shift and go to state 773
    destructor_declaration         shift and go to state 774
    trait_use_clause               shift and go to state 775
    visibility_modifier_opt        shift and go to state 579
    property_modifier              shift and go to state 432
    method_modifiersopt            shift and go to state 433
    method_modifiers               shift and go to state 434
    visibility_modifier            shift and go to state 776
    static_modifier                shift and go to state 438
    method_modifier                shift and go to state 439
    class_modifier                 shift and go to state 445

state 929

    (494) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt . RIGHT_PARENTHESIS compound_statement

    RIGHT_PARENTHESIS shift and go to state 951


state 930

    (495) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS . compound_statement
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 952

state 931

    (532) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF . trait_name_list
    (522) trait_name_list -> . qualified_name
    (523) trait_name_list -> . trait_name_list qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    STRING          shift and go to state 109

    qualified_name                 shift and go to state 599
    name                           shift and go to state 188
    trait_name_list                shift and go to state 953

state 932

    (533) trait_alias_as_clause -> name AS visibility_modifier_opt name .

    SEMICOLON       reduce using rule 533 (trait_alias_as_clause -> name AS visibility_modifier_opt name .)


state 933

    (537) nameopt -> name .

    SEMICOLON       reduce using rule 537 (nameopt -> name .)


state 934

    (534) trait_alias_as_clause -> name AS visibility_modifier nameopt .

    SEMICOLON       reduce using rule 534 (trait_alias_as_clause -> name AS visibility_modifier nameopt .)


state 935

    (316) elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .

    LEFT_CBRAC      reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRY             reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECLARE         reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ECHO            reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    UNSET           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONST           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INTERFACE       reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRAIT           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NAMESPACE       reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    USE             reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GLOBAL          reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STATIC          reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING          reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SWITCH          reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DO              reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOREACH         reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    THROW           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FUNCTION        reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE         reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INCLUDE_ONCE    reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE         reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    REQUIRE_ONCE    reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ABSTRACT        reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FINAL           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PRINT           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    YIELD_FROM      reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLASS           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CLOSE_TAG       reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHITESPACE      reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    $end            reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN_TAG        reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN_TAG_WITH_ECHO reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RIGHT_CBRAC     reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSEIF          reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDDECLARE      reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDWHILE        reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOR          reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CASE            reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DEFAULT         reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDSWITCH       reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDFOREACH      reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ENDIF           reduce using rule 316 (elseif_clause_1 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)


state 936

    (311) if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .

    LEFT_CBRAC      reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    SEMICOLON       reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    TRY             reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    DECLARE         reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ECHO            reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    UNSET           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CONST           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    INTERFACE       reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    TRAIT           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    NAMESPACE       reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    USE             reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    GLOBAL          reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    STATIC          reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    STRING          reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    IF              reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    SWITCH          reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    WHILE           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    DO              reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FOR             reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FOREACH         reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    GOTO            reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CONTINUE        reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    BREAK           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    RETURN          reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    THROW           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FUNCTION        reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    INCLUDE         reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    REQUIRE         reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ABSTRACT        reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    FINAL           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    PRINT           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    YIELD           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    YIELD_FROM      reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CLASS           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CLOSE_TAG       reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    WHITESPACE      reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    $end            reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    OPEN_TAG        reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ELSE            reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ELSEIF          reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDDECLARE      reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDWHILE        reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDFOR          reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    CASE            reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    DEFAULT         reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDSWITCH       reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDFOREACH      reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)
    ENDIF           reduce using rule 311 (if_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON .)


state 937

    (320) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . DOUBLE_POINT statement_list

    DOUBLE_POINT    shift and go to state 954


state 938

    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 955


state 939

    (354) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 354 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 940

    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list . ENDFOR SEMICOLON
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDFOR          shift and go to state 956
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    expression                     shift and go to state 34
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 941

    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 957


state 942

    (357) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 357 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 943

    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 958


state 944

    (356) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 356 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 945

    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH . SEMICOLON

    SEMICOLON       shift and go to state 959


state 946

    (367) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .

    LEFT_CBRAC      reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SEMICOLON       reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRY             reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DECLARE         reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ECHO            reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    UNSET           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONST           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INTERFACE       reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRAIT           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    NAMESPACE       reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    USE             reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GLOBAL          reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STATIC          reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STRING          reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    IF              reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SWITCH          reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    WHILE           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DO              reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOR             reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOREACH         reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GOTO            reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONTINUE        reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    BREAK           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RETURN          reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    THROW           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FUNCTION        reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE         reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE         reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ABSTRACT        reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FINAL           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    PRINT           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD_FROM      reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CLASS           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CLOSE_TAG       reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    WHITESPACE      reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    $end            reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    OPEN_TAG        reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSE            reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSEIF          reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDDECLARE      reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDWHILE        reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOR          reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CASE            reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DEFAULT         reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDSWITCH       reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOREACH      reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDIF           reduce using rule 367 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)


state 947

    (83) anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .

    DOUBLEASTERISK  reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ASTERISK        reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    DIVIDE          reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    MODULO          reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    PLUS            reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    LESS            reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    CONCAT          reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SL              reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SR              reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    LESS_THAN       reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_SMALLER_OR_EQUAL reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_GREATER_OR_EQUAL reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    GREATER_THAN_OR_EQUAL reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SPACESHIP       reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    EQUAL           reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_NOT_EQUAL    reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_IDENTICAL    reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    IS_NOT_IDENTICAL reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    AMPERSAND       reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    BITWISE_XOR     reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    BITWISE_OR      reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    COALESCE        reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    TERNARY_OPERATION reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    AND             reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    XOR             reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    OR              reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    SEMICOLON       reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    STRING          reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INCLUDE         reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INCLUDE_ONCE    reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    REQUIRE         reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    REQUIRE_ONCE    reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    PRINT           reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    YIELD           reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    YIELD_FROM      reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    COLON           reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    AS              reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ARROW           reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    RIGHT_CBRAC     reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    VARIABLE        reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    DOUBLE_POINT    reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    DOUBLE_ARROW    reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ELLIPSIS        reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ARRAY           reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    CALLABLE        reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    ITERABLE        reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    BOOL            reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    FLOAT           reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INT             reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)
    INSTANCEOF      reduce using rule 83 (anonymous_function_creation_expression -> static_opt FUNCTION AMPERSAND_opt LEFT_PARENTHESIS parameter_declaration_list_opt RIGHT_PARENTHESIS anonymous_function_use_clause_opt return_type_opt compound_statement .)


state 948

    (94) anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list . RIGHT_PARENTHESIS
    (96) use_variable_name_list -> use_variable_name_list . AMPERSAND_opt VARIABLE
    (86) AMPERSAND_opt -> . AMPERSAND
    (87) AMPERSAND_opt -> .

    RIGHT_PARENTHESIS shift and go to state 960
    AMPERSAND       shift and go to state 348
    VARIABLE        reduce using rule 87 (AMPERSAND_opt -> .)

    AMPERSAND_opt                  shift and go to state 961

state 949

    (95) use_variable_name_list -> AMPERSAND_opt . VARIABLE

    VARIABLE        shift and go to state 962


state 950

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 963


state 951

    (494) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS . compound_statement
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC

    LEFT_CBRAC      shift and go to state 32

    compound_statement             shift and go to state 964

state 952

    (495) destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .

    VAR             reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    USE             reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    PUBLIC          reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    PROTECTED       reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    PRIVATE         reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    STATIC          reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    ABSTRACT        reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    FINAL           reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    FUNCTION        reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    RIGHT_CBRAC     reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    CONST           reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 495 (destructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt DESTRUCT LEFT_PARENTHESIS RIGHT_PARENTHESIS compound_statement .)


state 953

    (532) trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list .
    (523) trait_name_list -> trait_name_list . qualified_name
    (554) qualified_name -> . name
    (564) name -> . STRING

    SEMICOLON       reduce using rule 532 (trait_select_insteadof_clause -> qualified_name DOUBLE_COLON name INSTEADOF trait_name_list .)
    STRING          shift and go to state 109

    qualified_name                 shift and go to state 694
    name                           shift and go to state 188

state 954

    (320) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT . statement_list
    (300) statement_list -> . statement
    (301) statement_list -> . statement_list statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement_list                 shift and go to state 965
    statement                      shift and go to state 12
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 955

    (353) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 353 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 956

    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR . SEMICOLON

    SEMICOLON       shift and go to state 966


state 957

    (352) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 352 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 958

    (355) for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 355 (for_statement -> FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 959

    (366) foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .

    LEFT_CBRAC      reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SEMICOLON       reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRY             reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DECLARE         reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ECHO            reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    UNSET           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONST           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INTERFACE       reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    TRAIT           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    NAMESPACE       reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    USE             reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GLOBAL          reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STATIC          reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    STRING          reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    IF              reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    SWITCH          reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    WHILE           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DO              reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOR             reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FOREACH         reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    GOTO            reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CONTINUE        reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    BREAK           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RETURN          reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    THROW           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FUNCTION        reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE         reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE         reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ABSTRACT        reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    FINAL           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    PRINT           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    YIELD_FROM      reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CLASS           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CLOSE_TAG       reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    WHITESPACE      reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    $end            reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    OPEN_TAG        reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSE            reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ELSEIF          reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDDECLARE      reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDWHILE        reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOR          reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    CASE            reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    DEFAULT         reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDSWITCH       reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDFOREACH      reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)
    ENDIF           reduce using rule 366 (foreach_statement -> FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON .)


state 960

    (94) anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS .

    DOUBLE_POINT    reduce using rule 94 (anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS .)
    LEFT_CBRAC      reduce using rule 94 (anonymous_function_use_clause -> USE LEFT_PARENTHESIS use_variable_name_list RIGHT_PARENTHESIS .)


state 961

    (96) use_variable_name_list -> use_variable_name_list AMPERSAND_opt . VARIABLE

    VARIABLE        shift and go to state 967


state 962

    (95) use_variable_name_list -> AMPERSAND_opt VARIABLE .

    RIGHT_PARENTHESIS reduce using rule 95 (use_variable_name_list -> AMPERSAND_opt VARIABLE .)
    AMPERSAND       reduce using rule 95 (use_variable_name_list -> AMPERSAND_opt VARIABLE .)
    VARIABLE        reduce using rule 95 (use_variable_name_list -> AMPERSAND_opt VARIABLE .)


state 963

    (100) object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .

    DOUBLEASTERISK  reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ASTERISK        reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    MODULO          reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS            reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CONCAT          reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SL              reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SR              reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_SMALLER_OR_EQUAL reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_GREATER_OR_EQUAL reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    GREATER_THAN_OR_EQUAL reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SPACESHIP       reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    EQUAL           reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_EQUAL    reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_IDENTICAL    reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    IS_NOT_IDENTICAL reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AMPERSAND       reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BITWISE_OR      reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COALESCE        reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    TERNARY_OPERATION reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AND             reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    XOR             reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    OR              reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    STRING          reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE         reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INCLUDE_ONCE    reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE         reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    REQUIRE_ONCE    reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    PRINT           reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD           reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    YIELD_FROM      reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    COLON           reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    AS              reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    RIGHT_CBRAC     reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    VARIABLE        reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_POINT    reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    DOUBLE_ARROW    reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ELLIPSIS        reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ARRAY           reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    CALLABLE        reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    ITERABLE        reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INT             reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)
    INSTANCEOF      reduce using rule 100 (object_creation_expression -> NEW CLASS LEFT_PARENTHESIS argument_expression_list_opt RIGHT_PARENTHESIS class_base_clause_opt class_interface_clause_opt LEFT_CBRAC class_member_declarations_opt RIGHT_PARENTHESIS .)


state 964

    (494) constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .

    VAR             reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    USE             reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    PUBLIC          reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    PROTECTED       reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    PRIVATE         reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    STATIC          reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    ABSTRACT        reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    FINAL           reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    FUNCTION        reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    RIGHT_CBRAC     reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    CONST           reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)
    RIGHT_PARENTHESIS reduce using rule 494 (constructor_declaration -> method_modifiers FUNCTION name AMPERSAND_opt CONSTRUCT LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS compound_statement .)


state 965

    (320) elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .
    (301) statement_list -> statement_list . statement
    (279) statement -> . compound_statement
    (280) statement -> . named_label_statement
    (281) statement -> . expression_statement
    (282) statement -> . selection_statement
    (283) statement -> . iteration_statement
    (284) statement -> . jump_statement
    (285) statement -> . try_statement
    (286) statement -> . declare_statement
    (287) statement -> . echo_statement
    (288) statement -> . unset_statement
    (289) statement -> . const_declaration
    (290) statement -> . function_definition
    (291) statement -> . class_declaration
    (292) statement -> . interface_declaration
    (293) statement -> . trait_declaration
    (294) statement -> . namespace_definition
    (295) statement -> . namespace_use_declaration
    (296) statement -> . global_declaration
    (297) statement -> . function_static_declaration
    (298) compound_statement -> . LEFT_CBRAC statement_list RIGHT_CBRAC
    (299) compound_statement -> . LEFT_CBRAC RIGHT_CBRAC
    (302) named_label_statement -> . name DOUBLE_POINT
    (303) expression_statement -> . expression SEMICOLON
    (304) expression_statement -> . SEMICOLON
    (305) selection_statement -> . if_statement
    (306) selection_statement -> . switch_statement
    (336) iteration_statement -> . while_statement
    (337) iteration_statement -> . do_statement
    (338) iteration_statement -> . for_statement
    (339) iteration_statement -> . foreach_statement
    (373) jump_statement -> . goto_statement
    (374) jump_statement -> . continue_statement
    (375) jump_statement -> . break_statement
    (376) jump_statement -> . return_statement
    (377) jump_statement -> . throw_statement
    (391) try_statement -> . TRY compound_statement catch_clauses
    (392) try_statement -> . TRY compound_statement finally_clause
    (393) try_statement -> . TRY compound_statement catch_clauses finally_clause
    (400) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS statement
    (401) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDDECLARE SEMICOLON
    (402) declare_statement -> . DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON
    (406) echo_statement -> . ECHO expression_list SEMICOLON
    (409) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list COLON RIGHT_PARENTHESIS SEMICOLON
    (410) unset_statement -> . UNSET LEFT_PARENTHESIS variable_list RIGHT_PARENTHESIS SEMICOLON
    (464) const_declaration -> . CONST const_elements SEMICOLON
    (411) function_definition -> . function_definition_header compound_statement
    (442) class_declaration -> . class_modifieropt CLASS name class_base_clauseopt class_interface_clauseopt LEFT_CBRAC class_member_declarationsopt RIGHT_CBRAC
    (498) interface_declaration -> . INTERFACE name interface_base_clauseopt LEFT_CBRAC interface_member_declarationsopt RIGHT_CBRAC
    (509) trait_declaration -> . TRAIT name LEFT_CBRAC trait_member_declarationsopt RIGHT_CBRAC
    (539) namespace_definition -> . NAMESPACE namespace_name SEMICOLON
    (540) namespace_definition -> . NAMESPACE namespace_nameopt compound_statement
    (543) namespace_use_declaration -> . USE namespace_function_or_constopt namespace_use_clauses SEMICOLON
    (544) namespace_use_declaration -> . USE namespace_function_or_const NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_1 RIGHT_CBRAC SEMICOLON
    (545) namespace_use_declaration -> . USE NS_SEPARATORopt namespace_name NS_SEPARATOR LEFT_CBRAC namespace_use_group_clauses_2 RIGHT_CBRAC SEMICOLON
    (25) global_declaration -> . GLOBAL variable_name_list SEMICOLON
    (17) function_static_declaration -> . STATIC static_variable_name_list SEMICOLON
    (564) name -> . STRING
    (268) expression -> . logical_inc_OR_expression_2
    (269) expression -> . include_expression
    (270) expression -> . STRING
    (271) expression -> . include_once_expression
    (272) expression -> . require_expression
    (273) expression -> . require_once_expression
    (307) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1 else_clause_1
    (308) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement elseif_clauses_1
    (309) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement else_clause_1
    (310) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (311) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 else_clause_2 ENDIF SEMICOLON
    (312) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list elseif_clauses_2 ENDIF SEMICOLON
    (313) if_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list else_clause_2 ENDIF SEMICOLON
    (322) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC case_statements RIGHT_CBRAC
    (323) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS LEFT_CBRAC RIGHT_CBRAC
    (324) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT case_statements ENDSWITCH SEMICOLON
    (325) switch_statement -> . SWITCH LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT ENDSWITCH SEMICOLON
    (340) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (341) while_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDWHILE SEMICOLON
    (342) do_statement -> . DO statement WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (343) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (344) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (345) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (346) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (347) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (348) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS statement
    (349) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS statement
    (350) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS statement
    (351) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (352) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (353) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (354) for_statement -> . FOR LEFT_PARENTHESIS for_initializer SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (355) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (356) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON for_control SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (357) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (358) for_statement -> . FOR LEFT_PARENTHESIS SEMICOLON SEMICOLON RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON
    (364) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS statement
    (365) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS statement
    (366) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_key foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (367) foreach_statement -> . FOREACH LEFT_PARENTHESIS foreach_collection_name AS foreach_value RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOREACH SEMICOLON
    (378) goto_statement -> . GOTO name SEMICOLON
    (379) continue_statement -> . CONTINUE breakout_level SEMICOLON
    (380) continue_statement -> . CONTINUE SEMICOLON
    (383) break_statement -> . BREAK breakout_levelopt SEMICOLON
    (387) return_statement -> . RETURN expressionopt SEMICOLON
    (390) throw_statement -> . THROW expression SEMICOLON
    (412) function_definition_header -> . FUNCTION ampersandopt name LEFT_PARENTHESIS parameter_declaration_listopt RIGHT_PARENTHESIS return_type_opt
    (443) class_modifieropt -> . class_modifier
    (444) class_modifieropt -> .
    (266) logical_inc_OR_expression_2 -> . logical_exc_OR_expression
    (267) logical_inc_OR_expression_2 -> . logical_inc_OR_expression_2 OR logical_exc_OR_expression
    (274) include_expression -> . INCLUDE expression
    (275) include_once_expression -> . INCLUDE_ONCE expression
    (276) require_expression -> . REQUIRE expression
    (277) require_once_expression -> . REQUIRE_ONCE expression
    (451) class_modifier -> . ABSTRACT
    (452) class_modifier -> . FINAL
    (264) logical_exc_OR_expression -> . logical_AND_expression_2
    (265) logical_exc_OR_expression -> . logical_exc_OR_expression XOR logical_AND_expression_2
    (262) logical_AND_expression_2 -> . print_expression
    (263) logical_AND_expression_2 -> . logical_AND_expression_2 AND yield_expression
    (260) print_expression -> . yield_expression
    (261) print_expression -> . PRINT print_expression
    (256) yield_expression -> . yield_from_expression
    (257) yield_expression -> . YIELD
    (258) yield_expression -> . YIELD yield_expression
    (259) yield_expression -> . YIELD yield_from_expression DOUBLE_ARROW yield_expression
    (255) yield_from_expression -> . YIELD_FROM assignment_expression

    ENDIF           reduce using rule 320 (elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .)
    ELSE            reduce using rule 320 (elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .)
    ELSEIF          reduce using rule 320 (elseif_clause_2 -> ELSEIF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS DOUBLE_POINT statement_list .)
    LEFT_CBRAC      shift and go to state 32
    SEMICOLON       shift and go to state 35
    TRY             shift and go to state 47
    DECLARE         shift and go to state 48
    ECHO            shift and go to state 49
    UNSET           shift and go to state 50
    CONST           shift and go to state 51
    INTERFACE       shift and go to state 54
    TRAIT           shift and go to state 55
    NAMESPACE       shift and go to state 56
    USE             shift and go to state 57
    GLOBAL          shift and go to state 58
    STATIC          shift and go to state 59
    STRING          shift and go to state 60
    IF              shift and go to state 66
    SWITCH          shift and go to state 67
    WHILE           shift and go to state 68
    DO              shift and go to state 69
    FOR             shift and go to state 70
    FOREACH         shift and go to state 71
    GOTO            shift and go to state 72
    CONTINUE        shift and go to state 73
    BREAK           shift and go to state 74
    RETURN          shift and go to state 75
    THROW           shift and go to state 76
    FUNCTION        shift and go to state 77
    CLASS           reduce using rule 444 (class_modifieropt -> .)
    INCLUDE         shift and go to state 80
    INCLUDE_ONCE    shift and go to state 81
    REQUIRE         shift and go to state 82
    REQUIRE_ONCE    shift and go to state 83
    ABSTRACT        shift and go to state 84
    FINAL           shift and go to state 85
    PRINT           shift and go to state 89
    YIELD           shift and go to state 91
    YIELD_FROM      shift and go to state 92

    expression                     shift and go to state 34
    statement                      shift and go to state 95
    compound_statement             shift and go to state 13
    named_label_statement          shift and go to state 14
    expression_statement           shift and go to state 15
    selection_statement            shift and go to state 16
    iteration_statement            shift and go to state 17
    jump_statement                 shift and go to state 18
    try_statement                  shift and go to state 19
    declare_statement              shift and go to state 20
    echo_statement                 shift and go to state 21
    unset_statement                shift and go to state 22
    const_declaration              shift and go to state 23
    function_definition            shift and go to state 24
    class_declaration              shift and go to state 25
    interface_declaration          shift and go to state 26
    trait_declaration              shift and go to state 27
    namespace_definition           shift and go to state 28
    namespace_use_declaration      shift and go to state 29
    global_declaration             shift and go to state 30
    function_static_declaration    shift and go to state 31
    name                           shift and go to state 33
    if_statement                   shift and go to state 36
    switch_statement               shift and go to state 37
    while_statement                shift and go to state 38
    do_statement                   shift and go to state 39
    for_statement                  shift and go to state 40
    foreach_statement              shift and go to state 41
    goto_statement                 shift and go to state 42
    continue_statement             shift and go to state 43
    break_statement                shift and go to state 44
    return_statement               shift and go to state 45
    throw_statement                shift and go to state 46
    function_definition_header     shift and go to state 52
    class_modifieropt              shift and go to state 53
    logical_inc_OR_expression_2    shift and go to state 61
    include_expression             shift and go to state 62
    include_once_expression        shift and go to state 63
    require_expression             shift and go to state 64
    require_once_expression        shift and go to state 65
    class_modifier                 shift and go to state 78
    logical_exc_OR_expression      shift and go to state 79
    logical_AND_expression_2       shift and go to state 86
    print_expression               shift and go to state 87
    yield_expression               shift and go to state 88
    yield_from_expression          shift and go to state 90

state 966

    (351) for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .

    LEFT_CBRAC      reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SEMICOLON       reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRY             reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DECLARE         reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ECHO            reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    UNSET           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONST           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INTERFACE       reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    TRAIT           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    NAMESPACE       reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    USE             reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GLOBAL          reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STATIC          reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    STRING          reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    IF              reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    SWITCH          reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHILE           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DO              reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOR             reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FOREACH         reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    GOTO            reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CONTINUE        reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    BREAK           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RETURN          reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    THROW           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FUNCTION        reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE         reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    INCLUDE_ONCE    reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE         reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    REQUIRE_ONCE    reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ABSTRACT        reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    FINAL           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    PRINT           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    YIELD_FROM      reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLASS           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CLOSE_TAG       reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    WHITESPACE      reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    $end            reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG        reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    OPEN_TAG_WITH_ECHO reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    RIGHT_CBRAC     reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSE            reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ELSEIF          reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDDECLARE      reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDWHILE        reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOR          reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    CASE            reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    DEFAULT         reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDSWITCH       reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDFOREACH      reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)
    ENDIF           reduce using rule 351 (for_statement -> FOR LEFT_PARENTHESIS for_initializer SEMICOLON for_control SEMICOLON for_end_of_loop RIGHT_PARENTHESIS DOUBLE_POINT statement_list ENDFOR SEMICOLON .)


state 967

    (96) use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .

    RIGHT_PARENTHESIS reduce using rule 96 (use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .)
    AMPERSAND       reduce using rule 96 (use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .)
    VARIABLE        reduce using rule 96 (use_variable_name_list -> use_variable_name_list AMPERSAND_opt VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for STRING in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING in state 11 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 91 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 91 resolved as shift
WARNING: shift/reduce conflict for STRING in state 93 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_ARROW in state 158 resolved as shift
WARNING: shift/reduce conflict for TERNARY_OPERATION in state 160 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 164 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 172 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 180 resolved as shift
WARNING: shift/reduce conflict for STRING in state 181 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 181 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 181 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 181 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 181 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 181 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 181 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 181 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 194 resolved as shift
WARNING: shift/reduce conflict for COLON in state 345 resolved as shift
WARNING: shift/reduce conflict for STRING in state 353 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 353 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 353 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 353 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 353 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 353 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 353 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 353 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 374 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 391 resolved as shift
WARNING: shift/reduce conflict for USE in state 431 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 434 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 437 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 438 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 438 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 438 resolved as shift
WARNING: shift/reduce conflict for STRING in state 465 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 465 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 465 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 465 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 465 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 465 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 465 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 465 resolved as shift
WARNING: shift/reduce conflict for LEFT_PARENTHESIS in state 494 resolved as shift
WARNING: shift/reduce conflict for STRING in state 502 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 502 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 502 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 502 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 502 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 502 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 502 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 502 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 507 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 513 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 514 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 557 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 580 resolved as shift
WARNING: shift/reduce conflict for STRING in state 591 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 604 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 604 resolved as shift
WARNING: shift/reduce conflict for STRING in state 622 resolved as shift
WARNING: shift/reduce conflict for INCLUDE in state 622 resolved as shift
WARNING: shift/reduce conflict for INCLUDE_ONCE in state 622 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 622 resolved as shift
WARNING: shift/reduce conflict for REQUIRE_ONCE in state 622 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 622 resolved as shift
WARNING: shift/reduce conflict for YIELD in state 622 resolved as shift
WARNING: shift/reduce conflict for YIELD_FROM in state 622 resolved as shift
WARNING: shift/reduce conflict for TERNARY_OPERATION in state 626 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 637 resolved as shift
WARNING: shift/reduce conflict for BITWISE_OR in state 643 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 702 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 702 resolved as shift
WARNING: shift/reduce conflict for COLON in state 748 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 752 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PARENTHESIS in state 755 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 776 resolved as shift
WARNING: shift/reduce conflict for STRING in state 905 resolved as shift
WARNING: reduce/reduce conflict in state 164 resolved using rule (primary_expression -> variable)
WARNING: rejected rule (dereferencable_expression -> variable) in state 164
WARNING: reduce/reduce conflict in state 167 resolved using rule (callable_expression -> callable_variable)
WARNING: rejected rule (variable -> callable_variable) in state 167
WARNING: reduce/reduce conflict in state 185 resolved using rule (primary_expression -> array_creation_expression)
WARNING: rejected rule (dereferencable_expression -> array_creation_expression) in state 185
WARNING: reduce/reduce conflict in state 186 resolved using rule (dereferencable_expression -> string_literal)
WARNING: rejected rule (literal -> string_literal) in state 186
WARNING: reduce/reduce conflict in state 193 resolved using rule (string_literal -> STRING)
WARNING: rejected rule (name -> STRING) in state 193
WARNING: reduce/reduce conflict in state 262 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (variable_list -> variable) in state 262
WARNING: reduce/reduce conflict in state 374 resolved using rule (primary_expression -> variable)
WARNING: rejected rule (dereferencable_expression -> variable) in state 374
WARNING: reduce/reduce conflict in state 375 resolved using rule (primary_expression -> array_creation_expression)
WARNING: rejected rule (dereferencable_expression -> array_creation_expression) in state 375
WARNING: reduce/reduce conflict in state 378 resolved using rule (dereferencable_expression -> string_literal)
WARNING: rejected rule (literal -> string_literal) in state 378
WARNING: reduce/reduce conflict in state 394 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (prefix_increment_expression -> DOUBLEPLUS variable) in state 394
WARNING: reduce/reduce conflict in state 395 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (prefix_decrement_expression -> DOUBLELESS variable) in state 395
WARNING: reduce/reduce conflict in state 414 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (variable_list -> variable_list variable) in state 414
WARNING: reduce/reduce conflict in state 455 resolved using rule (function_static_initializer -> EQUAL constant_expression)
WARNING: rejected rule (function_static_initializer_opt -> EQUAL constant_expression) in state 455
WARNING: reduce/reduce conflict in state 486 resolved using rule (string_literal -> STRING)
WARNING: rejected rule (name -> STRING) in state 486
WARNING: reduce/reduce conflict in state 487 resolved using rule (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS)
WARNING: rejected rule (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS) in state 487
WARNING: reduce/reduce conflict in state 490 resolved using rule (member_name -> simple_variable)
WARNING: rejected rule (scoped_property_access_expression -> scope_resolution_qualifier DOUBLE_COLON simple_variable) in state 490
WARNING: reduce/reduce conflict in state 561 resolved using rule (expression_statement -> SEMICOLON)
WARNING: rejected rule (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON) in state 561
WARNING: reduce/reduce conflict in state 626 resolved using rule (parameter_declaration_list -> simple_parameter_declaration_list)
WARNING: rejected rule (type_declarationopt -> <empty>) in state 626
WARNING: reduce/reduce conflict in state 626 resolved using rule (parameter_declaration_list -> simple_parameter_declaration_list)
WARNING: rejected rule (TERNARY_OPERATIONopt -> <empty>) in state 626
WARNING: reduce/reduce conflict in state 636 resolved using rule (dereferencable_expression -> variable)
WARNING: rejected rule (byref_assignment_expression -> variable EQUAL AMPERSAND variable) in state 636
WARNING: reduce/reduce conflict in state 658 resolved using rule (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS)
WARNING: rejected rule (dereferencable_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS) in state 658
WARNING: reduce/reduce conflict in state 746 resolved using rule (scalar_type -> STRING)
WARNING: rejected rule (name -> STRING) in state 746
WARNING: Rule (function_static_initializer_opt -> EQUAL constant_expression) is never reduced
WARNING: Rule (declare_statement -> DECLARE LEFT_PARENTHESIS declare_directive RIGHT_PARENTHESIS SEMICOLON) is never reduced
